//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class SectorThinker : Thinker;

sector_t*		Sector;
SectorThinker	NextAffector;

//==========================================================================
//
//	AddAffector
//
//==========================================================================

void AddAffector()
{
	SectorThinker		Tmp;

	if (!Sector->AffectorData)
	{
		Sector->AffectorData = self;
	}
	else
	{
		Tmp = SectorThinker(Sector->AffectorData);
		while (Tmp.NextAffector)
		{
			Tmp = Tmp.NextAffector;
		}
		Tmp.NextAffector = self;
	}
	NextAffector = none;
}

//==========================================================================
//
//	RemoveAffector
//
//==========================================================================

void RemoveAffector()
{
	SectorThinker		Tmp;

	if (Sector->AffectorData == self)
	{
		Sector->AffectorData = NextAffector;
	}
	else
	{
		Tmp = SectorThinker(Sector->AffectorData);
		while (Tmp && Tmp.NextAffector != self)
		{
			Tmp = Tmp.NextAffector;
		}
		if (Tmp && Tmp.NextAffector == self)
		{
			Tmp.NextAffector = NextAffector;
		}
	}
	NextAffector = none;
}

defaultproperties
{
}

//**************************************************************************
//
//  $Log$
//  Revision 1.7  2006/03/27 16:16:29  firebrand_kh
//  Initial Import
//
//  Revision 1.5  2006/02/26 20:55:05  dj_jl
//  Proper serialisation of level and players.
//
//  Revision 1.4  2006/02/25 17:15:55  dj_jl
//  Implemented proper serialisation of the objects.
//
//  Revision 1.3  2005/07/09 13:55:46  dj_jl
//  Scrolers carrying objects.
//
//  Revision 1.2  2005/03/01 14:39:31  dj_jl
//  Big update of line specials.
//
//  Revision 1.1  2002/10/26 16:32:17  dj_jl
//  New style of defining classes.
//
//**************************************************************************
