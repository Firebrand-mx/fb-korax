//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class SectorMover : SectorThinker;

//==========================================================================
//
//	Finished
//
//==========================================================================

void Finished()
{
	if (Sector->FloorData == self)
		Sector->FloorData = none;
	if (Sector->CeilingData == self)
		Sector->CeilingData = none;
	if (Sector->LightingData == self)
		Sector->LightingData = none;
	RemoveAffector();
	TagFinished(Sector->tag);
	RemoveSpecialThinker(self);
}

//**************************************************************************
//
//  MOVE FLOOR/CEILING
//
//**************************************************************************

//==========================================================================
//
//  MovePlane
//
//  Move a plane (floor or ceiling) and check for crushing
//
//==========================================================================

int MovePlane(sector_t* sector, float amount, float dest, int crush,
	int floorOrCeiling, int direction, bool StopOnCrush)
{
	bool		flag;
	float		lastpos;

	switch (floorOrCeiling)
	{
	case 0:
		// FLOOR
		lastpos = sector->floor.dist;
		switch (direction)
		{
		case -1:
			// DOWN
			sector->floor.dist -= amount * sector->floor.normal.z;
			if (sector->floor.dist <= dest)
			{
				sector->floor.dist = dest;
				flag = P_ChangeSector(sector, crush);
				if (flag)
				{
					sector->floor.dist = lastpos;
					P_ChangeSector(sector, crush);
				}
				return RES_PASTDEST;
			}
			else
			{
				flag = P_ChangeSector(sector, crush);
				if (flag)
				{
					sector->floor.dist = lastpos;
					P_ChangeSector(sector, crush);
					return RES_CRUSHED;
				}
			}
			break;

		case 1:
			// UP
			// jff 02/04/98 keep floor from moving thru ceilings
			// [RH] not so easy with arbitrary planes
			if (!sector->bExtrafloorSource &&
				!sector->ceiling.normal.x && !sector->ceiling.normal.y &&
				!sector->floor.normal.x && !sector->floor.normal.y &&
				dest > -sector->ceiling.dist)
			{
				dest = -sector->ceiling.dist;
			}
			sector->floor.dist += amount * sector->floor.normal.z;
			if (sector->floor.dist > dest)
			{
				sector->floor.dist = dest;
				flag = P_ChangeSector(sector, crush);
				if (flag)
				{
					sector->floor.dist = lastpos;
					P_ChangeSector(sector, crush);
				}
				return RES_PASTDEST;
			}
			else
			{
				// COULD GET CRUSHED
				flag = P_ChangeSector(sector, crush);
				if (flag)
				{
					if (!crush || StopOnCrush)
					{
						sector->floor.dist = lastpos;
						P_ChangeSector(sector, crush);
					}
					return RES_CRUSHED;
				}
			}
			break;
		}
		break;

	case 1:
		// CEILING
		lastpos = sector->ceiling.dist;
		switch (direction)
		{
		case -1:
			// DOWN
			// jff 02/04/98 keep ceiling from moving thru floors
			// [RH] not so easy with arbitrary planes
			if (!sector->bExtrafloorSource &&
				!sector->ceiling.normal.x && !sector->ceiling.normal.y &&
				sector->floor.normal.x && !sector->floor.normal.y &&
				-dest < sector->floor.dist)
			{
				dest = -sector->floor.dist;
			}
			sector->ceiling.dist -= amount * sector->ceiling.normal.z;
			if (sector->ceiling.dist > dest)
			{
				sector->ceiling.dist = dest;
				flag = P_ChangeSector(sector, crush);

				if (flag)
				{
					sector->ceiling.dist = lastpos;
					P_ChangeSector(sector, crush);
				}
				return RES_PASTDEST;
			}
			else
			{
				// COULD GET CRUSHED
				flag = P_ChangeSector(sector, crush);

				if (flag)
				{
					if (!crush || StopOnCrush)
					{
						sector->ceiling.dist = lastpos;
						P_ChangeSector(sector, crush);
					}
					return RES_CRUSHED;
				}
			}
			break;

		case 1:
			// UP
			sector->ceiling.dist += amount * sector->ceiling.normal.z;
			if (sector->ceiling.dist < dest)
			{
				sector->ceiling.dist = dest;
				flag = P_ChangeSector(sector, crush);
				if (flag)
				{
					sector->ceiling.dist = lastpos;
					P_ChangeSector(sector, crush);
				}
				return RES_PASTDEST;
			}
			else
			{
				flag = P_ChangeSector(sector, crush);
			}
			break;
		}
		break;
	}
	return RES_OK;
}

defaultproperties
{
}

//**************************************************************************
//
//  $Log$
//  Revision 1.7  2006/03/27 16:16:29  firebrand_kh
//  Initial Import
//
//  Revision 1.4  2006/02/05 18:50:55  dj_jl
//  Moved common utils to level info class or built-in.
//
//  Revision 1.3  2005/07/09 13:55:46  dj_jl
//  Scrolers carrying objects.
//
//  Revision 1.2  2005/03/01 14:39:31  dj_jl
//  Big update of line specials.
//
//  Revision 1.1  2002/10/26 16:32:17  dj_jl
//  New style of defining classes.
//
//**************************************************************************
