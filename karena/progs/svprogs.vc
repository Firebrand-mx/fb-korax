//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

#include <macros.vc>

import shared;
import svcommon;

// CONSTANTS ---------------------------------------------------------------

// Any floor type >= FLOOR_LIQUID will floorclip sprites
enum
{
	FLOOR_SOLID,
	FLOOR_ICE,
	FLOOR_LIQUID,
	FLOOR_WATER,
	FLOOR_LAVA,
	FLOOR_SLUDGE
};

enum
{
	CONTENTS_EMPTY,
	CONTENTS_WATER,
	CONTENTS_LAVA,
	CONTENTS_SLUDGE,

	CONTENTS_SOLID = -1
};

enum
{
	CSHIFT_CONTENTS
};

// Power up artifacts.
enum
{
	pw_invulnerability,
	pw_infrared,
	pw_flight,
	pw_speed,
	pw_minotaur,
	pw_invisibility, // [FB] New for KA
	pw_damage,
	pw_invulnerability2, // [FB] For the spawning temporary invuln.
	NUMPOWERS
};

enum
{
	PO_ANCHOR_TYPE = 3000,
	PO_SPAWN_TYPE,
	PO_SPAWNCRUSH_TYPE
};

enum
{
	CHAN_AUTO,
	CHAN_VOICE,
	CHAN_WEAPON,
	CHAN_ITEM,
	CHAN_BODY
};

enum
{
	DOOREV_Close,
	DOOREV_Open,
	DOOREV_Raise,
	DOOREV_RaiseLocked,
	DOOREV_CloseWaitOpen,
	DOOREV_RaiseIn5Mins
};

enum
{
	FLOOREV_LowerToHighest,
	FLOOREV_RaiseToHighest,
	FLOOREV_LowerToLowest,
	FLOOREV_LowerToNearest,
	FLOOREV_RaiseToNearest,
	FLOOREV_RaiseToLowestCeiling,
	FLOOREV_LowerByValue,
	FLOOREV_RaiseByValue,
	FLOOREV_LowerByValueTimes8,
	FLOOREV_RaiseByValueTimes8,
	FLOOREV_LowerTimes8Instant,
	FLOOREV_RaiseTimes8Instant,
	FLOOREV_MoveToValueTimes8,
	FLOOREV_RaiseByTexture,
	FLOOREV_LowerToLowestChange,
	FLOOREV_RaiseToNearestChange,
	FLOOREV_RaiseByValueChange,
	FLOOREV_RaiseByValueChange2,
	FLOOREV_RaiseAndCrush,
	FLOOREV_RaiseBuildStep,
	FLOOREV_Generic,
	FLOOREV_GenericChange0,
	FLOOREV_GenericChangeT,
	FLOOREV_GenericChange,
	FLOOREV_Donut
};

enum
{
	ELEVEV_Down,
	ELEVEV_Up,
	ELEVEV_Current,
	ELEVEV_Raise,
	ELEVEV_Lower
};

enum
{
	STAIRSEV_DownNormal,
	STAIRSEV_UpNormal,
	STAIRSEV_DownSync,
	STAIRSEV_UpSync
};

enum
{
	WGLSTATE_EXPAND,
	WGLSTATE_STABLE,
	WGLSTATE_REDUCE
};

enum
{
	CEILEV_LowerToFloor,
	CEILEV_LowerToHighestFloor,
	CEILEV_LowerToLowest,
	CEILEV_RaiseToHighest,
	CEILEV_RaiseToNearest,
	CEILEV_LowerByValue,
	CEILEV_RaiseByValue,
	CEILEV_LowerByValueTimes8,
	CEILEV_RaiseByValueTimes8,
	CEILEV_LowerTimes8Instant,
	CEILEV_RaiseTimes8Instant,
	CEILEV_MoveToValueTimes8,
	CEILEV_LowerAndCrush,
	CEILEV_CrushAndRaise,
	CEILEV_CrushRaiseAndStay,
	CEILEV_CrushAndRaiseA,
	CEILEV_CrushAndRaiseSilA,
	CEILEV_CrushRaiseAndStayA,
	CEILEV_CrushRaiseAndStaySilA,
	CEILEV_Generic,
	CEILEV_GenericChange0,
	CEILEV_GenericChangeT,
	CEILEV_GenericChange,
	CEILEV_GenericCrush
};

enum
{
	PLAT_Up,
	PLAT_Down,
	PLAT_Waiting,
	PLAT_InStasis
};

enum
{
	PLATEV_PerpetualRaise,
	PLATEV_PerpetualRaiseLip,
	PLATEV_DownWaitUpStay,
	PLATEV_DownWaitUpStayLip,
	PLATEV_DownNearestWaitUpStay,
	PLATEV_DownLowestCeilingWaitUpStay,
	PLATEV_DownByValueWaitUpStay,
	PLATEV_UpWaitDownStay,
	PLATEV_UpNearestWaitDownStay,
	PLATEV_UpByValueWaitDownStay,
	PLATEV_Toggle,
	PLATEV_Generic
};

enum
{
	PODOOR_NONE,
	PODOOR_SLIDE,
	PODOOR_SWING
};

enum
{
	LIGHTEV_Fade,
	LIGHTEV_Glow,
	LIGHTEV_Flicker,
	LIGHTEV_Strobe
};

enum
{
	SCROLLEV_Side,
	SCROLLEV_Floor,
	SCROLLEV_Ceiling,
	SCROLLEV_Carry
};

enum
{
	PUSHER_Push,
	PUSHER_Pull,
	PUSHER_Wind,
	PUSHER_Current
};

// TYPES -------------------------------------------------------------------

class PolyobjThinker;

/*

  Class definitions for botinfo, chatinfo, and
  other various bot information thingamabobers.

*/

// [FB] Bot Difficulty/skill settings/filters.
enum
{
	bsk_verypoor,
	bsk_poor,
	bsk_low,
	bsk_medium,
	bsk_high,
	bsk_excellent,
	bsk_supreme
};

struct botinfo_t
{
	string Name;		// Bot's name
	int accuracy;		// Accuracy with "instant" weapons (this includes "leading")
	int intelect;		// Accuracy with "missile" weapons (rocket launcher, etc.)
	int evade;		// Ability to dodge incoming missiles
	int anticip;		// Ability to anticipate "instant" shots
	int reaction;		// Overall reaction time (lower is "better")
/*	int pisschance;		// Chance the bot will get pissed when his threshold is reached
	int threshold;		// How much it takes to frustrate/piss off the bot
	int dangerlevel;	// When health is below this, we need some health
//	int wpfav;		// Favorite weapon
	int chatinfo;		// Bot's chat strings
	int chattime;		// How long it takes us to type a line
	int chatty;		// How talkative the bot is
//	char *color;		// Color (in form of a string)
//	char *gender;		// Male/female/it :)
//	char *skin;		// Skin
	int railcolor;		// Railgun trail color
//	bool revealed;		// Hidden bots must be revealed*/
	string userinfo;
};


struct chatline_t
{
//	string		*string;
//	chattype_t  	bot;
	chatline_t	*line;
};

struct chatinfo_t
{
	chatline_t		intro[5];
	chatline_t		inter[5];
	chatline_t		rare[5];
	chatline_t		frag[15];
	chatline_t		died[10];
	chatline_t		roam[10];
	chatline_t		pissed[5];
	chatline_t		frustrated[5];
	chatline_t		special[20];
};

class BotPlayer;

#include "game/classes.vc"
