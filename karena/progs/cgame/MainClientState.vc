//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class MainClientState : ClientState;

struct inventory_t
{
	int type;
	int count;
};


//
//  STATS FOR STATUS BAR
//

bool bshowscoreboard; // [CW] True if scoreboard should be visible

int SBFlags;

int armorpoints;

float InventoryTime;

int ArtifactFlash;
int readyArtifact;
int inv_ptr;
int curpos;
int inventorySlotNum;
inventory_t inventory[HexenDefs::NUMARTIFACTS];

int mana[HexenDefs::NUMMANA];

// [Korax]
// [FB] Scores for the different gameplay modes
int TeamFrags; // [FB] Frags from each team	// [CW] you mean THIS PLAYER's team
int KillsCount; // [FB] How many enemies the player killed	// [CW] including monsters
int TeamKills; // [FB] How many enemies has each team killed	// [CW] you mean THIS PLAYER's team
int TotalKills; // [FB] How many enemies there are in a map

// [CW] I hate to do this, but it is still only way to sent these params to client.
// I hope Janis shall develop additional data transition mechanism which will allow
// copying data directly from Level or GameInfo.
struct scoreboard_t
{
	bool		IsActive;
	string		plname;		// player name
	bool		IsBot;		// true if player is bot, false if is human
	int		team;		// color
	int		frags;
	int		nplkills;	// non-player kills
	int		deaths;
};

scoreboard_t gamescores[MAXPLAYERS];

// [FB] Player atributes for leveling system
int experience;
int exp_level;
int next_level;
int old_level; // [FB] If we are going backwards we need this
int strength;
int intelligence;
int wisdom;
int dexterity;
int constitution;
//
//  Other stats (for status bar)
//
int max_health;
int old_maxhealth; // [FB] To decrease the health
int bak_health; // [FB] To keep an older level health

defaultproperties
{
}

//**************************************************************************
//
//  $Log$
//  Revision 1.1  2006/02/20 22:55:17  dj_jl
//  Changed client state structure to class.
//
//**************************************************************************
