//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**		##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id$
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class StatusBarScreen : StatusBarShared;

const int BAR_X = 160;
const int BAR_Y = 441;

Player cl;

int sb_pclass;
int sb_colour;

int HealthMarker;
int sb_health;
int m_h;

//bool hitCentreFrame;

int pic_bar;
int pic_chain;
int pic_lifegem;
int pic_lfedge;
int pic_rtedge;

int pic_innum[2 * 10];
int pic_smallinnum[10];
int pic_bignum[10];
int bignumwidth[10];
int pic_minus;
//int pic_arti[HexenDefs::NUMARTIFACTS];

int pic_statbar;
int pic_kills;
int pic_manadim[14];
int pic_manavial[10];
int pic_manavial6;
int pic_manavial7;
/*int pic_artiflash[5];
int pic_wpslot;
int pic_wpfull;
int pic_wppiece[3];
int wppiecex[3];
int pic_keybar;
int pic_armor[4];*/

/*int pic_invbar;
int pic_selectbox;
int pic_invgeml[2];
int pic_invgemr[2];*/

int pic_fly[16];
int pic_mino[16];
int pic_boot[16];
int pic_shld[16];
int pic_pidm[8];
int pic_shsp;

int pic_paused;

// For the Fullscreen stuff
int pic_health;
int pic_armor2;

//==========================================================================
//
//  StartMap
//
//==========================================================================

void StartMap()
{
	int i;
	picinfo_t info;

	::StartMap();

	sb_pclass = GetCvar('class');
	sb_colour = GetCvar('colour');

	//
	//  COMMON BAR
	//
	pic_bar = R_RegisterPic('h2bar');
	switch (sb_pclass)
	{
	case HexenDefs::PCLASS_FIGHTER:
		pic_chain = R_RegisterPic('chain');
		if (ClGame.maxclients == 1)
		{
			// single player game uses red life gem (the second gem)
			pic_lifegem = R_RegisterPic('lifegmf2');
		}
		else
		{
			pic_lifegem = R_RegisterPic('lifegmf3');
		}
		break;
	case HexenDefs::PCLASS_CLERIC:
		pic_chain = R_RegisterPic('chain2');
		if (ClGame.maxclients == 1)
		{
			// single player game uses red life gem (the second gem)
			pic_lifegem = R_RegisterPic('lifegmc2');
		}
		else
		{
			pic_lifegem = R_RegisterPic('lifegmc1');
		}
		break;
	case HexenDefs::PCLASS_MAGE:
		pic_chain = R_RegisterPic('chain3');
		if (ClGame.maxclients == 1)
		{
			// single player game uses red life gem (the second gem)
			pic_lifegem = R_RegisterPic('lifegmm2');
		}
		else
		{
			pic_lifegem = R_RegisterPic('lifegmm1');
		}
		break;
	case HexenDefs::PCLASS_HERETIC:
		pic_chain = R_RegisterPic('chain4');
		if (ClGame.maxclients == 1)
		{
			// single player game uses red life gem (the second gem)
			pic_lifegem = R_RegisterPic('lifegmh2');
		}
		else
		{
			pic_lifegem = R_RegisterPic('lifegmh4');
		}
		break;
	case HexenDefs::PCLASS_MARINE:
		pic_chain = R_RegisterPic('chain5');
		if (ClGame.maxclients == 1)
		{
			// single player game uses red life gem (the second gem)
			pic_lifegem = R_RegisterPic('lifegmd2');
		}
		else
		{
			pic_lifegem = R_RegisterPic('lifegmd5');
		}
		break;
	case HexenDefs::PCLASS_WITCHAVEN:
		pic_chain = R_RegisterPic('chain2');
		if (ClGame.maxclients == 1)
		{
			// single player game uses red life gem (the second gem)
			pic_lifegem = R_RegisterPic('lifegmh2');
		}
		else
		{
			pic_lifegem = R_RegisterPic('lifegmh2');
		}
		break;
	}
	pic_lfedge = R_RegisterPic('lfedge');
	pic_rtedge = R_RegisterPic('rtedge');

	for (i = 0; i < 10; i++)
	{
		pic_innum[i] = R_RegisterPic(StrToName(va("in%d", i)));
		pic_innum[10 + i] = R_RegisterPic(StrToName(va("inred%d", i)));
		pic_smallinnum[i] = R_RegisterPic(StrToName(va("smallin%d", i)));
		pic_bignum[i] = R_RegisterPic(StrToName(va("fontb%d", 16 + i)));
		R_GetPicInfo(pic_bignum[i], &info);
		bignumwidth[i] = info.width;
	}
	pic_minus = R_RegisterPic('negnum');
//	pic_artibox = R_RegisterPic('artibox');

	//
	//  MAIN BAR
	//
	pic_statbar = R_RegisterPic('statbar');
	pic_kills = R_RegisterPic('kills');
	pic_manadim[0] = R_RegisterPic('manadim1');
	pic_manadim[1] = R_RegisterPic('manabrt1');
	pic_manadim[2] = R_RegisterPic('manadim2');
	pic_manadim[3] = R_RegisterPic('manabrt2');
	pic_manadim[4] = R_RegisterPic('manadim3');
	pic_manadim[5] = R_RegisterPic('manabrt3');
	pic_manadim[6] = R_RegisterPic('manadim4');
	pic_manadim[7] = R_RegisterPic('manabrt4');
	pic_manadim[8] = R_RegisterPic('manadim5');
	pic_manadim[9] = R_RegisterPic('manabrt5');
	pic_manadim[10] = R_RegisterPic('manadim6');
	pic_manadim[11] = R_RegisterPic('manabrt6');
	pic_manadim[12] = R_RegisterPic('manadim7');
	pic_manadim[13] = R_RegisterPic('manabrt7');
	pic_manavial[0] = R_RegisterPic('manavl1d');
	pic_manavial[1] = R_RegisterPic('manavl1');
	pic_manavial[2] = R_RegisterPic('manavl2d');
	pic_manavial[3] = R_RegisterPic('manavl2');
	pic_manavial[4] = R_RegisterPic('manavl3d');
	pic_manavial[5] = R_RegisterPic('manavl3');
	pic_manavial[6] = R_RegisterPic('manavl4d');
	pic_manavial[7] = R_RegisterPic('manavl4');
	pic_manavial[8] = R_RegisterPic('manavl5d');
	pic_manavial[9] = R_RegisterPic('manavl5');
	pic_manavial6 = R_RegisterPic('manavl6');
	pic_manavial7 = R_RegisterPic('manavl7');
/*	pic_artiflash[0] = R_RegisterPic('useartia');
	pic_artiflash[1] = R_RegisterPic('useartib');
	pic_artiflash[2] = R_RegisterPic('useartic');
	pic_artiflash[3] = R_RegisterPic('useartid');
	pic_artiflash[4] = R_RegisterPic('useartie');
	switch (sb_pclass)
	{
	case HexenDefs::PCLASS_FIGHTER:
		pic_wpslot = R_RegisterPic('wpslot0');
		pic_wppiece[0] = R_RegisterPic('wpiecef1');
		pic_wppiece[1] = R_RegisterPic('wpiecef2');
		pic_wppiece[2] = R_RegisterPic('wpiecef3');
		pic_wpfull = R_RegisterPic('wpfull0');
		wppiecex[0] = 190;
		wppiecex[1] = 225;
		wppiecex[2] = 234;
		break;
	case HexenDefs::PCLASS_CLERIC:
		pic_wpslot = R_RegisterPic('wpslot1');
		pic_wppiece[0] = R_RegisterPic('wpiecec1');
		pic_wppiece[1] = R_RegisterPic('wpiecec2');
		pic_wppiece[2] = R_RegisterPic('wpiecec3');
		pic_wpfull = R_RegisterPic('wpfull1');
		wppiecex[0] = 190;
		wppiecex[1] = 212;
		wppiecex[2] = 225;
		break;
	case HexenDefs::PCLASS_MAGE:
		pic_wpslot = R_RegisterPic('wpslot2');
		pic_wppiece[0] = R_RegisterPic('wpiecem1');
		pic_wppiece[1] = R_RegisterPic('wpiecem2');
		pic_wppiece[2] = R_RegisterPic('wpiecem3');
		pic_wpfull = R_RegisterPic('wpfull2');
		wppiecex[0] = 190;
		wppiecex[1] = 205;
		wppiecex[2] = 224;
		break;
	}

	//
	//  KEY BAR
	//
	pic_keybar = R_RegisterPic('keybar');
	for (i = 0; i < HexenDefs::NUMKEYS; i++)
	{
		pic_key[i] = R_RegisterPic(StrToName(va("keyslot%x", i + 1)));
	}
	for (i = 0; i < HexenDefs::NUMARMOR; i++)
	{
		pic_armor[i] = R_RegisterPic(StrToName(va("armslot%d", i + 1)));
	}

	//
	//  INVENTORY
	//
	pic_invbar = R_RegisterPic('invbar');
	pic_selectbox = R_RegisterPic('selectbo');
	pic_invgeml[0] = R_RegisterPic('invgeml1');
	pic_invgeml[1] = R_RegisterPic('invgeml2');
	pic_invgemr[0] = R_RegisterPic('invgemr1');
	pic_invgemr[1] = R_RegisterPic('invgemr2');
*/
	//
	//  ANIMATED ICONS
	//
	for (i = 0; i < 16; i++)
	{
		pic_fly[i] = R_RegisterPic(StrToName(va("spfly%d", i)));
		pic_mino[i] = R_RegisterPic(StrToName(va("spmino%d", i)));
		pic_boot[i] = R_RegisterPic(StrToName(va("spboot%d", i)));
		pic_shld[i] = R_RegisterPic(StrToName(va("spshld%d", i)));
	}

	// [FB] PI Damage animated icon
	for (i = 0; i < 8; i++)
	{
		pic_pidm[i] = R_RegisterPic(StrToName(va("sppidm%d", i)));
	}

	// [FB] Invisibility icon
	pic_shsp = R_RegisterPic('spshsp0');

	//  "PAUSED" IMAGE
	pic_paused = R_RegisterPic('paused');

	//  FULLSCREEN ICONS FOR HEALTH AND ARMOR
	pic_health = R_RegisterPic('ptn1a0');
	pic_armor2 = R_RegisterPic('ar_1a0');
}

//==========================================================================
//
//	SB_DrawBackground
//
//==========================================================================

void SB_DrawBackground()
{
	// [FB] Calculate the max_health value according the player level
	m_h = cl.max_health;
	sb_health = HealthMarker;
	if (sb_health < 0)
	{
		sb_health = 0;
	}
	else if (sb_health > m_h)
	{
		sb_health = m_h;
	}

	// draw something in the blank spaces
	FillRectWithFlat(0, 441, 640, 39, 'f_022');

	DrawPic(BAR_X + 0, BAR_Y - 27, pic_bar);
	if (m_h)
	{
		DrawPic(BAR_X + 28 + (((sb_health * 196) / m_h) % 9), BAR_Y + 32, pic_chain);
		DrawPic(BAR_X + 7 + ((sb_health * 222) / m_h), BAR_Y + 32, pic_lifegem, , cl.MO.Translation);
	}
	DrawPic(BAR_X + 0, BAR_Y + 32, pic_lfedge);
	DrawPic(BAR_X + 277, BAR_Y + 32, pic_rtedge);
}

//==========================================================================
//
//	SB_DrawNumber9
//
//==========================================================================

void SB_DrawNumber9(int x, int y, int num, int colour, optional float alpha)
{
	int w = 9;
	int neg = num < 0;

	if (neg)
	{
		num = -num;
	}

	x = x + 27;

	// in the special case of 0, you draw 0
	if (!num)
	{
		DrawPic(x - w, y, pic_innum[colour * 10], alpha ? alpha : 1.0);
	}

	// draw the new number
	while (num)
	{
		x -= w;
		DrawPic(x, y, pic_innum[colour * 10 + num % 10], alpha ? alpha : 1.0);
		num /= 10;
	}

	// draw a minus sign if necessary
	if (neg)
	{
		DrawPic(x - 8, y, pic_minus, alpha ? alpha : 1.0);
	}
}

//==========================================================================
//
//	SB_DrawINumber
//
//==========================================================================

void SB_DrawINumber(int x, int y, int num)
{
	if (num > 1)
	{
		x = x + 8;

		// draw the new number
		while (num)
		{
			x -= 4;
			DrawPic(x, y, pic_smallinnum[num % 10]);
			num /= 10;
		}
	}
}

//==========================================================================
//
//	SB_DrawMNumber
//
//==========================================================================

void SB_DrawMNumber(int x, int y, int num)
{
	if (num > 0)
	{
		x = x + 12;

		// draw the new number
		while (num)
		{
			x -= 4;
			DrawPic(x, y, pic_smallinnum[num % 10]);
			num /= 10;
		}
	}
}

//==========================================================================
//
//	SB_DrawMainBar
//
//==========================================================================

void SB_DrawMainBar()
{
	int sb_mana1;
	int sb_mana2;
	int sb_mana3;
	int sb_mana4;
	int sb_mana5;
	int sb_manaVial1;
	int sb_manaVial2;
	int sb_manaVial3;
	int sb_manaVial4;
	int sb_manaVial5;
	int Mana5DimBase;

	SB_DrawBackground();
	DrawPic(BAR_X + 38, BAR_Y + 1, pic_statbar);

	if (!cl.MO)
	{
		return;
	}

//[Korax]
/*	SB_DrawNumber9(320, 20, cl.exp_level, 1);
	SB_DrawNumber9(460, 20, cl.experience, 1);
	SB_DrawNumber9(580, 20, cl.next_level, 1);*/

	// Frags
	if (ClGame.deathmatch == HexenDefs::game_dm ||
	    ClGame.deathmatch == HexenDefs::game_dmteam)
	{
/*		DrawPic(38, 162, pic_kills);
		SB_DrawNumber9(40, 176, cl.Frags, 0);
		*/
		SB_DrawNumber9(32, 20, cl.Frags, 0);

		if (ClGame.deathmatch == HexenDefs::game_dmteam)
		{
			SB_DrawNumber9(85, 20, cl.TeamFrags, 0);
		}
	}

	if (ClGame.deathmatch == HexenDefs::game_sweep ||
	    ClGame.deathmatch == HexenDefs::game_sweepteam)
	{
		SB_DrawNumber9(32, 20, cl.KillCount, 0);
		SB_DrawNumber9(138, 20, cl.Level.TotalKills - cl.Level.CurrentKills, 0);
		if (ClGame.deathmatch == HexenDefs::game_sweepteam)
		{
			SB_DrawNumber9(85, 20, cl.TeamKills, 0);
		}
	}

	if (cl.Health >= 25)
	{
		SB_DrawNumber9(BAR_X + 40, BAR_Y + 15, sb_health, 0);
	}
	else
	{
		SB_DrawNumber9(BAR_X + 40, BAR_Y + 15, sb_health, 1);
	}

	//  Mana
	sb_mana1 = 1;
	sb_mana2 = 1;
	sb_mana3 = 1;
	sb_mana4 = 1;
	sb_mana5 = 1;
	sb_manaVial1 = 0;
	sb_manaVial2 = 0;
	sb_manaVial3 = 0;
	// Update mana graphics based upon mana count/weapon type
	if (cl.ReadyWeapon &&
		(cl.ReadyWeapon.AmmoType1 == ItemManaBlue ||
		cl.ReadyWeapon.AmmoType2 == ItemManaBlue ||
		KArenaWeapon(cl.ReadyWeapon).AmmoType3 == ItemManaBlue))
	{
		sb_manaVial1 = 1;
	}
	if (cl.ReadyWeapon &&
		(cl.ReadyWeapon.AmmoType1 == ItemManaGreen ||
		cl.ReadyWeapon.AmmoType2 == ItemManaGreen ||
		KArenaWeapon(cl.ReadyWeapon).AmmoType3 == ItemManaGreen))
	{
		sb_manaVial2 = 1;
	}
	if (cl.ReadyWeapon &&
		(cl.ReadyWeapon.AmmoType1 == ItemManaRed ||
		cl.ReadyWeapon.AmmoType2 == ItemManaRed ||
		KArenaWeapon(cl.ReadyWeapon).AmmoType3 == ItemManaRed))
	{
		sb_manaVial3 = 1;
	}
	if (!sb_manaVial1)
	{
		sb_mana1 = 0;
	}
	if (!sb_manaVial2)
	{
		sb_mana2 = 0;
	}
	if (!sb_manaVial3)
	{
		sb_mana3 = 0;
	}
	if (cl.altWeapon == HexenDefs::ALTFIRE_BLASTRADIUS)
	{
		sb_mana5 = 0;
		sb_manaVial4 = 1;
		sb_manaVial5 = 0;
	}
	else if (cl.altWeapon == HexenDefs::ALTFIRE_POISONBAG)
	{
		sb_mana4 = 0;
		sb_manaVial4 = 0;
		sb_manaVial5 = 1;
	}
	else
	{
		sb_mana4 = 0;
		sb_mana5 = 0;
		sb_manaVial4 = 0;
		sb_manaVial5 = 0;
	}
	// [FB] Choose correct mana type to display
	switch(cl.altWeaponMode[HexenDefs::ALTFIRE_POISONBAG])
	{
	case HexenDefs::ALTFIRE_POISONBAG_GRENADE:
		Mana5DimBase = 0;
		break;
	case HexenDefs::ALTFIRE_POISONBAG_CLOUD:
		Mana5DimBase = 2;
		break;
	case HexenDefs::ALTFIRE_POISONBAG_BOMB:
		Mana5DimBase = 4;
		break;
	}

	DrawPic(BAR_X + 231, BAR_Y + 4, pic_manavial6);
	DrawPic(BAR_X + 238, BAR_Y + 4, pic_manavial7);
	DrawMana(ItemManaBlue, 77, sb_manaVial1, 0, sb_mana1);
	DrawMana(ItemManaGreen, 107, 2 + sb_manaVial2, 2, sb_mana2);
	DrawMana(ItemManaRed, 138, 4 + sb_manaVial3, 4, sb_mana3);
	DrawMana(ArtifactBlastRadius, 169, 6 + sb_manaVial4, 6, sb_mana4);
	DrawMana(ArtifactFlechette, 200, 8 + sb_manaVial5, 8 + Mana5DimBase, sb_mana5);
	if (cl.next_level != cl.old_level)
	{
	   ShadeRect(BAR_X + 232, BAR_Y + 5, 3, 22 - (22 * (cl.experience - cl.old_level)) / (cl.next_level - cl.old_level), 0.99);
	}
	ShadeRect(BAR_X + 239, BAR_Y + 5, 3, 22 - (22 * cl.exp_level) / 10, 0.99);

	// Ready artifact
/*	if (cl.ArtifactFlash)
	{
		DrawPic(148, 164, pic_artiflash[cl.ArtifactFlash]);
	}
	else if (cl.readyArtifact > 0)
	{
		DrawPic(143, 163, pic_arti[cl.readyArtifact]);
		SB_DrawINumber(166, 184, cl.inventory[cl.inv_ptr].count);
	}
*/
	// Weapon Pieces
	//[Korax]
/*	if ((cl.stats.flags & SBF_PIECES_MASK) != SBF_PIECES_MASK)
	{
		DrawPic(190, 162, pic_wpslot);
		if (cl.stats.flags & SBF_PIECE1)
		{
			DrawPic(wppiecex[0], 162, pic_wppiece[0]);
		}
		if (cl.stats.flags & SBF_PIECE2)
		{
			DrawPic(wppiecex[1], 162, pic_wppiece[1]);
		}
		if (cl.stats.flags & SBF_PIECE3)
		{
			DrawPic(wppiecex[2], 162, pic_wppiece[2]);
		}
	}
	else
	{
		DrawPic(190, 162, pic_wpfull);
	}
*/

	// Armor
	BasicArmor Armor = BasicArmor(EntityEx(cl.MO).FindInventory(BasicArmor));
	SB_DrawNumber9(BAR_X + 253, BAR_Y + 15, Armor ? Armor.Amount : 0, 0);
}

//==========================================================================
//
//	DrawMana
//
//==========================================================================

void DrawMana(class<Ammo> Type, int X, int manaVial, int DimBase,
	int UsesMana)
{
	Inventory		ManaItem;

	ManaItem = cl.MO ? EntityEx(cl.MO).FindInventory(Type) : none;
	if (!ManaItem || ManaItem.Amount == 0)
	{
		// Draw Dim Mana icon
		UsesMana = 0;
	}
	DrawPic(BAR_X + X, BAR_Y + 3, pic_manadim[DimBase + UsesMana]);
	DrawPic(BAR_X + X + 17, BAR_Y + 3, pic_manavial[manaVial]);
	if (ManaItem)
	{
		SB_DrawMNumber(BAR_X + X + 2, BAR_Y + 20, ManaItem.Amount);
		ShadeRect(BAR_X + X + 18, BAR_Y + 4, 3,
			22 - (22 * ManaItem.Amount) / ManaItem.MaxAmount, 0.99);
	}
	else
	{
		SB_DrawMNumber(BAR_X + X + 2, BAR_Y + 20, 0);
		ShadeRect(BAR_X + X + 18, BAR_Y + 4, 3, 22, 0.99);
	}
}

//==========================================================================
//
//	SB_DrawKeyBar
//
//==========================================================================

/*void SB_DrawKeyBar()
{
	int i;
	int num;
	Inventory Item;

	SB_DrawBackground();
	DrawPic(BAR_X + 38, BAR_Y + 1, pic_keybar);

	//  Keys
	Item = EntityEx(cl.MO).Inventory;
	for (num = 0; Item && num < 5; Item = Item.Inventory)
	{
		if (Key(Item))
		{
			DrawPic(BAR_X + 46 + num * 20, BAR_Y + 3,
				R_RegisterPic(Item.IconName));
			num++;
		}
	}

	//  Armor
	for (i = 0; i < NUMARMOR; i++)
	{
		if (!cl.armorpoints[i])
		{
			num = 100;
		}
		else if (cl.armorpoints[i] <=
			(ArmorIncrement[sb_pclass * NUMARMOR + i] / 4.0))
		{
			num = 66;
		}
		else if (cl.armorpoints[i] <=
			(ArmorIncrement[sb_pclass * NUMARMOR + i] / 2.0))
		{
			num = 33;
		}
		else
		{
			num = 0;
		}
		DrawPic(150 + 31 * i, 164, pic_armor[i], num);
	}
}*/

//==========================================================================
//
//	SB_DrawInventoryBar
//
//==========================================================================

/*void SB_DrawInventoryBar()
{
	int i;

	SB_DrawBackground();
	DrawPic(BAR_X + 38, BAR_Y + 1, pic_invbar);

	//  Inventory
	Inventory Item = cl.InvFirst;
	for (i = 0; Item && i < 7; i++)
	{
		DrawPic(BAR_X + 50 + i * 31, BAR_Y + 2,
			R_RegisterPic(Item.IconName));
		SB_DrawINumber(BAR_X + 71 + i * 31, BAR_Y + 24, Item.Amount);
		if (Item == cl.InvPtr)
		{
			DrawPic(BAR_X + 50 + i * 31, BAR_Y + 2, pic_selectbox);
		}
		Item = Item.NextInv();
	}

	if (cl.InvFirst && cl.InvFirst.PrevInv())
	{
		DrawPic(BAR_X + 42, BAR_Y + 2, pic_invgeml[!(ClGame.GLevel.TicTime & 4) ? 0 : 1]);
	}
	if (Item)
	{
		DrawPic(BAR_X + 269, BAR_Y + 2, pic_invgemr[!(ClGame.GLevel.TicTime & 4) ? 0 : 1]);
	}
}*/

//==========================================================================
//
//	SB_DrawFullscreenStats
//
//==========================================================================

void SB_DrawFullscreenStats()
{
	int i;
	int x;
	int sb_mana1;
	int sb_mana2;
	int sb_mana3;
	int sb_mana4;
	int sb_mana5;

	if (!cl.MO)
	{
		return;
	}

	//  [FB] Armorpoints
	BasicArmor Armor = BasicArmor(EntityEx(cl.MO).FindInventory(BasicArmor));
	if (Armor && Armor.Amount)
	{
		SB_DrawNumber9(50, 430, Armor.Amount, Armor.Amount > 25 ? 0 : 1);
		DrawPic(30, 470, pic_armor2);
	}

	//  [FB] Health
	if (cl.Health)
	{
		SB_DrawNumber9(50, 450, cl.Health, cl.Health > 25 ? 0 : 1);
		DrawPic(30, 494, pic_health);
	}

//[Korax]
/*	SB_DrawNumber9(320, 20, 0+cl.exp_level, 1);
	SB_DrawNumber9(460, 20, 0+cl.experience, 1);
	SB_DrawNumber9(580, 20, 0+cl.next_level, 1);*/

	// Frags
	if (ClGame.deathmatch == HexenDefs::game_dm ||
	    ClGame.deathmatch == HexenDefs::game_dmteam)
	{
/*		DrawPic(38, 162, pic_kills);
		SB_DrawNumber9(40, 176, cl.Frags, 0);
		*/
		if (cl.Frags)
			SB_DrawNumber9(32, 20, cl.Frags, 0);

		if (ClGame.deathmatch == HexenDefs::game_dmteam)
		{
			if (cl.TeamFrags)
				SB_DrawNumber9(85, 20, cl.TeamFrags, 0);
		}
	}

	if (ClGame.deathmatch == HexenDefs::game_sweep ||
	    ClGame.deathmatch == HexenDefs::game_sweepteam)
	{
		if (cl.KillCount)
			SB_DrawNumber9(32, 20, cl.KillCount, 0);
		SB_DrawNumber9(138, 20, cl.Level.TotalKills - cl.Level.CurrentKills, 0);
		if (ClGame.deathmatch == HexenDefs::game_sweepteam)
		{
			if (cl.TeamKills)
				SB_DrawNumber9(85, 20, cl.TeamKills, 0);
		}
	}

	//  [FB] Mana Display in Fullscreen
	sb_mana1 = 1;
	sb_mana2 = 1;
	sb_mana3 = 1;
	sb_mana4 = 1;
	sb_mana5 = 1;
	if (cl.altWeapon != HexenDefs::ALTFIRE_BLASTRADIUS)
	{
		// Draw Dim Mana icon
		sb_mana4 = 0;
	}
	if (cl.altWeapon != HexenDefs::ALTFIRE_POISONBAG)
	{
		// Draw Dim Mana icon
		sb_mana5 = 0;
	}
	int Mana5DimBase = 0;
	// [FB] Choose correct mana type to display
	switch(cl.altWeaponMode[HexenDefs::ALTFIRE_POISONBAG])
	{
	case HexenDefs::ALTFIRE_POISONBAG_GRENADE:
		Mana5DimBase = 0;
		break;
	case HexenDefs::ALTFIRE_POISONBAG_CLOUD:
		Mana5DimBase = 2;
		break;
	case HexenDefs::ALTFIRE_POISONBAG_BOMB:
		Mana5DimBase = 4;
		break;
	}
	// [FB] Update mana graphics based upon mana count/weapon type
	if (cl.ReadyWeapon &&
		cl.ReadyWeapon.AmmoType1 != ItemManaBlue &&
		cl.ReadyWeapon.AmmoType2 != ItemManaBlue &&
		KArenaWeapon(cl.ReadyWeapon).AmmoType3 != ItemManaBlue)
	{
		sb_mana1 = 0;
	}
	if (cl.ReadyWeapon &&
		cl.ReadyWeapon.AmmoType1 != ItemManaGreen &&
		cl.ReadyWeapon.AmmoType2 != ItemManaGreen &&
		KArenaWeapon(cl.ReadyWeapon).AmmoType3 != ItemManaGreen)
	{
		sb_mana2 = 0;
	}
	if (cl.ReadyWeapon &&
		cl.ReadyWeapon.AmmoType1 != ItemManaRed &&
		cl.ReadyWeapon.AmmoType2 != ItemManaRed &&
		KArenaWeapon(cl.ReadyWeapon).AmmoType3 != ItemManaRed)
	{
		sb_mana3 = 0;
	}

	DrawFullscreenMana(ItemManaBlue, 235, 0, sb_mana1);
	DrawFullscreenMana(ItemManaGreen, 295, 2, sb_mana2);
	DrawFullscreenMana(ItemManaRed, 355, 4, sb_mana3);
	DrawFullscreenMana(ArtifactBlastRadius, 415, 6, sb_mana4);
	DrawFullscreenMana(ArtifactFlechette, 475, 8 + Mana5DimBase, sb_mana5);
	DrawPic(534, 439, pic_manavial6, 0.6);
	DrawPic(546, 439, pic_manavial7, 0.6);
	if (cl.next_level != cl.old_level)
	{
		ShadeRect(535, 440, 3, 22 - (22 * (cl.experience - cl.old_level)) / (cl.next_level - cl.old_level), 0.99);
	}
	ShadeRect(547, 440, 3, 22 - (22 * cl.exp_level) / 10, 0.99);

//[Korax]
/*	if (cl.InventoryTime)
	{
		//  Inventory
		x = cl.inv_ptr - cl.curpos;
		for (i = 0; i < 7; i++)
		{
			DrawPic(210 + i * 31, 448, pic_arti[0], 40);
			if (cl.inventorySlotNum > x + i
				&& cl.inventory[x + i].type != HexenDefs::arti_none)
			{
				DrawShadowedPic(209 + i * 31, 447,
					pic_arti[cl.inventory[x + i].type]);
				SB_DrawINumber(229 + i * 31, 468, cl.inventory[x + i].count);
			}
		}
		DrawPic(210 + cl.curpos * 31, 447, pic_selectbox);
		if (x != 0)
		{
			DrawShadowedPic(200, 447, pic_invgeml[!(ClGame.level->tictime & 4) ? 0 : 1]);
		}
		if (cl.inventorySlotNum - x > 7)
		{
			DrawShadowedPic(428, 447, pic_invgemr[!(ClGame.level->tictime & 4) ? 0 : 1]);
		}
	}
	else if (cl.readyArtifact > 0)
	{
		//  Ready artifact
		DrawShadowedPic(286, 170, pic_arti[0], 40);
		DrawShadowedPic(284, 169, pic_arti[cl.readyArtifact]);
		SB_DrawINumber(306, 192, cl.inventory[cl.inv_ptr].count);
	}*/
}

//==========================================================================
//
//	DrawFullscreenMana
//
//==========================================================================

void DrawFullscreenMana(class<Ammo> Type, int X, int DimBase, int UsesMana)
{
	Inventory		ManaItem;

	ManaItem = cl.MO ? EntityEx(cl.MO).FindInventory(Type) : none;
	if (!ManaItem || ManaItem.Amount == 0)
	{
		// Draw Dim Mana icon
		UsesMana = 0;
	}
	if (ManaItem && ManaItem.Amount)
	{
		DrawPic(X + 5, 440, pic_manadim[DimBase + UsesMana], UsesMana > 0 ? 1.0 : 0.6);
		SB_DrawNumber9(X, 454, ManaItem.Amount, ManaItem.Amount > 25 ? 0 : 1, UsesMana > 0 ? 1.0 : 0.6);
	}
}

//==========================================================================
//
//	SB_DrawIcons
//
//==========================================================================

void SB_DrawIcons()
{
//	int frame;
	Powerup Pw;

	if (!cl.MO)
	{
		return;
	}

	// Wings of wrath
/*	Pw = Powerup(EntityEx(cl.MO).FindInventory(PowerFlight));
	if (Pw && (Pw.EffectTime > Player::BLINKTHRESHOLD ||
		!(ftoi(Pw.EffectTime * 35.0) & 16)))
	{
		frame = (ClGame.GLevel.TicTime / 3) & 15;
		if (cl.MO.bFly)
		{
			if (hitCentreFrame && frame != 15 && frame != 0)
			{
				frame = 15;
			}
			else
			{
				hitCentreFrame = false;
			}
		}
		else
		{
			if (hitCentreFrame || frame == 15 || frame == 0)
			{
				frame = 15;
				hitCentreFrame = true;
			}
		}
		DrawPic(20, 19, pic_fly[frame]);
	}*/

	// Speed Boots
	Pw = Powerup(EntityEx(cl.MO).FindInventory(PowerSpeed));
	if (Pw && (Pw.EffectTime > Player::BLINKTHRESHOLD ||
		!(ftoi(Pw.EffectTime * 35.0) & 16)))
	{
		DrawPic(60, 19, pic_boot[(ClGame.GLevel.TicTime / 3) & 15], 0.6);
	}

	// Defensive power
	Pw = Powerup(EntityEx(cl.MO).FindInventory(PowerInvulnerable));
	if (Pw && Pw.Mode != 'Initial' &&
		(Pw.EffectTime > Player::BLINKTHRESHOLD ||
		!(ftoi(Pw.EffectTime * 35.0) & 16)))
	{
		DrawPic(580, 19, pic_shld[(ClGame.GLevel.TicTime / 3) & 15], 0.6);
	}

	// Minotaur Active
	Pw = Powerup(EntityEx(cl.MO).FindInventory(PowerMinotaur));
	if (Pw && (Pw.EffectTime > Player::BLINKTHRESHOLD ||
		!(ftoi(Pw.EffectTime * 35.0) & 16)))
	{
		DrawPic(620, 19, pic_mino[(ClGame.GLevel.TicTime / 3) & 15], 0.6);
	}

	// [FB] PI Damage Active
	Pw = Powerup(EntityEx(cl.MO).FindInventory(PowerPIDamage));
	if (Pw && (Pw.EffectTime > Player::BLINKTHRESHOLD ||
		!(ftoi(Pw.EffectTime * 35.0) & 16)))
	{
		// [FB] This one should appear where the wings of wrath are supposed to
		DrawPic(20, 19, pic_pidm[(ClGame.GLevel.TicTime / 3) & 7], 0.6);
	}

	// [FB] Invisibility power
	Pw = Powerup(EntityEx(cl.MO).FindInventory(PowerGhost));
	if (Pw)
	{
		if (Pw.EffectTime > Player::BLINKTHRESHOLD ||
			!(ftoi(Pw.EffectTime * 35.0) & 16))
		{
			DrawPic(220, 19, pic_shsp, 0.3);
		}
	}
}

//==========================================================================
//
//	SB_DrawPause
//
//==========================================================================

void SB_DrawPause()
{
	if (ClGame.bPaused && GetCvar('draw_pause'))
	{
		DrawShadowedPic(320, ClGame.maxclients > 1 ? 140 : 40, pic_paused);
	}
}

//==========================================================================
//
//  SB_Drawer
//
//==========================================================================

void SB_Drawer(int sb_view)
{
	if (GetCvar('NoHUD'))
		return;

	if (sb_view == SB_VIEW_FULLSCREEN)
	{
		SB_DrawFullscreenStats();
	}
/*	else if (cl.InventoryTime)
	{
		SB_DrawInventoryBar();
	}
	else if (sb_view == SB_VIEW_AUTOMAP)
	{
		SB_DrawKeyBar();
	}*/
	else
	{
		SB_DrawMainBar();
	}

	//  Animated icons
	SB_DrawIcons();

	//  Pause icon
	SB_DrawPause();

	// [CW] Targeted enemy info
	// (don't know where to put it if not here)
	byte tinfoFormat = GetCvar('TargetInfo');
	if (sb_view != SB_VIEW_AUTOMAP && tinfoFormat > 0 && cl.targetinfo.type != Player::targetinfo_none)
	{
		SetTextAlign(hcentre, vcentre);
		SetFont('smallfont');
		int Col = (cl.targetinfo.type == Player::targetinfo_shoot) ? CR_WHITE : CR_GREEN;
		DrawText(320, 240, cl.targetinfo.sname, Col);
		
		if (tinfoFormat > 1)
		{
			string s = va("%i", cl.targetinfo.level);
			switch (cl.targetinfo.level)
			{
				case 1: s = strcat(s, "st"); break;
				case 2: s = strcat(s, "nd"); break;
				case 3: s = strcat(s, "rd"); break;
				default: s = strcat(s, "th");
			}
		
			if (tinfoFormat > 2)
			{
				s = strcat(s, va("     %i%%", cl.targetinfo.healthpc));
			}

			DrawText(320, 254, s, Col);
		}
	}

	// [CW] Use power
	if (GetCvar('deathmatch') == HexenDefs::game_football && cl.use_power)
	{
		R_FillRect(320 - cl.use_power * 5 , 256, cl.use_power * 10, 16, 0xff00ff00);
	}
}

//==========================================================================
//
//  SB_UpdateWidgets
//
//==========================================================================

void SB_UpdateWidgets()
{
	int delta;
	int curHealth;

	curHealth = cl.Health;
	if (curHealth < 0)
	{
		curHealth = 0;
	}
	if (curHealth < HealthMarker)
	{
		delta = (HealthMarker - curHealth) >> 2;
		if (delta < 1)
		{
			delta = 1;
		}
		else if (delta > 6)
		{
			delta = 6;
		}
		HealthMarker -= delta;
	}
	else if (curHealth > HealthMarker)
	{
		delta = (curHealth - HealthMarker) >> 2;
		if (delta < 1)
		{
			delta = 1;
		}
		else if (delta > 6)
		{
			delta = 6;
		}
		HealthMarker += delta;
	}
}

//==========================================================================
//
//	OnVisibilityChanged
//
//==========================================================================

void OnVisibilityChanged(bool bNewVisibility)
{
	bTickEnabled = bNewVisibility;
}

defaultproperties
{
	bTickEnabled = true;
	Focusable = true;
	Width = 640;
	Height = 480;
}
