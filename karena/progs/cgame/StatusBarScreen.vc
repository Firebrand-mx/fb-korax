//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**		##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id$
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class StatusBarScreen : Window;

const int BAR_X = 160;
const int BAR_Y = 441;

ClientGameBase ClGame;

Player cl;

int sb_pclass;
int sb_colour;

int HealthMarker;
int sb_health;
int m_h;

bool hitCentreFrame;

int pic_bar;
int pic_chain;
int pic_lifegem;
int pic_lfedge;
int pic_rtedge;

int pic_innum[2 * 10];
int pic_smallinnum[10];
int pic_bignum[10];
int bignumwidth[10];
int pic_minus;
//int pic_arti[NUMARTIFACTS];

int pic_statbar;
int pic_kills;
int pic_manadim1[2];
int pic_manadim2[2];
int pic_manadim3[2];
int pic_manadim4[2];
int pic_manadim5[2];
int pic_manavial1[2];
int pic_manavial2[2];
int pic_manavial3[2];
int pic_manavial4[2];
int pic_manavial5[2];
int pic_manavial6;
int pic_manavial7;
/*int pic_artiflash[5];
int pic_wpslot;
int pic_wpfull;
int pic_wppiece[3];
int wppiecex[3];*/
int pic_keybar;
int pic_key[HexenDefs::NUMKEYS];
int pic_armor[HexenDefs::NUMARMOR];

/*int pic_invbar;
int pic_selectbox;
int pic_invgeml[2];
int pic_invgemr[2];*/
int pic_fly[16];
int pic_mino[16];
int pic_boot[16];
int pic_shld[16];
int pic_pidm[8];
int pic_shsp;

int pic_paused;

// For the Fullscreen stuff
int pic_health;
int pic_armor2;
//int pic_arti[HexenDefs::NUMARTIFACTS];

/*string arti_pic_names[NUMARTIFACTS] = {
	"ARTIBOX",	// none
	"ARTIINVU",	// invulnerability
	"ARTIPTN2",	// health
	"ARTISPHL",	// superhealth
	"ARTIHRAD",	// healing radius
	"ARTISUMN",	// summon maulator
	"ARTITRCH",	// torch
	"ARTIPORK",	// pig
	"ARTISOAR",	// fly
	"ARTIBLST",	// blast radius
	"ARTIPSBG",	// poison bag
	"ARTITELO",	// teleport other
	"ARTISPED",	// speed
	"ARTIBMAN",	// boost mana
	"ARTIBRAC",	// boost armor
	"ARTIATLP",	// teleport
	"ARTISKLL",	// arti_puzzskull
	"ARTIBGEM",	// arti_puzzgembig
	"ARTIGEMR",	// arti_puzzgemred
	"ARTIGEMG",	// arti_puzzgemgreen1
	"ARTIGMG2",	// arti_puzzgemgreen2
	"ARTIGEMB",	// arti_puzzgemblue1
	"ARTIGMB2",	// arti_puzzgemblue2
	"ARTIBOK1",	// arti_puzzbook1
	"ARTIBOK2",	// arti_puzzbook2
	"ARTISKL2",	// arti_puzzskull2
	"ARTIFWEP",	// arti_puzzfweapon
	"ARTICWEP",	// arti_puzzcweapon
	"ARTIMWEP",	// arti_puzzmweapon
	"ARTIGEAR",	// arti_puzzgear1
	"ARTIGER2",	// arti_puzzgear2
	"ARTIGER3",	// arti_puzzgear3
	"ARTIGER4"	// arti_puzzgear4
};
*/

//==========================================================================
//
//  StartMap
//
//==========================================================================

void StartMap()
{
	int i;
	picinfo_t info;

	sb_pclass = GetCvar('class');
	sb_colour = GetCvar('colour');

	//
	//  COMMON BAR
	//
	pic_bar = R_RegisterPic('h2bar');
	switch (sb_pclass)
	{
	case HexenDefs::PCLASS_FIGHTER:
		pic_chain = R_RegisterPic('chain');
		if (ClGame.maxclients == 1)
		{
			// single player game uses red life gem (the second gem)
			pic_lifegem = R_RegisterPic('lifegmf2');
		}
		else if (!sb_colour)
		{
			pic_lifegem = R_RegisterPic('lifegem');
		}
		else
		{
			pic_lifegem = R_RegisterPic(StrToName(va("lifegmf%d",
				sb_colour + 1)));
		}
		break;
	case HexenDefs::PCLASS_CLERIC:
		pic_chain = R_RegisterPic('chain2');
		if (ClGame.maxclients == 1)
		{
			// single player game uses red life gem (the second gem)
			pic_lifegem = R_RegisterPic('lifegmc2');
		}
		else
		{
			pic_lifegem = R_RegisterPic(StrToName(va("lifegmc%d",
				sb_colour + 1)));
		}
		break;
	case HexenDefs::PCLASS_MAGE:
		pic_chain = R_RegisterPic('chain3');
		if (ClGame.maxclients == 1)
		{
			// single player game uses red life gem (the second gem)
			pic_lifegem = R_RegisterPic('lifegmm2');
		}
		else
		{
			pic_lifegem = R_RegisterPic(StrToName(va("lifegmm%d",
				sb_colour + 1)));
		}
		break;
	case HexenDefs::PCLASS_HERETIC:
		pic_chain = R_RegisterPic('chain4');
		if (ClGame.maxclients == 1)
		{
			// single player game uses red life gem (the second gem)
			pic_lifegem = R_RegisterPic('lifegmh2');
		}
		else
		{
			pic_lifegem = R_RegisterPic(StrToName(va("lifegmh%d",
				sb_colour + 1)));
		}
		break;
	case HexenDefs::PCLASS_MARINE:
		pic_chain = R_RegisterPic('chain5');
		if (ClGame.maxclients == 1)
		{
			// single player game uses red life gem (the second gem)
			pic_lifegem = R_RegisterPic('lifegmd2');
		}
		else
		{
			pic_lifegem = R_RegisterPic(StrToName(va("lifegmd%d",
				sb_colour + 1)));
		}
		break;
	case HexenDefs::PCLASS_WITCHAVEN:
		pic_chain = R_RegisterPic('chain2');
		if (ClGame.maxclients == 1)
		{
			// single player game uses red life gem (the second gem)
			pic_lifegem = R_RegisterPic('lifegmh2');
		}
		else
		{
			pic_lifegem = R_RegisterPic(StrToName(va("lifegmh%d",
				sb_colour + 1)));
		}
		break;
	}
	pic_lfedge = R_RegisterPic('lfedge');
	pic_rtedge = R_RegisterPic('rtedge');

	for (i = 0; i < 10; i++)
	{
		pic_innum[i] = R_RegisterPic(StrToName(va("in%d", i)));
		pic_innum[10 + i] = R_RegisterPic(StrToName(va("inred%d", i)));
		pic_smallinnum[i] = R_RegisterPic(StrToName(va("smallin%d", i)));
		pic_bignum[i] = R_RegisterPic(StrToName(va("fontb%d", 16 + i)));
		R_GetPicInfo(pic_bignum[i], &info);
		bignumwidth[i] = info.width;
	}
	pic_minus = R_RegisterPic('negnum');

	//
	//  MAIN BAR
	//
	pic_statbar = R_RegisterPic('statbar');
	pic_kills = R_RegisterPic('kills');
	pic_manadim1[0] = R_RegisterPic('manadim1');
	pic_manadim1[1] = R_RegisterPic('manabrt1');
	pic_manadim2[0] = R_RegisterPic('manadim2');
	pic_manadim2[1] = R_RegisterPic('manabrt2');
	pic_manadim3[0] = R_RegisterPic('manadim3');
	pic_manadim3[1] = R_RegisterPic('manabrt3');
	pic_manadim4[0] = R_RegisterPic('manadim4');
	pic_manadim4[1] = R_RegisterPic('manabrt4');
	pic_manadim5[0] = R_RegisterPic('manadim5');
	pic_manadim5[1] = R_RegisterPic('manabrt5');
	pic_manavial1[0] = R_RegisterPic('manavl1d');
	pic_manavial1[1] = R_RegisterPic('manavl1');
	pic_manavial2[0] = R_RegisterPic('manavl2d');
	pic_manavial2[1] = R_RegisterPic('manavl2');
	pic_manavial3[0] = R_RegisterPic('manavl3d');
	pic_manavial3[1] = R_RegisterPic('manavl3');
	pic_manavial4[0] = R_RegisterPic('manavl4d');
	pic_manavial4[1] = R_RegisterPic('manavl4');
	pic_manavial5[0] = R_RegisterPic('manavl5d');
	pic_manavial5[1] = R_RegisterPic('manavl5');
	pic_manavial6 = R_RegisterPic('manavl6');
	pic_manavial7 = R_RegisterPic('manavl7');

	//
	//  ANIMATED ICONS
	//
	for (i = 0; i < 16; i++)
	{
		pic_mino[i] = R_RegisterPic(StrToName(va("spmino%d", i)));
		pic_boot[i] = R_RegisterPic(StrToName(va("spboot%d", i)));
		pic_shld[i] = R_RegisterPic(StrToName(va("spshld%d", i)));
	}
	// [FB] PI Damage animated icon
	for (i = 0; i < 8; i++)
	{
		pic_pidm[i] = R_RegisterPic(StrToName(va("sppidm%d", i)));
	}
	// [FB] Invisibility icon
	pic_shsp = R_RegisterPic('spshsp0');
	

	//  PAUSED IMAGE
	pic_paused = R_RegisterPic('paused');
	
	//  FULLSCREEN ICONS FOR HEALTH AND ARMOR
	pic_health = R_RegisterPic('ptn1a0');
	pic_armor2 = R_RegisterPic('arm1a0');
}

//==========================================================================
//
//	SB_DrawBackground
//
//==========================================================================

void SB_DrawBackground()
{
	// [FB] Calculate the max_health value according the player level
	m_h = cl.max_health;
	sb_health = HealthMarker;

	if (sb_health < 0)
	{
		sb_health = 0;
	}
	else if (sb_health > m_h)
	{
		sb_health = m_h;
	}

	// draw something in the blank spaces
	R_FillRectWithFlat(0, 441, 640, 39, 'f_022');

	R_DrawPic(BAR_X + 0, BAR_Y - 27, pic_bar);
	R_DrawPic(BAR_X + 28 + (((sb_health * 196) / m_h) % 9), BAR_Y + 32, pic_chain);
	R_DrawPic(BAR_X + 7 + ((sb_health * 11) / 5), BAR_Y + 32, pic_lifegem);
	R_DrawPic(BAR_X + 0, BAR_Y + 32, pic_lfedge);
	R_DrawPic(BAR_X + 277, BAR_Y + 32, pic_rtedge);
}

//==========================================================================
//
//	SB_DrawNumber9
//
//==========================================================================

void SB_DrawNumber9(int x, int y, int num, int colour)
{
	int w = 9;
	int neg = num < 0;

	if (neg)
	{
		num = -num;
	}

	x = x + 27;
    
	// in the special case of 0, you draw 0
	if (!num)
	{
		R_DrawPic(x - w, y, pic_innum[colour * 10]);
	}

	// draw the new number
	while (num)
	{
		x -= w;
		R_DrawPic(x, y, pic_innum[colour * 10 + num % 10]);
		num /= 10;
	}

	// draw a minus sign if necessary
	if (neg)
	{
		R_DrawPic(x - 8, y, pic_minus);
	}
}

//==========================================================================
//
//	SB_DrawNumber92
//
//	[FB] Draw the number shadowed
//
//==========================================================================

void SB_DrawNumber92(int x, int y, int num, int colour)
{
	int w = 9;
	int neg = num < 0;

	if (neg)
	{
		num = -num;
	}

	x = x + 27;
    
	// in the special case of 0, you draw 0
	if (!num)
	{
		R_DrawShadowedPic(x - w, y, pic_innum[colour * 10]);
	}

	// draw the new number
	while (num)
	{
		x -= w;
		R_DrawShadowedPic(x, y, pic_innum[colour * 10 + num % 10]);
		num /= 10;
	}

	// draw a minus sign if necessary
	if (neg)
	{
		R_DrawShadowedPic(x - 8, y, pic_minus);
	}
}

//==========================================================================
//
//	SB_DrawNumber12
//
//==========================================================================

void SB_DrawNumber12(int x, int y, int num)
{
	x = x + 36;
    
	// in the special case of 0, you draw 0
	if (!num)
	{
		R_DrawShadowedPic(x - bignumwidth[0], y, pic_bignum[0]);
	}

	// draw the new number
	while (num)
	{
		x -= bignumwidth[num % 10];
		R_DrawShadowedPic(x, y, pic_bignum[num % 10]);
		num /= 10;
		x -= 3;
	}
}

//==========================================================================
//
//	SB_DrawINumber
//
//==========================================================================

void SB_DrawINumber(int x, int y, int num)
{
	if (num > 1)
	{
		x = x + 8;
    
		// draw the new number
		while (num)
		{
			x -= 4;
			R_DrawPic(x, y, pic_smallinnum[num % 10]);
			num /= 10;
		}
	}
}

//==========================================================================
//
//	SB_DrawMNumber
//
//==========================================================================

void SB_DrawMNumber(int x, int y, int num)
{
	if (num > 0)
	{
		x = x + 12;
    
		// draw the new number
		while (num)
		{
			x -= 4;
			R_DrawPic(x, y, pic_smallinnum[num % 10]);
			num /= 10;
		}
	}
}

//==========================================================================
//
//	SB_DrawMainBar
//
//==========================================================================

void SB_DrawMainBar()
{
	int sb_mana1;
	int sb_mana2;
	int sb_mana3;
	int sb_mana4;
	int sb_mana5;
	int sb_manaVial1;
	int sb_manaVial2;
	int sb_manaVial3;
	int sb_manaVial4;
	int sb_manaVial5;
	int readyweapon;

	SB_DrawBackground();
	R_DrawPic(BAR_X + 38, BAR_Y + 1, pic_statbar);

//[Korax]
	SB_DrawNumber92(320, 20, cl.exp_level, 1);
	SB_DrawNumber92(460, 20, cl.experience, 1);
	SB_DrawNumber92(580, 20, cl.next_level, 1);
	// Frags / health
	if (ClGame.deathmatch && ClGame.deathmatch != HexenDefs::game_sweepteam)
	{
/*		R_DrawPic(38, 162, pic_kills);
		SB_DrawNumber92(40, 176, cl.Frags, 0);
		*/
		SB_DrawNumber92(32, 20, cl.Frags, 0);

		if (ClGame.deathmatch == HexenDefs::game_dmteam)
		{
			SB_DrawNumber92(85, 20, cl.TeamFrags, 0);
		}
	}

	if (ClGame.deathmatch == HexenDefs::game_sweepteam)
	{
		SB_DrawNumber92(85, 20, cl.TeamKills, 0);
	}

	if (!ClGame.deathmatch || ClGame.deathmatch == HexenDefs::game_sweepteam)
	{
		SB_DrawNumber92(32, 20, cl.KillsCount, 0);
		SB_DrawNumber92(138, 20, cl.TotalKills, 0);
	}

	if (cl.Health >= 25)
	{
		SB_DrawNumber9(BAR_X + 40, BAR_Y + 15, sb_health, 0);
	}
	else
	{
		SB_DrawNumber9(BAR_X + 40, BAR_Y + 15, sb_health, 1);
	}

	//  Mana
	if (cl.Mana[0] == 0)
	{
		// Draw Dim Mana icon
		sb_mana1 = 0;
	}
	else
	{
		sb_mana1 = 1;
	}
	if (cl.Mana[1] == 0)
	{
		// Draw Dim Mana icon
		sb_mana2 = 0;
	}
	else
	{
		sb_mana2 = 1;
	}
	if (cl.Mana[2] == 0)
	{
		// Draw Dim Mana icon
		sb_mana3 = 0;
	}
	else
	{
		sb_mana3 = 1;
	}
	if (cl.Mana[3] == 0)
	{
		// Draw Dim Mana icon
		sb_mana4 = 0;
		sb_manaVial4 = 0;
	}
	else
	{
		sb_mana4 = 1;
		sb_manaVial4 = 1;
	}
	if (cl.Mana[4] == 0)
	{
		// Draw Dim Mana icon
		sb_mana5 = 0;
		sb_manaVial5 = 0;
	}
	else
	{
		sb_mana5 = 1;
		sb_manaVial5 = 1;
	}
	// Update mana graphics based upon mana count/weapon type
	readyweapon = (cl.SBFlags & HexenDefs::SBF_WPN_MASK) >> HexenDefs::SBF_WPN_SHIFT;
	if (readyweapon == HexenDefs::WP_FIRST)
	{
		sb_mana1 = 0;
		sb_mana2 = 0;
		sb_mana3 = 0;
		sb_manaVial1 = 0;
		sb_manaVial2 = 0;
		sb_manaVial3 = 0;
	}
	else if (readyweapon == HexenDefs::WP_SECOND)
	{
		sb_mana2 = 0;
		sb_mana3 = 0;
		sb_manaVial1 = 1;
		sb_manaVial2 = 0;
		sb_manaVial3 = 0;
	}
	else if (readyweapon == HexenDefs::WP_THIRD)
	{
		sb_mana1 = 0;
		sb_mana3 = 0;
		sb_manaVial1 = 0;
		sb_manaVial2 = 1;
		sb_manaVial3 = 0;
	}
	else if (readyweapon == HexenDefs::WP_FOURTH)
	{
		sb_mana1 = 0;
		sb_mana2 = 0;
		sb_manaVial1 = 0;
		sb_manaVial2 = 0;
		sb_manaVial3 = 1;
	}
	else if (readyweapon == HexenDefs::WP_FIFTH)
	{
		sb_mana2 = 0;
		sb_mana3 = 0;
		sb_manaVial1 = 1;
		sb_manaVial2 = 0;
		sb_manaVial3 = 0;
	}
	else if (readyweapon == HexenDefs::WP_SIXTH)
	{
		sb_mana1 = 0;
		sb_mana3 = 0;
		sb_manaVial1 = 0;
		sb_manaVial2 = 1;
		sb_manaVial3 = 0;
	}
	else if (readyweapon == HexenDefs::WP_SEVENTH)
	{
		sb_mana1 = 0;
		sb_mana2 = 0;
		sb_manaVial1 = 0;
		sb_manaVial2 = 0;
		sb_manaVial3 = 1;
	}
	else
	{
		sb_manaVial1 = 1;
		sb_manaVial2 = 1;
		sb_manaVial3 = 1;
	}

	SB_DrawMNumber(BAR_X + 79, BAR_Y + 20, cl.Mana[0]);
	SB_DrawMNumber(BAR_X + 109, BAR_Y + 20, cl.Mana[1]);
	SB_DrawMNumber(BAR_X + 140, BAR_Y + 20, cl.Mana[2]);
	SB_DrawMNumber(BAR_X + 171, BAR_Y + 20, cl.Mana[3]);
	SB_DrawMNumber(BAR_X + 202, BAR_Y + 20, cl.Mana[4]);
	R_DrawPic(BAR_X + 77, BAR_Y + 3, pic_manadim1[sb_mana1]);
	R_DrawPic(BAR_X + 107, BAR_Y + 3, pic_manadim2[sb_mana2]);//+30
	R_DrawPic(BAR_X + 138, BAR_Y + 3, pic_manadim3[sb_mana3]);//+31
	R_DrawPic(BAR_X + 169, BAR_Y + 3, pic_manadim4[sb_mana4]);//+31
	R_DrawPic(BAR_X + 200, BAR_Y + 3, pic_manadim5[sb_mana5]);//+31
	R_DrawPic(BAR_X + 94, BAR_Y + 3, pic_manavial1[sb_manaVial1]);
	R_DrawPic(BAR_X + 124, BAR_Y + 3, pic_manavial2[sb_manaVial2]);
	R_DrawPic(BAR_X + 155, BAR_Y + 3, pic_manavial3[sb_manaVial3]);
	R_DrawPic(BAR_X + 186, BAR_Y + 3, pic_manavial4[sb_manaVial4]);
	R_DrawPic(BAR_X + 217, BAR_Y + 3, pic_manavial5[sb_manaVial5]);
	R_DrawPic(BAR_X + 231, BAR_Y + 4, pic_manavial6);
	R_DrawPic(BAR_X + 238, BAR_Y + 4, pic_manavial7);
	R_ShadeRect(BAR_X + 95, BAR_Y + 4, 3, 22 - (22 * cl.Mana[0]) / HexenDefs::MAX_MANA, 31);
	R_ShadeRect(BAR_X + 125, BAR_Y + 4, 3, 22 - (22 * cl.Mana[1]) / HexenDefs::MAX_MANA, 31);
	R_ShadeRect(BAR_X + 156, BAR_Y + 4, 3, 22 - (22 * cl.Mana[2]) / HexenDefs::MAX_MANA, 31);
	R_ShadeRect(BAR_X + 187, BAR_Y + 4, 3, 22 - (22 * cl.Mana[3]) / HexenDefs::MAX_MANA, 31);
	R_ShadeRect(BAR_X + 218, BAR_Y + 4, 3, 22 - (22 * cl.Mana[4]) / HexenDefs::MAX_MANA, 31);
	R_ShadeRect(BAR_X + 232, BAR_Y + 5, 3, 22 - (22 * (cl.experience - cl.old_level)) / (cl.next_level - cl.old_level), 31);
	R_ShadeRect(BAR_X + 239, BAR_Y + 5, 3, 22 - (22 * cl.exp_level) / 10, 31);

	// Ready artifact
/*	if (cl.ArtifactFlash)
	{
		R_DrawPic(148, 164, pic_artiflash[cl.ArtifactFlash]);
	}
	else if (cl.readyArtifact > 0)
	{
		R_DrawPic(143, 163, pic_arti[cl.readyArtifact]);
		SB_DrawINumber(166, 184, cl.inventory[cl.inv_ptr].count);
	}
*/
	// Weapon Pieces
	//[Korax]
/*	if ((cl.stats.flags & SBF_PIECES_MASK) != SBF_PIECES_MASK)
	{
		R_DrawPic(190, 162, pic_wpslot);
		if (cl.stats.flags & SBF_PIECE1)
		{
			R_DrawPic(wppiecex[0], 162, pic_wppiece[0]);
		}
		if (cl.stats.flags & SBF_PIECE2)
		{
			R_DrawPic(wppiecex[1], 162, pic_wppiece[1]);
		}
		if (cl.stats.flags & SBF_PIECE3)
		{
			R_DrawPic(wppiecex[2], 162, pic_wppiece[2]);
		}
	}
	else
	{
		R_DrawPic(190, 162, pic_wpfull);
	}
*/

	// Armor
	SB_DrawNumber9(BAR_X + 253, BAR_Y + 15, cl.ArmorPoints, 0);
}

//==========================================================================
//
//	SB_DrawKeyBar
//
//==========================================================================

void SB_DrawKeyBar()
{
	int i;
	int num;

	SB_DrawBackground();
	R_DrawPic(BAR_X + 38, BAR_Y + 1, pic_keybar);

	//  Keys
	for (i = 0, num = 0; i < HexenDefs::NUMKEYS && num < 5; i++)
	{
		if (cl.SBFlags & (1 << i))
		{
			R_DrawPic(BAR_X + 46 + num * 20, BAR_Y + 3, pic_key[i]);
			num++;
		}
	}

	//  Armor
/*	for (i = 0; i < NUMARMOR; i++)
	{
		if (!cl.armorpoints[i])
		{
			num = 100;
		}
		else if (cl.armorpoints[i] <=
			(ArmorIncrement[sb_pclass * NUMARMOR + i] / 4.0))
		{
			num = 66;
		}
		else if (cl.armorpoints[i] <=
			(ArmorIncrement[sb_pclass * NUMARMOR + i] / 2.0))
		{
			num = 33;
		}
		else
		{
			num = 0;
		}
		R_DrawPic2(150 + 31 * i, 164, pic_armor[i], num);
	}*/
}

//==========================================================================
//
//	SB_DrawInventoryBar
//
//==========================================================================

void SB_DrawInventoryBar()
{
/*	int i;
	int x;

	SB_DrawBackground();
	R_DrawShadowedPic(38, 162, pic_invbar);

	//  Inventory
	x = cl.inv_ptr - cl.curpos;
	for (i = 0; i < 7; i++)
	{
		if (cl.inventorySlotNum > x + i
			&& cl.inventory[x + i].type != arti_none)
		{
			R_DrawShadowedPic(50 + i * 31, 163, pic_arti[cl.inventory[x + i].type]);
			SB_DrawINumber(71 + i * 31, 185, cl.inventory[x + i].count);
		}
	}

	R_DrawShadowedPic(50 + cl.curpos * 31, 163, pic_selectbox);
	if (x != 0)
	{
		R_DrawShadowedPic(42, 163, pic_invgeml[!(level->tictime & 4) ? 0 : 1]);
	}
	if (cl.inventorySlotNum - x > 7)
	{
		R_DrawShadowedPic(269, 163, pic_invgemr[!(level->tictime & 4) ? 0 : 1]);
	}*/
}

//==========================================================================
//
//	SB_DrawFullscreenStats
//
//==========================================================================

void SB_DrawFullscreenStats()
{
	int i;
	int x;
	int sb_mana1;
	int sb_mana2;
	int sb_mana3;
	int sb_mana4;
	int sb_mana5;
	int readyweapon;

	//  [FB] Armorpoints
	SB_DrawNumber12(50, 430, cl.ArmorPoints);
	R_DrawShadowedPic(30, 470, pic_armor2);

	//  [FB] Health
	SB_DrawNumber12(50, 450, cl.Health);
	R_DrawShadowedPic(30, 494, pic_health);

//[Korax]
	SB_DrawNumber92(320, 20, 0+cl.exp_level, 1);
	SB_DrawNumber92(460, 20, 0+cl.experience, 1);
	SB_DrawNumber92(580, 20, 0+cl.next_level, 1);
	//  Frags
	if (ClGame.deathmatch && ClGame.deathmatch != HexenDefs::game_sweepteam)
	{
		SB_DrawNumber92(32, 20, cl.Frags, 0);

		if (ClGame.deathmatch == HexenDefs::game_dmteam)
		{
			SB_DrawNumber92(85, 20, cl.TeamFrags, 0);
		}
	}

	if (ClGame.deathmatch == HexenDefs::game_sweepteam)
	{
		SB_DrawNumber92(85, 20, cl.TeamKills, 0);
	}

	if (!ClGame.deathmatch || ClGame.deathmatch == HexenDefs::game_sweepteam)
	{
		SB_DrawNumber92(32, 20, cl.KillsCount, 0);
		SB_DrawNumber92(138, 20, cl.TotalKills, 0);
	}

	//  [FB] Mana Display in Fullscreen
	if (cl.Mana[0] == 0)
	{
		// Draw Dim Mana icon
		sb_mana1 = 0;
	}
	else
	{
		sb_mana1 = 1;
	}
	if (cl.Mana[1] == 0)
	{
		// Draw Dim Mana icon
		sb_mana2 = 0;
	}
	else
	{
		sb_mana2 = 1;
	}
	if (cl.Mana[2] == 0)
	{
		// Draw Dim Mana icon
		sb_mana3 = 0;
	}
	else
	{
		sb_mana3 = 1;
	}
	if (cl.Mana[3] == 0)
	{
		// Draw Dim Mana icon
		sb_mana4 = 0;
	}
	else
	{
		sb_mana4 = 1;
	}
	if (cl.Mana[4] == 0)
	{
		// Draw Dim Mana icon
		sb_mana5 = 0;
	}
	else
	{
		sb_mana5 = 1;
	}
	// [FB] Update mana graphics based upon mana count/weapon type
	readyweapon = (cl.SBFlags & HexenDefs::SBF_WPN_MASK) >> HexenDefs::SBF_WPN_SHIFT;
	if (readyweapon == HexenDefs::WP_FIRST)
	{
		sb_mana1 = 0;
		sb_mana2 = 0;
		sb_mana3 = 0;
	}
	else if (readyweapon == HexenDefs::WP_SECOND)
	{
		sb_mana2 = 0;
		sb_mana3 = 0;
	}
	else if (readyweapon == HexenDefs::WP_THIRD)
	{
		sb_mana1 = 0;
		sb_mana3 = 0;
	}
	else if (readyweapon == HexenDefs::WP_FOURTH)
	{
		sb_mana1 = 0;
		sb_mana2 = 0;
	}
	else if (readyweapon == HexenDefs::WP_FIFTH)
	{
		sb_mana2 = 0;
		sb_mana3 = 0;
	}
	else if (readyweapon == HexenDefs::WP_SIXTH)
	{
		sb_mana1 = 0;
		sb_mana3 = 0;
	}
	else if (readyweapon == HexenDefs::WP_SEVENTH)
	{
		sb_mana1 = 0;
		sb_mana2 = 0;
	}
	else
	{
	}

	R_DrawShadowedPic(240, 440, pic_manadim1[sb_mana1]);
	R_DrawShadowedPic(300, 440, pic_manadim2[sb_mana2]);
	R_DrawShadowedPic(360, 440, pic_manadim3[sb_mana3]);
	R_DrawShadowedPic(420, 440, pic_manadim4[sb_mana4]);
	R_DrawShadowedPic(480, 440, pic_manadim5[sb_mana5]);
	SB_DrawNumber92(235, 454, cl.Mana[0], 0);
	SB_DrawNumber92(295, 454, cl.Mana[1], 0);
	SB_DrawNumber92(355, 454, cl.Mana[2], 0);
	SB_DrawNumber92(415, 454, cl.Mana[3], 0);
	SB_DrawNumber92(475, 454, cl.Mana[4], 0);

//[Korax]
/*	if (cl.InventoryTime)
	{
		//  Inventory
		x = cl.inv_ptr - cl.curpos;
		for (i = 0; i < 7; i++)
		{
			R_DrawPic2(210 + i * 31, 448, pic_arti[0], 40);
			if (cl.inventorySlotNum > x + i
				&& cl.inventory[x + i].type != HexenDefs::arti_none)
			{
				R_DrawShadowedPic(209 + i * 31, 447,
					pic_arti[cl.inventory[x + i].type]);
				SB_DrawINumber(229 + i * 31, 468, cl.inventory[x + i].count);
			}
		}
		R_DrawPic(210 + cl.curpos * 31, 447, pic_selectbox);
		if (x != 0)
		{
			R_DrawShadowedPic(200, 447, pic_invgeml[!(ClGame.level->tictime & 4) ? 0 : 1]);
		}
		if (cl.inventorySlotNum - x > 7)
		{
			R_DrawShadowedPic(428, 447, pic_invgemr[!(ClGame.level->tictime & 4) ? 0 : 1]);
		}
	}
	else if (cl.readyArtifact > 0)
	{
		//  Ready artifact
		R_DrawShadowedPic(286, 170, pic_arti[0], 40);
		R_DrawShadowedPic(284, 169, pic_arti[cl.readyArtifact]);
		SB_DrawINumber(306, 192, cl.inventory[cl.inv_ptr].count);
	}*/
}

//==========================================================================
//
//	SB_DrawIcons
//
//==========================================================================

void SB_DrawIcons(int view)
{
	int frame;

	// Wings of wrath
	if (cl.SBFlags & HexenDefs::SBF_POWER_FLIGHT)
	{
		frame = (ClGame.level->tictime / 3) & 15;
		if (cl.SBFlags & HexenDefs::SBF_IN_FLIGHT)
		{
			if (hitCentreFrame && frame != 15 && frame != 0)
			{
				frame = 15;
			}
			else
			{
				hitCentreFrame = false;
			}
		}
		else
		{
			if (hitCentreFrame || frame == 15 || frame == 0)
			{
				frame = 15;
				hitCentreFrame = true;
			}
		}
		R_DrawShadowedPic(20, 19, pic_fly[frame]);
	}

	// Speed Boots
	if (cl.SBFlags & HexenDefs::SBF_POWER_SPEED)
	{
		R_DrawShadowedPic(60, 19, pic_boot[(ClGame.level->tictime / 3) & 15]);
	}

	// Defensive power
	if (cl.SBFlags & HexenDefs::SBF_POWER_INVULN)
	{
		R_DrawShadowedPic(580, 19, pic_shld[(ClGame.level->tictime / 3) & 15]);
	}

	// Minotaur Active
	if (cl.SBFlags & HexenDefs::SBF_POWER_MINOTAUR)
	{
		R_DrawShadowedPic(620, 19, pic_mino[(ClGame.level->tictime / 3) & 15]);
	}

	// [FB] PI Damage Active
	if (cl.SBFlags & HexenDefs::SBF_POWER_DAMAGE)
	{
		// [FB] This one should appear where the wings of wrath are supposed to do
		R_DrawShadowedPic(20, 19, pic_pidm[(ClGame.level->tictime / 3) & 7]);
	}

	// [FB] Invisibility power
	if (cl.SBFlags & HexenDefs::SBF_POWER_INVISIBILITY)
	{
		R_DrawPic2(220, 19, pic_shsp, 40);
	}
}

//==========================================================================
//
//	SB_DrawPause
//
//==========================================================================

void SB_DrawPause(int view)
{
	if (ClGame.bPaused && GetCvar('draw_pause'))
	{
		R_DrawShadowedPic(320, ClGame.maxclients > 1 ? 140 : 40, pic_paused);
	}
}

//==========================================================================
//
//  SB_Drawer
//
//==========================================================================

void SB_Drawer(int sb_view)
{
	int i;

	if (sb_view == SB_VIEW_FULLSCREEN)
	{
		SB_DrawFullscreenStats();
	}
	else if (cl.InventoryTime)
	{
		SB_DrawInventoryBar();
	}
	else if (sb_view == SB_VIEW_AUTOMAP)
	{
//		SB_DrawKeyBar();
		SB_DrawMainBar();
	}
	else
	{
		SB_DrawMainBar();
	}

	//  Animated icons
	SB_DrawIcons(sb_view);

	//  Pause icon
	SB_DrawPause(sb_view);

	// [CW] Targeted enemy hint
	// (don't know where to put it if not here)
	if (sb_view != SB_VIEW_AUTOMAP && strlen(cl.targetnamehint))
	{
		T_SetAlign(hcentre, vcentre);
		T_SetFont(font_small);
		T_DrawText(320, 240, cl.targetnamehint);
	}

	// [CW] Use power
	if (GetCvar('deathmatch') == HexenDefs::game_football && cl.use_power)
	{
		R_FillRect(320 - cl.use_power * 5 , 256, cl.use_power * 10, 16, 0xff00ff00);
	}
}

//==========================================================================
//
//  SB_UpdateWidgets
//
//==========================================================================

void SB_UpdateWidgets()
{
	int delta;
	int curHealth;

	curHealth = cl.Health;

	if (curHealth < 0)
	{
		curHealth = 0;
	}
	if (curHealth < HealthMarker)
	{
		delta = (HealthMarker - curHealth) >> 2;
		if (delta < 1)
		{
			delta = 1;
		}
		else if (delta > 6)
		{
			delta = 6;
		}
		HealthMarker -= delta;
	}
	else if (curHealth > HealthMarker)
	{
		delta = (curHealth - HealthMarker) >> 2;
		if (delta < 1)
		{
			delta = 1;
		}
		else if (delta > 6)
		{
			delta = 6;
		}
		HealthMarker += delta;
	}
}

//==========================================================================
//
//	VisibilityChanged
//
//==========================================================================

void VisibilityChanged(bool bNewVisibility)
{
	bTickEnabled = bNewVisibility;
}

defaultproperties
{
	bTickEnabled = true;
	Width = 640;
	Height = 480;
}
