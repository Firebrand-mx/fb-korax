//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**		##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id: template.vc 508 2006-07-10 19:02:43Z firebrand_kh $
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class ScoreBoardScreen : Window;

const int
	SHADE_LEFT		= 24,
	SHADE_TOP		= 40,
	SHADE_WIDTH		= 592,
	SHADE_HEIGHT		= 400,

	PORTRAIT_HEIGHT		= 25,

	TABLE_LEFT_X		= 48,
	TABLE_DATA_LEFT_X	= 96,
	TABLE_HEAD_Y		= 48,
	TABLE_TOP_Y		= 82,
	TABLE_STRING_DELTA	= 14,
	TABLE_ENTRY_DELTA	= 28,
	TABLE_COL2		= 240,
	TABLE_COL3		= 302,
	TABLE_COL4		= 386,
	TABLE_COL5		= 446,
	TABLE_COL6		= 494,
	TABLE_VALINDENT4	= 16,
	TABLE_VALINDENT5	= 12,
	TABLE_VALINDENT6	= 18;

MainClientState cl;
//ClientGameBase ClGame;

int colormark[HexenDefs::MAXPLAYERTEAMS];

//[CW] may be those should be put into some shared resources module
string colornames[HexenDefs::MAXPLAYERTEAMS];
string gamemodenames[HexenDefs::NUMGAMES];
string playerclassnames[HexenDefs::NUMCLASSES];

int pic_portraits[6];
int pic_portraits_heights[6];


//==========================================================================
//
//  StartMap
//
//==========================================================================

void StartMap()
{
	//	initialize pics
	int i;
	picinfo_t info;

	for (i = 0; i < 6; i++)
	{
		pic_portraits[i] = R_RegisterPic(StrToName(va("icon0%d", i)));
		R_GetPicInfo(pic_portraits[i], &info);
		pic_portraits_heights[i] = info.height;
	}
}

//==========================================================================
//
//  DrawWindow
//
//==========================================================================

void DrawWindow(GC gc)
{
	int i, j, y;
	int gamemode;
	int current_team;
	int current_team_idx;
	string tmp;

	R_ShadeRect(SHADE_LEFT, SHADE_TOP, SHADE_WIDTH, SHADE_HEIGHT, 20);

	// Game mode

	gamemode = GetCvar('deathmatch');

	T_SetAlign(hleft, vtop);
	T_SetFont(font_yellow);
	T_DrawText(TABLE_LEFT_X, TABLE_HEAD_Y , va("game mode:   %s", gamemodenames[gamemode]));

	/*--------------------------------------
		General Scoring Table
	--------------------------------------*/

	/* Table Head		*/

	T_DrawText(TABLE_LEFT_X, TABLE_HEAD_Y + TABLE_STRING_DELTA , "player");
	T_DrawText(TABLE_COL2, TABLE_HEAD_Y + TABLE_STRING_DELTA, "score");
	T_DrawText(TABLE_COL3, TABLE_HEAD_Y + TABLE_STRING_DELTA, "ctrl");

	// Those are mode dependent
	T_DrawText(TABLE_COL4, TABLE_HEAD_Y + TABLE_STRING_DELTA, "frags");
	T_DrawText(TABLE_COL5, TABLE_HEAD_Y + TABLE_STRING_DELTA, "kills");
	T_DrawText(TABLE_COL6, TABLE_HEAD_Y + TABLE_STRING_DELTA, "deaths");
	//

	T_SetFont(font_small);

	y = TABLE_TOP_Y;
	current_team = -1;
	current_team_idx = -1;

	for (i = 0; i < MAXPLAYERS; i++)
	{
		if (!cl.gamescores[i].IsActive)
			break;

		// Insert team string if a new team encountered
		if (gamemode >= HexenDefs::NUMGAMESNOTEAM && cl.gamescores[i].team != current_team)
		{
			if (current_team != -1)
				y += 6;
			current_team_idx++;
			R_FillRect(SHADE_LEFT + 8, y - 6, SHADE_WIDTH - 16, 22, colormark[cl.gamescores[i].team]);
			T_DrawText(TABLE_LEFT_X, y, va("%s team,   score:   %d", colornames[cl.gamescores[i].team],
								cl.teamscores[current_team_idx]));
			y += TABLE_STRING_DELTA;
			current_team = cl.gamescores[i].team;
		}

		// Mark current client with special background color
		// FIXME!!! - bad thing, need some other marking style for team mode!
		if (cl.table_thisplayer == i)
		{
			if (gamemode < HexenDefs::NUMGAMESNOTEAM)
				R_FillRect(SHADE_LEFT + 8, y + 6, SHADE_WIDTH - 16, PORTRAIT_HEIGHT, colormark[cl.gamescores[i].team]);
			else
			{	// ???				
			}
		}

		// Player portrait
		R_DrawPic(TABLE_LEFT_X + 20, y + PORTRAIT_HEIGHT - ((PORTRAIT_HEIGHT - pic_portraits_heights[cl.gamescores[i].plclass]) >> 1),
							pic_portraits[cl.gamescores[i].plclass]);

		y += 6;

		// Player's name
		T_DrawText(TABLE_DATA_LEFT_X, y, cl.gamescores[i].plname);

		// Level + class
		switch (cl.gamescores[i].level)
		{
		case 1: tmp = "st"; break;
		case 2: tmp = "nd"; break;
		case 3: tmp = "rd"; break;
		default: tmp = "th";
		}
		T_DrawText(TABLE_DATA_LEFT_X, y + TABLE_STRING_DELTA, va("%d%s %s",
			cl.gamescores[i].level, tmp, playerclassnames[cl.gamescores[i].plclass]));

		y += TABLE_STRING_DELTA >> 1;

		// Player's score
		T_DrawText(TABLE_COL2, y, va("%d", cl.gamescores[i].score));

		// Player is human/cpu
		if (cl.gamescores[i].IsBot)
			T_DrawText(TABLE_COL3, y, "bot");
		else
			T_DrawText(TABLE_COL3, y, "hum");

		// Those are mode dependent
		T_DrawText(TABLE_COL4 + TABLE_VALINDENT4, y, va("%d", cl.gamescores[i].frags));
		T_DrawText(TABLE_COL5 + TABLE_VALINDENT5, y, va("%d", cl.gamescores[i].nplkills));
		T_DrawText(TABLE_COL6 + TABLE_VALINDENT6, y, va("%d", cl.gamescores[i].deaths));

		y += TABLE_ENTRY_DELTA - (TABLE_STRING_DELTA >> 1);
	}
}

/*//==========================================================================
//
//	Tick
//
//	Called periodicaly, but only when bTickEnabled is true.
//
//	OBSOLETE		---- FIXME!!! ----
//
//==========================================================================

void Tick(float DeltaTime)
{
	// [CW] check scoreboard flag toggle
	if (cl.bshowscoreboard && !bIsVisible)
	{
		dprint("ScoreBoardScreen::Tick :");
		dprint("          --> Show Scoreboard");
		Show();
	}
	else if (!cl.bshowscoreboard && bIsVisible)
	{
		dprint("ScoreBoardScreen::Tick :");
		dprint("          --> Hide Scoreboard");
		Hide();
	}
}*/

defaultproperties
{
	//////////bTickEnabled = true;
	Width = 640;
	Height = 480;

	colormark[0] = 0xff0000aa;
	colormark[1] = 0xffaa0000;
	colormark[2] = 0xffaaaa00;
	colormark[3] = 0xff55aa00;
	colormark[4] = 0xff008800;
	colormark[5] = 0xff888888;
	colormark[6] = 0xff884400;
	colormark[7] = 0xff880088;

	colornames[0] = "blue";
	colornames[1] = "red";
	colornames[2] = "gold";
	colornames[3] = "light green";
	colornames[4] = "green";
	colornames[5] = "gray";
	colornames[6] = "brown";
	colornames[7] = "magenta";

	gamemodenames[0] = "unused game mode";
	gamemodenames[1] = "castle sweep";
	gamemodenames[2] = "kill the heresiarch";
	gamemodenames[3] = "deathmatch";
	gamemodenames[4] = "team deathmatch";
	gamemodenames[5] = "capture the flag";
	gamemodenames[6] = "football";
	gamemodenames[7] = "team castle sweep";

	playerclassnames[0] = "fighter";
	playerclassnames[1] = "cleric";
	playerclassnames[2] = "mage";
	playerclassnames[3] = "heretic";
	playerclassnames[4] = "marine";
	playerclassnames[5] = "witchaven";
	playerclassnames[6] = "pig";
}
