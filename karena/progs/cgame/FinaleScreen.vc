//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class FinaleScreen : Window;

const float TEXTSPEED	= 0.1;
const float TEXTWAIT	= 7.0;

ClientGame ClGame;

int FinaleStage;
float FinaleTime;
float FinaleEndTime;

int fpage1;
int fpage2;

string FinaleText;

//==========================================================================
//
//  StartFinale
//
//==========================================================================

void StartFinale(name FinaleType)
{
	FinaleStage = 0;
	FinaleTime = 0.0;

	FinaleEndTime = 2.0;
	fpage1 = R_RegisterPic('finale1');
	if (ClGame.maxclients > 1)
	{
		fpage2 = R_RegisterPic('chessall');
	}
	else if (GetCvar('class') == 1)
	{
		fpage2 = R_RegisterPic('chessc');
	}
	else if (GetCvar('class') == 2)
	{
		fpage2 = R_RegisterPic('chessm');
	}

#ifdef FIXME
	S_StartSong("hall", P_GetCDEnd1Track(), false);	// don't loop the song
#else
	CmdBuf_AddText("music play hall\n");	// don't loop the song
#endif
}

//==========================================================================
//
//	Tick
//
//==========================================================================

void Tick(float DeltaTime)
{
	FinaleTime += DeltaTime;

	if (FinaleStage < 5 && FinaleTime >= FinaleEndTime)
	{
		FinaleTime = 0.0;
		FinaleStage++;
		switch (FinaleStage)
		{
		case 1:	// Text 1
			F_GetFinaleText('win1msg');
			break;
		case 2:	// Pic 2, Text 2
			F_GetFinaleText('win2msg');
			fpage1 = R_RegisterPic('finale2');
#ifdef FIXME
			S_StartSong("orb", P_GetCDEnd2Track(), false);
#else
			CmdBuf_AddText("music play orb\n");
#endif
			break;
		case 3:	// Pic 2 -- Fade out
			FinaleEndTime = 2.0;
			break;
		case 4:	// Pic 3 -- Fade in
			fpage1 = R_RegisterPic('finale3');
			FinaleEndTime = 2.0;
#ifdef FIXME
			S_StartSong("chess", P_GetCDEnd3Track(), true);
#else
			CmdBuf_AddText("music loop chess\n");
#endif
			break;
		case 5:	// Pic 3 , Text 3
			F_GetFinaleText('win3msg');
			break;
		}
	}
}

//==========================================================================
//
//  DrawWindow
//
//==========================================================================

void DrawWindow()
{
	F_DrawPic();
	switch (FinaleStage)
	{
	case 0:	// Fade in initial finale screen
		F_FadeIn();
		break;
	case 1:
		F_TextWrite();
		break;
	case 2:
		F_TextWrite();
		break;
	case 3:	// Fade screen out
		F_FadeOut();
		break;
	case 4:	// Fade in chess screen
		F_FadeIn();
		break;
	case 5:
		F_TextWrite();
		break;
	}
}

//===========================================================================
//
//  F_DrawPic
//
//===========================================================================

void F_DrawPic()
{
	SetVirtualScreen(320, 200);
	R_DrawPic(0, 0, fpage1);
	if (FinaleStage == 4 || FinaleStage == 5)
	{
		// Chess pic, draw the correct character graphic
		if (ClGame.maxclients > 1)
		{
			R_DrawPic(20, 0, fpage2);
		}
		else if (GetCvar('class'))
		{
			R_DrawPic(60, 0, fpage2);
		}
	}
	SetVirtualScreen(640, 480);
}

//==========================================================================
//
//  F_GetFinaleText
//
//==========================================================================

void F_GetFinaleText(name msgLumpName)
{
	FinaleText = LoadTextLump(msgLumpName);
	FinaleEndTime = itof(strlen(FinaleText)) * TEXTSPEED + TEXTWAIT;
}

//===========================================================================
//
//  F_TextWrite
//
//===========================================================================

void F_TextWrite()
{
	int count;

	// draw some of the text onto the screen
	count = ftoi((FinaleTime - 0.3) / TEXTSPEED);
	if (count < 0)
		count = 0;
	if (count > strlen(FinaleText))
		count = strlen(FinaleText);

	T_SetFont(font_small);
	T_SetAlign(hleft, vtop);
	DrawText(180, (FinaleStage == 5) ? 275 : 145, substr(FinaleText, 0, count));
}

//==========================================================================
//
//  F_FadeOut
//
//==========================================================================

void F_FadeOut()
{
	float fade = FinaleTime / FinaleEndTime;

	if (fade < 0.0)
		fade = 0.0;
	if (fade > 0.99)
		fade = 0.99;
	ShadeRect(0, 0, 640, 480, fade);
}

//==========================================================================
//
//  F_FadeIn
//
//==========================================================================

void F_FadeIn()
{
	float fade = 1.0 - FinaleTime / FinaleEndTime;

	if (fade < 0.0)
		fade = 0.0;
	if (fade > 0.99)
		fade = 0.99;
	ShadeRect(0, 0, 640, 480, fade);
}

//==========================================================================
//
//	VisibilityChanged
//
//==========================================================================

void VisibilityChanged(bool bNewVisibility)
{
	bTickEnabled = bNewVisibility;
}

defaultproperties
{
	bTickEnabled = true;
	Width = 640;
	Height = 480;
}
