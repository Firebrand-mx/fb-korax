//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**	        ##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id$
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class ClientGame : ClientGameBaseEx;

TitleScreen			GTitle;
ScoreBoardScreen	GScBoard;	// [CW]
IntermissionScreen	GImission;
FinaleScreen		GFinale;
LoadingScreen		GLoadingScreen;	// [CW]

MenuScreenTeamSelect	TeamSelectScreen;	//[CW]

LocalSoundQueue		Announcer;		// [CW]

int MenuPClass;
class<MenuScreen> SkillMenuType;

int pic_bordt;
int pic_bordb;
int pic_bordl;
int pic_bordr;
int pic_bordtl;
int pic_bordtr;
int pic_bordbl;
int pic_bordbr;

bool IsInGame;

//==========================================================================
//
//  RootWindowCreated
//
//==========================================================================

void RootWindowCreated()
{
	//[CW]
	CreateCvar('BodyQueSize', "32", CVAR_ARCHIVE | CVAR_SERVERINFO);
	CreateCvar('CorpseQueSize', "64", CVAR_ARCHIVE | CVAR_SERVERINFO);
	CreateCvar('BotsAutoSpawn', "0", CVAR_ARCHIVE);
	CreateCvar('TargetInfo', "1", CVAR_ARCHIVE | CVAR_USERINFO);
	CreateCvar('TeamAutoSelect', "0", CVAR_ARCHIVE | CVAR_SERVERINFO);
	CreateCvar('KeepTeamsEqual', "0", CVAR_ARCHIVE | CVAR_SERVERINFO);
	CreateCvar('FriendlyFire', "0", CVAR_ARCHIVE | CVAR_SERVERINFO);
	// [FB] For debugging path nodes
	CreateCvar('ShowPathNodes', "0", CVAR_SERVERINFO);
	CreateCvar('NoHUD', "0", CVAR_USERINFO);

	GTitle = TitleScreen(GRoot.NewChild(TitleScreen));
	GSBar = StatusBarScreen(GRoot.NewChild(StatusBarScreen));
	GScBoard = ScoreBoardScreen(GRoot.NewChild(ScoreBoardScreen));		// [CW]
	GImission = IntermissionScreen(GRoot.NewChild(IntermissionScreen));
	GFinale = FinaleScreen(GRoot.NewChild(FinaleScreen));
	GLoadingScreen = LoadingScreen(GRoot.NewChild(LoadingScreen));		// [CW]
	GLoadingScreen.Init();
	Announcer = LocalSoundQueue(SpawnObject(LocalSoundQueue));
	GTitle.ClGame = self;
	GSBar.ClGame = self;
	GSBar.Hide();

	/* scoreboard by [CW]	*/
	GScBoard.ClGame = self;
	GScBoard.Hide();

	GImission.ClGame = self;
	GImission.Hide();
	GFinale.ClGame = self;
	GFinale.Hide();
	GLoadingScreen.Hide();
}

//==========================================================================
//
//  Connected
//
//==========================================================================

void Connected()
{
	GTitle.Hide();
	GTitle.StopDemoLoop();
	GSBar.Show();
	GImission.Hide();
	GFinale.Hide();
	GLoadingScreen.Hide();

	IsInGame = true;
}

//==========================================================================
//
//  Disconnected
//
//==========================================================================

void Disconnected()
{
	GTitle.Show();
	GSBar.Hide();
	GScBoard.Hide();	// [CW]
	GImission.Hide();
	GFinale.Hide();
	
	IsInGame = false;
}

//==========================================================================
//
//  DemoPlaybackStarted
//
//==========================================================================

void DemoPlaybackStarted()
{
	GTitle.Hide();
	GSBar.Show();
	GImission.Hide();
	GFinale.Hide();
	GLoadingScreen.Hide();
}

//==========================================================================
//
//  DemoPlaybackStopped
//
//==========================================================================

void DemoPlaybackStopped()
{
	GTitle.Show();
	GSBar.Hide();
	GScBoard.Hide();	// [CW]
	GImission.Hide();
	GFinale.Hide();
	GLoadingScreen.Hide();
}

//==========================================================================
//
//  OnHostEndGame
//
//==========================================================================

void OnHostEndGame()
{
	GTitle.OnHostEndGame();
}

//==========================================================================
//
//  OnHostError
//
//==========================================================================

void OnHostError()
{
	GLoadingScreen.Hide();
	GTitle.OnHostError();
}

//==========================================================================
//
//  LoadingScreenStart
//
//==========================================================================

void LoadingScreenStart(name MapName, string MapTitle)
{
	ForceMenuOff();
	GTitle.Hide();
	GLoadingScreen.MapName = MapName;
	GLoadingScreen.MapTitle = MapTitle;
	GLoadingScreen.Show();
}

//==========================================================================
//
//  StatusBarStartMap
//
//==========================================================================

void StatusBarStartMap()
{
	StatusBarScreen(GSBar).cl = Player(cl);
	GSBar.Show();
	GSBar.StartMap();
	GScBoard.StartMap();	// [CW]
	GImission.Hide();
	GFinale.Hide();
	GLoadingScreen.Hide();
}

//==========================================================================
//
//  StatusBarDrawer
//
//==========================================================================

void StatusBarDrawer(int sb_view)
{
	GSBar.SB_Drawer(sb_view);
}

//==========================================================================
//
//  StatusBarUpdateWidgets
//
//==========================================================================

void StatusBarUpdateWidgets(float DeltaTime)
{
	GSBar.SB_UpdateWidgets();

	if (Announcer)
		Announcer.Continue(DeltaTime);
}

//==========================================================================
//
//  IintermissionStart
//
//==========================================================================

void IintermissionStart()
{
	GSBar.Hide();
	GScBoard.Hide();	// [CW]
	GImission.Show();
	GImission.Start();
	GFinale.Hide();
	GLoadingScreen.Hide();
}

//==========================================================================
//
//  StartFinale
//
//==========================================================================

void StartFinale(name FinaleType)
{
	GSBar.Hide();
	GScBoard.Hide();	// [CW]
	GImission.Hide();
	GFinale.Show();
	GFinale.StartFinale(FinaleType);
	GLoadingScreen.Hide();
}

//===========================================================================
//
//  FinaleResponder
//
//===========================================================================

bool FinaleResponder(event_t * event)
{
	return false;
}

//==========================================================================
//
//  DeactivateMenu
//
//==========================================================================

void DeactivateMenu()
{
	ForceMenuOff();
}

//==========================================================================
//
//  MenuResponder
//
//==========================================================================

bool MenuResponder(event_t * event)
{
	if (!CurrentMenuScreen && !GLoadingScreen.Visible)
	{
		// Pop-up menu?
		if (event->type == ev_keydown && event->data1 == K_ESCAPE)
		{
			PushMenuScreen(SpawnMenu(MenuScreenMain));
			return true;
		}
	}
	return false;
}

//==========================================================================
//
//  MenuActive
//
//==========================================================================

bool MenuActive()
{
	return CurrentMenuScreen != none;
}

//==========================================================================
//
//	SetMenu
//
//==========================================================================

void SetMenu(string Name)
{
	if (GLoadingScreen.Visible)
		return;

	if (!stricmp(Name, "Main"))
	{
		PushMenuScreen(SpawnMenu(MenuScreenMain));
		return;
	}
	if (!stricmp(Name, "PSetup"))
	{
		PushMenuScreen(SpawnMenu(MenuScreenPlayerSetup));
		return;
	}
	if (!stricmp(Name, "Options"))
	{
		PushMenuScreen(SpawnMenu(MenuScreenOptions));
		return;
	}
	if (!stricmp(Name, "Controls"))
	{
		PushMenuScreen(SpawnMenu(MenuScreenControls));
		return;
	}
	if (!stricmp(Name, "Controls2"))
	{
		PushMenuScreen(SpawnMenu(MenuScreenControls2));
		return;
	}
	if (!stricmp(Name, "Mouse"))
	{
		PushMenuScreen(SpawnMenu(MenuScreenMouseOptions));
		return;
	}
	if (!stricmp(Name, "Resolution"))
	{
		PushMenuScreen(SpawnMenu(MenuScreenScreenResolution));
		return;
	}
	if (!stricmp(Name, "Video"))
	{
		PushMenuScreen(SpawnMenu(MenuScreenVideoOptions));
		return;
	}
	if (!stricmp(Name, "Sound"))
	{
		PushMenuScreen(SpawnMenu(MenuScreenSoundOptions));
		return;
	}
	if (!stricmp(Name, "Help"))
	{
		PushMenuScreen(SpawnMenu(MenuScreenHelp));
		return;
	}
	if (!stricmp(Name, "Quit"))
	{
		menu_quit();
		return;
	}
	PushMenuScreen(SpawnMenu(MenuScreenMain));
}

//==========================================================================
//
//  menu_quit
//
//==========================================================================

void menu_quit()
{
	LocalSound('Chat');
	MessageBoxStartMessage("ARE YOU SURE YOU WANT TO QUIT?", MB_Quit, true);
}

//==========================================================================
//
//  QuitResponse
//
//==========================================================================

void QuitResponse(int ch)
{
	if (ch != K_y)
		return;

	CmdBuf_AddText("Quit\n");
}

//==========================================================================
//
//  NewGame
//
//==========================================================================

void NewGame(int SkillLevel)
{
	SetCvar('Skill', SkillLevel);
	SetCvar('Class', MenuPClass);

	CmdBuf_AddText("Disconnect\n");
	CmdBuf_AddText("MaxPlayers 1\n");
	CmdBuf_AddText("Map %n\n", MenuStartMap);

	ForceMenuOff();
}

//==========================================================================
//
//  InitBorder
//
//==========================================================================

void InitBorder()
{
	pic_bordt = R_RegisterPic('bordt');
	pic_bordb = R_RegisterPic('bordb');
	pic_bordl = R_RegisterPic('bordl');
	pic_bordr = R_RegisterPic('bordr');
	pic_bordtl = R_RegisterPic('bordtl');
	pic_bordtr = R_RegisterPic('bordtr');
	pic_bordbl = R_RegisterPic('bordbl');
	pic_bordbr = R_RegisterPic('bordbr');
}

//==========================================================================
//
//  DrawBorder
//
//  Draws border
//
//==========================================================================

void DrawBorder(int x, int y, int w, int h)
{
	int i;

	if (!pic_bordb)
	{
		InitBorder();
	}

	for (i = 0; i < w; i += 16)
		GRoot.DrawPic(x + i, y - 4, pic_bordt);

	for (i = 0; i < w; i += 16)
		GRoot.DrawPic(x + i, y + h, pic_bordb);

	for (i = 0; i < h; i += 16)
		GRoot.DrawPic(x - 4, y + i, pic_bordl);

	for (i = 0; i < h; i += 16)
		GRoot.DrawPic(x + w, y + i, pic_bordr);

	// Draw beveled edge.
	GRoot.DrawPic(x - 4, y - 4, pic_bordtl);
	GRoot.DrawPic(x + w, y - 4, pic_bordtr);
	GRoot.DrawPic(x - 4, y + h, pic_bordbl);
	GRoot.DrawPic(x + w, y + h, pic_bordbr);
}

//==========================================================================
//
//  DrawViewBorder
//
//==========================================================================

void DrawViewBorder(int x, int y, int w, int h)
{
	GRoot.FillRectWithFlat(0, 0, 640, 480/* - 39*/, 'f_022');
	DrawBorder(x, y, w, h);
}

//==========================================================================
//
//  TeamSelect
//
//==========================================================================

void TeamSelect(int maxTeams, int activeTeams, int curSelection,
	int Col1, int Count1, int Col2, int Count2)
{
	bool created;
	created = false;

	if (TeamSelectScreen == none)
	{
		TeamSelectScreen = MenuScreenTeamSelect(SpawnMenu(MenuScreenTeamSelect));
		created = true;
	}
	TeamSelectScreen.maxTeams = maxTeams;
	TeamSelectScreen.activeTeams = activeTeams;

	TeamSelectScreen.Teams[0] = Col1;
	TeamSelectScreen.Teams[1] = Col2;
	TeamSelectScreen.Counts[0] = Count1;
	TeamSelectScreen.Counts[1] = Count2;

	if (created)
	{
		TeamSelectScreen.curSelection = curSelection;
		TeamSelectScreen.Ready = true;
		TeamSelectScreen.CreateChoices();
		PushMenuScreen(TeamSelectScreen);
	}
	else
		TeamSelectScreen.ReInit();
}

//==========================================================================
//
//  PlayAnouncerSound
//
//==========================================================================

void PlayAnouncerSound(int sound, bool put_in_queue, float delay)
{
	name sndName;

	switch(sound)
	{
	case HexenDefs::lsid_kth_an_awaiting: sndName = 'KTH_AwaitingForHeresiarch'; break;
	case HexenDefs::lsid_kth_an_ishere: sndName = 'KTH_HeresiarchIsHere'; break;
	case HexenDefs::lsid_kth_an_hasreborn: sndName = 'KTH_HeresiarchIsReborn'; break;
	case HexenDefs::lsid_kth_an_isdown: sndName = 'KTH_HeresiarchIsDown'; break;
	case HexenDefs::lsid_kth_mus_death: sndName = 'KTH_Mus_Death'; break;
	case HexenDefs::lsid_kth_mus_birth: sndName = 'KTH_Mus_Birth'; break;
	case HexenDefs::lsid_gen_an_Blue_Leads: sndName = 'Gen_An_Blue_Leads'; break;
	case HexenDefs::lsid_gen_an_Red_Leads: sndName = 'Gen_An_Red_Leads'; break;
	case HexenDefs::lsid_gen_an_Gold_Leads: sndName = 'Gen_An_Gold_Leads'; break;
	case HexenDefs::lsid_gen_an_Green_Leads: sndName = 'Gen_An_Green_Leads'; break;
	case HexenDefs::lsid_gen_an_Lime_Leads: sndName = 'Gen_An_Lime_Leads'; break;
	case HexenDefs::lsid_gen_an_Gray_Leads: sndName = 'Gen_An_Gray_Leads'; break;
	case HexenDefs::lsid_gen_an_Brown_Leads: sndName = 'Gen_An_Brown_Leads'; break;
	case HexenDefs::lsid_gen_an_Magenta_Leads: sndName = 'Gen_An_Magenta_Leads'; break;
	case HexenDefs::lsid_gen_an_Blue_Lost_Lead: sndName = 'Gen_An_Blue_Lost_Lead'; break;
	case HexenDefs::lsid_gen_an_Red_Lost_Lead: sndName = 'Gen_An_Red_Lost_Lead'; break;
	case HexenDefs::lsid_gen_an_Gold_Lost_Lead: sndName = 'Gen_An_Gold_Lost_Lead'; break;
	case HexenDefs::lsid_gen_an_Green_Lost_Lead: sndName = 'Gen_An_Green_Lost_Lead'; break;
	case HexenDefs::lsid_gen_an_Lime_Lost_Lead: sndName = 'Gen_An_Lime_Lost_Lead'; break;
	case HexenDefs::lsid_gen_an_Gray_Lost_Lead: sndName = 'Gen_An_Gray_Lost_Lead'; break;
	case HexenDefs::lsid_gen_an_Brown_Lost_Lead: sndName = 'Gen_An_Brown_Lost_Lead'; break;
	case HexenDefs::lsid_gen_an_Magenta_Lost_Lead: sndName = 'Gen_An_Magenta_Lost_Lead'; break;
	case HexenDefs::lsid_gen_an_teams_are_tied: sndName = 'Gen_An_TeamsTied'; break;
	case HexenDefs::lsid_gen_an_y_lead: sndName = 'Gen_An_Lead'; break;
	case HexenDefs::lsid_gen_an_y_lost_the_lead: sndName = 'Gen_An_ULostLead'; break;
	case HexenDefs::lsid_gen_an_y_tied_ftl: sndName = 'Gen_An_TiedLead'; break;
	case HexenDefs::lsid_gen_an_doublekill: sndName = 'Gen_An_DoubleKill'; break;
	case HexenDefs::lsid_gen_an_tripplekill: sndName = 'Gen_An_TrippleKill'; break;
	case HexenDefs::lsid_gen_an_quadruplekill: sndName = 'Gen_An_QuadrupleKill'; break;
	case HexenDefs::lsid_gen_an_multikill: sndName = 'Gen_An_MultiKill'; break;
	case HexenDefs::lsid_gen_an_impossiblekill: sndName = 'Gen_An_ImpossibleKill'; break;
	case HexenDefs::lsid_gen_an_goodhunt: sndName = 'Gen_An_GoodHunt'; break;
	case HexenDefs::lsid_gen_an_massacre: sndName = 'Gen_An_Massacre'; break;
	case HexenDefs::lsid_gen_an_devastation: sndName = 'Gen_An_Devastation'; break;
	case HexenDefs::lsid_gen_an_elimination: sndName = 'Gen_An_Elimination'; break;
	case HexenDefs::lsid_gen_an_killingspree: sndName = 'Gen_An_KillingSpree'; break;
	case HexenDefs::lsid_gen_an_fragsmaster: sndName = 'Gen_An_FragMaster'; break;
	case HexenDefs::lsid_gen_an_accuracy: sndName = 'Gen_An_Accuracy'; break;
	case HexenDefs::lsid_ctf_fanfare1: sndName = 'CTF_Fanfare1'; break;
	case HexenDefs::lsid_ctf_fanfare3: sndName = 'CTF_Fanfare3'; break;
	case HexenDefs::lsid_ctf_fanfare4: sndName = 'CTF_Fanfare4'; break;
	case HexenDefs::lsid_ctf_fanfare6: sndName = 'CTF_Fanfare6'; break;
	case HexenDefs::lsid_ctf_fanfare8: sndName = 'CTF_Fanfare8'; break;
	case HexenDefs::lsid_ctf_fanfare11: sndName = 'CTF_Fanfare11'; break;
	
	default: sndName = 'misc/chat'; break;
	}

	if (put_in_queue && Announcer)
		Announcer.QueueSound(sndName, delay);
	else
	{
		LocalSound(sndName);
	}
}

//==========================================================================
//
//  ShowScoreBoard
//
//==========================================================================

void ShowScoreBoard(bool Show)
{
	if (Show)
		GScBoard.Show();
	else
		GScBoard.Hide();
}

defaultproperties
{
	sb_height = 39;
	MsgBoxFlat = 'f_019';
	BigSelectorXOffset = -28;
	BigSelectorYOffset = -1;
	BigSelectorAnimSpeed = 2;
	BigSelectorAnimFrames[0] = 'm_slctr1';
	BigSelectorAnimFrames[1] = 'm_slctr2';
}
