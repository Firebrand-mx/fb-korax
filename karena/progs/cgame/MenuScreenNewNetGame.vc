//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**		##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id$
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class MenuScreenNewNetGame : MenuScreen;

array<name>			MapLumpNames;

MenuChoiceEnum		Players;
MenuChoiceEnum		Bots;
MenuChoiceEnum		Monsters;
MenuChoiceEnum		DeathMatch;
MenuChoiceEnum		Skill;
MenuChoiceEnum		TimeLimit;
MenuChoiceEnum		Level;
MenuTextButton		ServSettings;

//==========================================================================
//
//	CreateChoices
//
//==========================================================================

void CreateChoices()
{
	MenuTextButton		Btn;

	Btn = MenuTextButton(NewChild(MenuSmallTextButton));
	Btn.SetOrigin(ChoicesStartX, ChoicesStartY);
	Btn.Text = "Start Game";
	Btn.Activated = ActivateStartNewGame;
	ChoicesStartY += Btn.Height;

	ServSettings = MenuTextButton(NewChild(MenuSmallTextButton));
	ServSettings.SetOrigin(ChoicesStartX, ChoicesStartY);
	ServSettings.Text = "Server Settings";
	ServSettings.Activated = ActivateServerSettings;
	ChoicesStartY += ServSettings.Height;

	Players = MenuChoiceEnum(NewChild(MenuChoiceEnum));
	Players.SetOrigin(ChoicesStartX, ChoicesStartY);
	Players.Text = "Max players";
	Players.AddItem("2");
	Players.AddItem("3");
	Players.AddItem("4");
	Players.AddItem("5");
	Players.AddItem("6");
	Players.AddItem("7");
	Players.AddItem("8");
	Players.SetInitialValue(6);
	ChoicesStartY += Players.Height;

	Bots = MenuChoiceEnum(NewChild(MenuChoiceEnum));
	Bots.SetOrigin(ChoicesStartX, ChoicesStartY);
	Bots.Text = "Bots";
	Bots.AddItem("0");
	Bots.AddItem("1");
	Bots.AddItem("2");
	Bots.AddItem("3");
	Bots.AddItem("4");
	Bots.AddItem("5");
	Bots.AddItem("6");
	Bots.AddItem("7");
	ChoicesStartY += Bots.Height;

	Monsters = MenuChoiceEnum(NewChild(MenuChoice_OnOff));
	Monsters.SetOrigin(ChoicesStartX, ChoicesStartY);
	Monsters.Text = "Monsters";
	ChoicesStartY += Monsters.Height;

	DeathMatch = MenuChoiceEnum(NewChild(MenuChoiceEnum));
	DeathMatch.SetOrigin(ChoicesStartX, ChoicesStartY);
	DeathMatch.Text = "Game type";
	DeathMatch.AddItem("Deathmatch");
	DeathMatch.AddItem("Kill the Heresiarch");
	DeathMatch.AddItem("Castle Sweep");
	DeathMatch.AddItem("XMas Havoc");
	DeathMatch.AddItem("Team Deathmatch");
	DeathMatch.AddItem("Capture The Flag");
	DeathMatch.AddItem("Domination");
	DeathMatch.AddItem("Team Castle Sweep");
	DeathMatch.AddItem("Football");
	DeathMatch.SetInitialValue(HexenDefs::game_dm - 1);
	DeathMatch.ValueChanging = ChangeDeathmatch;
	ChoicesStartY += DeathMatch.Height;

	Skill = MenuChoiceEnum(NewChild(MenuChoiceEnum));
	Skill.SetOrigin(ChoicesStartX, ChoicesStartY);
	Skill.Text = "Skill";
	Skill.AddItem("Baby");
	Skill.AddItem("Easy");
	Skill.AddItem("Normal");
	Skill.AddItem("Hard");
	Skill.AddItem("Nightmare");
	Skill.SetInitialValue(2);
	ChoicesStartY += Skill.Height;

	TimeLimit = MenuChoiceEnum(NewChild(MenuChoiceEnum));
	TimeLimit.SetOrigin(ChoicesStartX, ChoicesStartY);
	TimeLimit.Text = "Time limit";
	TimeLimit.AddItem("0");
	TimeLimit.AddItem("5");
	TimeLimit.AddItem("10");
	TimeLimit.AddItem("15");
	TimeLimit.AddItem("20");
	TimeLimit.AddItem("25");
	TimeLimit.AddItem("30");
	TimeLimit.AddItem("35");
	TimeLimit.AddItem("40");
	TimeLimit.AddItem("45");
	TimeLimit.AddItem("50");
	TimeLimit.AddItem("55");
	TimeLimit.AddItem("60");
	ChoicesStartY += TimeLimit.Height;

	Level = MenuChoiceEnum(NewChild(MenuChoiceEnum));
	Level.SetOrigin(ChoicesStartX, ChoicesStartY);
	Level.Text = "Level";
	ChoicesStartY += Level.Height;

	InitMonsters(HexenDefs::game_dm - 1);
	InitMapList(HexenDefs::game_dm - 1);
}

//==========================================================================
//
//	InitMonsters
//
//==========================================================================

void InitMonsters(int GameType)
{
	switch (GameType + 1)
	{
	case HexenDefs::game_sweepteam: //	Team Castle Sweep
	case HexenDefs::game_sweep:	//	Castle Sweep
		Monsters.Value = 1;
		break;
	case HexenDefs::game_kth:
	case HexenDefs::game_dm:	//	Deathmatch
	case HexenDefs::game_xmas:
		Monsters.Value = 0;
		break;
	case HexenDefs::game_dmteam:	//	Team deathmatch.
	case HexenDefs::game_ctf: //	Capture the Flag
	case HexenDefs::game_domination:
	case HexenDefs::game_football: //	Football
		Monsters.Value = 0;
		break;
	}
}

//==========================================================================
//
//	ChangeDeathmatch
//
//==========================================================================

bool ChangeDeathmatch(Object Sender, int newValue)
{
	if (Level)
		InitMapList(newValue);
	InitMonsters(newValue);
	return true;
}

//==========================================================================
//
//	InitMapList
//
// [CW] Load and parse maps table for selected game mode
//
//==========================================================================

void InitMapList(int GameType)
{
	ScriptsParser sc = ScriptsParser(SpawnObject(ScriptsParser));

	switch (GameType + 1)
	{
	case HexenDefs::game_sweep:	//	Castle Sweep
		sc.OpenLumpName('gm_swp');
		break;
	case HexenDefs::game_sweepteam:	//	Team Castle Sweep
		sc.OpenLumpName('gm_tswp');
		break;
	case HexenDefs::game_kth: //		Kill the Heresiarch
		sc.OpenLumpName('gm_kth');
		break;
	case HexenDefs::game_dm:	//	Deathmatch
		sc.OpenLumpName('gm_dm');
		break;
	case HexenDefs::game_dmteam:	//	Team deathmatch.
		sc.OpenLumpName('gm_tdm');
		break;
	case HexenDefs::game_ctf: //	Capture the Flag
		sc.OpenLumpName('gm_ctf');
		break;
	case HexenDefs::game_domination: //	Domination
		sc.OpenLumpName('gm_dom');
		break;
	case HexenDefs::game_football: //	Football
		sc.OpenLumpName('gm_ftb');
		break;
	case HexenDefs::game_xmas: // XMas Havoc
		sc.OpenLumpName('gm_xmas');
		break;
	default:
		Error("MenuChoice_Level::InitMapList : unknown game type %i", GameType + 1);
		return;
	}

	if (sc.AtEnd())
	{
		Error("MenuChoice_Level::InitMapList : maps table missing for game type %i", GameType + 1);
		return;
	}

	//
	// Begin parsing...
	//
	Level.EnumNames.Num = 0;
	MapLumpNames.Num = 0;

	while (!sc.AtEnd())
	{
		sc.ExpectString();
		if (StrEndsWith(sc.String, "*"))
		{
			AddMapsToList(substr(sc.String, 0, strlen(sc.String) - 1), true);
		}
		else
		{
			AddMapsToList(sc.String, false);
		}
	}
	sc.Destroy();

	Level.SetInitialValue(0);
}

//==========================================================================
//
//	AddMapsToList
//
//==========================================================================

void AddMapsToList(string mapLumpName, bool useAsPrefix)
{
	int i, count, len;
	string testmapname;

	mapLumpName = strlwr(mapLumpName);
	for (i = 0, count = 0; i < 99; i++)
	{
		// If the lump found after any others is the first possible map, it means
		// no appropriate lump may be found any more, so cycle should end here 
		if (i > 0 && P_GetMapLumpName(i) == P_GetMapLumpName(0))
			break;

		testmapname = va("%n", P_GetMapLumpName(i));
		len = strlen(mapLumpName);
		if (strlen(testmapname) < len)
			continue;

		if (useAsPrefix ? StrStartsWith(testmapname, mapLumpName) :
			!strcmp(testmapname, mapLumpName))
		{
			count++;
			MapLumpNames.Num = MapLumpNames.Num + 1;
			MapLumpNames[MapLumpNames.Num - 1] = P_GetMapLumpName(i);
			Level.AddItem(P_GetMapName(i));
			
			if (!useAsPrefix)
				break;
		}
	}
}

//==========================================================================
//
//	ActivateStartNewGame
//
//==========================================================================

void ActivateStartNewGame(Object Sender)
{
	CmdBuf_AddText("Disconnect\n");
	CmdBuf_AddText("MaxPlayers %d\n", Players.Value + 2);
	CmdBuf_AddText("BotsAutoSpawn %d\n", Bots.Value);
	CmdBuf_AddText("NoMonsters %d\n", !Monsters.Value);
	CmdBuf_AddText("DeathMatch %d\n", DeathMatch.Value + 1);
	CmdBuf_AddText("TimeLimit %d\n", TimeLimit.Value * 5);
	CmdBuf_AddText("Skill %d\n", Skill.Value);
	ClientGame(ClGame).LoadingScreenStart(MapLumpNames[Level.Value], Level.EnumNames[Level.Value]);
}

//==========================================================================
//
//	ActivateServerSettings
//
//==========================================================================

void ActivateServerSettings(Object Sender)
{
	ClGame.PushMenuScreen(ClGame.SpawnMenu(MenuScreenServerSettings));
}

defaultproperties
{
	ChoicesStartX = 128;
	ChoicesStartY = 40;
	SelectorType = MenuSelector_SmallRight;
	Title = "NEW GAME";
}
