//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**		##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id$
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class MenuScreenNewNetGame : MenuScreen;

array<name>			MapLumpNames;
// [CW] an order of game modes in list
int					GameTypes[HexenDefs::NUMGAMES - HexenDefs::GAMEFIRSTUSED];

//MenuChoiceEnum	Players;		// not needed as variable
//MenuChoiceEnum	Bots;			// not needed as variable
MenuChoiceEnum		Monsters;
//MenuChoiceEnum	DeathMatch;		// not needed as variable
//MenuChoiceEnum	Skill;			// not needed as variable
MenuChoiceEnum		ScoreLimit;
MenuChoiceEnum		TimeLimit;
MenuChoiceEnum		Level;
//MenuTextButton	ServSettings;	// not needed as variable


int					LevelPic;		// level shot thumbnail
picinfo_t			LevelPicInfo;
string				LevelInfo;		// level description
int					ChoicesHeight;


//==========================================================================
//
//	CreateChoices
//
//==========================================================================

void CreateChoices()
{
	int i;
	MenuTextButton		Btn;
	MenuChoiceEnum		Enum;
	int					currentY;

	currentY = ChoicesStartY;

	Btn = MenuTextButton(NewChild(MenuSmallTextButton));
	Btn.SetOrigin(ChoicesStartX, currentY);
	Btn.Text = "Start Game";
	Btn.Activated = ActivateStartNewGame;
	currentY += Btn.Height;

	Btn = MenuTextButton(NewChild(MenuSmallTextButton));
	Btn.SetOrigin(ChoicesStartX, currentY);
	Btn.Text = "Server Settings";
	Btn.Activated = ActivateServerSettings;
	currentY += Btn.Height;

	/* Players = MenuChoiceEnum(NewChild(MenuChoiceEnum));
	Players.SetOrigin(ChoicesStartX, ChoicesStartY);
	Players.Text = "Max players";
	Players.AddItem("2");
	Players.AddItem("3");
	Players.AddItem("4");
	Players.AddItem("5");
	Players.AddItem("6");
	Players.AddItem("7");
	Players.AddItem("8");
	Players.SetInitialValue(6);
	ChoicesStartY += Players.Height;*/

	Enum = MenuChoiceEnum(NewChild(MenuChoiceEnum));
	Enum.SetOrigin(ChoicesStartX, currentY);
	Enum.Text = "Max players";
	Enum.AddItem("1");
	Enum.AddItem("2");
	Enum.AddItem("3");
	Enum.AddItem("4");
	Enum.AddItem("5");
	Enum.AddItem("6");
	Enum.AddItem("7");
	Enum.AddItem("8");
	Enum.SetInitialValue(7);
	Enum.ValueChanging = ChangeMaxPlayers;
	currentY += Enum.Height;

	Enum = MenuChoiceEnum(NewChild(MenuChoiceEnum));
	Enum.SetOrigin(ChoicesStartX, currentY);
	Enum.Text = "Skill";
	for (i = 0; i < P_GetNumSkills(); i++)
	{
		Enum.AddItem(P_GetSkillDef(i)->Name);
	}
	Enum.SetInitialValue(2);
	Enum.ValueChanging = ChangeSkill;
	currentY += Enum.Height;

	Enum = MenuChoiceEnum(NewChild(MenuChoiceEnum));
	Enum.SetOrigin(ChoicesStartX, currentY);
	Enum.Text = "Bots";
	Enum.AddItem("0");
	Enum.AddItem("1");
	Enum.AddItem("2");
	Enum.AddItem("3");
	Enum.AddItem("4");
	Enum.AddItem("5");
	Enum.AddItem("6");
	Enum.AddItem("7");
	Enum.SetInitialValue(0);
	Enum.ValueChanging = ChangeBots;
	currentY += Enum.Height;

	Monsters = MenuChoiceEnum(NewChild(MenuChoice_OnOff));
	Monsters.SetOrigin(ChoicesStartX, currentY);
	Monsters.Text = "Monsters";
	Monsters.ValueChanging = ChangeMonsters;
	currentY += Monsters.Height;

	Enum = MenuChoiceEnum(NewChild(MenuChoiceEnum));
	Enum.SetOrigin(ChoicesStartX, currentY);
	Enum.Text = "Game type";
	/* // [FB] The order here should be the same as in HexenDefs.vc
	DeathMatch.AddItem("Deathmatch");
	DeathMatch.AddItem("Kill the Heresiarch");
	DeathMatch.AddItem("Castle Sweep");
	DeathMatch.AddItem("XMas Havoc");
	DeathMatch.AddItem("Team Deathmatch");
	DeathMatch.AddItem("Capture The Flag");
	DeathMatch.AddItem("Domination");
	DeathMatch.AddItem("Team Castle Sweep");
	DeathMatch.AddItem("Football");
	DeathMatch.SetInitialValue(0);*/
	for (i = 0; i < HexenDefs::NUMGAMES - HexenDefs::GAMEFIRSTUSED; i++)
	{
		switch (GameTypes[i])
		{
		case HexenDefs::game_dm:
			Enum.AddItem("Deathmatch"); break;
		case HexenDefs::game_kth:
			Enum.AddItem("Kill the Heresiarch"); break;
		case HexenDefs::game_sweep:
			Enum.AddItem("Castle Sweep"); break;
		case HexenDefs::game_xmas:
			Enum.AddItem("XMas Havoc"); break;
		case HexenDefs::game_dmteam:
			Enum.AddItem("Team Deathmatch"); break;
		case HexenDefs::game_ctf:
			Enum.AddItem("Capture The Flag"); break;
		case HexenDefs::game_domination:
			Enum.AddItem("Domination"); break;
		case HexenDefs::game_sweepteam:
			Enum.AddItem("Team Castle Sweep"); break;
		case HexenDefs::game_football:
			Enum.AddItem("Football"); break;
		}
	}
	Enum.SetInitialValue(0);
	Enum.ValueChanging = ChangeDeathmatch;
	currentY += Enum.Height;

	/* Skill = MenuChoiceEnum(NewChild(MenuChoiceEnum));
	Skill.SetOrigin(ChoicesStartX, ChoicesStartY);
	Skill.Text = "Skill";
	for (i = 0; i < P_GetNumSkills(); i++)
	{
		Skill.AddItem(P_GetSkillDef(i)->Name);
	}
	Skill.SetInitialValue(2);
	ChoicesStartY += Skill.Height;*/

	ScoreLimit = MenuChoiceEnum(NewChild(MenuChoiceEnum));
	ScoreLimit.SetOrigin(ChoicesStartX, currentY);
	ScoreLimit.Text = "Score limit";
	ScoreLimit.ValueChanging = ChangeScoreLimit;
	currentY += ScoreLimit.Height;

	TimeLimit = MenuChoiceEnum(NewChild(MenuChoiceEnum));
	TimeLimit.SetOrigin(ChoicesStartX, currentY);
	TimeLimit.Text = "Time limit";
	TimeLimit.AddItem("no limit");
	for (i = 1; i <= 12; i++)
	{
		TimeLimit.AddItem(va("%i", i * 5));
	}
	TimeLimit.ValueChanging = ChangeTimeLimit;
	currentY += TimeLimit.Height;

	Level = MenuChoiceEnum(NewChild(MenuChoiceEnum));
	Level.SetOrigin(ChoicesStartX, currentY);
	Level.Text = "Level";
	Level.ValueChanging = ChangeLevel;
	currentY += Level.Height;


	ChangeMaxPlayers(none, 7);
	ChangeSkill(none, 2);
	ChangeDeathmatch(none, 0);
	ChangeBots(none, 0);
	ChangeTimeLimit(none, TimeLimit.Value);

	ChoicesHeight = currentY - ChoicesStartY;
}

//==========================================================================
//
//	OnDraw
//
//==========================================================================

void OnDraw()
{
	int x = 300;
	int y = 16;

	//ShadeRect(4, ChoicesStartY - 8, 320, ChoicesHeight + 16, GetCvarF('menu_darkening'));
	FillRectWithFlat(4, FirstChild.Y - 8, 320,
		ChoicesStartY - FirstChild.Y + ChoicesHeight + 16, 'kaf_012');

	FillRectWithFlat(x - 8, y - 8, 336, 480 - (y - 8) - 8, 'kaf_010');
	//ShadeRect(4, y, 616/* 320*/, 464 - (y - 8) - 8/* ChoicesHeight + 16*/, GetCvarF('menu_darkening'));

	if (LevelPic)
	{	
		R_DrawPic(x, y, LevelPic);
		y += LevelPicInfo.height + 16;
	}

	SetFont('smallfont');
	SetTextAlign(hleft, vtop);
	DrawText(x, y, LevelInfo);
}

//==========================================================================
//
//	ActivateStartNewGame
//
//==========================================================================

void ActivateStartNewGame(Object Sender)
{
	CmdBuf_AddText("Disconnect\n");
	//CmdBuf_AddText("MaxPlayers %d\n", Players.Value + 2);
	//CmdBuf_AddText("BotsAutoSpawn %d\n", Bots.Value);
	//CmdBuf_AddText("NoMonsters %d\n", !Monsters.Value);
	//CmdBuf_AddText("DeathMatch %d\n", GameTypes[DeathMatch.Value]);
	//CmdBuf_AddText("ScoreLimit %d\n", ScoreLimit.Value * 5);
	//CmdBuf_AddText("TimeLimit %d\n", TimeLimit.Value * 5);
	//CmdBuf_AddText("Skill %d\n", Skill.Value);
	ClientGame(ClGame).LoadingScreenStart(MapLumpNames[Level.Value], Level.EnumNames[Level.Value]);
}

//==========================================================================
//
//	ActivateServerSettings
//
//==========================================================================

void ActivateServerSettings(Object Sender)
{
	ClGame.PushMenuScreen(ClGame.SpawnMenu(MenuScreenServerSettings));
}

//==========================================================================
//
//	ChangeMaxPlayers
//
//==========================================================================

bool ChangeMaxPlayers(Object Sender, int newValue)
{
	CmdBuf_AddText("MaxPlayers %d\n", newValue + 1);
	return true;
}

//==========================================================================
//
//	ChangeSkill
//
//==========================================================================

bool ChangeSkill(Object Sender, int newValue)
{
	SetCvar('Skill', newValue);
	return true;
}

//==========================================================================
//
//	ChangeBots
//
//==========================================================================

bool ChangeBots(Object Sender, int newValue)
{
	SetCvar('BotsAutoSpawn', newValue);
	return true;
}

//==========================================================================
//
//	ChangeMonsters
//
//==========================================================================

bool ChangeMonsters(Object Sender, int newValue)
{
	SetCvar('NoMonsters', !newValue);
	return true;
}

//==========================================================================
//
//	ChangeDeathmatch
//
//==========================================================================

bool ChangeDeathmatch(Object Sender, int newValue)
{
	dprint("ChangeDeathmatch : newVal = %i, GameType = %i", newValue, GameTypes[newValue]);
	CmdBuf_AddText("DeathMatch %d\n", GameTypes[newValue]);
	InitMapList(GameTypes[newValue]);
	InitScoreLimit(GameTypes[newValue]);
	InitMonsters(GameTypes[newValue]);
	return true;
}

//==========================================================================
//
//	ChangeScoreLimit
//
//==========================================================================

bool ChangeScoreLimit(Object Sender, int newValue)
{
	SetCvar('ScoreLimit', newValue);
	return true;
}

//==========================================================================
//
//	ChangeTimeLimit
//
//==========================================================================

bool ChangeTimeLimit(Object Sender, int newValue)
{
	SetCvar('TimeLimit', newValue * 5);
	return true;
}

//==========================================================================
//
//	ChangeLevel
//
//==========================================================================

bool ChangeLevel(Object Sender, int newValue)
{
	string picname = va("%nth", MapLumpNames[newValue]);
	LevelPic = R_RegisterPic(StrToName(picname));
	if (LevelPic)
		R_GetPicInfo(LevelPic, &LevelPicInfo);
	string lvlname = strlwr(StrReplace(Level.EnumNames[newValue], " ", ""));
	lvlname = strlwr(StrReplace(lvlname, ",", ""));
	lvlname = strlwr(StrReplace(lvlname, ".", ""));
	lvlname = strlwr(StrReplace(lvlname, "!", ""));
	lvlname = strlwr(StrReplace(lvlname, "?", ""));
	LevelInfo = GetLangString(StrToName(va("%s_info", lvlname)));
	LevelInfo = SplitTextWithNewlines(LevelInfo, 320);
	return true;
}

//==========================================================================
//
//	InitMapList
//
// [CW] Load and parse maps table for selected game mode
//
//==========================================================================

void InitMapList(int GameType)
{
	ScriptsParser sc = ScriptsParser(SpawnObject(ScriptsParser));

	switch (GameType)
	{
	case HexenDefs::game_dm:	//	Deathmatch
		sc.OpenLumpName('gm_dm');
		break;
	case HexenDefs::game_dmteam:	//	Team deathmatch.
		sc.OpenLumpName('gm_tdm');
		break;
	case HexenDefs::game_kth: //		Kill the Heresiarch
		sc.OpenLumpName('gm_kth');
		break;
	case HexenDefs::game_domination: //	Domination
		sc.OpenLumpName('gm_dom');
		break;
	case HexenDefs::game_ctf: //	Capture the Flag
		sc.OpenLumpName('gm_ctf');
		break;
	case HexenDefs::game_sweep:	//	Castle Sweep
		sc.OpenLumpName('gm_swp');
		break;
	case HexenDefs::game_sweepteam:	//	Team Castle Sweep
		sc.OpenLumpName('gm_tswp');
		break;	
	case HexenDefs::game_football: //	Football
		sc.OpenLumpName('gm_ftb');
		break;
	case HexenDefs::game_xmas: // XMas Havoc
		sc.OpenLumpName('gm_xmas');
		break;
	default:
		Error("MenuChoice_Level::InitMapList : unknown game type %i", GameType);
		return;
	}

	if (sc.AtEnd())
	{
		Error("MenuChoice_Level::InitMapList : maps table missing for game type %i", GameType);
		return;
	}

	//
	// Begin parsing...
	//
	Level.EnumNames.Num = 0;
	MapLumpNames.Num = 0;

	while (!sc.AtEnd())
	{
		sc.ExpectString();
		if (StrEndsWith(sc.String, "*"))
		{
			AddMapsToList(substr(sc.String, 0, strlen(sc.String) - 1), true);
		}
		else
		{
			AddMapsToList(sc.String, false);
		}
	}
	sc.Destroy();

	Level.SetInitialValue(0);
	ChangeLevel(none, Level.Value);
}

//==========================================================================
//
//	AddMapsToList
//
//==========================================================================

void AddMapsToList(string mapLumpName, bool useAsPrefix)
{
	int i, count, len;
	string testmapname;

	mapLumpName = strlwr(mapLumpName);
	for (i = 0, count = 0; i < 99; i++)
	{
		// If the lump found after any others is the first possible map, it means
		// no appropriate lump may be found any more, so cycle should end here 
		if (i > 0 && P_GetMapLumpName(i) == P_GetMapLumpName(0))
			break;

		testmapname = va("%n", P_GetMapLumpName(i));
		len = strlen(mapLumpName);
		if (strlen(testmapname) < len)
			continue;

		if (useAsPrefix ? StrStartsWith(testmapname, mapLumpName) :
			!strcmp(testmapname, mapLumpName))
		{
			count++;
			MapLumpNames.Num = MapLumpNames.Num + 1;
			MapLumpNames[MapLumpNames.Num - 1] = P_GetMapLumpName(i);
			Level.AddItem(P_GetMapName(i));
			
			if (!useAsPrefix)
				break;
		}
	}
}

//==========================================================================
//
//	InitMonsters
//
//==========================================================================

void InitMonsters(int GameType)
{
	switch (GameType)
	{
	case HexenDefs::game_sweep:	//	Castle Sweep
	case HexenDefs::game_sweepteam: //	Team Castle Sweep
		Monsters.Value = 1;
		break;
	case HexenDefs::game_dm:	//	Deathmatch
	case HexenDefs::game_dmteam:	//	Team deathmatch.
	case HexenDefs::game_kth:
	case HexenDefs::game_domination:	
	case HexenDefs::game_ctf: //	Capture the Flag
	case HexenDefs::game_football: //	Football
	case HexenDefs::game_xmas:
		Monsters.Value = 0;
		break;
	default:
		Error("MenuChoice_Level::InitMonsters : unknown game type %i", GameType);
	}

	ChangeMonsters(none, Monsters.Value);
}

//==========================================================================
//
//	InitScoreLimit
//
//==========================================================================

void InitScoreLimit(int GameType)
{
	int i, factor, count;
	ScoreLimit.EnumNames.Num = 0;

	switch (GameType)
	{
	case HexenDefs::game_sweep:	//	Castle Sweep
	case HexenDefs::game_sweepteam: //	Team Castle Sweep
	case HexenDefs::game_dm:	//	Deathmatch
	case HexenDefs::game_dmteam:	//	Team deathmatch.
	case HexenDefs::game_kth:
		factor = 5;
		count = 20;
		break;
	case HexenDefs::game_domination:
		factor = 25;
		count = 20;
		break;
	case HexenDefs::game_ctf: //	Capture the Flag
		factor = 1;
		count = 20;
		break;
	case HexenDefs::game_football: //	Football
		factor = 1;
		count = 20;
		break;
	case HexenDefs::game_xmas:
		factor = 25;
		count = 20;
		break;
	default:
		Error("MenuChoice_Level::InitScoreLimit : unknown game type %i", GameType);
	}

	ScoreLimit.AddItem("no limit");
	for (i = 1; i <= count; i++)
	{
		ScoreLimit.AddItem(va("%i", i * factor));
	}
	ScoreLimit.Value = 0;
	ChangeScoreLimit(none, ScoreLimit.Value);
}

defaultproperties
{
	X = 0; //160;
	Y = 0; //140;
	Width = 640; //320;
	Height = 480; //200;
	TitleX = 150; //320; //160;
	TitleY = 104; //24;
	ChoicesStartX = 132;
	ChoicesStartY = 120; //40;
	SelectorType = MenuSelector_SmallRight;
	Title = "NEW GAME";

	GameTypes[0] = HexenDefs::game_dm;
	GameTypes[1] = HexenDefs::game_dmteam;
	GameTypes[2] = HexenDefs::game_kth;
	GameTypes[3] = HexenDefs::game_ctf;
	GameTypes[4] = HexenDefs::game_domination;
	GameTypes[5] = HexenDefs::game_sweep;
	GameTypes[6] = HexenDefs::game_sweepteam;
	GameTypes[7] = HexenDefs::game_football;
	GameTypes[8] = HexenDefs::game_xmas;
}
