//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id: MenuScreenVideoOptions.vc 1741 2006-09-26 23:26:48Z dj_jl $
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class MenuScreenAdvancedVideoOptions : MenuScreen;

enum
{
	DRV_SOFTWARE,
	DRV_OPENGL,
	DRV_DIRECT3D
};

//==========================================================================
//
//	CreateChoices
//
//==========================================================================

void CreateChoices()
{
	MenuChoiceSlider	Slider;
	MenuChoiceEnum		Enum;
	int					currentY;

	currentY = ChoicesStartY;

	Enum = MenuChoiceEnum(NewChild(MenuChoice_OnOff));
	Enum.SetPos(ChoicesStartX, currentY);
	Enum.Text = "Darken lights";
	Enum.SetInitialValue(GetCvar('r_darken'));
	Enum.ValueChanging = ChangeDarken;
	currentY += Enum.Height;

	Enum = MenuChoiceEnum(NewChild(MenuChoice_OnOff));
	Enum.SetPos(ChoicesStartX, currentY);
	Enum.Text = "Extra samples";
	Enum.SetInitialValue(GetCvar('r_extrasamples'));
	Enum.ValueChanging = ChangeExtraSamples;
	currentY += Enum.Height;

	Enum = MenuChoiceEnum(NewChild(MenuChoice_OnOff));
	Enum.SetPos(ChoicesStartX, currentY);
	Enum.Text = "Dynamic lights";
	Enum.SetInitialValue(GetCvar('r_dynamic'));
	Enum.ValueChanging = ChangeDynamic;
	currentY += Enum.Height;

	Enum = MenuChoiceEnum(NewChild(MenuChoice_OnOff));
	Enum.SetPos(ChoicesStartX, currentY);
	Enum.Text = "Clip Dynamic Lights";
	Enum.SetInitialValue(GetCvar('r_dynamic_clip'));
	Enum.ValueChanging = ChangeDynamicClip;
	currentY += Enum.Height;

	Enum = MenuChoiceEnum(NewChild(MenuChoiceEnum));
	Enum.SetPos(ChoicesStartX, currentY);
	Enum.Text = "Aspect Ratio";
	Enum.AddItem("Normal");
	Enum.AddItem("Original");
	Enum.SetInitialValue(GetCvar('r_old_aspect_ratio'));
	Enum.ValueChanging = ChangeAspectRation;
	currentY += Enum.Height;

	if (GetCvar('_driver') == DRV_SOFTWARE)
	{
		Enum = MenuChoiceEnum(NewChild(MenuChoice_OnOff));
		Enum.SetPos(ChoicesStartX, currentY);
		Enum.Text = "Coloured lights";
		Enum.SetInitialValue(GetCvar('d_coloured_lights'));
		Enum.ValueChanging = ChangeColouredLights;
		currentY += Enum.Height;

		Enum = MenuChoiceEnum(NewChild(MenuChoiceEnum));
		Enum.SetPos(ChoicesStartX, currentY);
		Enum.Text = "Span drawing";
		Enum.AddItem("Subdivision 8");
		Enum.AddItem("Subdivision 16");
		Enum.SetInitialValue(GetCvar('d_subdiv') - 1);
		Enum.ValueChanging = ChangeSubdiv;
		currentY += Enum.Height;
	}
	else
	{
		Enum = MenuChoiceEnum(NewChild(MenuChoice_OnOff));
		Enum.SetPos(ChoicesStartX, currentY);
		Enum.Text = "Additive Lights";
		Enum.SetInitialValue(GetCvar('r_static_add'));
		Enum.ValueChanging = ChangeStaticAdd;
		currentY += Enum.Height;

		Slider = MenuChoiceSlider(NewChild(MenuChoiceSlider));
		Slider.SetPos(ChoicesStartX, currentY);
		Slider.Text = "Specular Level";
		Slider.ValueDelta = 0.1;
		Slider.MaxValue = 2.0;
		Slider.SetInitialValue(GetCvarF('r_specular'));
		Slider.ValueChanging = ChangeSpecular;
		currentY += Slider.Height;

		if (GetCvar('_driver') == DRV_OPENGL)
		{
			Enum = MenuChoiceEnum(NewChild(MenuChoice_OnOff));
			Enum.SetPos(ChoicesStartX, currentY);
			Enum.Text = "Blend sprite borders";
			Enum.SetInitialValue(GetCvar('gl_blend_sprites'));
			Enum.ValueChanging = ChangeGlBlendSprites;
			currentY += Enum.Height;

			Enum = MenuChoiceEnum(NewChild(MenuChoiceEnum));
			Enum.SetPos(ChoicesStartX, currentY);
			Enum.Text = "Texture Filter";
			Enum.AddItem("Nearest");
			Enum.AddItem("Linear");
			Enum.AddItem("Linear Nearest");
			Enum.AddItem("Linear Linear");
			Enum.SetInitialValue(GetCvar('gl_tex_linear'));
			Enum.ValueChanging = ChangeGlTexLinear;
			currentY += Enum.Height;

			Enum = MenuChoiceEnum(NewChild(MenuChoice_OnOff));
			Enum.SetPos(ChoicesStartX, currentY);
			Enum.Text = "Model Lightning";
			Enum.SetInitialValue(GetCvar('gl_model_lighting'));
			Enum.ValueChanging = ChangeGlModelLighting;
			currentY += Enum.Height;

			Enum = MenuChoiceEnum(NewChild(MenuChoice_OnOff));
			Enum.SetPos(ChoicesStartX, currentY);
			Enum.Text = "Specular Highlights";
			Enum.SetInitialValue(GetCvar('gl_specular_highlights'));
			Enum.ValueChanging = ChangeGlSpecularHighlights;
			currentY += Enum.Height;
		}
		else
		{
			Enum = MenuChoiceEnum(NewChild(MenuChoice_OnOff));
			Enum.SetPos(ChoicesStartX, currentY);
			Enum.Text = "Blend sprite borders";
			Enum.SetInitialValue(GetCvar('d3d_blend_sprites'));
			Enum.ValueChanging = ChangeD3dBlendSprites;
			currentY += Enum.Height;

			Enum = MenuChoiceEnum(NewChild(MenuChoiceEnum));
			Enum.SetPos(ChoicesStartX, currentY);
			Enum.Text = "Texture Filter";
			Enum.AddItem("Point");
			Enum.AddItem("Linear");
			Enum.AddItem("Point Linear");
			Enum.AddItem("Linear Linear");
			Enum.AddItem("Anisotropic Linear");
			Enum.SetInitialValue(GetCvar('d3d_tex_linear'));
			Enum.ValueChanging = ChangeD3dTexFilter;
			currentY += Enum.Height;

			Enum = MenuChoiceEnum(NewChild(MenuChoice_OnOff));
			Enum.SetPos(ChoicesStartX, currentY);
			Enum.Text = "Dithering";
			Enum.SetInitialValue(GetCvar('d3d_dither'));
			Enum.ValueChanging = ChangeD3dDither;
			currentY += Enum.Height;

			Enum = MenuChoiceEnum(NewChild(MenuChoice_OnOff));
			Enum.SetPos(ChoicesStartX, currentY);
			Enum.Text = "Model Lightning";
			Enum.SetInitialValue(GetCvar('d3d_model_lighting'));
			Enum.ValueChanging = ChangeD3dModelLighting;
			currentY += Enum.Height;

			Enum = MenuChoiceEnum(NewChild(MenuChoice_OnOff));
			Enum.SetPos(ChoicesStartX, currentY);
			Enum.Text = "Specular Highlights";
			Enum.SetInitialValue(GetCvar('d3d_specular_highlights'));
			Enum.ValueChanging = ChangeD3dSpecularHighlights;
			currentY += Enum.Height;
		}
	}
}

//==========================================================================
//
//	ChangeDarken
//
//==========================================================================

bool ChangeDarken(Object Sender, int newValue)
{
	SetCvar('r_darken', newValue);
	return true;
}

//==========================================================================
//
//	ChangeExtraSamples
//
//==========================================================================

bool ChangeExtraSamples(Object Sender, int newValue)
{
	SetCvar('r_extrasamples', newValue);
	return true;
}

//==========================================================================
//
//	ChangeDynamic
//
//==========================================================================

bool ChangeDynamic(Object Sender, int newValue)
{
	SetCvar('r_dynamic', newValue);
	return true;
}

//==========================================================================
//
//	ChangeDynamicClip
//
//==========================================================================

bool ChangeDynamicClip(Object Sender, int newValue)
{
	SetCvar('r_dynamic_clip', newValue);
	return true;
}

//==========================================================================
//
//	ChangeAspectRation
//
//==========================================================================

bool ChangeAspectRation(Object Sender, int newValue)
{
	SetCvar('r_old_aspect_ratio', newValue);
	return true;
}

//==========================================================================
//
//	ChangeColouredLights
//
//==========================================================================

bool ChangeColouredLights(Object Sender, int newValue)
{
	SetCvar('d_coloured_lights', newValue);
	return true;
}

//==========================================================================
//
//	ChangeSubdiv
//
//==========================================================================

bool ChangeSubdiv(Object Sender, int newValue)
{
	SetCvar('d_subdiv', newValue + 1);
	return true;
}

//==========================================================================
//
//	ChangeStaticAdd
//
//==========================================================================

bool ChangeStaticAdd(Object Sender, int newValue)
{
	SetCvar('r_static_add', newValue);
	return true;
}

//==========================================================================
//
//	ChangeSpecular
//
//==========================================================================

bool ChangeSpecular(Object Sender, float newValue)
{
	SetCvarF('r_specular', newValue);
	return true;
}

//==========================================================================
//
//	ChangeGlBlendSprites
//
//==========================================================================

bool ChangeGlBlendSprites(Object Sender, int newValue)
{
	SetCvar('gl_blend_sprites', newValue);
	return true;
}

//==========================================================================
//
//	ChangeGlTexLinear
//
//==========================================================================

bool ChangeGlTexLinear(Object Sender, int newValue)
{
	SetCvar('gl_tex_linear', newValue);
	return true;
}

//==========================================================================
//
//	ChangeGlModelLighting
//
//==========================================================================

bool ChangeGlModelLighting(Object Sender, int newValue)
{
	SetCvar('gl_model_lighting', newValue);
	return true;
}

//==========================================================================
//
//	ChangeGlSpecularHighlights
//
//==========================================================================

bool ChangeGlSpecularHighlights(Object Sender, int newValue)
{
	SetCvar('gl_specular_highlights', newValue);
	return true;
}

//==========================================================================
//
//	ChangeD3dBlendSprites
//
//==========================================================================

bool ChangeD3dBlendSprites(Object Sender, int newValue)
{
	SetCvar('d3d_blend_sprites', newValue);
	return true;
}

//==========================================================================
//
//	ChangeD3dTexFilter
//
//==========================================================================

bool ChangeD3dTexFilter(Object Sender, int newValue)
{
	SetCvar('d3d_tex_linear', newValue);
	return true;
}

//==========================================================================
//
//	ChangeD3dDither
//
//==========================================================================

bool ChangeD3dDither(Object Sender, int newValue)
{
	SetCvar('d3d_dither', newValue);
	return true;
}

//==========================================================================
//
//	ChangeD3dModelLighting
//
//==========================================================================

bool ChangeD3dModelLighting(Object Sender, int newValue)
{
	SetCvar('d3d_model_lighting', newValue);
	return true;
}

//==========================================================================
//
//	ChangeD3dSpecularHighlights
//
//==========================================================================

bool ChangeD3dSpecularHighlights(Object Sender, int newValue)
{
	SetCvar('d3d_specular_highlights', newValue);
	return true;
}

defaultproperties
{
	ChoicesStartX = 160;
	ChoicesStartY = 26;
	SelectorType = MenuSelector_SmallRight;
	Title = "ADVANCED VIDEO OPTIONS";
}
