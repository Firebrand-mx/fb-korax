//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class IntermissionScreen : Window;

enum
{
	IMS_Stats,
	IMS_Text,
	IMS_Done
};

ClientGameBase ClGame;

const float
	TALLY_EFFECT_TIME	= 0.625,
	TALLY_FINAL_X_DELTA	= 23.0,
	TALLY_FINAL_Y_DELTA	= 13.0,
	TALLY_START_XPOS	= 338.0,
	TALLY_STOP_XPOS		= 250.0,
	TALLY_START_YPOS	= 272.0,
	TALLY_STOP_YPOS		= 223.0;
const int
	TALLY_TOP_X			= 245,
	TALLY_TOP_Y			= 149,
	TALLY_LEFT_X		= 167,
	TALLY_LEFT_Y		= 211,
	TALLY_TOTALS_X		= 451;

float TextSpeed;
float TextWait;
name TextFlat;
int TextPic;

// specifies current state
int interstate;
float intertime;

// background (map of levels).
int patchINTERPIC;

float HubCount;
string HubText;

// used for general timing
float cnt;

int slaughterboy;
int totalFrags[MAXPLAYERS];

struct team_t
{
	bool bActive;
};
team_t teams[MAXPLAYERS];

int tallytop;
int tallylft;

bool showTotals;

//==========================================================================
//
//  Start
//
//==========================================================================

void Start()
{
	IM_InitStats();
	IM_LoadPics();

	if (!ClGame.deathmatch && !HubCount)
	{
		interstate = IMS_Done;
		cnt = 0.3;
	}
}

//==========================================================================
//
//	Tick
//
//==========================================================================

void Tick(float DeltaTime)
{
	if (interstate == IMS_Done)
	{
		if (cnt > 0.0)
		{
			cnt -= DeltaTime;
			if (cnt <= 0.0)
			{
				IM_UnloadPics();
				CmdBuf_AddText("TeleportNewMap\n");
			}
		}
		return;
	}
	intertime += DeltaTime;
	if (ClGame.skipintermission || (!ClGame.deathmatch && !HubCount))
	{
		interstate = IMS_Done;
		cnt = 0.3;
		ClGame.skipintermission = false;
	}
}

//==========================================================================
//
//  OnDraw
//
//==========================================================================

void OnDraw()
{
	if (interstate == IMS_Done)
	{
		return;
	}

	switch (interstate)
	{
	case IMS_Stats:
		IM_DrawDeathTally();
		break;

	case IMS_Text:
		IM_DrawHubText();
	}
}

//========================================================================
//
//  IM_LoadPics
//
//========================================================================

void IM_LoadPics()
{
}

//========================================================================
//
//  IM_UnloadPics
//
//========================================================================

void IM_UnloadPics()
{
}

//========================================================================
//
//  IM_InitStats
//
//  Initialises the stats for single player mode
//
//========================================================================

void IM_InitStats()
{
	int i;
	int j;
	int slaughterfrags;
	int posnum;
	int slaughtercount;
	int playercount;
	PlayerReplicationInfo RepInfo;

	ClGame.skipintermission = false;
	intertime = 0.0;
	if (!ClGame.deathmatch)
	{
		if (!ClGame.cl.Level.bNoIntermission)
		{
			print("Single player stats are not implemented");
		}
		IM_InitHubText();
	}
	else
	{
		patchINTERPIC = R_RegisterPic('interpic');
		tallytop = R_RegisterPic('tallytop');
		tallylft = R_RegisterPic('tallylft');

		interstate = IMS_Stats;
		slaughterboy = 0;
		slaughterfrags = -9999;
		posnum = 0;
		playercount = 0;
		slaughtercount = 0;
		for (i = 0; i < MAXPLAYERS; i++)
		{
			totalFrags[i] = 0;
		}
		foreach ClGame.GLevel.LevelInfo.AllThinkers(PlayerReplicationInfo, RepInfo)
		{
			i = RepInfo.PlayerNum;
			playercount++;
			if (ClGame.deathmatch==2)
			{
				string col = Info_ValueForKey(RepInfo.UserInfo, "colour");
				if (col)
				{
					int coo = atoi(col);
					teams[coo].bActive = true;
					totalFrags[coo] += RepInfo.Frags;
				}
			}
			else
			{
				totalFrags[i] = RepInfo.Frags;
			}
			posnum++;
		}
		for (i = 0; i < MAXPLAYERS; i++)
		{
			if (totalFrags[i] > slaughterfrags)
			{
				slaughterboy = 1 << i;
				slaughterfrags = totalFrags[i];
				slaughtercount = 1;
			}
			else if (totalFrags[i] == slaughterfrags)
			{
				slaughterboy |= 1 << i;
				slaughtercount++;
			}
		}
		if (playercount == slaughtercount)
		{	// don't do the slaughter stuff if everyone is equal
			slaughterboy = 0;
		}
#ifdef FIXME
		S_StartSong("hub", P_GetCDIntermissionTrack(), true);
#else
		CmdBuf_AddText("music loop hub\n");
#endif
	}
}

//========================================================================
//
//  IM_InitHubText
//
//  Initialises the stats for single player mode
//
//========================================================================

void IM_InitHubText()
{
	interstate = IMS_Text;
	HubCount = 0.0;
	if (ClGame.im->Text)
	{
		if (ClGame.im->bTextIsLump)
		{
			HubText = LoadTextLump(StrToName(ClGame.im->Text));
		}
		else
		{
			HubText = ClGame.im->Text;
		}
		HubCount = itof(strlen(HubText)) * TextSpeed + TextWait;

		TextFlat = '';
		TextPic = 0;
		if (ClGame.im->TextPic)
		{
			TextPic = R_RegisterPic(ClGame.im->TextPic);
		}
		else if (ClGame.im->TextFlat)
		{
			TextFlat = ClGame.im->TextFlat;
		}

		if (ClGame.im->TextMusic)
		{
			CmdBuf_AddText(va("music loop %n\n", ClGame.im->TextMusic));
		}
		else
		{
#ifdef FIXME
			S_StartSong("hub", P_GetCDIntermissionTrack(), true);
#else
			CmdBuf_AddText("music loop hub\n");
#endif
		}
	}
}

//===========================================================================
//
//  IM_DrawHubText
//
//===========================================================================

void IM_DrawHubText()
{
	if (TextPic)
	{
		DrawFullScreenPic(TextPic);
	}
	else if (TextFlat)
	{
		FillRectWithFlat(0, 0, 640, 480, TextFlat);
	}
	else
	{
		R_FillRect(0, 0, 640, 480, 0);
	}
	int count = ftoi((intertime - 0.3) / TextSpeed);
	if (count < 0)
	{
		count = 0;
	}
	if (count > strlen(HubText))
	{
		count = strlen(HubText);
	}
	T_SetFont(font_small);
	T_SetAlign(hleft, vtop);
	DrawText(170, 145, substr(HubText, 0, count));
}

//==========================================================================
//
//  IM_DrawNumber
//
//==========================================================================

void IM_DrawNumber(int val, int x, int y, int wrapThresh)
{
	T_SetFont(font_small);
	T_SetAlign(hcentre, vtop);
	if (!(val < -9 && wrapThresh < 1000))
	{
		DrawText(x, y, va("%d",
				val >= wrapThresh ? val % wrapThresh : val));
	}
	else
	{
		DrawText(x, y, "XX");
	}
}

//==========================================================================
//
//  IM_DrawNumberBold
//
//==========================================================================

void IM_DrawNumberBold(int val, int x, int y, int wrapThresh)
{
	T_SetFont(font_yellow);
	T_SetAlign(hcentre, vtop);
	if (!(val < -9 && wrapThresh < 1000))
	{
		DrawText(x, y, va("%d", val >= wrapThresh ? val % wrapThresh : val));
	}
	else
	{
		DrawText(x, y, "XX");
	}
}

//========================================================================
//
//  IM_DrawDeathTally
//
//========================================================================

void IM_DrawDeathTally()
{
	int i, j;
	float xPos, yPos;
	float xDelta, yDelta;
	float xStart, scale;
	int x, y;
	bool bold;
	PlayerReplicationInfo RepInfo;

	DrawFullScreenPic(patchINTERPIC);
	DrawPic(TALLY_TOP_X, TALLY_TOP_Y, tallytop);
	DrawPic(TALLY_LEFT_X, TALLY_LEFT_Y, tallylft);
	if (intertime < TALLY_EFFECT_TIME)
	{
		showTotals = false;
		scale = intertime / TALLY_EFFECT_TIME;
		xDelta = scale * TALLY_FINAL_X_DELTA;
		yDelta = scale * TALLY_FINAL_Y_DELTA;
		xStart = TALLY_START_XPOS -
			scale * (TALLY_START_XPOS - TALLY_STOP_XPOS);
		yPos = TALLY_START_YPOS -
			scale * (TALLY_START_YPOS - TALLY_STOP_YPOS);
	}
	else
	{
		xDelta = TALLY_FINAL_X_DELTA;
		yDelta = TALLY_FINAL_Y_DELTA;
		xStart = TALLY_STOP_XPOS;
		yPos = TALLY_STOP_YPOS;
	}
	if (intertime >= TALLY_EFFECT_TIME && showTotals == false)
	{
		showTotals = true;
		LocalSound('PlatformStop');
	}
	y = ftoi(yPos);
	foreach ClGame.GLevel.LevelInfo.AllThinkers(PlayerReplicationInfo, RepInfo)
	{
		i = RepInfo.PlayerNum;
		xPos = xStart;
		if (showTotals && !((slaughterboy & (1 << i)) &&
			!(ftoi(32.0 * intertime) & 16)))
		{
			IM_DrawNumber(totalFrags[i], TALLY_TOTALS_X, y, 1000);
		}
		yPos += yDelta;
		y = ftoi(yPos);
	}
}

//==========================================================================
//
//	OnVisibilityChanged
//
//==========================================================================

void OnVisibilityChanged(bool bNewVisibility)
{
	bTickEnabled = bNewVisibility;
}

defaultproperties
{
	bTickEnabled = true;
	Width = 640;
	Height = 480;
	TextSpeed = 0.1;
	TextWait = 4.0;
}
