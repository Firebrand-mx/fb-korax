//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**		##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id$
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class IntermissionScreen : Widget;

enum
{
	IMS_Stats,
	IMS_Text,
	IMS_Done
};

ClientGameBase ClGame;

const int
	SHADE_LEFT		= 24,
	SHADE_WIDTH		= 592,

	PORTRAIT_HEIGHT		= 25,

	TABLE_LEFT_X		= 78,
	TABLE_DATA_LEFT_X	= 126,
	TABLE_HEAD_Y		= 78,
	TABLE_TOP_Y		= 112,
	TABLE_HEADER_MARGIN_TOP = 10,
	TABLE_HEADER_MARGIN_BOTTOM = 10,
	TABLE_STRING_DELTA	= 14,
	TABLE_ENTRY_DELTA	= 28,
	TABLE_COL2		= 240,
	TABLE_COL3		= 302,
	TABLE_COL4		= 386,
	TABLE_COL5		= 446,
	TABLE_COL6		= 494,
	TABLE_VALINDENT4	= 16,
	TABLE_VALINDENT5	= 12,
	TABLE_VALINDENT6	= 18;

float TextSpeed;
float TextWait;
name TextFlat;
int TextPic;

// specifies current state
int interstate;
float intertime;

// background (map of levels).
int patchINTERPIC;

float HubCount;
string HubText;

// used for general timing
float cnt;

string gamemodenames[HexenDefs::NUMGAMES];
string playerclassnames[HexenDefs::NUMCLASSES];

int pic_portraits[8];
int pic_portraits_heights[8];

//==========================================================================
//
//  Start
//
//==========================================================================

void Start()
{
	IM_InitStats();
	IM_LoadPics();

	if (!ClGame.deathmatch && !HubCount)
	{
		interstate = IMS_Done;
		cnt = 0.3;
	}
}

//==========================================================================
//
//	Tick
//
//==========================================================================

void Tick(float DeltaTime)
{
	if (interstate == IMS_Done)
	{
		if (cnt > 0.0)
		{
			cnt -= DeltaTime;
			if (cnt <= 0.0)
			{
				IM_UnloadPics();
				// [FB] This one could still be used somewhere, so it stays here for now...
//				CmdBuf_AddText("TeleportNewMap\n");
				// [FB] Show loading screen for the next map!
				ClientGame(ClGame).LoadingScreenStart(ClGame.im.EnterMap, ClGame.im.EnterName);
			}
		}
		return;
	}
	intertime += DeltaTime;
	if (ClGame.skipintermission || (!ClGame.deathmatch && !HubCount))
	{
		interstate = IMS_Done;
		cnt = 0.3;
		ClGame.skipintermission = false;
	}
}

//==========================================================================
//
//  OnDraw
//
//==========================================================================

void OnDraw()
{
	if (interstate == IMS_Done)
	{
		return;
	}

	switch (interstate)
	{
	case IMS_Stats:
		IM_DrawDeathTally();
		break;

	case IMS_Text:
		IM_DrawHubText();
	}
}

//========================================================================
//
//  IM_LoadPics
//
//========================================================================

void IM_LoadPics()
{
	//	initialise pics
	int i;
	picinfo_t info;

	for (i = 0; i < 8; i++)
	{
		pic_portraits[i] = R_RegisterPic(StrToName(va("icon0%d", i)));
		R_GetPicInfo(pic_portraits[i], &info);
		pic_portraits_heights[i] = info.height;
	}
}

//========================================================================
//
//  IM_UnloadPics
//
//========================================================================

void IM_UnloadPics()
{
}

//========================================================================
//
//  IM_InitStats
//
//  Initialises the stats for single player mode
//
//========================================================================

void IM_InitStats()
{
	int i;
	int j;
	int slaughterfrags;
	int posnum;
	int slaughtercount;
	int playercount;
	KArenaPlayerReplicationInfo RepInfo;
	KArenaPlayerReplicationInfo Other;

	ClGame.skipintermission = false;
	intertime = 0.0;
	if (!ClGame.deathmatch)
	{
		if (!ClGame.cl.Level.bNoIntermission)
		{
			print("Single player stats are not implemented");
		}
		IM_InitHubText();
	}
	else
	{
		patchINTERPIC = R_RegisterPic('interpic');
		interstate = IMS_Stats;
#ifdef FIXME
		S_StartSong("hub", P_GetCDIntermissionTrack(), true);
#else
		CmdBuf_AddText("music loop chief\n");
#endif
	}
}

//========================================================================
//
//  IM_InitHubText
//
//  Initialises the stats for single player mode
//
//========================================================================

void IM_InitHubText()
{
	interstate = IMS_Text;
	HubCount = 0.0;
	if (ClGame.im.Text)
	{
		if (ClGame.im.bTextIsLump)
		{
			HubText = LoadTextLump(StrToName(ClGame.im.Text));
		}
		else
		{
			HubText = ClGame.im.Text;
		}
		HubCount = itof(strlen(HubText)) * TextSpeed + TextWait;

		TextFlat = '';
		TextPic = 0;
		if (ClGame.im.TextPic)
		{
			TextPic = R_RegisterPic(ClGame.im.TextPic);
		}
		else if (ClGame.im.TextFlat)
		{
			TextFlat = ClGame.im.TextFlat;
		}

		if (ClGame.im.TextMusic)
		{
			CmdBuf_AddText(va("music loop %n\n", ClGame.im.TextMusic));
		}
		else
		{
#ifdef FIXME
			S_StartSong("hub", P_GetCDIntermissionTrack(), true);
#else
			CmdBuf_AddText("music loop hub\n");
#endif
		}
	}
}

//===========================================================================
//
//  IM_DrawHubText
//
//===========================================================================

void IM_DrawHubText()
{
	if (TextPic)
	{
		DrawFullScreenPic(TextPic);
	}
	else if (TextFlat)
	{
		FillRectWithFlat(0, 0, 640, 480, TextFlat);
	}
	else
	{
		R_FillRect(0, 0, 640, 480, 0);
	}
	int count = ftoi((intertime - 0.3) / TextSpeed);
	if (count < 0)
	{
		count = 0;
	}
	if (count > strlen(HubText))
	{
		count = strlen(HubText);
	}
	SetFont('smallfont');
	SetTextAlign(hleft, vtop);
	DrawText(170, 145, substr(HubText, 0, count));
}

//========================================================================
//
//  IM_DrawDeathTally
//
//========================================================================

void IM_DrawDeathTally()
{
	int j, y;
	int gamemode;
	string current_team;
	int current_team_idx;
	int current_player_inteam_idx;
	bool team_player_skipped;
	string tmp;
	KArenaPlayerReplicationInfo RepInfo;

	DrawFullScreenPic(patchINTERPIC);
	SetFont('smallfont');
	// Game mode
	gamemode = GetCvar('deathmatch');

	SetTextAlign(hleft, vtop);
	DrawText(TABLE_LEFT_X, TABLE_HEAD_Y, va("game mode:   %s", gamemodenames[gamemode]), CR_BRICK);

	/*--------------------------------------
		General Scoring Table
	--------------------------------------*/

	/* Table Head		*/
	DrawText(TABLE_LEFT_X, TABLE_HEAD_Y + TABLE_STRING_DELTA , "player", CR_BLUE);
	DrawText(TABLE_COL2, TABLE_HEAD_Y + TABLE_STRING_DELTA, "score", CR_GREEN);
	DrawText(TABLE_COL3, TABLE_HEAD_Y + TABLE_STRING_DELTA, "ctrl", CR_ORANGE);

	// Those are mode dependent
	DrawText(TABLE_COL4, TABLE_HEAD_Y + TABLE_STRING_DELTA, "frags", CR_RED);
	DrawText(TABLE_COL5, TABLE_HEAD_Y + TABLE_STRING_DELTA, "kills", CR_RED);
	DrawText(TABLE_COL6, TABLE_HEAD_Y + TABLE_STRING_DELTA, "deaths", CR_RED);

	y = TABLE_TOP_Y;
	
	current_team_idx = 0;
	current_player_inteam_idx = 0;

	while(current_team_idx < HexenDefs::MAXTEAMSINGAME)
	{
		RepInfo = none;
		team_player_skipped = false;

		foreach ClGame.GLevel.LevelInfo.AllThinkers(KArenaPlayerReplicationInfo, RepInfo)
		{
			if (RepInfo.teampos != current_team_idx ||
					RepInfo.playerpos < current_player_inteam_idx)
				continue;
			
			if (RepInfo.playerpos > current_player_inteam_idx)
			{
				team_player_skipped = true;
				continue;
			}
		
			// Insert team string if a new team encountered
			if (gamemode >= HexenDefs::NUMGAMESNOTEAM && strcmp(RepInfo./*team*/teamname, current_team))
			{
				if (current_team)
					y += TABLE_HEADER_MARGIN_TOP;
				R_FillRect(SHADE_LEFT + 8, y - 2, SHADE_WIDTH - 16, 13, RepInfo.teamcolour);
				DrawText(TABLE_LEFT_X, y, va("%s team,   score:   %d", RepInfo.teamname,
						Player(ClGame.cl).teamscores[current_team_idx]));
				y += TABLE_HEADER_MARGIN_BOTTOM;
				current_team = RepInfo.teamname;
			}

			// Player portrait
			DrawPic(TABLE_LEFT_X + 20, y + PORTRAIT_HEIGHT - ((PORTRAIT_HEIGHT - pic_portraits_heights[RepInfo.plclass]) >> 1),
								pic_portraits[RepInfo.plclass], , RepInfo.translation);

			y += 6;

			// Player's name
			DrawText(TABLE_DATA_LEFT_X, y, RepInfo.PlayerName, ClGame.cl.ClientNum == RepInfo.PlayerNum ? CR_YELLOW : RepInfo.teamfont);

			// Level + class
			switch (RepInfo.level)
			{
				case 1: tmp = "st"; break;
				case 2: tmp = "nd"; break;
				case 3: tmp = "rd"; break;
				default: tmp = "th";
			}
			DrawText(TABLE_DATA_LEFT_X, y + TABLE_STRING_DELTA, va("%d%s %s",
				RepInfo.level, tmp, playerclassnames[RepInfo.plclass]), ClGame.cl.ClientNum == RepInfo.PlayerNum ? CR_YELLOW : GetClassFontColour(RepInfo.plclass));

			y += TABLE_STRING_DELTA >> 1;

			// Player's score
			DrawText(TABLE_COL2, y, va("%d", RepInfo.score), GetClassFontColour(RepInfo.teamcolour), ClGame.cl.ClientNum == RepInfo.PlayerNum ? CR_YELLOW : CR_UNTRANSLATED);

			// Player is human/cpu
			if (RepInfo.IsBot)
				DrawText(TABLE_COL3, y, "bot", ClGame.cl.ClientNum == RepInfo.PlayerNum ? CR_YELLOW : CR_ORANGE);
			else
				DrawText(TABLE_COL3, y, "hum", ClGame.cl.ClientNum == RepInfo.PlayerNum ? CR_YELLOW : CR_ORANGE);

			// Those are mode dependent
			DrawText(TABLE_COL4 + TABLE_VALINDENT4, y, va("%d", RepInfo.Frags), ClGame.cl.ClientNum == RepInfo.PlayerNum ? CR_YELLOW : CR_UNTRANSLATED);
			DrawText(TABLE_COL5 + TABLE_VALINDENT5, y, va("%d", RepInfo.KillCount), ClGame.cl.ClientNum == RepInfo.PlayerNum ? CR_YELLOW : CR_UNTRANSLATED);
			DrawText(TABLE_COL6 + TABLE_VALINDENT6, y, va("%d", RepInfo.deaths), ClGame.cl.ClientNum == RepInfo.PlayerNum ? CR_YELLOW : CR_UNTRANSLATED);

			y += TABLE_ENTRY_DELTA - (TABLE_STRING_DELTA >> 1);
			current_player_inteam_idx++;
		}

		if (!team_player_skipped)
		{
			current_team_idx++;
			current_player_inteam_idx = 0;
		}
	}
}

//==========================================================================
//
//  GetClassFontColour
//
//==========================================================================

int GetClassFontColour(int cls)
{
	switch(cls)
	{
		case 0:
			return CR_GREEN;
			break;
		case 1:
			return CR_BLUE;
			break;
		case 2:
			return CR_RED;
			break;
		case 3:
			return CR_DARKGREEN;
			break;
		case 4:
			return CR_GRAY;
			break;
		case 5:
			return CR_TAN;
			break;
		case 6:
			return CR_BROWN;
			break;
		case 7:
			return CR_PURPLE;
			break;
		default:
			return CR_UNTRANSLATED;
			break;
	}
}

//==========================================================================
//
//	OnVisibilityChanged
//
//==========================================================================

void OnVisibilityChanged(bool bNewVisibility)
{
	bTickEnabled = bNewVisibility;
}

defaultproperties
{
	bTickEnabled = true;
	Focusable = true;
	Width = 640;
	Height = 480;
	TextSpeed = 0.1;
	TextWait = 4.0;

	gamemodenames[0] = "unused game mode";
	gamemodenames[1] = "deathmatch";
	gamemodenames[2] = "kill the heresiarch";
	gamemodenames[3] = "castle sweep";
	gamemodenames[4] = "team deathmatch";
	gamemodenames[5] = "capture the flag";
	gamemodenames[6] = "team castle sweep";
	gamemodenames[7] = "football";

	playerclassnames[0] = "fighter";
	playerclassnames[1] = "cleric";
	playerclassnames[2] = "mage";
	playerclassnames[3] = "heretic";
	playerclassnames[4] = "marine";
	playerclassnames[5] = "hero";
	playerclassnames[6] = "pig";
	playerclassnames[7] = "heresiarch";
}
