//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**		##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id$
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class MenuScreen : Widget;

const int MAX_MENU_ITEMS		= 32;

ClientGame ClGame;

MenuChoice Items[MAX_MENU_ITEMS];
int NumItems;
int CursorPos;
int CursorPrev;

int ChoicesStartX;
int ChoicesStartY;

class<Widget> SelectorType;
Widget Selector;

string Title;
int TitleX;
int TitleY;

void OnChildAdded(Widget Child)
{
	if (MenuChoice(Child))
	{
		if (NumItems >= MAX_MENU_ITEMS)
		{
			FatalError("Too many menu items");
		}
		Items[NumItems++] = MenuChoice(Child);
	}
	::OnChildAdded(Child);
}

void CreateTitle()
{
	MenuTitleText newTitle;

	if (Title)
	{
		newTitle = MenuTitleText(NewChild(MenuTitleText));
		newTitle.SetPos(TitleX, TitleY);
		newTitle.Text = Title;
	}
}

void CreateChoices()
{
}

void CreateSelector()
{
	if (SelectorType)
	{
		Selector = NewChild(SelectorType);
	}
}

void CursorMoved()
{
	if (CursorPrev == CursorPos)
		return;

	if (CursorPos >= 0 && CursorPos < NumItems)
	{
		SetCurrentFocusChild(Items[CursorPos]);
	}

	if (Selector)
	{
		Selector.SetPos(Items[CursorPos].X, Items[CursorPos].Y);
	}
}

void SetDefaultChoice()
{
	int i;

	// default cursor position
	CursorPos = 0;
	CursorPrev = 0;

	// force first available item to have focus
	for (i = 0; i < NumItems; i++)
	{
		if (Items[i].Enabled)
		{
			CursorPrev = -1;
			CursorPos = i;
			CursorMoved();
			break;
		}
	}
}

void OnCreate()
{
	::OnCreate();
	CreateTitle();
	CreateChoices();
	CreateSelector();
	SetDefaultChoice();
}

void CyclePrevChoice()
{
	CursorPrev = CursorPos;
	do
	{
		if (!CursorPos)
			CursorPos = NumItems - 1;
		else
			CursorPos--;
	}
	while (!Items[CursorPos].Enabled && CursorPrev != CursorPos);
	CursorMoved();
}

void CycleNextChoice()
{
	CursorPrev = CursorPos;
	do
	{
		if (CursorPos == NumItems - 1)
			CursorPos = 0;
		else
			CursorPos++;
	}
	while (!Items[CursorPos].Enabled && CursorPrev != CursorPos);
	CursorMoved();
}

bool OnKeyDown(int key)
{
	switch (key)
	{
	case K_DOWNARROW:
		CycleNextChoice();
		LocalSound('menu/cursor');
		return true;

	case K_UPARROW:
		CyclePrevChoice();
		LocalSound('menu/cursor');
		return true;

	case K_ESCAPE:
	case K_MOUSE2:
		ClGame.PopMenu();
		return true;
	}

	return false;
}

//==========================================================================
//
//	OnDraw
//
//  Fade all the screen buffer, so that the menu is more readable,
// especially now that we use the small hufont in the menus...
//
//==========================================================================

void OnDraw()
{
	ShadeRect(0, 0, 640, 480, GetCvarF('menu_darkening'));
}

defaultproperties
{
	Focusable = true;
	X = 160;
	Y = 140;
	Width = 320;
	Height = 200;
	TitleX = 160;
	TitleY = 24;
}
