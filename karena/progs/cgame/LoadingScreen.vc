//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**			##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id: LoadingScreen.vc 508 2006-07-10 19:02:43Z firebrand_kh $
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class LoadingScreen : Widget;

name MapName;
string MapTitle;
string intro;
string enter;
int pic;

int NumRandIntros;
int NumMapIntros;
int NumGameIntros;
int NumHintIntros;
int NumEnter;

float Delay;

//==========================================================================
//
//  Init
//
//==========================================================================

void Init()
{
	string intro_txt;
	string intro_txt_lang;
	string enter_txt;
	string enter_txt_lang;

	NumRandIntros = -1;
	NumHintIntros = -1;
	NumEnter = -1;

	do
	{
		enter_txt = va("enter_rand_%i", ++NumEnter);
		enter_txt_lang = GetLangString(StrToName(enter_txt));
	}
	while(strcmp(enter_txt, enter_txt_lang));

	do
	{
		intro_txt = va("intro_rand_%i", ++NumRandIntros);
		intro_txt_lang = GetLangString(StrToName(intro_txt));
	}
	while(strcmp(intro_txt, intro_txt_lang));
	do
	{
		intro_txt = va("intro_hint_%i", ++NumHintIntros);
		intro_txt_lang = GetLangString(StrToName(intro_txt));
	}
	while(strcmp(intro_txt, intro_txt_lang));
}

//==========================================================================
//
//  Tick
//
//==========================================================================

void Tick(float DeltaTime)
{
	Delay -= DeltaTime;
	if (Delay <= 0.0)
	{
		bTickEnabled = false;
		CmdBuf_AddText(va("Map %n\n", MapName));
	}
}

//==========================================================================
//
//  OnDraw
//
//==========================================================================

void OnDraw()
{
	if (pic >= 0)
		R_DrawPic(0, 0, pic);
	else
		FillRectWithFlat(0, 0, 640, 480, 'f_001');

	SetFont('smallfont');
	SetTextAlign(hcentre, vcentre);
	DrawText(320, 160, enter);
	DrawText(320, 180, MapTitle, CR_GREEN);

	string gametype;
	switch (GetCvar('deathmatch'))
	{
	case HexenDefs::game_dm:
		gametype = "deathmatch"; break;
	case HexenDefs::game_dmteam:
		gametype = "team deathmatch"; break;
	case HexenDefs::game_sweep:
		gametype = "castle sweep"; break;
	case HexenDefs::game_sweepteam:
		gametype = "team castle sweep"; break;
	case HexenDefs::game_kth:
		gametype = "kill the heresiarch"; break;
	case HexenDefs::game_ctf:
		gametype = "capture the flag"; break;
	case HexenDefs::game_domination:
		gametype = "domination"; break;
	case HexenDefs::game_football:
		gametype = "football"; break;
	case HexenDefs::game_xmas:
		gametype = "xmas havoc"; break;
	default:
		gametype = "unknown game type";
	}

	DrawText(320, 220, va("-= %s =-", gametype), CR_YELLOW);
	DrawText(320, 320, intro);
	DrawText(320, 440, "loading, please wait...");
}

//==========================================================================
//
//	OnVisibilityChanged
//
//==========================================================================

void OnVisibilityChanged(bool bNewVisibility)
{
	if (bNewVisibility)
	{
		string dummy;
		string intro_txt;
		string intro_txt_lang;
		NumMapIntros = -1;
		NumGameIntros = -1;

		intro = "";

		if (NumHintIntros && P_Random() < 96)
		{
			intro = GetLangString(StrToName(va("intro_hint_%i", P_Random() % NumHintIntros)));
		}
		
		if (!strlen(intro) && P_Random() < 96)
		{
			dummy = strlwr(StrReplace(MapTitle, " ", ""));
			dummy = strlwr(StrReplace(dummy, ",", ""));
			dummy = strlwr(StrReplace(dummy, ".", ""));
			dummy = strlwr(StrReplace(dummy, "!", ""));
			dummy = strlwr(StrReplace(dummy, "?", ""));
			do
			{
				intro_txt = va("intro_map_%s_%i", dummy, ++NumMapIntros);
				intro_txt_lang = GetLangString(StrToName(intro_txt));
			}
			while(strcmp(intro_txt, intro_txt_lang));

			if (NumMapIntros)
			{
				intro = GetLangString(StrToName(va("intro_map_%s_%i", dummy, P_Random() % NumMapIntros)));
				intro = SplitTextWithNewlines(intro, 520);
			}
		}
		
		if (!strlen(intro) && P_Random() < 96)
		{
			switch (GetCvar('deathmatch'))
			{
			case HexenDefs::game_dm:
				dummy = "dm"; break;
			case HexenDefs::game_dmteam:
				dummy = "tdm"; break;
			case HexenDefs::game_sweep:
				dummy = "cs"; break;
			case HexenDefs::game_sweepteam:
				dummy = "tcs"; break;
			case HexenDefs::game_kth:
				dummy = "kth"; break;
			case HexenDefs::game_ctf:
				dummy = "ctf"; break;
			case HexenDefs::game_domination:
				dummy = "do"; break;
			case HexenDefs::game_football:
				dummy = "fb"; break;
			case HexenDefs::game_xmas:
				dummy = "xm"; break;
			default:
				dummy = "-";
			}
			do
			{
				intro_txt = va("intro_game_%s_%i", dummy, ++NumGameIntros);
				intro_txt_lang = GetLangString(StrToName(intro_txt));
			}
			while(strcmp(intro_txt, intro_txt_lang));

			if (NumGameIntros)
			{
				intro = GetLangString(StrToName(va("intro_game_%s_%i", dummy, P_Random() % NumGameIntros)));
				intro = SplitTextWithNewlines(intro, 520);
			}
		}
		
		if (!strlen(intro) && NumRandIntros)
		{
			intro = GetLangString(StrToName(va("intro_rand_%i", P_Random() % NumRandIntros)));
			intro = SplitTextWithNewlines(intro, 520);
		}

		intro = SplitTextWithNewlines(intro, 520);


		Delay = 1.0;
		string picname = va("%nim", MapName);
		pic = R_RegisterPic(StrToName(picname));
		if (NumEnter)
			enter = GetLangString(StrToName(va("enter_rand_%i", P_Random() % NumEnter)));
	}
	bTickEnabled = bNewVisibility;
}

defaultproperties
{
	bTickEnabled = true;
	Focusable = true;
	Width = 640;
	Height = 480;
}
