//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**		##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id: MenuScreenTeamSelect.vc 508 2006-07-10 19:02:43Z firebrand_kh $
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class MenuScreenTeamSelect : MenuScreen;

bool 	Ready;
bool	bIsSelected;
string	TeamNames[HexenDefs::MAXPLAYERTEAMS];
int		Teams[HexenDefs::MAXTEAMSINGAME];
int		Counts[HexenDefs::MAXTEAMSINGAME];
int		maxTeams;
int		activeTeams;
int		curSelection;

void CreateChoices()
{
	int i, y;
	MenuStaticText staticText;
	MenuChoice_Team newChoice;
	bool teams_active[HexenDefs::MAXPLAYERTEAMS];

	for (i = 0; i < HexenDefs::MAXPLAYERTEAMS; i++)
		teams_active[i] = false;

	if (!Ready)
		return;

	bool bKeepEqual = GetCvar('KeepTeamsEqual');
	int count_limit = activeTeams > 1 ? Counts[0] : 0;

	if (bKeepEqual)
	{
		for (i = 0; i < activeTeams && i < HexenDefs::MAXTEAMSINGAME; i++)
		{
			if (count_limit > Counts[i])
				count_limit = Counts[i];
		}
	}

	y = ChoicesStartY;
	if (activeTeams > 0)
	{
		staticText = MenuStaticText(NewChild(MenuStaticText));
		staticText.Text = "ACTIVE TEAMS";
		staticText.SetPos(ChoicesStartX, y);
		y += 24;
	
		// Active Teams
		for (i = 0; i < activeTeams && i < HexenDefs::MAXTEAMSINGAME; i++)
		{
			if (Teams[i] == -1)
				break;

			newChoice = MenuChoice_Team(NewChild(MenuChoice_Team));
			newChoice.SetOrigin(ChoicesStartX, y);
			newChoice.Text = TeamNames[Teams[i]];
			if (bKeepEqual)
			{
				newChoice.Text = va("%s (%i)", newChoice.Text, Counts[i]);
				if (Counts[i] <= count_limit)
					newChoice.Text = va("%s (CAN JOIN)", newChoice.Text);
				else
				{
					newChoice.Text = va("%s (CANNOT JOIN)", newChoice.Text);
					newChoice.Disable();
				}
			}
			newChoice.Team = Teams[i];
			teams_active[Teams[i]] = true;
			y += 18;
		}
		y += 24;
	}

	// Available Teams
	if (activeTeams < maxTeams && activeTeams < HexenDefs::MAXTEAMSINGAME)
	{
		staticText = MenuStaticText(NewChild(MenuStaticText));
		staticText.Text = "AVAILABLE TEAMS";
		staticText.SetPos(ChoicesStartX, y);
		y += 24;
		for (i = 0; i < HexenDefs::MAXPLAYERTEAMS; i++)
		{
			if (teams_active[i])
			{
				continue;
			}
			newChoice = MenuChoice_Team(NewChild(MenuChoice_Team));
			newChoice.SetOrigin(ChoicesStartX, y);
			newChoice.Text = TeamNames[i];
			newChoice.Team = i;
			y += 18;
		}
	}

	SetHeight(y);

	SetDefaultChoice();
}

void ReInit()
{
	//DestroyAllChildren();
	int i;
	for (i = 1; i < NumItems; i++)
	{
		Items[i].Destroy();
		Items[i] = none;
	}
	NumItems = 1;
	CreateChoices();

	// re-position selection
	SetDefaultChoice();
}

void OnCancel()
{
	if (!bIsSelected)
	{
		dprint("MenuScreenTeamSelect : cancelled");
		SetCvar('Colour', curSelection);
	}
}

void SetDefaultChoice()
{
	int i;
	int firstEnabled;

	CursorPos = -1;
	firstEnabled = -1;

	for (i = 0; i < NumItems; i++)
	{
		if (Items[i].Enabled)
		{
			if (firstEnabled == -1)
				firstEnabled = i;
			if (!Items[i].IsA('MenuChoice_Team'))
				continue;
			if (MenuChoice_Team(Items[i]).Team == curSelection)
			{
				CursorPrev = -1;
				CursorPos = i;
				CursorMoved();
				break;
			}
		}
	}
	if (CursorPos == -1)
	{
		CursorPrev = -1;
		CursorPos = firstEnabled;
		CursorMoved();
	}
}

defaultproperties
{
	TeamNames[0] = "blue";
	TeamNames[1] = "red";
	TeamNames[2] = "gold";
	TeamNames[3] = "lime";
	TeamNames[4] = "green";
	TeamNames[5] = "gray";
	TeamNames[6] = "brown";
	TeamNames[7] = "magenta";

	Teams[0] = 0;
	Teams[1] = 1;

	maxTeams = HexenDefs::MAXTEAMSINGAME;
	curSelection = 0;

	ChoicesStartX = 120;
	ChoicesStartY = 44;
	SelectorType = MenuSelector_SmallRight;
	Title = "SELECT A TEAM TO JOIN:";
}
