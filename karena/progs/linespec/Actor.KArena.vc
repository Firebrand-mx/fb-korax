//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**	        ##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id$
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

const float
	BLAST_RADIUS_DIST		= 255.0,
	BLAST_FULLSTRENGTH		= 0.0038909912,
	BLAST_SPEED				= 20.0;

int experience;

// [CW] Since there are sometimes references to pawn stored for future use,
// it is important to store reference to player as well (in case it is player pawn)
// so that if that pawn die, player reference will be still accessible.
KAPlayerBase		PInstigator;

/* KORAX */
bool		bFixedFloatZ;		// [CW] maintain same height over the floor;
								//      similar for Inventory using bFloatBob && bSpecial
								//		but without bobbing.
								//		bNoGravity does not seem to be important if you
								//		use this flag
bool		bNoAccuracy;		// [CW] forbid to give accuracy trophy for this
								//		projectile killing a target
TVec		SpawnOrigin;		// [CW] coordinates of projectile's spawn point;
								//		currently is used to determine player's
								//		accuracy trophy

bool		bGiveExperience;	// [CW] gives experience to players on destruction
//==========================================================================
//
//	OnMapSpawn
//
//	[CW] Now contains a duplicate of common EntityEx.Misc::OnMapSpawn
//		 with modified flags reading (excluded some unused in KA)
//
//==========================================================================

void OnMapSpawn(mthing_t* mthing)
{
	//**********************************************************
	//
	// Commence of common OnMapSpawn
	//
	//**********************************************************

	if (IsFast())
	{
		ReactionCount = 0;
	}

	LastLook = P_Random() % MAXPLAYERS;

	bCheckLineBlocking = false;
	bCheckLineBlockMonsters = false;
	if (!bMissile)
	{
		bCheckLineBlocking = true;
		if (!bNoBlockMonst)
		{
			bCheckLineBlockMonsters = true;
		}
	}

	if (!IdleState)
	{
		IdleState = FindState('Spawn');
	}
	if (!SeeState)
	{
		SeeState = FindState('See');
	}
	if (!MeleeState)
	{
		MeleeState = FindState('Melee');
	}
	if (!MissileState)
	{
		MissileState = FindState('Missile');
	}

	if (Level.Game.fastparm && FastSpeed)
	{
		Speed = FastSpeed;
	}

	if (CountsAsKill())
	{
		Level.TotalKills++;
	}
	if (bCountItem)
	{
		Level.TotalItems++;
	}

	//	Set the state, but do not use SetState, because action routines can't
	// be called yet.  If the spawnstate has an action routine, it will not
	// be called.
	SetInitialState(IdleState);

	if (mthing)
	{
		float x;
		float y;
		float z;

		if (bNoDeathmatch && Level.Game.deathmatch)
		{
			Destroy();
			return;
		}

		Level.CopyMThing(mthing, &SpawnPoint);

		x = mthing->x;
		y = mthing->y;
		if (bSpawnCeiling)
		{
			z = ONCEILINGZ;
		}
		else if (bSpawnFloat)
		{
			z = FLOATRANDZ;
		}
		else if (bFloatBob)
		{
			z = mthing->height;
		}
		else
		{
			z = ONFLOORZ;
		}
		SetOrigin2(vector(x, y, z));
		if (z == ONFLOORZ)
		{
			Origin.z += mthing->height;
		}
		else if (z == ONCEILINGZ)
		{
			Origin.z -= mthing->height;
		}
		LinkToWorld();

		SetTID(mthing->tid);
		Special = mthing->special;
		if (!bArgsDefined)
		{
			Args[0] = mthing->arg1;
			Args[1] = mthing->arg2;
			Args[2] = mthing->arg3;
			Args[3] = mthing->arg4;
			Args[4] = mthing->arg5;
		}
		if (bFloatBob || bFixedFloatZ /* [CW] */)
		{
			// Seed random starting index for bobbing motion
			FloatBobPhase = Random() * 256.0 / 35.0;
			Special1f = mthing->height;
		}
		if (!bSynchronised && StateTime > 0.0)
		{
			StateTime = 0.1 + Random() * StateTime;
		}

		Angles.yaw = itof(AngleIncrements() * (mthing->angle /
			AngleIncrements()));
		if (mthing->options & LineSpecialLevelInfo::MTFKA_AMBUSH)
		{
			bAmbush = true;
		}
		if (mthing->options & LineSpecialLevelInfo::MTFKA_DORMANT)
		{
			Deactivate(none);
		}
	}
	else
	{
		SetOrigin2(Origin);
	}

	if (bStaticLight && mthing && !TID)
	{
		if (LightColour == 0xffffffff)
		{
			Level.AddStaticLight(Origin + LightOffset, mthing->arg1 ?
				itof(mthing->arg1) * 8.0 : LightRadius);
		}
		else
		{
			Level.AddStaticLightRGB(Origin + LightOffset, mthing->arg1 ?
				itof(mthing->arg1) * 8.0 : LightRadius, LightColour);
		}
		bStaticLightSpwned = true;
	}

	//**********************************************************
	//
	// End of common OnMapSpawn
	//
	//**********************************************************


	//[Korax]
	// if (!bMissile && !bPickUp)
	if (bMonster || bGiveExperience)
	{
		experience = default.Health;
	}
	//::OnMapSpawn(mthing);
}

//==========================================================================
//
//	BeginPlay
//
//==========================================================================

void BeginPlay()
{
	::BeginPlay();
	if (bMissile)
	{
		SpawnOrigin = Origin;
	}
}

//==========================================================================
//
//	Physics
//
//	[CW] A duplicate of common EntityEx.Physics::Physics;
//		 yeah, I did this only for DominationSigil, to add support
//		 for bFixedFloatZ flag. Maybe there was better way, but I
//		 do not know it.
//
//==========================================================================

bool Physics(float DeltaTime)
{
	Prev_Org = Origin;

	float CummX = 0.0;
	float CummY = 0.0;
	if (Sector->AffectorData && bColideWithWorld && !bNoSector)
	{
		// killough 3/7/98: Carry things on floor
		// killough 3/20/98: use new sector list which reflects true members
		// killough 3/27/98: fix carrier bug
		// killough 4/4/98: Underwater, carry things even w/o gravity

		// Move objects only if on floor or underwater,
		// non-floating, and clipped.

		int CountX = 0;
		int CountY = 0;
		SectorThinker SecThink;
		for (SecThink = SectorThinker(Sector->AffectorData); SecThink;
			SecThink = SecThink.NextAffector)
		{
			if (!Scroller(SecThink))
			{
				continue;
			}
			float scrollx = Scroller(SecThink).CarryScrollX;
			float scrolly = Scroller(SecThink).CarryScrollY;
			if (!scrollx && !scrolly)
			{
				continue;
			}
			if (bNoGravity && (!Sector->heightsec ||
				(Sector->heightsec->bIgnoreHeightSec)))
			{
				continue;
			}
			float height = GetPlanePointZ(&Sector->floor, Origin);
			if (Origin.z > height)
			{
				if (!Sector->heightsec || (Sector->heightsec->bIgnoreHeightSec))
				{
					continue;
				}

				float waterheight = GetPlanePointZ(&Sector->heightsec->floor, Origin);
				if (waterheight > height && Origin.z >= waterheight)
				{
					continue;
				}
			}

			CummX += scrollx;
			CummY += scrolly;
			if (scrollx)
			{
				CountX++;
			}
			if (scrolly)
			{
				CountY++;
			}
		}

		// Some levels designed with Boom in mind actually want things to accelerate
		// at neighboring scrolling sector boundaries. But it is only important for
		// non-player objects.
		if (bIsPlayer || !Level.CompatBoomScroll)
		{
			if (CountX > 1)
			{
				CummX /= itof(CountX);
			}
			if (CountY > 1)
			{
				CummY /= itof(CountY);
			}
		}
	}

	CheckWater();
	if ((!bFloatBob || !bSpecial) && !bFixedFloatZ)
	{
		UpdateVelocity();
	}

	// momentum movement
	// Handle X and Y momentums
	XYMovement(DeltaTime, CummX, CummY);
	if (IsDestroyed())
	{
		// mobj was removed
		return false;
	}

	if (bFloatBob)
	{
		if (bSpecial)
		{
			// Floating item bobbing motion (special1 is height)
			if (Sector->bHasExtrafloors)
			{
				//	Make sure FloorZ is from bottom region.
				Origin.z = ONFLOORZ;
				LinkToWorld();
			}
			FloatBobPhase += DeltaTime;
			Origin.z = GetPlanePointZ(&Sector->floor, Origin) + Special1f +
				Level.Game.FloatBobOffsets[ftoi(FloatBobPhase * 35.0) & 63];
		}
		else
		{
			//	Floating bobbing motion for monsters.
			if (Sector->bHasExtrafloors)
			{
				//	Make sure FloorZ is from bottom region.
				Origin.z = ONFLOORZ;
				LinkToWorld();
			}
			Origin.z -= Level.Game.FloatBobOffsets[
				ftoi(FloatBobPhase * 35.0) & 63];
			FloatBobPhase += DeltaTime;
			Origin.z += Level.Game.FloatBobOffsets[
				ftoi(FloatBobPhase * 35.0) & 63];
		}
	}

	if (Velocity.z || (Origin.z != FloorZ && (!bFloatBob || (!bSpecial &&
		Origin.z - Level.Game.FloatBobOffsets[ftoi(FloatBobPhase * 35.0) & 63] != FloorZ))))
	{
		if (bPassMobj && !bMissile && !Level.CompatNoPassOver)
		{
			// Handle Z momentum and gravity
			EntityEx onmo = EntityEx(CheckOnmobj());
			if (onmo)
			{
				if (bIsPlayer)
				{
					if (Velocity.z < -DEFAULT_GRAVITY * 0.25 && !bFly)
					{
						PlayerLandedOnThing();
					}
				}
				if (onmo.Origin.z + onmo.Height - Origin.z <= MaxStepHeight)
				{
					if (bIsPlayer)
					{
						PlayerEx(Player).ViewHeight -=
							onmo.Origin.z + onmo.Height - Origin.z;
						PlayerEx(Player).DeltaViewHeight =
							(PlayerPawn(self).ViewHeight -
							PlayerEx(Player).ViewHeight) * 4.0;
					}
					Origin.z = onmo.Origin.z + onmo.Height;
				}
				bOnMobj = true;
				Velocity.z = 0.0;

				if (onmo.bOnmobjCopyVel)
				{
					Velocity.x = onmo.Velocity.x;
					Velocity.y = onmo.Velocity.y;
					if (onmo.Origin.z < onmo.FloorZ)
					{
						Origin.z += onmo.FloorZ - onmo.Origin.z;
						if (onmo.bIsPlayer)
						{
							PlayerEx(onmo.Player).ViewHeight -=
								onmo.FloorZ - onmo.Origin.z;
							PlayerEx(onmo.Player).DeltaViewHeight =
								(PlayerPawn(self).ViewHeight -
								PlayerEx(onmo.Player).ViewHeight) * 4.0;
						}
						onmo.Origin.z = onmo.FloorZ;
					}
				}
			}
			else
			{
				ZMovement(DeltaTime);
				bOnMobj = false;
			}
			if (IsDestroyed())
			{
				// entity was removed
				return false;
			}
		}
		else if ((Origin.z != FloorZ) || Velocity.z)
		{
			// Handle Z momentum and gravity
			ZMovement(DeltaTime);
			if (IsDestroyed())
			{
				// entity was removed
				return false;
			}
		}
	}
	return true;
}

//==========================================================================
//
//  DoSpecialDamage
//
//	[CW] Added CheckFriendlyFire
//
//==========================================================================

int DoSpecialDamage(EntityEx victim, EntityEx source, int damage)
{
	if (victim.bIsPlayer && MissilePoisonDamage > 0)
	{
		if (PlayerEx(victim.Player).CheckFriendlyFire(source, damage))
		{
			return -1;
		}

		victim.PoisonPlayer(source, MissilePoisonDamage);
		damage >>= 1;
		return damage;
	}
	return ::DoSpecialDamage(victim, source, damage);
}

//==========================================================================
//
//  Died
//
//==========================================================================

void Died(EntityEx source, EntityEx inflictor)
{
	::Died(source, inflictor);

	if (inflictor && ClassIsChildOf(inflictor.Class, Actor) && !bMonster)
		Actor(inflictor).IsDeathInflictor(self);

//[Korax]
	if (source && !bIsPlayer)
	{
		if (!source.bIsPlayer)
		{
			Actor(source).experience += ftoi(itof(experience) * ((90.0 + 
				itof(P_Random()) / 255.0 * 21.0) / 100.0) * (Level.World.GameSkill < 2 ? 
				125.0 : (Level.World.GameSkill < 3 ? 100.0 : 80.0)) / 100.0);
		}
		else
		{
			KAPlayerBase(source.Player).GiveExperience(ftoi(itof(experience) * ((90.0 + 
				itof(P_Random()) / 255.0 * 21.0) / 100.0) * (Level.World.GameSkill < 2 ? 
				125.0 : (Level.World.GameSkill < 3 ? 100.0 : 80.0)) / 100.0));
		}
	}

	//[CW] notify advanced game mode
	if (KAGameInfo(Level.Game).GameModel)
		KAGameInfo(Level.Game).GameModel.OnActorDeath(self, source);
}

//==========================================================================
//
//  IsDeathInflictor
//
//	[CW]
//
//==========================================================================

void IsDeathInflictor(EntityEx victim)
{
	// Currently only Pawn's death has a meaning here
	if (bMissile && !bNoAccuracy && victim.bMonster)
	{
		if (Target && Target.bIsPlayer)
		{
			if (Length(SpawnOrigin - victim.GetCentre()) >= HexenDefs::ACCURATE_SHOT_DISTANCE)
				KAPlayerBase(Target.Player).ConfirmTrophy(HexenDefs::trophycl_accuracy);
		}
	}
}

//==========================================================================
//
//	KilledByPlayer
//
//==========================================================================

void KilledByPlayer(PlayerPawn source)
{
}

//==========================================================================
//
//  SpawnCombatAttributes
//
//==========================================================================

void SpawnCombatAttributes(Actor master, Thinker shooter)
{
	if (master)
	{
		if (PlayerPawn(master))
		{
			Target = master;
			PInstigator = KAPlayerBase(Target.Player);
		}
		else if (master.Target)
		{
			Target = master.Target;
			PInstigator = master.PInstigator;
		}
		else
		{
			Target = master;
			PInstigator = none;
		}

		if (!Target)
		{
			print("master is %n", GetClassName(master.Class));
			print("shooter is %n", shooter ? GetClassName(shooter.Class) : '');
			Error("Actor::SpawnCombatAttributes : Target reference is not set to an object; bad algorythm?");
		}
	}
	
	if (EntityEx(shooter))
	{
		Obituary = EntityEx(shooter).Obituary;
	}
}

//==========================================================================
//
//  Blast
//
//==========================================================================

void Blast(Actor victim, Actor source, float strength)
{
	float angle;
	float ang;
	Actor A;
	float x;
	float y;
	float z;

	angle = atan2(victim.Origin.y - source.Origin.y,
		victim.Origin.x - source.Origin.x);
	if (strength < BLAST_FULLSTRENGTH)
	{
		victim.Velocity.x = strength * cos(angle) * 35.0;
		victim.Velocity.y = strength * sin(angle) * 35.0;
		if (victim.bIsPlayer)
		{
			// Players handled automatically
		}
		else
		{
			victim.bSlide = true;
			victim.bBlasted = true;
		}
	}
	else	// full strength blast from artifact
	{
		if (victim.bMissile)
		{
			if (victim.IsA('SorcererBall'))
			{
				// don't blast sorcerer balls
				return;
			}
			else if (victim.IsA('MageStaffFX2') || victim.IsA('InfernalHandFX'))
			{
				// Reflect to originator
				victim.Tracer = victim.Target;
				victim.Target = source;
			}
		}
		if (victim.IsA('HolyFX'))
		{
			if (victim.Tracer == source)
			{
				victim.Tracer = victim.Target;
				victim.Target = source;
			}
		}
		victim.Velocity.x = BLAST_SPEED * cos(angle) * 35.0;
		victim.Velocity.y = BLAST_SPEED * sin(angle) * 35.0;

		// Spawn blast puff
		ang = atan2(source.Origin.y - victim.Origin.y,
			source.Origin.x - victim.Origin.x);
		x = victim.Origin.x + (victim.Radius + 1.0) * cos(ang);
		y = victim.Origin.y + (victim.Radius + 1.0) * sin(ang);
		z = victim.Origin.z - victim.FloorClip + victim.Height / 2.0;
		A = Level.Spawn(BlastEffect, vector(x, y, z));
		if (A)
		{
			A.Velocity.x = victim.Velocity.x;
			A.Velocity.y = victim.Velocity.y;
		}

		if (victim.bMissile)
		{
			victim.Velocity.z = 8.0 * 35.0;
			A.Velocity.z = victim.Velocity.z;
		}
		else
		{
			victim.Velocity.z = 1000.0 / victim.Mass * 35.0;
		}
		if (victim.bIsPlayer)
		{
			// Players handled automatically
		}
		else
		{
			victim.bSlide = true;
			victim.bBlasted = true;
		}
	}
}

//==========================================================================
//
//  BlastRadius
//
//==========================================================================

final void BlastRadius(optional int Limit)
{
	Actor mo;
	float dist;
	int blasts = 0;
#ifdef FASTER_SEARCH
	EntityEx ee;
#endif

	PlaySound('BlastRadius', CHAN_ITEM);
	LineSpecialLevelInfo(Level).NoiseAlert(self, self);

#ifdef FASTER_SEARCH
	//foreach RadiusThings(ee, Origin, BLAST_RADIUS_DIST)
	foreach RoughBlockSearch(ee, 10)
#else
	foreach AllThinkers(Actor, mo)
#endif
	{
#ifdef FASTER_SEARCH
		if (!ClassIsChildOf(ee.Class, Actor))
		{
			continue;
		}

		mo = Actor(ee);
#endif

		if ((mo == self) || mo.bBoss)
		{
			// Not a valid monster
			continue;
		}
		if (mo.bCanBlast || mo.bIceCorpse)			// frozen corpse
		{
			// Let these special cases go
		}
		else if (mo.bMonster && (mo.Health <= 0))
		{
			continue;
		}
		else if (!mo.bMonster && !mo.bIsPlayer && !mo.bMissile)
		{
			// Must be monster, player, or missile
			continue;
		}
		if (mo.bDormant)
		{
			continue;	// no dormant creatures
		}
		if (mo.bDontBlast)
		{
			continue;
		}
		dist = DistTo(mo);
		if (dist > BLAST_RADIUS_DIST)
		{
			// Out of range
			continue;
		}
		Blast(mo, self, BLAST_FULLSTRENGTH);

		blasts++;
		if (specified_Limit && blasts >= Limit)
			break;
	}
}

//============================================================================
//
//	A_KArenaDragonFX2
//
//============================================================================

final void A_KArenaDragonFX2()
{
	Actor A;
	int i;
	float delay;

	// [CW] If shot by player (using 'Whyvern Breath spell') there should be less delay
	if (PInstigator /*Target.IsA('KArenaPlayerPawn')*/)
		delay = Random();
	else
		delay = 0.5 + Random();
	for (i = 1 + (P_Random() & 3); i; i--)
	{
		A = Spawn(DragonExplosion, Origin + vector((Random() - 0.5) * 64.0,
			(Random() - 0.5) * 64.0, (Random() - 0.5) * 16.0));
		if (A)
		{
			A.SpawnCombatAttributes(Actor(Target), self);
			A.StateTime = delay + Random() * 0.2 * itof(i);
		}
	}
}

//===========================================================================
//
//  A_KArenaMaceBallImpact2
//
//===========================================================================

final void A_KArenaMaceBallImpact2()
{
	Actor tiny;
	float angle;

	if (Origin.z <= FloorZ && HitFloorType())
	{
		// Landed in some sort of liquid
		Destroy();
		return;
	}
	if ((Origin.z != FloorZ) || (Velocity.z < 2.0 * 35.0))
	{
		// Explode
		Velocity = vector(0.0, 0.0, 0.0);
		bNoGravity = true;
		BounceType = BOUNCE_None;
		Gravity = 1.0;
		SendExplosion(RGB(255, 128, 0), 86.0, Origin);
	}
	else
	{
		// Bounce
		Velocity.z = Velocity.z * 192.0 / 256.0;
		SetState(IdleState);

		tiny = Spawn(MaceFX3, Origin);
		tiny.SpawnCombatAttributes(Actor(Target), self);
		angle = AngleMod360(Angles.yaw + 90.0);
		//tiny.Target = Target;
		//if (Target)
		//	tiny.PInstigator = Player(Target.Player);
		tiny.Angles.yaw = angle;
		tiny.Velocity.x =
			Velocity.x / 2.0 + (Velocity.z - 35.0) * cos(angle);
		tiny.Velocity.y =
			Velocity.y / 2.0 + (Velocity.z - 35.0) * sin(angle);
		tiny.Velocity.z = Velocity.z;
		tiny.CheckMissileSpawn();

		tiny = Spawn(MaceFX3, Origin);
		tiny.SpawnCombatAttributes(Actor(Target), self);
		angle = AngleMod360(Angles.yaw - 90.0);
		//tiny.Target = Target;
		//if (Target)
		//	tiny.PInstigator = Player(Target.Player);
		tiny.Angles.yaw = angle;
		tiny.Velocity.x =
			Velocity.x / 2.0 + (Velocity.z - 35.0) * cos(angle);
		tiny.Velocity.y =
			Velocity.y / 2.0 + (Velocity.z - 35.0) * sin(angle);
		tiny.Velocity.z = Velocity.z;
		tiny.CheckMissileSpawn();
	}
}

//============================================================================
//
//  A_KArenaCHolyAttack2
//
//  Spawns the spirits
//
//============================================================================

final void A_KArenaCHolyAttack2()
{
	int j;
	int i;
	Actor A;
	Actor tail;
	Actor next;

	for (j = 0; j < 4; j++)
	{
		A = Spawn(HolyFX, Origin);
		if (!A)
		{
			continue;
		}
		switch (j)
		{	// float bob index
		case 0:
			HolyFX(A).WeaveZ = P_Random() & 7;	// upper-left
			break;
		case 1:
			HolyFX(A).WeaveZ = 32 + (P_Random() & 7);	// upper-right
			break;
		case 2:
			HolyFX(A).WeaveXY = 32 + (P_Random() & 7);	// lower-left
			break;
		case 3:
			HolyFX(A).WeaveXY = 32 + (P_Random() & 7);
			HolyFX(A).WeaveZ = 32 + (P_Random() & 7);
			break;
		}
		A.Origin.z = Origin.z;
		A.Angles.yaw = AngleMod360(Angles.yaw +
			(45.0 + 45.0 / 2.0) - 45.0 * itof(j));
		A.Thrust(A.Angles.yaw, A.Speed * Level.Game.frametime);
		A.SpawnCombatAttributes(Actor(Target), self);
		//A.Target = Target;
		//if (Target)
		//	A.PInstigator = Player(Target.Player);
		A.Args[0] = 10;	// initial turn value
		A.Args[1] = 0;	// initial look angle
		if (Level.Game.deathmatch)
		{
			// Ghosts last slightly less longer in DeathMatch
			A.Health = 85;
		}
		if (Tracer)
		{
			A.Tracer = Tracer;
			//	Don't colide with world but colide with things, i.e explode
			A.bColideWithWorld = false;
			A.bSkullFly = true;
			A.bMissile = false;
		}
		tail = Spawn(HolyTail, A.Origin);
		tail.Target = A;	// parent
		for (i = 1; i < 3; i++)
		{
			next = Spawn(HolyTailTrail, A.Origin);
			tail.Tracer = next;
			tail = next;
		}
		//A.Obituary = Obituary;
	}
}
