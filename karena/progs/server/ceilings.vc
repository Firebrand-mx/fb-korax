//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************
//**
//**    CEILINGS
//**
//**************************************************************************

// MACROS ------------------------------------------------------------------

// CONSTANTS ---------------------------------------------------------------

enum
{
	CLEV_LOWERTOFLOOR,
	CLEV_RAISETOHIGHEST,
	CLEV_LOWERANDCRUSH,
	CLEV_CRUSHANDRAISE,
	CLEV_LOWERBYVALUE,
	CLEV_RAISEBYVALUE,
	CLEV_CRUSHRAISEANDSTAY,
	CLEV_MOVETOVALUETIMES8
};

// TYPES -------------------------------------------------------------------

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

// CODE --------------------------------------------------------------------

//==================================================================
//
//  EV_DoCeiling
//
//  Move a ceiling up/down and all around!
//
//==================================================================

int EV_DoCeiling(line_t * line, int *arg, int type)
{
	int secnum, rtn;
	float destHeight;
	sector_t *sec;
	CeilingMover Ceiling;

	secnum = -1;
	rtn = 0;

	for (secnum = FindSectorFromTag(arg[0], secnum); secnum >= 0;
		secnum = FindSectorFromTag(arg[0], secnum))
	{
		sec = &GLevel.Sectors[secnum];
		if (sec->SpecialData)
			continue;

		//
		// new door thinker
		//
		rtn = 1;
		Ceiling = NewSpecialThinker(CeilingMover);
		sec->SpecialData = Ceiling;
		Ceiling.sector = sec;
		Ceiling.crush = 0;
		Ceiling.speed = itof(arg[1]) * 35.0 / 8.0;//4.0;
		switch (type)
		{
		case CLEV_CRUSHRAISEANDSTAY:
			Ceiling.crush = arg[2];	// arg[2] = crushing value
			Ceiling.topheight = sec->ceilingheight;
			Ceiling.bottomheight = sec->floorheight + 8.0;
			Ceiling.direction = -1;
			break;
		case CLEV_CRUSHANDRAISE:
			Ceiling.topheight = sec->ceilingheight;
		case CLEV_LOWERANDCRUSH:
			Ceiling.crush = arg[2];	// arg[2] = crushing value
		case CLEV_LOWERTOFLOOR:
			Ceiling.bottomheight = sec->floorheight;
			if (type != CLEV_LOWERTOFLOOR)
			{
				Ceiling.bottomheight += 8.0;
			}
			Ceiling.direction = -1;
			break;
		case CLEV_RAISETOHIGHEST:
			Ceiling.topheight = FindHighestCeilingSurrounding(sec, NULL);
			Ceiling.direction = 1;
			break;
		case CLEV_LOWERBYVALUE:
			Ceiling.bottomheight = sec->ceilingheight - itof(arg[2]);
			Ceiling.direction = -1;
			break;
		case CLEV_RAISEBYVALUE:
			Ceiling.topheight = sec->ceilingheight + itof(arg[2]);
			Ceiling.direction = 1;
			break;
		case CLEV_MOVETOVALUETIMES8:
			destHeight = itof(arg[2]) * 8.0;
			if (arg[3])
			{
				destHeight = -destHeight;
			}
			if (sec->ceilingheight <= destHeight)
			{
				Ceiling.direction = 1;
				Ceiling.topheight = destHeight;
				if (sec->ceilingheight == destHeight)
				{
					rtn = 0;
				}
			}
			else if (sec->ceilingheight > destHeight)
			{
				Ceiling.direction = -1;
				Ceiling.bottomheight = destHeight;
			}
			break;
		default:
			rtn = 0;
			break;
		}
		Ceiling.tag = sec->tag;
		Ceiling.type = type;
		if (rtn)
		{
			SectorStartSequence(Ceiling.sector,
				seq_name[SEQ_PLATFORM + Ceiling.sector->seqType]);
		}
	}
	return rtn;
}

//==================================================================
//
//  EV_CeilingCrushStop
//
//  Stop a ceiling from crushing!
//
//==================================================================

int EV_CeilingCrushStop(line_t * line, int *args)
{
	CeilingMover C;

	FOREACH(CeilingMover, C)
	{
		if (C.tag == args[0])
		{
			SectorStopSequence(C.sector);
			C.sector->SpecialData = none;
			TagFinished(C.sector->tag);
			RemoveSpecialThinker(C);
			return 1;
		}
	}
	return 0;
}

//**************************************************************************
//
//  $Log$
//  Revision 1.2  2005/02/10 15:17:56  firebrand_kh
//  Constants for common line specials
//  Updated special utilites.
//
//  Revision 1.15  2005/01/25 17:45:15  dj_jl
//  Constants for common line specials
//  Updated special utilites.
//
//  Revision 1.14  2002/11/02 08:24:10  dj_jl
//  New style classes.
//
//  Revision 1.13  2002/09/07 16:28:26  dj_jl
//  Added Level class.
//
//  Revision 1.12  2002/04/11 16:48:10  dj_jl
//  New base classes for sector thinkers, Tick function.
//
//  Revision 1.11  2002/03/09 17:57:02  dj_jl
//  Got rid of function pointers, made most of the physics functions native.
//
//  Revision 1.10  2002/01/29 18:16:19  dj_jl
//  Adjusted speed to fix timing
//
//  Revision 1.9  2002/01/15 08:12:26  dj_jl
//  Replaced some pointers with references
//
//  Revision 1.8  2002/01/12 18:02:48  dj_jl
//  Replaced some C style casts with dynamic casts
//
//  Revision 1.7  2002/01/07 12:25:57  dj_jl
//  Changed copyright year
//
//  Revision 1.6  2001/12/18 18:31:01  dj_jl
//  Added class SectorThinker
//
//  Revision 1.5  2001/09/25 17:13:50  dj_jl
//  Beautification
//
//  Revision 1.4  2001/09/24 17:17:17  dj_jl
//  Created thinker classes
//
//  Revision 1.3  2001/09/20 16:20:00  dj_jl
//  Start using object-oriented stuff, beautification
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
