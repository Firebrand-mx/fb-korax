//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class ClassBoss : Pawn
	abstract;

bool bHealthInitialised;
int StrafeCount;

float StrafeRange;

//============================================================================
//
//  A_ClassBossHealth
//
//============================================================================

void A_ClassBossHealth()
{
	if (Level.Game.netgame && !Level.Game.deathmatch)	// co-op only
	{
		if (!bHealthInitialised)
		{
			Health *= 5;
			bHealthInitialised = true;	// has been initialised
		}
	}
}

//============================================================================
//
//  A_FastChase
//
//============================================================================

void A_FastChase()
{
	float delta;
	float dist;
	float ang;

	if (ReactionCount)
	{
		ReactionCount--;
	}

	// Modify target threshold
	if (Threshold)
	{
		Threshold--;
	}

	if (Level.Game.gameskill == sk_nightmare)
	{
		// Monsters move faster in nightmare mode
		StateTime *= 0.5;
		if (StateTime < 0.1)
		{
			StateTime = 0.1;
		}
	}

	//
	// turn towards movement direction if not there yet
	//
	if (MoveDir < 8)
	{
		Angles.yaw = itof(ftoi(Angles.yaw / 45.0)) * 45.0;
		delta = AngleMod180(Angles.yaw - itof(MoveDir) * 45.0);
		if (delta > 0.0)
		{
			Angles.yaw = AngleMod360(Angles.yaw - 45.0);
		}
		else if (delta < 0.0)
		{
			Angles.yaw = AngleMod360(Angles.yaw + 45.0);
		}
	}

	if (!Enemy || !Enemy.bShootable)
	{
		// look for a new enemy
		if (LookForPlayers(true))
		{
			// got a new enemy
			return;
		}
		SetState(IdleState);
		return;
	}

	//
	// don't attack twice in a row
	//
	if (bJustAttacked)
	{
		bJustAttacked = false;
		if (Level.Game.gameskill != sk_nightmare)
			NewChaseDir();
		return;
	}

	// Strafe
	if (StrafeCount > 0)
	{
		StrafeCount--;
	}
	else
	{
		StrafeCount = 0;
		Velocity.x = 0.0;
		Velocity.y = 0.0;
		dist = DistTo(Enemy);
		if (dist < StrafeRange)
		{
			if (P_Random() < 100)
			{
				ang = atan2(Enemy.Origin.y - Origin.y,
					Enemy.Origin.x - Origin.x);
				if (P_Random() < 128)
					ang = AngleMod360(ang + 90.0);
				else
					ang = AngleMod360(ang - 90.0);
				Velocity.x = 13.0 * cos(ang) * 35.0;
				Velocity.y = 13.0 * sin(ang) * 35.0;
				StrafeCount = 3;	// strafe time
			}
		}
	}

	//
	// check for missile attack
	//
	if (MissileState)
	{
		if ((Level.Game.gameskill == sk_nightmare) || !MoveCount)
		{
			if (CheckMissileRange())
			{
				SetState(MissileState);
				bJustAttacked = true;
				return;
			}
		}
	}

	//
	// possibly choose another enemy
	//
	if (Level.Game.netgame && !Threshold && !CanSee(Enemy))
	{
		if (LookForPlayers(true))
			return;	// got a new enemy
	}

	//
	// chase towards player
	//
	if (!StrafeCount)
	{
		if (--MoveCount < 0 || !StepMove())
		{
			NewChaseDir();
		}
	}
}

defaultproperties
{
	bNoMorph = true;
	StrafeRange = 640.0;
}
