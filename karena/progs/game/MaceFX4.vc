//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class MaceFX4 : MaceFX3;

//===========================================================================
//
//  A_DeathBallImpact
//
//===========================================================================

void A_DeathBallImpact()
{
	int i;
	float angle;
	int newAngle;
	TAVec angles;

	if ((Origin.z <= FloorZ) && (GetFloorType() != FLOOR_SOLID))
	{
		// Landed in some sort of liquid
		Remove();
		return;
	}
	if ((Origin.z <= FloorZ) && Velocity.z && bFloorBounce)
	{
		// Bounce
		newAngle = false;
		if (Enemy)
		{
			if (!Enemy.bShootable)
			{
				// Target died
				Enemy = none;
			}
			else
			{
				// Seek
				angle = atan2(Enemy.Origin.y - Origin.y,
					Enemy.Origin.x - Origin.x);
				newAngle = true;
			}
		}
		else
		{
			// Find new target
			angles.pitch = 0.0;
			angles.yaw = 0.0;
			angles.roll = 0.0;
			for (i = 0; i < 16; i++)
			{
				AimLineAttack(&angles, 10.0 * 64.0);
				if (linetarget && Instigator != linetarget)
				{
					Enemy = linetarget;
					angle = atan2(linetarget.Origin.y - Origin.y,
						linetarget.Origin.x - Origin.x);
					newAngle = true;
					break;
				}
				angles.yaw = AngleMod360(angles.yaw + 45.0 / 2.0);
			}
		}
		if (newAngle)
		{
			Angles.yaw = angle;
			Velocity.x = Speed * cos(angle);
			Velocity.y = Speed * sin(angle);
		}
		SetState(IdleState);
		PlaySound('PlatformStop', CHAN_VOICE);
	}
	else
	{
		// Explode
		bNoGravity = true;
		PlaySound('PhoenixHit', CHAN_VOICE);
	}
}

__states__
{
	S_MACEFX4_1('FX02', 4, 99.0 / 35.0, S_MACEFX4_1) { A_CheckStopMoving(); }
	S_MACEFXI4_1('FX02', 2 | FF_FULLBRIGHT, 4.0 / 35.0, S_MACEFXI1_2) { A_DeathBallImpact(); }
}

defaultproperties
{
	MissileDamage = 200;
	bTelestomp = true;
	bNoTeleport = false;
	IdleState = S_MACEFX4_1;
	DeathState = S_MACEFXI4_1;

	//[CW]
	deathmsgi[0] = 31;
}

//**************************************************************************
//
//  $Log$
//  Revision 1.4  2006/02/15 23:37:45  dj_jl
//  Moved all server progs global variables to classes.
//
//  Revision 1.3  2005/12/11 21:37:29  dj_jl
//  Made path traversal callbacks class members.
//
//  Revision 1.2  2005/07/27 21:00:06  firebrand_kh
//  Balanced weapon damage rates & mana usage
//
//  Revision 1.1  2004/11/16 13:33:21  dj_jl
//  Initial import.
//
//  Revision 1.1  2002/10/26 16:32:22  dj_jl
//  New style of defining classes.
//
//**************************************************************************
