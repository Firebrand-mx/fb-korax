//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**		##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id$
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Weapon : Actor
	abstract;

const float LOWERSPEED		= 6.0;
const float RAISESPEED		= 6.0;

const float WEAPONBOTTOM	= 128.0;
const float WEAPONTOP		= 32.0;

int Mana;
int manause;
bool needsnomana;
state UpState;
state DownState;
state ReadyState;
state AttackState;
state HoldAttackState;
state FlashState;
float PSpriteSY;	// Y-adjustment value for full screen

bool dex_mod;
bool str_mod;
bool int_mod;
bool wis_mod;
bool active_damage; 	// [FB] TRUE if PI Damage is active
string PickUpMessage;

TVec ShotPosition;	// [CW]

state GetUpState()
{
	return UpState;
}

state GetDownState()
{
	return DownState;
}

state GetReadyState()
{
	return ReadyState;
}

//==========================================================================
//
//	GetAttackState
//
//==========================================================================

state GetAttackState()
{
	return Player(Owner.Player).Refire ? HoldAttackState : AttackState;
}

void GotMana(int InMana)
{
}

// FIXME
void SnoutSniff()
{
}

//==========================================================================
//
//  IsWeaponManaUsable
//
//==========================================================================

final bool IsWeaponManaUsable()
{
	if (Mana == HexenDefs::NUMMANA) 
	{
		    return Player(Owner.Player).Mana[HexenDefs::MANA_1] >= Player(Owner.Player).GetWeaponManaUse(self)
			&& Player(Owner.Player).Mana[HexenDefs::MANA_2] >= Player(Owner.Player).GetWeaponManaUse(self)
			&& Player(Owner.Player).Mana[HexenDefs::MANA_3] >= Player(Owner.Player).GetWeaponManaUse(self);
	}
	else 
	{
		return Player(Owner.Player).Mana[Mana] >= Player(Owner.Player).GetWeaponManaUse(self);
	}
}

//==========================================================================
//
//  UseWeaponMana
//
//==========================================================================

void UseWeaponMana()
{
	if (Mana == HexenDefs::NUMMANA)
	{
		Player(Owner.Player).Mana[HexenDefs::MANA_1] -= Player(Owner.Player).GetWeaponManaUse(self);
		Player(Owner.Player).Mana[HexenDefs::MANA_2] -= Player(Owner.Player).GetWeaponManaUse(self);
		Player(Owner.Player).Mana[HexenDefs::MANA_3] -= Player(Owner.Player).GetWeaponManaUse(self);
	}
	else 
	{
		Player(Owner.Player).Mana[Mana] -= Player(Owner.Player).GetWeaponManaUse(self);
	}
	if (Player(Owner.Player).Mana[Mana] < 0)
	{
		Player(Owner.Player).Mana[Mana] = 0;
	}	
}

//===========================================================================
//
//  A_GunFlash
//
//===========================================================================

final void A_GunFlash()
{
	Owner.SetState(Actor(Owner).MissileState);
	Owner.Player.SetViewState(ps_flash, FlashState);
}


//==========================================================================
//
//  A_Light0
//
//==========================================================================

final void A_Light0()
{
	Player(Owner.Player).ExtraLight = 0;
	Owner.Effects &= ~HexenDefs::EF_DLIGHT_MASK;
}

//===========================================================================
//
//  A_Light1
//
//===========================================================================

final void A_Light1()
{
	Player(Owner.Player).ExtraLight = 1;
}

//===========================================================================
//
//  A_Light2
//
//===========================================================================

final void A_Light2()
{
	Player(Owner.Player).ExtraLight = 2;
}

//==========================================================================
//
//  A_WeaponReady
//
//  The player can fire the weapon or change to another weapon at this time.
//
//==========================================================================

final void A_WeaponReady()
{
	float angle;

	// Change player from attack state
	if (StateIsInRange(Owner.State, Actor(Owner).MissileState,
		PlayerPawn(Owner).AttackEndState, 3))
	{
		Owner.SetState(Actor(Owner).IdleState);
	}
	// Put the weapon away if the player has a pending weapon or has died.
	if (Player(Owner.Player).PendingWeapon != HexenDefs::wp_nochange ||
		!Player(Owner.Player).Health)
	{
		Owner.Player.SetViewState(ps_weapon, GetDownState());
		return;
	}

	// Check for fire. 
	if (Owner.Player.Buttons & BT_ATTACK)
	{
		Owner.Player.bAttackDown = true;
		Player(Owner.Player).FireWeapon();
		return;
	}
	else
	{
		Owner.Player.bAttackDown = false;
	}

	if (Player(Owner.Player).PClass != HexenDefs::PCLASS_PIG/*!Player(Player).MorphTime*/)
	{
		// Bob the weapon based on movement speed.
		angle = AngleMod360(180.0 * XLevel.Time);
		Owner.Player.ViewStates[ps_weapon].SX = 1.0 + Player(Owner.Player).Bob * cos(angle);
		if (angle >= 180.0)
		{
			angle -= 180.0;
		}
		Owner.Player.ViewStates[ps_weapon].SY = WEAPONTOP + Player(Owner.Player).Bob * sin(angle);
	}
}

//==========================================================================
//
//  A_Lower
//
//==========================================================================

final void A_Lower()
{
	if (!Owner.Player)
	{
		return;
	}
	if (Player(Owner.Player).PClass == HexenDefs::PCLASS_PIG/*Player(Player).MorphTime*/)
	{
		Owner.Player.ViewStates[ps_weapon].SY = WEAPONBOTTOM;
	}
	else
	{
		//	FIXME!!
		if (Level.Game.frametime < 1.0 / 35.0)
			Owner.Player.ViewStates[ps_weapon].SY += LOWERSPEED;
		else
			Owner.Player.ViewStates[ps_weapon].SY += LOWERSPEED * 35.0 * Level.Game.frametime;
	}
	if (Owner.Player.ViewStates[ps_weapon].SY < WEAPONBOTTOM)
	{
		// Not lowered all the way yet
		return;
	}
	if (Owner.Player.PlayerState == PST_DEAD)
	{
		// Player is dead, so don't bring up a pending weapon
		Owner.Player.ViewStates[ps_weapon].SY = WEAPONBOTTOM;
		return;
	}
	if (!Player(Owner.Player).Health)
	{
		// Player is dead, so keep the weapon off screen
		Owner.Player.SetViewState(ps_weapon, none);
		return;
	}
	Player(Owner.Player).SetWeapon(Player(Owner.Player).PendingWeapon);
	Player(Owner.Player).BringUpWeapon();
}

//==========================================================================
//
//  A_Raise
//
//==========================================================================

final void A_Raise()
{
	if (!Owner.Player)
	{
		return;
	}
	//	FIXME!!
	if (Level.Game.frametime < 1.0 / 35.0)
		Owner.Player.ViewStates[ps_weapon].SY -= RAISESPEED;
	else
		Owner.Player.ViewStates[ps_weapon].SY -= RAISESPEED * 35.0 * Level.Game.frametime;
	if (Owner.Player.ViewStates[ps_weapon].SY > WEAPONTOP)
	{
		// Not raised all the way yet
		return;
	}
	Owner.Player.ViewStates[ps_weapon].SY = WEAPONTOP;
	Owner.Player.SetViewState(ps_weapon, GetReadyState());
}

//==========================================================================
//
//  A_ReFire
//
//  The player can re fire the weapon without lowering it entirely.
//
//==========================================================================

final void A_ReFire()
{
	if ((Owner.Player.Buttons & BT_ATTACK) &&
		Player(Owner.Player).PendingWeapon == HexenDefs::wp_nochange && Player(Owner.Player).Health)
	{
		Player(Owner.Player).Refire++;
		Player(Owner.Player).FireWeapon();
	}
	else
	{
		Player(Owner.Player).Refire = 0;
		Player(Owner.Player).CheckMana();
	}
}

//===========================================================================
//
//  GunShot (Used for the pistol)
//
//===========================================================================

final void GunShot(Actor A, int accurate, TVec dir)
{
	int damage;

	//  Make a copy of angles because inacurate shoot will modify them
	if (!accurate)
	{
		TAVec angles;

		VectorAngles(&dir, &angles);
		angles.yaw = AngleMod360(angles.yaw +
			(Random() - Random()) * 45.0 / 8.0);
		AngleVector(&angles, &dir);
	}

	damage = 10;//5 * (P_Random() % 3 + 1);

	if (int_mod)
	{
		if(!active_damage)
		{
			damage = damage * Player(Owner.Player).strength / 10;
		}
		else // [FB] PI Damage
		{
			damage = (damage * Player(Owner.Player).strength / 10) * ftoi(3.1415);
		}
	}

	ShotPosition = Player(Owner.Player).MO.Origin;	// [CW]
	A.LineAttack(dir, MISSILERANGE, damage, DoomPuff);
}

//===========================================================================
//
//  GunShot2 (Used for the chaingun)
//
//===========================================================================

final void GunShot2(Actor A, int accurate, TVec dir)
{
	int damage;

	//  Make a copy of angles because inacurate shoot will modify them
	if (!accurate)
	{
		TAVec angles;

		VectorAngles(&dir, &angles);
		angles.yaw = AngleMod360(angles.yaw +
			(Random() - Random()) * 45.0 / 8.0);
		AngleVector(&angles, &dir);
	}

	damage = 14;//7 * (P_Random() % 3 + 1);

	if (int_mod)
	{
		if(!active_damage)
		{
			damage = damage * Player(Owner.Player).strength / 10;
		}
		else // [FB] PI Damage
		{
			damage = (damage * Player(Owner.Player).strength / 10) * ftoi(3.1415);
		}
	}

	ShotPosition = Player(Owner.Player).MO.Origin;	// [CW]
	A.LineAttack(dir, MISSILERANGE, damage, DoomPuff);
}

defaultproperties
{
	bHidden = true;
	bNoBlockmap = true;
}
