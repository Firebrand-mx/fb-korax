//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class ZBell : Decoration
	__mobjinfo__(8065);

//==========================================================================
//
//	A_BellReset1
//
//==========================================================================

void A_BellReset1()
{
	bNoGravity = true;
	Height *= 4.0;
}

//==========================================================================
//
//	Activate
//
//==========================================================================

bool Activate()
{
	if (Health > 0)
	{
		Damage(none, none, 10);	// 'ring' the bell
	}
	return true;
}

//==========================================================================
//
//	A_BellReset2
//
//==========================================================================

void A_BellReset2()
{
	bShootable = true;
	bCorpse = false;
	Health = 5;
}

__states__
{
	S_ZBELL('BBLL', 5, 'objects/bell.md2', 0, -1.0, none) { }
	S_ZBELL_X1('BBLL', 0, 'objects/bell.md2', 1, 4.0 / 35.0, S_ZBELL_X2) { A_BellReset1(); }
	S_ZBELL_X2('BBLL', 1, 'objects/bell.md2', 2, 4.0 / 35.0, S_ZBELL_X3) { }
	S_ZBELL_X3('BBLL', 2, 'objects/bell.md2', 3, 4.0 / 35.0, S_ZBELL_X4) { }
	S_ZBELL_X4('BBLL', 3, 'objects/bell.md2', 4, 5.0 / 35.0, S_ZBELL_X5) { A_Scream(); }
	S_ZBELL_X5('BBLL', 2, 'objects/bell.md2', 5, 4.0 / 35.0, S_ZBELL_X6) { }
	S_ZBELL_X6('BBLL', 1, 'objects/bell.md2', 6, 4.0 / 35.0, S_ZBELL_X7) { }
	S_ZBELL_X7('BBLL', 0, 'objects/bell.md2', 7, 3.0 / 35.0, S_ZBELL_X8) { }
	S_ZBELL_X8('BBLL', 4, 'objects/bell.md2', 8, 4.0 / 35.0, S_ZBELL_X9) { }
	S_ZBELL_X9('BBLL', 5, 'objects/bell.md2', 9, 5.0 / 35.0, S_ZBELL_X10) { }
	S_ZBELL_X10('BBLL', 6, 'objects/bell.md2', 10, 6.0 / 35.0, S_ZBELL_X11) { A_Scream(); }
	S_ZBELL_X11('BBLL', 5, 'objects/bell.md2', 11, 5.0 / 35.0, S_ZBELL_X12) { }
	S_ZBELL_X12('BBLL', 4, 'objects/bell.md2', 12, 4.0 / 35.0, S_ZBELL_X13) { }
	S_ZBELL_X13('BBLL', 0, 'objects/bell.md2', 1, 4.0 / 35.0, S_ZBELL_X14) { }
	S_ZBELL_X14('BBLL', 1, 'objects/bell.md2', 2, 5.0 / 35.0, S_ZBELL_X15) { }
	S_ZBELL_X15('BBLL', 2, 'objects/bell.md2', 3, 5.0 / 35.0, S_ZBELL_X16) { }
	S_ZBELL_X16('BBLL', 3, 'objects/bell.md2', 4, 6.0 / 35.0, S_ZBELL_X17) { A_Scream(); }
	S_ZBELL_X17('BBLL', 2, 'objects/bell.md2', 5, 5.0 / 35.0, S_ZBELL_X18) { }
	S_ZBELL_X18('BBLL', 1, 'objects/bell.md2', 6, 5.0 / 35.0, S_ZBELL_X19) { }
	S_ZBELL_X19('BBLL', 0, 'objects/bell.md2', 7, 4.0 / 35.0, S_ZBELL_X20) { }
	S_ZBELL_X20('BBLL', 4, 'objects/bell.md2', 8, 5.0 / 35.0, S_ZBELL_X21) { }
	S_ZBELL_X21('BBLL', 5, 'objects/bell.md2', 9, 5.0 / 35.0, S_ZBELL_X22) { }
	S_ZBELL_X22('BBLL', 6, 'objects/bell.md2', 10, 7.0 / 35.0, S_ZBELL_X23) { A_Scream(); }
	S_ZBELL_X23('BBLL', 5, 'objects/bell.md2', 11, 5.0 / 35.0, S_ZBELL_X24) { }
	S_ZBELL_X24('BBLL', 4, 'objects/bell.md2', 12, 5.0 / 35.0, S_ZBELL_X25) { }
	S_ZBELL_X25('BBLL', 0, 'objects/bell.md2', 1, 5.0 / 35.0, S_ZBELL_X26) { }
	S_ZBELL_X26('BBLL', 1, 'objects/bell.md2', 2, 6.0 / 35.0, S_ZBELL_X27) { }
	S_ZBELL_X27('BBLL', 2, 'objects/bell.md2', 3, 6.0 / 35.0, S_ZBELL_X28) { }
	S_ZBELL_X28('BBLL', 3, 'objects/bell.md2', 4, 7.0 / 35.0, S_ZBELL_X29) { A_Scream(); }
	S_ZBELL_X29('BBLL', 2, 'objects/bell.md2', 5, 6.0 / 35.0, S_ZBELL_X30) { }
	S_ZBELL_X30('BBLL', 1, 'objects/bell.md2', 6, 6.0 / 35.0, S_ZBELL_X31) { }
	S_ZBELL_X31('BBLL', 0, 'objects/bell.md2', 7, 5.0 / 35.0, S_ZBELL_X32) { }
	S_ZBELL_X32('BBLL', 4, 'objects/bell.md2', 8, 6.0 / 35.0, S_ZBELL_X33) { }
	S_ZBELL_X33('BBLL', 5, 'objects/bell.md2', 9, 6.0 / 35.0, S_ZBELL_X34) { }
	S_ZBELL_X34('BBLL', 6, 'objects/bell.md2', 10, 7.0 / 35.0, S_ZBELL_X35) { A_Scream(); }
	S_ZBELL_X35('BBLL', 5, 'objects/bell.md2', 11, 6.0 / 35.0, S_ZBELL_X36) { }
	S_ZBELL_X36('BBLL', 4, 'objects/bell.md2', 12, 6.0 / 35.0, S_ZBELL_X37) { }
	S_ZBELL_X37('BBLL', 0, 'objects/bell.md2', 1, 6.0 / 35.0, S_ZBELL_X38) { }
	S_ZBELL_X38('BBLL', 1, 'objects/bell.md2', 2, 6.0 / 35.0, S_ZBELL_X39) { }
	S_ZBELL_X39('BBLL', 2, 'objects/bell.md2', 3, 6.0 / 35.0, S_ZBELL_X40) { }
	S_ZBELL_X40('BBLL', 1, 'objects/bell.md2', 6, 7.0 / 35.0, S_ZBELL_X41) { }
	S_ZBELL_X41('BBLL', 0, 'objects/bell.md2', 7, 8.0 / 35.0, S_ZBELL_X42) { }
	S_ZBELL_X42('BBLL', 4, 'objects/bell.md2', 12, 12.0 / 35.0, S_ZBELL_X43) { }
	S_ZBELL_X43('BBLL', 0, 'objects/bell.md2', 1, 10.0 / 35.0, S_ZBELL_X44) { }
	S_ZBELL_X44('BBLL', 1, 'objects/bell.md2', 2, 12.0 / 35.0, S_ZBELL_X45) { }
	S_ZBELL_X45('BBLL', 0, 'objects/bell.md2', 1, 12.0 / 35.0, S_ZBELL_X46) { }
	S_ZBELL_X46('BBLL', 4, 'objects/bell.md2', 12, 14.0 / 35.0, S_ZBELL_X47) { }
	S_ZBELL_X47('BBLL', 0, 'objects/bell.md2', 1, 1.0 / 35.0, S_ZBELL) { A_BellReset2(); }
}

defaultproperties
{
	Health = 5;
	Radius = 56.0;
	Height = 120.0;
	Mass = 99999.0;
	bSolid = true;
	bShootable = true;
	bSpawnCeiling = true;
	bNoGravity = true;
	bNoBlood = true;
	IdleState = S_ZBELL;
	DeathState = S_ZBELL_X1;
	DeathSound = 'BellRing';
}
