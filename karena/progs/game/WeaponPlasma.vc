//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**		##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id$
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class WeaponPlasma : WeaponEx;

//===========================================================================
//
//  A_FirePlasma
//
//===========================================================================

final void A_FirePlasma()
{
	EntityEx mo;

	UseWeaponMana();

	if (!(P_Random() & 1))
		Owner.Player.SetViewState(ps_flash, FlashState);
	else
		Owner.Player.SetViewState(ps_flash, S_PLASMAFLASH2);

	mo = Actor(Owner).SpawnPlayerMissile(PlasmaShot);
	if (mo && int_mod)
	{
		if(!active_damage)
		{
			mo.MissileDamage = mo.MissileDamage * Player(Owner.Player).intelligence / 10;
		}
		else // [FB] PI Damage
		{
			mo.MissileDamage = (mo.MissileDamage * Player(Owner.Player).intelligence / 10) * ftoi(3.1415);
		}
	}
}

__states__
{
	S_PLASMA('PLSG', 0, 1.0 / 35.0, S_PLASMA) = A_WeaponReady
	S_PLASMADOWN('PLSG', 0, 1.0 / 35.0, S_PLASMADOWN) = A_Lower
	S_PLASMAUP('PLSG', 0, 1.0 / 35.0, S_PLASMAUP) = A_Raise
	S_PLASMA1('PLSG', 0, 3.0 / 35.0, S_PLASMA2) = A_FirePlasma
	S_PLASMA2('PLSG', 1, 20.0 / 35.0, S_PLASMA) = A_ReFire
	S_PLASMAFLASH1('PLSF', 0 | FF_FULLBRIGHT, 4.0 / 35.0, S_PLASMA_LIGHTDONE) = A_Light1
	S_PLASMAFLASH2('PLSF', 1 | FF_FULLBRIGHT, 4.0 / 35.0, S_PLASMA_LIGHTDONE) = A_Light1
	S_PLASMA_LIGHTDONE('PLSG', 0, 0.0 / 35.0, none) = A_Light0
}

defaultproperties
{
	Slot = 7;
	SelectionOrder = 1500;
	UpState = S_PLASMAUP;
	DownState = S_PLASMADOWN;
	ReadyState = S_PLASMA;
	AttackState = S_PLASMA1;
	FlashState = S_PLASMAFLASH1;
	HoldAttackState = S_PLASMA1;
	AmmoType1 = ItemManaCombined;
	AmmoUse1 = 8;
	BotCombatDist = 384.0 + MISSILERANGE;
	wis_mod = true;
	int_mod = true;
	dex_mod = false;
	str_mod = false;
	bBotChooseMelee = false;
	bBotChooseMedium = true;
	bBotChooseRanged = true;
	bBotProjectile = true;
	PickupMessage = "PLASMA RIFLE";
}
