//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**		##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id$
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class WeaponFighterHammerMelee : WeaponFighterHammer;

//==========================================================================
//
//  A_FHammerMeleeAttack
//
//==========================================================================

final void A_FHammerMeleeAttack()
{
	Actor		pmo = Actor(Owner);
	int			damage;
	float		power;
	TAVec		angles;
	TVec		vforward;
	EntityEx	AimTarget;

	damage = 60 + (P_Random() & 63);
	if (str_mod)
	{
		if(!active_damage)
		{
			damage = damage * Player(Owner.Player).strength / 10;
		}
		else // [FB] PI Damage
		{
			damage = (damage * Player(Owner.Player).strength / 10) * ftoi(3.1415);
		}
	}
	power = 10.0;
	AimTarget = pmo.AimEx(vforward, HammerRange, 45.0 / 32.0, 16, HammerRange);
	if (AimTarget)
	{
		VectorAngles(&vforward, &angles);
		if (pmo.LineAttack(vforward, HammerRange, damage, HammerPuff))
		{
			pmo.PlaySound('FighterHammerMiss', CHAN_WEAPON);
		}
		Player(Owner.Player).AdjustPlayerAngle(AimTarget);
		if (AimTarget.bMonster || AimTarget.bIsPlayer)
		{
			AimTarget.Thrust(angles.yaw, power);
		}
	}
	else
	{
		// didn't find any targets in meleerange, so set to throw out a hammer
		if (pmo.LineAttack(vforward, HammerRange, damage, HammerPuff))
		{
			pmo.PlaySound('FighterHammerMiss', CHAN_WEAPON);
		}
	}
}

states
{
Fire:
	FHMR B 6 Offset(5, 0)
	FHMR C 3 Offset(5, 0) A_FHammerMeleeAttack
	FHMR D 3 Offset(5, 0)
	FHMR E 2 Offset(5, 0)
	FHMR E 10 Offset(5, 150)
	FHMR A 1 Offset(0, 60)
	FHMR A 1 Offset(0, 55)
	FHMR A 1 Offset(0, 50)
	FHMR A 1 Offset(0, 45)
	FHMR A 1 Offset(0, 40)
	FHMR A 1 Offset(0, 35)
	FHMR A 1
	Goto Super::Ready
}

/*THIRD*/
defaultproperties
{
	PSpriteSY = -10.0;
	HammerRange = MELEERANGE + MELEERANGE / 2.0;
	wis_mod = false;
	int_mod = false;
	dex_mod = true;
	str_mod = true;
	bBotChooseMelee = false;
	bBotChooseMedium = false;
	bBotChooseRanged = false;
	refire_tics = 31.0;
	fire_tics = 9.0;
	PickupMessage = "HALF HAMMER OF RETRIBUTION";
}
