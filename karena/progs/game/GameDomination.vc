//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**		##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id: GameDomination.vc 508 2006-07-10 19:02:43Z firebrand_kh $
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class GameDomination : GameModel;


enum
{
	state_preparegame,
	state_gameplay,		// no actual game states here
	state_finished
};

enum
{
	object_domsigil
};

array<DominationSigil>	DomSigils;


//==========================================================================
//
//	AllowedTeams
//
//==========================================================================

int AllowedTeams()
{
	return 2;
}

//==========================================================================
//
//	BeginState
//
//	ACS callable
//
//==========================================================================

void BeginState(int newstate)
{
	int i, count;

	dprint("BeginState: %i", newstate);

	switch(newstate)
	{
	case state_preparegame:
		if (!PrepareGame())
		{
			dprint("GameDomination : failed to prepare game, delay start");
			State = -1;
			return;
		}

		dprint("GameDomination : starting game!");
		
		HandleEvent(event_playablestatebegins, none, 0,0,0,0);
		
		for (i = 0; i < MAXPLAYERS; i++)
		{
			if (Game.Teams[0] && Game.Teams[0].Players[i])
			   Game.Teams[0].Players[i].UpdateScore(HexenDefs::scoreevent_PlayerReset);
			if (Game.Teams[1] && Game.Teams[1].Players[i])
			   Game.Teams[1].Players[i].UpdateScore(HexenDefs::scoreevent_PlayerReset);
		}
		if (Game.Teams[0])
			Game.Teams[0].UpdateScore(HexenDefs::scoreevent_TeamReset);
		if (Game.Teams[1])
			Game.Teams[1].UpdateScore(HexenDefs::scoreevent_TeamReset);
		EndCurrentState(state_gameplay);
		return;

	case state_gameplay:
		if (!Game.Teams[0] || !Game.Teams[1])
		{
			dprint("GameDomination::BeginState : state_gameplay : not enouph teams, ending game");
			EndCurrentState(state_finished);
			return;
		}
		
		if (!DomSigils.Num)
		{
			dprint("GameDomination::BeginState : state_gameplay : not enouph domination sigils, ending game");
			EndCurrentState(state_finished);
			return;
		}		
		
		Game.bcentreprint("go for it!");
		
		break;

	case state_finished:
		//
		// do something here?
		//
		break;
	};

	State = newstate;
}

//==========================================================================
//
//	NotifyUpdateTeams
//
//==========================================================================

void NotifyUpdateTeams()
{
	dprint("GameCTF::NotifyUpdateTeams : State = %i, Teams[0] = %i, Teams[1] = %i", State, Game.Teams[0], Game.Teams[1]);
	if (State < 0 && (Game.Teams[0] && Game.Teams[1]))
		BeginState(state_preparegame);
	else if (State == state_gameplay && (!Game.Teams[0] || !Game.Teams[1]))
		EndCurrentState(state_finished);
}

//==========================================================================
//
//	SetGameObject
//
//	ACS callable
//
//==========================================================================

void SetGameObject(EntityEx A, int object, int arg1, int arg2, int arg3)
{
	switch (object)
	{
	case object_domsigil:
		if (!A.IsA('DominationSigil'))
		{
			dprint("GameDomination::SetGameObject : A is not of DominationSigil class");
			break;
		}
		DomSigils.Num = DomSigils.Num + 1;
		DomSigils[DomSigils.Num - 1] = DominationSigil(A);
		break;
	}
}

//==========================================================================
//
//	PrepareGame
//
//==========================================================================

bool PrepareGame()
{
	if (!Game.Teams[0] || !Game.Teams[1])
	{
		dprint("GameDomination : not enouph teams");
		return false;
	}

	if (!DomSigils.Num)
	{
		dprint("GameDomination : not enouph sigils");
		return false;
	}

	return true;
}

defaultproperties
{
}
