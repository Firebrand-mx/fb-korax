//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**	        ##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id$
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Minotaur : Pawn
	__mobjinfo__(9);

//
// Minotaur variables
//

bool bFloorFireRefired;		//  internal to minotaur AI
float StartTime;			//  minotaur start time
//  Args[4]         charge duration countdown

state LookState;
state SeeStateNF;
state RoamState;
state FloorFireState;
state FloorFireRefireState;
state ChargeState;

float MinotaurLookDist;
float ChargeSpeed;

//==========================================================================
//
//  InflictorModifyDamage
//
//==========================================================================

int InflictorModifyDamage(Actor victim, Actor source, int damage)
{
	if (bSkullFly)
	{
		// Slam only when in charge mode
		victim.MinotaurSlam(self);
		return -1;
	}
	return damage;
}

//==========================================================================
//
//  Died
//
//==========================================================================

void Died(EntityEx source)
{
	::Died(source);
	if (Tracer && Tracer.Health > 0)
	{
		if (!Actor(Tracer).ActiveMinotaur())
		{
			Player(Tracer.Player).Powers[pw_minotaur] = 0.0;
		}
	}
}

//==========================================================================
//
//  MorphMonster
//
//==========================================================================

bool MorphMonster()
{
	if (::MorphMonster())
	{
		// check for turning off minotaur power for active icon
		if (Tracer && Tracer.Health > 0)
		{
			if (!Actor(Tracer).ActiveMinotaur())
			{
				Player(Tracer.Player).Powers[pw_minotaur] = 0.0;
			}
		}
		return true;
	}
	return false;
}

//===========================================================================
//
//  RoughCheckThing
//
//===========================================================================

bool RoughCheckThing(Entity Other)
{
	Actor link = Actor(Other);
	
	if (!link.bCountKill && (!link.bIsPlayer || link == Tracer))
	{
		return false;
	}
	if (!link.bShootable)
	{
		return false;
	}
	if (link.bDormant)
	{
		return false;
	}
	if (Minotaur(link) && link.Tracer == Tracer)
	{
		return false;
	}
	if (Level.Game.netgame && MainGameInfo(Level.Game).GameType == HexenDefs::game_sweep
		/*!Level.Game.deathmatch*/ && link.bIsPlayer)
	{
		return false;
	}
	if (!CanSee(link))
	{
		return false;
	}
	return true;
}

//============================================================================
//
//  A_MinotaurFade0
//
//============================================================================

final void A_MinotaurFade0()
{
	Alpha = 0.333;
}

//============================================================================
//
//  A_MinotaurFade1
//
//============================================================================

final void A_MinotaurFade1()
{
	// Second level of transparency
	Alpha = 0.666;
}

//============================================================================
//
//  A_MinotaurFade2
//
//============================================================================

final void A_MinotaurFade2()
{
	// Make fully visible
	Alpha = 1.0;
}

//============================================================================
//
//  A_MinotaurLook
//
//  Look for enemy of player
//
//============================================================================

final void A_MinotaurLook()
{
	Actor mo;
	float dist;
	int i;

	Target = none;

	if (Level.Game.deathmatch)	// Quick search for players
	{
		for (i = 0; i < MAXPLAYERS; i++)
		{
			if (!Level.Game.Players[i] || !Level.Game.Players[i].bSpawned)
				continue;
			mo = Actor(Level.Game.Players[i].MO);
			if (mo == Tracer)
				continue;
			if (mo.Health <= 0)
				continue;
			// [FB] Check if an advanced game mode is active
			if (MainGameInfo(Level.Game).GameModel)
			{
				int teamfactor;

				teamfactor = MainGameInfo(Level.Game).GameModel.TeamFactor(Tracer,
							mo);
				// [FB] We've got a team factor, just check if it's an ally or not
				if (teamfactor != GameModel::teamfactor_any &&
					teamfactor != GameModel::teamfactor_enemy)
				{
					continue;
				}
			}
			dist = DistTo(mo);
			if (dist > MinotaurLookDist)
				continue;
			// [FB] If we are in a team gameplay mode, check the players colour too
			if (MainGameInfo(Level.Game).GameType >= HexenDefs::NUMGAMESNOTEAM &&
				Level.Game.Players[i].Colour == Player(Tracer.Player).Colour)
				continue;

			Target = mo;
			break;
		}
	}

	if (!Target)	// Near player monster search
	{
		if (Tracer && (Tracer.Health > 0) && Tracer.bIsPlayer)
			Target = Actor(Tracer.RoughMonsterSearch(20));
		else
			Target = Actor(RoughMonsterSearch(20));
	}

	if (!Target)	// Normal monster search
	{
		foreach AllThinkers(Actor, mo)
		{
			if (!mo.bCountKill)
				continue;
			if (mo.Health <= 0)
				continue;
			if (!mo.bShootable)
				continue;
			dist = DistTo(mo);
			if (dist > MinotaurLookDist)
				continue;
			if ((mo == Tracer) || (mo == self))
				continue;
			if (mo.Class == Minotaur)
			{
				if (mo.Tracer == Tracer)
					continue;
				// [FB] Check if an advanced game mode is active
				if (MainGameInfo(Level.Game).GameModel)
				{
					int teamfactor;

					teamfactor = MainGameInfo(Level.Game).GameModel.TeamFactor(Tracer,
								mo.Tracer);
					// [FB] We've got a team factor, just check if it's an ally or not
					if (teamfactor != GameModel::teamfactor_any &&
						teamfactor != GameModel::teamfactor_enemy)
					{
						continue;
					}
				}
			}

			Target = mo;
			break;	// Found mobj to attack
		}
	}

	if (Target)
	{
		SetState(SeeStateNF);
	}
	else
	{
		SetState(RoamState);
	}
}

//============================================================================
//
//  A_MinotaurChase
//
//============================================================================

final void A_MinotaurChase()
{
	Alpha = 1.0;	// In case pain caused him to skip his fade in.

	if (XLevel.Time - StartTime >= MAULATORTIME)
	{
		Damage(none, none, 10000);
		return;
	}

	if (P_Random() < 30)
		A_MinotaurLook();	// adjust to closest target

	if (!Target || (Target.Health <= 0) || !Target.bShootable)
	{
		// look for a new enemy
		SetState(LookState);
		return;
	}

	FaceMovementDirection();
	ReactionCount = 0;

	// Melee attack
	if (MeleeState && CheckMeleeRange())
	{
		if (AttackSound)
		{
			PlaySound(AttackSound, CHAN_WEAPON);
		}
		SetState(MeleeState);
		return;
	}

	// Missile attack
	if (MissileState && CheckMissileRange())
	{
		SetState(MissileState);
		return;
	}

	// chase towards target
	if (!StepMove())
	{
		NewChaseDir();
	}

	// Active sound
	if (ActiveSound && P_Random() < 6)
	{
		PlaySound(ActiveSound, CHAN_VOICE);
	}

}

//============================================================================
//
//  A_MinotaurRoam
//
//============================================================================

final void A_MinotaurRoam()
{
	Alpha = 1.0;	// In case pain caused him to skip his fade in.

	if (XLevel.Time - StartTime >= MAULATORTIME)
	{
		Damage(none, none, 10000);
		return;
	}

	if (P_Random() < 30)
		A_MinotaurLook();	// adjust to closest target

	if (P_Random() < 6)
	{
		//Choose new direction
		MoveDir = P_Random() % 8;
		FaceMovementDirection();
	}
	if (!StepMove())
	{
		// Turn
		if (P_Random() & 1)
			MoveDir = (++MoveDir) % 8;
		else
			MoveDir = (MoveDir + 7) % 8;
		FaceMovementDirection();
	}
}

//============================================================================
//
//  A_MinotaurAtk1
//
//  Melee attack.
//
//============================================================================

final void A_MinotaurAtk1()
{
	if (!Target)
	{
		return;
	}

	PlaySound('MaulatorHamSwing', CHAN_WEAPON);
	if (CheckMeleeRange())
	{
		Target.Damage(self, self, HITDICE(4));
	}
}

//============================================================================
//
//  A_MinotaurDecide
//
//  Choose a missile attack.
//
//============================================================================

final void A_MinotaurDecide()
{
	float dist;

	if (!Target)
		return;
	dist = DistTo(Target);

	if (Target.Origin.z + Target.Height > Origin.z &&
		Target.Origin.z + Target.Height < Origin.z + Height &&
		dist < 16.0 * 64.0 && dist > 1.0 * 64.0 && P_Random() < 230)
	{
		// Charge attack
		// Don't call the state function right away
		SetState(ChargeState);
		bSkullFly = true;
		A_FaceTarget();
		Velocity = Normalise(Target.Origin - Origin) * ChargeSpeed;
		Args[4] = 35 / 2;	// Charge duration
	}
	else if (Target.Origin.z == Target.FloorZ &&
		dist < 9.0 * 64.0 && P_Random() < 100)
	{
		// Floor fire attack
		SetState(FloorFireState);
		bFloorFireRefired = false;
	}
	else
	{
		// Swing attack
		A_FaceTarget();
		// Don't need to call SetState because the current state
		// falls through to the swing attack
	}
}

//============================================================================
//
//  A_MinotaurAtk2
//
//  Swing attack.
//
//============================================================================

final void A_MinotaurAtk2()
{
	Actor mo;
	float angle;
	float momz;

	if (!Target)
		return;

	PlaySound('MaulatorHamSwing', CHAN_WEAPON);
	if (CheckMeleeRange())
	{
		Target.Damage(self, self, HITDICE(3));
		return;
	}
	mo = SpawnMissile(Target, MinotaurMissile);
	if (mo)
	{
		momz = mo.Velocity.z;
		angle = mo.Angles.yaw;
		SpawnMissileAngle(MinotaurMissile,
			AngleMod360(angle - (45.0 / 8.0)), momz);
		SpawnMissileAngle(MinotaurMissile,
			AngleMod360(angle + (45.0 / 8.0)), momz);
		SpawnMissileAngle(MinotaurMissile,
			AngleMod360(angle - (45.0 / 16.0)), momz);
		SpawnMissileAngle(MinotaurMissile,
			AngleMod360(angle + (45.0 / 16.0)), momz);
	}
}

//============================================================================
//
//  A_MinotaurAtk3
//
//  Floor fire attack.
//
//============================================================================

final void A_MinotaurAtk3()
{
	Actor mo;

	if (!Target)
	{
		return;
	}
	if (CheckMeleeRange())
	{
		Target.Damage(self, self, HITDICE(3));
		if (Target.bIsPlayer)
		{
			// Squish the player
			Player(Target.Player).DeltaViewHeight = -512.0;
		}
	}
	else
	{
		mo = SpawnMissile(Target, MinotaurFloorFire1);
		if (mo)
		{
			mo.PlaySound('MaulatorHamHit', CHAN_VOICE);
		}
	}
	if (P_Random() < 192 && !bFloorFireRefired)
	{
		SetState(FloorFireRefireState);
		bFloorFireRefired = true;
	}
}

//============================================================================
//
//  A_MinotaurCharge
//
//============================================================================

final void A_MinotaurCharge()
{
	Actor puff;

	if (!Target)
		return;

	if (Args[4] > 0)
	{
		puff = Spawn(PunchPuff, Origin);
		puff.Velocity.z = 2.0 * 35.0;
		Args[4]--;
	}
	else
	{
		bSkullFly = false;
		SetState(SeeState);
	}
}

//============================================================================
//
//  A_SmokePuffExit
//
//============================================================================

final void A_SmokePuffExit()
{
	Spawn(MinotaurSmokeExit, Origin);
}

__states__
{
	S_MNTR_SPAWN1('MNTR', 0, 15.0 / 35.0, S_MNTR_SPAWN2) = none
	S_MNTR_SPAWN2('MNTR', 0, 15.0 / 35.0, S_MNTR_SPAWN3) = A_MinotaurFade1
	S_MNTR_SPAWN3('MNTR', 0, 3.0 / 35.0, S_MNTR_LOOK1) = A_MinotaurFade2
	S_MNTR_LOOK1('MNTR', 0, 10.0 / 35.0, S_MNTR_LOOK2) = A_MinotaurLook
	S_MNTR_LOOK2('MNTR', 1, 10.0 / 35.0, S_MNTR_LOOK1) = A_MinotaurLook
	S_MNTR_WALK1_NF('MNTR', 0, 5.0 / 35.0, S_MNTR_WALK2) = none
	S_MNTR_WALK1('MNTR', 0, 5.0 / 35.0, S_MNTR_WALK2) = A_MinotaurChase
	S_MNTR_WALK2('MNTR', 1, 5.0 / 35.0, S_MNTR_WALK3) = A_MinotaurChase
	S_MNTR_WALK3('MNTR', 2, 5.0 / 35.0, S_MNTR_WALK4) = A_MinotaurChase
	S_MNTR_WALK4('MNTR', 3, 5.0 / 35.0, S_MNTR_WALK1) = A_MinotaurChase
	S_MNTR_ROAM1_NF('MNTR', 0, 5.0 / 35.0, S_MNTR_ROAM2) = none
	S_MNTR_ROAM1('MNTR', 0, 5.0 / 35.0, S_MNTR_ROAM2) = A_MinotaurRoam
	S_MNTR_ROAM2('MNTR', 1, 5.0 / 35.0, S_MNTR_ROAM3) = A_MinotaurRoam
	S_MNTR_ROAM3('MNTR', 2, 5.0 / 35.0, S_MNTR_ROAM4) = A_MinotaurRoam
	S_MNTR_ROAM4('MNTR', 3, 5.0 / 35.0, S_MNTR_ROAM1) = A_MinotaurRoam
	S_MNTR_ATK1_1('MNTR', 6, 10.0 / 35.0, S_MNTR_ATK1_2) = A_FaceTarget
	S_MNTR_ATK1_2('MNTR', 7, 7.0 / 35.0, S_MNTR_ATK1_3) = A_FaceTarget
	S_MNTR_ATK1_3('MNTR', 8, 12.0 / 35.0, S_MNTR_WALK1) = A_MinotaurAtk1
	S_MNTR_ATK2_1('MNTR', 6, 10.0 / 35.0, S_MNTR_ATK2_2) = A_MinotaurDecide
	S_MNTR_ATK2_2('MNTR', 9, 4.0 / 35.0, S_MNTR_ATK2_3) = A_FaceTarget
	S_MNTR_ATK2_3('MNTR', 10, 9.0 / 35.0, S_MNTR_WALK1) = A_MinotaurAtk2
	S_MNTR_ATK3_1('MNTR', 6, 10.0 / 35.0, S_MNTR_ATK3_2) = A_FaceTarget
	S_MNTR_ATK3_2('MNTR', 7, 7.0 / 35.0, S_MNTR_ATK3_3) = A_FaceTarget
	S_MNTR_ATK3_3('MNTR', 8, 12.0 / 35.0, S_MNTR_WALK1) = A_MinotaurAtk3
	S_MNTR_ATK3_4('MNTR', 8, 12.0 / 35.0, S_MNTR_ATK3_1) = none
	S_MNTR_ATK4_1('MNTR', 5, 2.0 / 35.0, S_MNTR_ATK4_2) = none
	S_MNTR_ATK4_2('MNTR', 5, 2.0 / 35.0, S_MNTR_ATK4_2) = A_MinotaurCharge
	S_MNTR_PAIN1('MNTR', 4, 3.0 / 35.0, S_MNTR_PAIN2) = none
	S_MNTR_PAIN2('MNTR', 4, 6.0 / 35.0, S_MNTR_WALK1) = A_Pain
	S_MNTR_DIE1('MNTR', 4, 6.0 / 35.0, S_MNTR_DIE2) = none
	S_MNTR_DIE2('MNTR', 4, 2.0 / 35.0, S_MNTR_DIE3) = A_Scream
	S_MNTR_DIE3('MNTR', 4, 5.0 / 35.0, S_MNTR_DIE4) = A_SmokePuffExit
	S_MNTR_DIE4('MNTR', 4, 5.0 / 35.0, S_MNTR_DIE5) = none
	S_MNTR_DIE5('MNTR', 4, 5.0 / 35.0, S_MNTR_DIE6) = A_NoBlocking
	S_MNTR_DIE6('MNTR', 4, 5.0 / 35.0, S_MNTR_DIE7) = none
	S_MNTR_DIE7('MNTR', 4, 5.0 / 35.0, S_MNTR_DIE8) = A_MinotaurFade1
	S_MNTR_DIE8('MNTR', 4, 5.0 / 35.0, S_MNTR_DIE9) = A_MinotaurFade0
	S_MNTR_DIE9('MNTR', 4, 10.0 / 35.0, none) = none
}

defaultproperties
{
	Health = 2500;
	Radius = 28.0;
	Height = 100.0;
	Mass = 800.0;
	StepSpeed = 16.0;
	PainChance = 0.09765625;
	MissileDamage = 7;
	Alpha = 0.333;
	ChargeSpeed = 805.0;
	MinotaurLookDist = 16.0 * 54.0;
	IdleState = S_MNTR_SPAWN1;
	LookState = S_MNTR_LOOK1;
	SeeState = S_MNTR_WALK1;
	SeeStateNF = S_MNTR_WALK1_NF;
	RoamState = S_MNTR_ROAM1_NF;
	MeleeState = S_MNTR_ATK1_1;
	MissileState = S_MNTR_ATK2_1;
	FloorFireState = S_MNTR_ATK3_1;
	FloorFireRefireState = S_MNTR_ATK3_4;
	ChargeState = S_MNTR_ATK4_1;
	PainState = S_MNTR_PAIN1;
	DeathState = S_MNTR_DIE1;
	SightSound = 'MaulatorSight';
	ActiveSound = 'MaulatorActive';
	AttackSound = 'MaulatorHamSwing';
	PainSound = 'MaulatorPain';
	DeathSound = 'MaulatorDeath';
	bActivateMCross = false;
	bCheckNoMonsters = false;	// We want minoaturs also in deathmatch
	bEnemy = true;

	//[CW]
	pawnname = 18;
//	deathmsgi[0] = 67;
	deathmsgi = 25;
}
