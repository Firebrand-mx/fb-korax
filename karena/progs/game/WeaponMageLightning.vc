//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class WeaponMageLightning : Weapon;

//==========================================================================
//
//  A_LightningReady
//
//==========================================================================

void A_LightningReady()
{
	A_WeaponReady();
	if (P_Random() < 160)
	{
		Player.MO.PlaySound('MageLightningReady', CHAN_WEAPON);
	}
}

//==========================================================================
//
//  A_MLightningAttack
//
//==========================================================================

void A_MLightningAttack()
{
	LightningFloor fmo;
	LightningCeiling cmo;

	fmo = LightningFloor(Player(Player).SpawnPlayerMissile(LightningFloor));
	cmo = LightningCeiling(Player(Player).SpawnPlayerMissile(LightningCeiling));
	if (fmo)
	{
		fmo.ZigZagCount = 0;
		fmo.LightningLink = cmo;
		fmo.A_LightningZap();
	}
	if (cmo)
	{
		cmo.Enemy = none;	// mobj that it will track
		cmo.LightningLink = fmo;
		cmo.A_LightningZap();
	}
	Player.MO.PlaySound('MageLightningFire', CHAN_WEAPON);
	UseWeaponMana();
}

__states__
{
	S_MLIGHTNINGREADY('MLNG', 0 | FF_FULLBRIGHT, 1.0 / 35.0, S_MLIGHTNINGREADY2) { A_WeaponReady(); }
	S_MLIGHTNINGREADY2('MLNG', 0 | FF_FULLBRIGHT, 1.0 / 35.0, S_MLIGHTNINGREADY3) { A_WeaponReady(); }
	S_MLIGHTNINGREADY3('MLNG', 0 | FF_FULLBRIGHT, 1.0 / 35.0, S_MLIGHTNINGREADY4) { A_WeaponReady(); }
	S_MLIGHTNINGREADY4('MLNG', 0 | FF_FULLBRIGHT, 1.0 / 35.0, S_MLIGHTNINGREADY5) { A_WeaponReady(); }
	S_MLIGHTNINGREADY5('MLNG', 0 | FF_FULLBRIGHT, 1.0 / 35.0, S_MLIGHTNINGREADY6) { A_WeaponReady(); }
	S_MLIGHTNINGREADY6('MLNG', 0 | FF_FULLBRIGHT, 1.0 / 35.0, S_MLIGHTNINGREADY7) { A_LightningReady(); }
	S_MLIGHTNINGREADY7('MLNG', 1 | FF_FULLBRIGHT, 1.0 / 35.0, S_MLIGHTNINGREADY8) { A_WeaponReady(); }
	S_MLIGHTNINGREADY8('MLNG', 1 | FF_FULLBRIGHT, 1.0 / 35.0, S_MLIGHTNINGREADY9) { A_WeaponReady(); }
	S_MLIGHTNINGREADY9('MLNG', 1 | FF_FULLBRIGHT, 1.0 / 35.0, S_MLIGHTNINGREADY10) { A_WeaponReady(); }
	S_MLIGHTNINGREADY10('MLNG', 1 | FF_FULLBRIGHT, 1.0 / 35.0, S_MLIGHTNINGREADY11) { A_WeaponReady(); }
	S_MLIGHTNINGREADY11('MLNG', 1 | FF_FULLBRIGHT, 1.0 / 35.0, S_MLIGHTNINGREADY12) { A_WeaponReady(); }
	S_MLIGHTNINGREADY12('MLNG', 1 | FF_FULLBRIGHT, 1.0 / 35.0, S_MLIGHTNINGREADY13) { A_WeaponReady(); }
	S_MLIGHTNINGREADY13('MLNG', 2 | FF_FULLBRIGHT, 1.0 / 35.0, S_MLIGHTNINGREADY14) { A_WeaponReady(); }
	S_MLIGHTNINGREADY14('MLNG', 2 | FF_FULLBRIGHT, 1.0 / 35.0, S_MLIGHTNINGREADY15) { A_WeaponReady(); }
	S_MLIGHTNINGREADY15('MLNG', 2 | FF_FULLBRIGHT, 1.0 / 35.0, S_MLIGHTNINGREADY16) { A_WeaponReady(); }
	S_MLIGHTNINGREADY16('MLNG', 2 | FF_FULLBRIGHT, 1.0 / 35.0, S_MLIGHTNINGREADY17) { A_WeaponReady(); }
	S_MLIGHTNINGREADY17('MLNG', 2 | FF_FULLBRIGHT, 1.0 / 35.0, S_MLIGHTNINGREADY18) { A_WeaponReady(); }
	S_MLIGHTNINGREADY18('MLNG', 2 | FF_FULLBRIGHT, 1.0 / 35.0, S_MLIGHTNINGREADY19) { A_LightningReady(); }
	S_MLIGHTNINGREADY19('MLNG', 1 | FF_FULLBRIGHT, 1.0 / 35.0, S_MLIGHTNINGREADY20) { A_WeaponReady(); }
	S_MLIGHTNINGREADY20('MLNG', 1 | FF_FULLBRIGHT, 1.0 / 35.0, S_MLIGHTNINGREADY21) { A_WeaponReady(); }
	S_MLIGHTNINGREADY21('MLNG', 1 | FF_FULLBRIGHT, 1.0 / 35.0, S_MLIGHTNINGREADY22) { A_WeaponReady(); }
	S_MLIGHTNINGREADY22('MLNG', 1 | FF_FULLBRIGHT, 1.0 / 35.0, S_MLIGHTNINGREADY23) { A_WeaponReady(); }
	S_MLIGHTNINGREADY23('MLNG', 1 | FF_FULLBRIGHT, 1.0 / 35.0, S_MLIGHTNINGREADY24) { A_WeaponReady(); }
	S_MLIGHTNINGREADY24('MLNG', 1 | FF_FULLBRIGHT, 1.0 / 35.0, S_MLIGHTNINGREADY) { A_WeaponReady(); }
	S_MLIGHTNINGDOWN('MLNG', 0 | FF_FULLBRIGHT, 1.0 / 35.0, S_MLIGHTNINGDOWN) { A_Lower(); }
	S_MLIGHTNINGUP('MLNG', 0 | FF_FULLBRIGHT, 1.0 / 35.0, S_MLIGHTNINGUP) { A_Raise(); }
	S_MLIGHTNINGATK_1('MLNG', 3 | FF_FULLBRIGHT, 3.0 / 35.0, S_MLIGHTNINGATK_2) { }
	S_MLIGHTNINGATK_2('MLNG', 4 | FF_FULLBRIGHT, 3.0 / 35.0, S_MLIGHTNINGATK_3) { }
	S_MLIGHTNINGATK_3('MLNG', 5 | FF_FULLBRIGHT, 4.0 / 35.0, S_MLIGHTNINGATK_4) { A_MLightningAttack(); }
	S_MLIGHTNINGATK_4('MLNG', 6 | FF_FULLBRIGHT, 4.0 / 35.0, S_MLIGHTNINGATK_5) { }
	S_MLIGHTNINGATK_5('MLNG', 7 | FF_FULLBRIGHT, 3.0 / 35.0, S_MLIGHTNINGATK_6) { }
	S_MLIGHTNINGATK_6('MLNG', 8 | FF_FULLBRIGHT, 3.0 / 35.0, S_MLIGHTNINGATK_7) { }
	S_MLIGHTNINGATK_7('MLNG', 8 | FF_FULLBRIGHT, 6.0 / 35.0, S_MLIGHTNINGATK_8) { SY = 199.0; }
	S_MLIGHTNINGATK_8('MLNG', 2 | FF_FULLBRIGHT, 2.0 / 35.0, S_MLIGHTNINGATK_9) { SY = 55.0; }
	S_MLIGHTNINGATK_9('MLNG', 1 | FF_FULLBRIGHT, 2.0 / 35.0, S_MLIGHTNINGATK_10) { SY = 50.0; }
	S_MLIGHTNINGATK_10('MLNG', 1 | FF_FULLBRIGHT, 2.0 / 35.0, S_MLIGHTNINGATK_11) { SY = 45.0; }
	S_MLIGHTNINGATK_11('MLNG', 1 | FF_FULLBRIGHT, 2.0 / 35.0, S_MLIGHTNINGREADY) { SY = 40.0; }
}

/*FIFTH*/
defaultproperties
{
	Mana = HexenDefs::MANA_1;
	manause = 15;
	UpState = S_MLIGHTNINGUP;
	DownState = S_MLIGHTNINGDOWN;
	ReadyState = S_MLIGHTNINGREADY;
	AttackState = S_MLIGHTNINGATK_1;
	HoldAttackState = S_MLIGHTNINGATK_1;
	PSpriteSY = 20.0;
	wis_mod = true;
	int_mod = true;
	dex_mod = false;
	str_mod = false;
	PickUpMessage = "ARC OF DEATH";
}

//**************************************************************************
//
//  $Log$
//  Revision 1.6  2006/03/02 18:40:23  dj_jl
//  Don't use game specific classes in common.
//
//  Revision 1.5  2006/02/17 19:17:52  dj_jl
//  Moved common defs to classes.
//
//  Revision 1.4  2006/02/15 23:37:46  dj_jl
//  Moved all server progs global variables to classes.
//
//  Revision 1.3  2005/07/27 21:00:06  firebrand_kh
//  Balanced weapon damage rates & mana usage
//
//  Revision 1.2  2005/06/03 14:42:00  firebrand_kh
//  Some fixes
//
//  Revision 1.1  2004/11/16 13:33:22  dj_jl
//  Initial import.
//
//  Revision 1.3  2003/11/12 16:50:47  dj_jl
//  Changed player structure into a class
//
//  Revision 1.2  2003/03/08 12:41:44  dj_jl
//  Removing class pointers.
//
//  Revision 1.1  2002/10/26 16:32:27  dj_jl
//  New style of defining classes.
//
//**************************************************************************
