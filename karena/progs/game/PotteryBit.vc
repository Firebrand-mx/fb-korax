//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class PotteryBit : Fragment;

state BitState;

//==========================================================================
//
//  A_PotteryChooseBit
//
//==========================================================================

final void A_PotteryChooseBit()
{
	BitState = GetStatePlus(FindState('Death'), 1 + 2 * (P_Random() % 5),
		true);
	SetState(BitState);
	StateTime = 8.0 + Random() * 16.0;
}

//==========================================================================
//
//  A_PotteryCheck
//
//==========================================================================

final void A_PotteryCheck()
{
	int i;
	Actor pmo;

	for (i = 0; i < MAXPLAYERS; i++)
	{
		if (!Level.Game.Players[i] || !Level.Game.Players[i].bSpawned)
		{
			continue;
		}
		pmo = Actor(Level.Game.Players[i].MO);
		if (CanSee(pmo) && (fabs(AngleMod180(atan2(Origin.y - pmo.Origin.y,
			Origin.x - pmo.Origin.x) - pmo.Angles.yaw)) <= 45.0))
		{
			// Previous state (pottery bit waiting state)
			SetState(BitState);
			return;
		}
	}
}

states
{
Spawn:
	PBIT A -1
	Stop
	PBIT B -1
	Stop
	PBIT C -1
	Stop
	PBIT D -1
	Stop
	PBIT E -1
	Stop
Death:
	PBIT F 0 A_PotteryChooseBit
	Stop
	PBIT F 140
	PBIT F 1 A_PotteryCheck
	Stop
	PBIT G 140
	PBIT G 1 A_PotteryCheck
	Stop
	PBIT H 140
	PBIT H 1 A_PotteryCheck
	Stop
	PBIT I 140
	PBIT I 1 A_PotteryCheck
	Stop
	PBIT J 140
	PBIT J 1 A_PotteryCheck
	Stop
}

defaultproperties
{
	Radius = 5.0;
	Height = 5.0;
	bNoBlockmap = false;
	bDropOff = false;
	bNoGravity = false;
}
