//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**		##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id$
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class WeaponBlaster : KArenaWeapon;

//===========================================================================
//
//  A_FireBlasterPL1
//
//===========================================================================

final void A_FireBlasterPL1()
{
	int damage;
	float bulletslope;
	TVec dir;
	TAVec angles;

	UseWeaponMana();
//	dir = Aim(Player.MO, Player.MO.Angles.yaw, 16.0 * 64.0);
	angles = Owner.Angles;
	Actor(Owner).AimLineAttack(dir, angles, 3.0 * MELEERANGE / 2.0);
	damage = 42; //30 + (P_Random() & 25);
	if (int_mod)
	{
		if(!active_damage)
		{
			damage = damage * Player(Owner.Player).strength / 10;
		}
		else // [FB] PI Damage
		{
			damage = (damage * Player(Owner.Player).strength / 10) * ftoi(3.1415);
		}
	}
	if (Player(Owner.Player).Refire)
	{
		VectorRotateAroundZ(&dir, (Random() - Random()) * 45.0 / 8.0);
	}
	Actor(Owner).LineAttack(dir, MISSILERANGE, damage, BlasterPuff1);
	ShotPosition = Player(Owner.Player).MO.Origin;	// [CW]
	Owner.PlaySound('BlasterFire', CHAN_WEAPON);
}

//===========================================================================
//
//  A_FireBlasterPL2
//
//===========================================================================

final void A_FireBlasterPL2()
{
	EntityEx A;

	UseWeaponMana();
	A = Actor(Owner).SpawnPlayerMissile_2(self, BlasterFX1);
	if (A)
	{
		A.bBlaster = true;
		if (int_mod)
		{
			if(!active_damage)
			{
				A.MissileDamage = A.MissileDamage * Player(Owner.Player).strength / 10;
			}
			else // [FB] PI Damage
			{
				A.MissileDamage = (A.MissileDamage * Player(Owner.Player).strength / 10) * ftoi(3.1415);
			}
		}
	}
	Owner.PlaySound('BlasterFire', CHAN_WEAPON);
}

states
{
Ready:
	BLSR A 1 A_WeaponReady
	Loop
Deselect:
	BLSR A 1 A_Lower
	Loop
Select:
	BLSR A 1 A_Raise
	Loop
Fire:
	BLSR BC 3
Hold:
	BLSR D 2 A_FireBlasterPL1
	BLSR CB 2
	BLSR A 0 A_ReFire
	Goto Ready
}

/*FOURTH*/
defaultproperties
{
	Slot = 4;
	SelectionOrder = 4400;
	AmmoType1 = ItemManaRed;
	AmmoUse1 = 15;
	BotCombatDist = 256.0 + MISSILERANGE;
	wis_mod = true;
	int_mod = true;
	dex_mod = false;
	str_mod = false;
	bBotChooseMelee = true;
	bBotChooseMedium = true;
	bBotChooseRanged = true;

	PSpriteSY = 15.0;
	PickupMessage = "DRAGON'S CLAW";
	RangedObituary = "$ob_dragonclaw";
	fire_tics = 2.0;
	refire_tics = 6.0;
	bInstantRanged = true;
}
