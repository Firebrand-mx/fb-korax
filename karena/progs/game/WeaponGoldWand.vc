//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**		##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id$
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class WeaponGoldWand : WeaponEx;

//===========================================================================
//
//  A_FireGoldWandPL1
//
//===========================================================================

final void A_FireGoldWandPL1()
{
	TAVec angles;
	int damage;
	TVec dir;

	UseWeaponMana();
	damage = 10; //7 + (P_Random() & 7);
	if (int_mod)
	{
		if(!active_damage)
		{
			damage = damage * Player(Owner.Player).strength / 10;
		}
		else // [FB] PI Damage
		{
			damage = (damage * Player(Owner.Player).strength / 10) * ftoi(3.1415);
		}
	}
	angles = Owner.Angles;
	Actor(Owner).Aim(dir, MISSILERANGE);
	if (Player(Owner.Player).Refire)
	{
		VectorRotateAroundZ(&dir, (Random() - Random()) * 45.0 / 8.0);
	}
	ShotPosition = Player(Owner.Player).MO.Origin;	// [CW]
	Actor(Owner).LineAttack(dir, MISSILERANGE, damage, GoldWandPuff1);

	Owner.PlaySound('GoldWandFire', CHAN_WEAPON);
}

//===========================================================================
//
//  A_FireGoldWandPL2
//
//===========================================================================

final void A_FireGoldWandPL2()
{
	int i;
	int damage;
	float momz;
	TAVec angles;
	TVec dir;
	EntityEx mo;

	UseWeaponMana();
	angles = Owner.Angles;
	Actor(Owner).Aim(dir, MISSILERANGE);
	VectorAngles(&dir, &angles);
	mo = Actor(Owner).SpawnPlayerMissileAngle(GoldWandMissile2,
		AngleMod360(angles.yaw - (45.0 / 8.0))/*, angles.pitch*/);
	if (mo && int_mod)
	{
		if(!active_damage)
		{
			mo.MissileDamage = mo.MissileDamage * Player(Owner.Player).intelligence / 10;
		}
		else // [FB] PI Damage
		{
			mo.MissileDamage = (mo.MissileDamage * Player(Owner.Player).intelligence / 10) * ftoi(3.1415);
		}

	}
	mo = Actor(Owner).SpawnPlayerMissileAngle(GoldWandMissile2,
		AngleMod360(angles.yaw + (45.0 / 8.0))/*, angles.pitch*/);
	if (mo && int_mod)
	{
		mo.MissileDamage = mo.MissileDamage *Player(Owner.Player).intelligence/10;
	}
	VectorRotateAroundZ(&dir, -45.0 / 8.0);
	for (i = 0; i < 5; i++)
	{
		damage = 20; //12 + (P_Random() & 7);
		if (int_mod)
		{
			if(!active_damage)
			{
				damage = damage * Player(Owner.Player).strength / 10;
			}
			else // [FB] PI Damage
			{
				damage = (damage * Player(Owner.Player).strength / 10) * ftoi(3.1415);
			}
		}
		ShotPosition = Player(Owner.Player).MO.Origin;	// [CW]
		Actor(Owner).LineAttack(dir, MISSILERANGE, damage, GoldWandPuff2);
		VectorRotateAroundZ(&dir, (45.0 / 8.0) / 2.0);
	}
	Owner.PlaySound('GoldWandFire', CHAN_WEAPON);
}

__states__
{
	S_GOLDWANDREADY('GWND', 0, 1.0 / 35.0, S_GOLDWANDREADY) = A_WeaponReady
	S_GOLDWANDDOWN('GWND', 0, 1.0 / 35.0, S_GOLDWANDDOWN) = A_Lower
	S_GOLDWANDUP('GWND', 0, 1.0 / 35.0, S_GOLDWANDUP) = A_Raise
	S_GOLDWANDATK1_1('GWND', 1, 3.0 / 35.0, S_GOLDWANDATK1_2) = none
	S_GOLDWANDATK1_2('GWND', 2, 5.0 / 35.0, S_GOLDWANDATK1_3) = A_FireGoldWandPL1
	S_GOLDWANDATK1_3('GWND', 3, 3.0 / 35.0, S_GOLDWANDATK1_4) = none
	S_GOLDWANDATK1_4('GWND', 3, 0.0 / 35.0, S_GOLDWANDREADY) = A_ReFire
	S_GOLDWANDATK2_1('GWND', 1, 3.0 / 35.0, S_GOLDWANDATK2_2) = none
	S_GOLDWANDATK2_2('GWND', 2, 4.0 / 35.0, S_GOLDWANDATK2_3) = A_FireGoldWandPL2
	S_GOLDWANDATK2_3('GWND', 3, 3.0 / 35.0, S_GOLDWANDATK2_4) = none
	S_GOLDWANDATK2_4('GWND', 3, 0.0 / 35.0, S_GOLDWANDREADY) = A_ReFire
}

defaultproperties
{
	WeaponType = HexenDefs::WP_SECOND;
	Slot = 2;
	SelectionOrder = 6400;
	UpState = S_GOLDWANDUP;
	DownState = S_GOLDWANDDOWN;
	ReadyState = S_GOLDWANDREADY;
	AttackState = S_GOLDWANDATK1_1;
	HoldAttackState = S_GOLDWANDATK1_1;
	PSpriteSY = 5.0;
	AmmoType1 = ItemManaBlue;
	AmmoUse1 = 2;
	wis_mod = true;
	int_mod = true;
	dex_mod = false;
	str_mod = false;
	PickUpMessage = "GOLD WAND";
	Obituary = "$ob_goldwand";

	bInstantRanged = true;
}
