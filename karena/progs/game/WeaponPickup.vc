//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class WeaponPickup : KArenaWeapon
	abstract;

//==========================================================================
//
//	GetActualWeaponClass
//
//==========================================================================

class<KArenaWeapon> GetActualWeaponClass(KArenaPlayerPawn Toucher)
{
	return Toucher.WeaponClasses[Slot - 1];
}

//==========================================================================
//
//	CreateCopy
//
//==========================================================================

Inventory CreateCopy(EntityEx Toucher)
{
	class<KArenaWeapon> WpnClass = GetActualWeaponClass(KArenaPlayerPawn(Toucher)); // KArenaPlayerPawn(Toucher).WeaponClasses[Slot - 1];
	if (!WpnClass)
	{
		return none;
	}

	KArenaWeapon Copy = Spawn(WpnClass);

	AddAmmo(Toucher, Copy.AmmoType1, AmmoGive1);
	AddAmmo(Toucher, Copy.AmmoType2, AmmoGive2);
	AddAmmo(Toucher, Copy.AmmoType3, AmmoGive3);

	PickupMessage = Copy.PickupMessage;
	GoAwayAndDie();
	return Copy;
}

//==========================================================================
//
//	PickupForMana
//
//==========================================================================

final bool PickupForMana(EntityEx Toucher)
{
	class<KArenaWeapon> WpnClass = GetActualWeaponClass(KArenaPlayerPawn(Toucher)); // KArenaPlayerPawn(Toucher).WeaponClasses[Slot - 1];
	if (!WpnClass)
	{
		return false;
	}

	// [CW] If weapons stay they should not give any free ammo, or
	// players will use that to gather max ammo from single weapon pickup
	if (LineSpecialGameInfo(Level.Game).bWeaponsStay)
	{
		return false;
	}

	bool gaveMana = false;
	if (Player(Toucher.Player).GiveAmmo(WpnClass.default.AmmoType1, AmmoGive1))
	{
		gaveMana = true;
	}
	if (Player(Toucher.Player).GiveAmmo(WpnClass.default.AmmoType2, AmmoGive2))
	{
		gaveMana = true;
	}
	if (Player(Toucher.Player).GiveAmmo(WpnClass.default.AmmoType3, AmmoGive3))
	{
		gaveMana = true;
	}
	if (!gaveMana)
	{
		// Player didn't need any mana
		return false;
	}
	PickupMessage = WpnClass.default.PickupMessage;
	return true;
}

//==========================================================================
//
//	GetPickupMessage
//
//==========================================================================

string GetPickupMessage()
{
	return PickupMessage;
}

//	Dummy ready state so that sprites check in Weapon class can pass.
states
{
Ready:
	TNT1 A -1
	Stop
}

defaultproperties
{
	Height = 32.0;
	bFloatBob = true;
	bSpecial = true;
	AmmoGive1 = 25;
	AmmoGive2 = 25;
	AmmoGive3 = 25;
}
