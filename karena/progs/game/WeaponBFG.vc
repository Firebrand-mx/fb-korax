//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**		##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id$
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class WeaponBFG : KArenaWeapon;

//===========================================================================
//
//  A_BFGsound
//
//===========================================================================

final void A_BFGsound()
{
	Owner.PlaySound('BFGFire', CHAN_WEAPON);
}

//===========================================================================
//
//  A_FireBFG
//
//===========================================================================

final void A_FireBFG()
{
	EntityEx mo;
	UseWeaponMana();
	mo = Actor(Owner).SpawnPlayerMissile(BFGShot);
	if (mo && int_mod)
	{
		if(!active_damage)
		{
			mo.MissileDamage = mo.MissileDamage * Player(Owner.Player).intelligence /10;
		}
		else // [FB] PI Damage
		{
			mo.MissileDamage = (mo.MissileDamage * Player(Owner.Player).intelligence /10) * ftoi(3.1415);
		}
	}
}

__states__
{
Ready:
	S_BFG('BFGG', 0, 1.0 / 35.0, S_BFG) = A_WeaponReady
Deselect:
	S_BFGDOWN('BFGG', 0, 1.0 / 35.0, S_BFGDOWN) = A_Lower
Select:
	S_BFGUP('BFGG', 0, 1.0 / 35.0, S_BFGUP) = A_Raise
Fire:
	S_BFG1('BFGG', 0, 20.0 / 35.0, S_BFG2) = A_BFGsound
	S_BFG2('BFGG', 1, 10.0 / 35.0, S_BFG3) = A_GunFlash
	S_BFG3('BFGG', 1, 10.0 / 35.0, S_BFG4) = A_FireBFG
	S_BFG4('BFGG', 1, 20.0 / 35.0, S_BFG) = A_ReFire
Flash:
	S_BFGFLASH1('BFGF', 0 | FF_FULLBRIGHT, 11.0 / 35.0, S_BFGFLASH2) = A_Light1
	S_BFGFLASH2('BFGF', 1 | FF_FULLBRIGHT, 6.0 / 35.0, S_BFG_LIGHTDONE) = A_Light2
	S_BFG_LIGHTDONE('BFGG', 0, 0.0 / 35.0, none) = A_Light0
}

defaultproperties
{
	Slot = 8;
	SelectionOrder = 500;
	AmmoType1 = ItemManaBlue;
	AmmoType2 = ItemManaGreen;
	AmmoType3 = ItemManaCombined;
	AmmoUse1 = 100;
	AmmoUse2 = 100;
	AmmoUse3 = 100;
	BotCombatDist = 192.0 + MISSILERANGE;
	wis_mod = true;
	int_mod = true;
	dex_mod = false;
	str_mod = false;
	bBotChooseMelee = false;
	bBotChooseMedium = true;
	bBotChooseRanged = true;
	bBotProjectile = true;
	PickupMessage = "BFG 9000";
}
