//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**		##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id$
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class DarknessMissile : Effect;

int LifeCount;

//==========================================================================
//
//  InflictorModifyDamage
//
//==========================================================================

int InflictorModifyDamage(Actor victim, Actor source, int damage)
{
	if (victim.bIsPlayer && !victim.bDormant)
	{
		victim.BlindPlayer(source, 20);
	}
	return -1;
}

//==========================================================================
//
//	InitMe
//
//==========================================================================

void InitMe(Actor InstigatedBy)
{
	LifeCount = 36 + (P_Random() & 7);
	Target = InstigatedBy;
	Radius = 20.0;
	Height = 14.0;
	bColideWithThings = true;
	bColideWithWorld = true;
}

//==========================================================================
//
//  A_Attack
//
//==========================================================================

final void A_Attack()
{
	RadiusAttack(Target, 4, 40.0, false);
}

//==========================================================================
//
//  A_ChkDeath
//
//==========================================================================

final void A_ChkDeath()
{
	if (!--LifeCount)
	{
		SetState(DeathState);
	}
}

__states__
{
	S_DARK_MISSILE_1('DRKM', 0, 3.0 / 35.0, S_DARK_MISSILE_2) = A_Attack
	S_DARK_MISSILE_2('DRKM', 1, 3.0 / 35.0, S_DARK_MISSILE_3) = A_Attack
	S_DARK_MISSILE_3('DRKM', 2, 3.0 / 35.0, S_DARK_MISSILE_4) = A_Attack
	S_DARK_MISSILE_4('DRKM', 3, 3.0 / 35.0, S_DARK_MISSILE_1) = A_ChkDeath
	S_DARK_MISSILE_X1('DRKM', 4, 3.0 / 35.0, S_DARK_MISSILE_X2) = none
	S_DARK_MISSILE_X2('DRKM', 5, 3.0 / 35.0, S_DARK_MISSILE_X3) = none
	S_DARK_MISSILE_X3('DRKM', 6, 3.0 / 35.0, S_DARK_MISSILE_X4) = none
	S_DARK_MISSILE_X4('DRKM', 7, 3.0 / 35.0, none) = none
}

defaultproperties
{
	Radius = 1.0;
	Height = 1.0;
	Mass = 99999.0;
	bDropOff = true;
	bColideWithWorld = false;
	bColideWithThings = false;
	bNoDamageThrust = true;
	IdleState = S_DARK_MISSILE_1;
	DeathState = S_DARK_MISSILE_X1;
	DeathSound = 'FighterHammerExplode';
	Effects = HexenDefs::EF_DL_DARK;

//	deathmsgi[0] = 73;
	deathmsgi = 0;
}
