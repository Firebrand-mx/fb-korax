//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**		##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id: GameFootball.vc 508 2006-07-10 19:02:43Z firebrand_kh $
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class GameFootball : GameModel;

enum
{
	state_preparematch,
	state_kickoff,
	state_freeplay,
	state_finished,
	state_waitkickoff
	//state_waitforplayerspawn
};

enum
{
	event_goal			= GameModel::event_custom,
	event_offside,
	event_dokickoff,
	event_colortranslation,
	event_returnball,
	num_footballevents	= event_returnball - GameModel::event_custom + 1
};


acsnotifier_t	AcsNotifiersFootball[num_footballevents];


SoccerBall			Ball;
Actor				spot_ball;
bool				bBallCreated;
bool				bSpotBallCreated;

struct spot_players_t
{
	Actor		ms[MAXPLAYERS];
};
spot_players_t spot_players[2];
array<Actor>	spot_targets;

GameSequencer	fbTimer;


//==========================================================================
//
//	AllowedTeams
//
//==========================================================================

int AllowedTeams()
{
	return 2;
}

//==========================================================================
//
//	BeginState
//
//	ACS callable
//
//==========================================================================

void BeginState(int newstate)
{
	int i;

	dprint("GameFootball::BeginState : %i", newstate);

	if (fbTimer)
	{
		fbTimer.Destroy();
	}

	switch(newstate)
	{
	case state_preparematch:

		if (!PrepareMatch())
		{
			dprint("GameFootball::BeginState : failed to prepare match, delay start");
			State = -1;
			return;
		}
		
		dprint("GameFootball::BeginState : starting match");
		Game.bcentreprint("Let the game begin!");
		
		HandleEvent(event_playablestatebegins, none, 0,0,0,0);
		
		for (i = 0; i < MAXPLAYERS; i++)
		{
			if (Game.Teams[0] && Game.Teams[0].Players[i])
			{
				Game.Teams[0].Players[i].UpdateScore(HexenDefs::scoreevent_PlayerReset);
			}
			if (Game.Teams[1] && Game.Teams[1].Players[i])
			{
				Game.Teams[1].Players[i].UpdateScore(HexenDefs::scoreevent_PlayerReset);
			}
		}
		if (Game.Teams[0])
		{
			Game.Teams[0].UpdateScore(HexenDefs::scoreevent_TeamReset);
		}
		if (Game.Teams[1])
		{
			Game.Teams[1].UpdateScore(HexenDefs::scoreevent_TeamReset);
		}
		EndCurrentState(state_waitkickoff);
		return;
		
	case state_kickoff:
	
		if (!Game.Teams[0] || !Game.Teams[1])
		{
			dprint("GameFootball::BeginState : state_kickoff : not enouph teams, ending game");
			EndCurrentState(state_finished);
			return;
		}
		
		if (!spot_ball || !Ball)
		{
			dprint("GameFootball::BeginState : state_kickoff : ball and/or spot_ball missing, ending game");
			EndCurrentState(state_finished);
			return;
		}
		
		Ball.Teleport(spot_ball.Origin, spot_ball.Angles.yaw, true, true, false);
		
		for (i = 0; i < MAXPLAYERS; i++)
		{
			if (Game.Teams[0].Players[i] && spot_players[Game.Teams[0].T2].ms[i])
			{
				EntityEx(Game.Teams[0].Players[i].MO).Teleport(spot_players[Game.Teams[0].T2].ms[i].Origin, spot_players[Game.Teams[0].T2].ms[i].Angles.yaw, true, true, false);
			}
			if (Game.Teams[1].Players[i] && spot_players[Game.Teams[1].T2].ms[i])
			{
				EntityEx(Game.Teams[1].Players[i].MO).Teleport(spot_players[Game.Teams[1].T2].ms[i].Origin, spot_players[Game.Teams[1].T2].ms[i].Angles.yaw, true, true, false);
			}
		}
		Game.bcentreprint("kick off!");
		Game.BroadcastLocalSoundNamed('Football_Whistle', false, 0.25);
		Game.BroadcastLocalSoundNamed('Football_KickOff', false, 0.0);

		EndCurrentState(state_freeplay);
		return;
	case state_freeplay:
		break;
	case state_finished:
		//
		// do something here?
		//
		break;
	case state_waitkickoff:
		fbTimer = Level.Spawn(GameSequencer);
		if (fbTimer)
		{
			fbTimer.event_id = event_dokickoff;
			fbTimer.time_limit = 4.0;
		}
		break;
	};

	State = newstate;
}

//==========================================================================
//
//	IsInPlayableState
//
//==========================================================================

bool IsInPlayableState()
{
	return (State >= 0 && State != state_preparematch && State != state_finished);
}

//==========================================================================
//
//	EndCurrentState
//
//	ACS callable
//
//==========================================================================

void EndCurrentState(int nextstate)
{
	dprint("GameFootball::EndCurrentState : state = %i, next_state = %i", State, nextstate);
	if (nextstate == state_finished)
	{
		Cleanup();
	}

	BeginState(nextstate);
}

//==========================================================================
//
//	NotifyUpdateTeams
//
//==========================================================================

void NotifyUpdateTeams()
{
	if (!IsInPlayableState() && (Game.Teams[0] && Game.Teams[1]))
	{
		BeginState(state_preparematch);
	}
	else if (IsInPlayableState() && (!Game.Teams[0] || !Game.Teams[1]))
	{
		EndCurrentState(state_finished);
	}
}

//==========================================================================
//
//	HandleEvent
//
//	ACS callable
//
//==========================================================================

void HandleEvent(int Event, EntityEx A, int arg1, int arg2, int arg3, int arg4)
{
	int notifyACSArgs[3];

	dprint("GameFootball::HandleEvent : %i", Event);

	switch (Event)
	{
	case event_goal:
		if (State != state_freeplay)
		{
			return;
		}

		if (!A || A != Ball)
		{
			return;
		}

		// arg1 is the team, in which gates the ball was thrown
		if (arg1 == PlayerTeam::TEAM2_INDEX_BLUE || arg1 == PlayerTeam::TEAM2_INDEX_RED)
		{
			// [CW] Please notice that the following works OK only if we have 2 teams in the game
			int team_index, opponent_index;
			if (Game.Teams[0] && Game.Teams[0].T2 == arg1)
			{
				team_index = 0;
				opponent_index = 1;
			}
			else if (Game.Teams[1] && Game.Teams[1].T2 == arg1)
			{
				team_index = 1;
				opponent_index = 0;
			}
			else return;

			if (Ball.Owner && Game.Teams[team_index] == Ball.Owner.Team)
			{
				// 'self-goal'
				Ball.Owner.UpdateScore(HexenDefs::scoreevent_FtbSelfGoal);
				// opponent team is getting aware of this happening
				// (in case a special score should be provided for it)
				Game.Teams[opponent_index].UpdateScore(HexenDefs::scoreevent_FtbOpSelfGoal);
				Game.bcentreprint(va("OOOPS! Team %d kicked a ball into their own gates!", arg1));
				Game.BroadcastLocalSoundNamed('Football_FoolsGoal', false, 0.0);
				
				notifyACSArgs[1] = arg1;
			}
			else if (Ball.Owner)
			{
				// normal goal
				Ball.Owner.UpdateScore(HexenDefs::scoreevent_FtbGoal);
				Game.bcentreprint(va("Team %d scores a goal!", arg1 ? 0 : 1));
				Game.BroadcastLocalSoundNamed('Football_Goal', false, 0.0);
				notifyACSArgs[1] = arg1 ? 0 : 1;
				Game.BroadcastLocalSoundNamed((P_Random() > 127 ? (P_Random() > 127 ? 'Football_Goal1' : 'Football_Goal2') : 'Football_Goal3'), false, 2.0);
			}
			else
			{
				notifyACSArgs[1] = -1;
			}
		}
		notifyACSArgs[0] = arg1;
		
		EndCurrentState(state_waitkickoff);
		break;

	case event_offside:
		if (State != state_freeplay)
		{
			return;
		}

		if (!A || A != Ball)
		{
			return;
		}

		if (!fbTimer)
		{
			Game.bcentreprint("Offside!");
			Game.BroadcastLocalSoundNamed('Football_Offside', false, 0.0);
			
			fbTimer = Level.Spawn(GameSequencer);
			if (fbTimer)
			{
				fbTimer.event_id = event_returnball;
				fbTimer.time_limit = 4.0;
			}
		}
		break;
		
	case event_dokickoff:
		if (fbTimer)
		{
			fbTimer.Destroy();
		}
		EndCurrentState(state_kickoff);
		break;

	case event_colortranslation:
		notifyACSArgs[0] = arg1;	// should be team index
		notifyACSArgs[1] = arg2;	// should be object tag
		break;

	case event_returnball:
		if (fbTimer)
		{
			fbTimer.Destroy();
		}
		Ball.Teleport(spot_ball.Origin, spot_ball.Angles.yaw, true, true, false);
		break;
		
	default:
		::HandleEvent(Event, A, arg1, arg2, arg3, arg4);
		return;
	}
	
	NotifyACS(Event, notifyACSArgs[0], notifyACSArgs[1], notifyACSArgs[2]);
}	

//==========================================================================
//
//	SetACSNotifier
//
//	ACS callable
//
//==========================================================================

void SetACSNotifier(int event, int script)
{
	if (event >= GameModel::event_custom && event < event_goal + num_footballevents)
	{
		event -= GameModel::event_custom;
		AcsNotifiersFootball[event].enabled = true;
		AcsNotifiersFootball[event].script = script;
	}
	else
	{
		::SetACSNotifier(event, script);
	}
}

//==========================================================================
//
//	NotifyACS
//
//==========================================================================

void NotifyACS(int Event, int Arg1, int Arg2, int Arg3)
{
	dprint("GameFootball::NotifyACS : Event = %i", Event);
	if (Event >= GameModel::event_custom && Event < event_goal + num_footballevents)
	{
		Event -= GameModel::event_custom;
		if (AcsNotifiersFootball[Event].enabled)
		{
			dprint("calling script = %i; %i,%i,%i", AcsNotifiersFootball[Event].script, Arg1, Arg2, Arg3);
				   Level.ExecuteActionSpecial(LNSPEC_ACSExecuteAlways,
				   AcsNotifiersFootball[Event].script,
				   0,
				   Arg1,
				   Arg2,
				   Arg3,
				   NULL, 0, none);
		}
	}
	else
		::NotifyACS(Event, Arg1, Arg2, Arg3);
}

//==========================================================================
//
//	Cleanup
//
//==========================================================================

void Cleanup()
{
	if (bBallCreated)
	{
		if (Ball)
		{
			Ball.Destroy();
		}
		bBallCreated = false;
	}
	Ball = none;
	if (bSpotBallCreated)
	{
		if (spot_ball)
		{
			spot_ball.Destroy();
		}
		bSpotBallCreated = false;
	}
	spot_ball = none;

	int i;
	for (i = 0; i < MAXPLAYERS; i++)
	{
		spot_players[0].ms[i] = none;
		spot_players[1].ms[i] = none;
	}
}

//==========================================================================
//
//	PrepareMatch
//
//==========================================================================

bool PrepareMatch()
{
	int i;
	Actor kos;
	Actor sts;

	if (!Game.Teams[0] || !Game.Teams[1])
	{
		dprint("GameFootball : not enough teams");
		return false;
	}

	Cleanup();	

	foreach Level.AllThinkers(SoccerBall, Ball)
	{
		dprint("SoccerBall --> found!");
		break;
	}

	foreach Level.AllThinkers(SoccerBallSpot, spot_ball)
	{
		dprint("SoccerBallSpot --> found!");
		break;
	}

	foreach Level.AllThinkers(KickOffSpot, kos)
	{
		if (kos.Args[0] >= 0 && kos.Args[0] < AllowedTeams() && kos.Args[1] >= 0 && kos.Args[1] < MAXPLAYERS)
		{
			spot_players[kos.Args[0]].ms[kos.Args[1]] = kos;
		}
		else
		{
			dprint("GameFootball::PrepareMatch : bad argument(s) for kick off spot at %f,%f,%f",
				kos.Origin.x, kos.Origin.y, kos.Origin.z);
		}
	}

	foreach Level.AllThinkers(SoccerTargetSpot, sts)
	{
		if (sts.Args[0] >= 0 && sts.Args[0] < AllowedTeams())
		{
			spot_targets.Num = spot_targets.Num + 1;
			spot_targets[spot_targets.Num - 1] = sts;
		}
		else
		{
			dprint("GameFootball::PrepareMatch : bad argument(s) for target spot at %f,%f,%f",
				sts.Origin.x, sts.Origin.y, sts.Origin.z);
		}
	}

	if (!Ball)
	{
		if (spot_ball)
		{
			Ball = HexenLevelInfo(Level).Spawn(SoccerBall, spot_ball.Origin);
			if (Ball)
			{
				bBallCreated = true;
			}
			else
			{
				dprint("GameFootball::PrepareMatch : failed to spawn ball at spot_ball");
				return false;
			}
		}
		else
		{
			dprint("GameFootball::PrepareMatch : there are no spot_ball nor ball objects on map");
			return false;
		}
	}
	
	if (Ball && !spot_ball)
	{
		spot_ball = HexenLevelInfo(Level).Spawn(SoccerBallSpot, Ball.Origin);
		if (spot_ball)
		{
			bSpotBallCreated = true;
		}
		else
		{
			dprint("GameFootball::PrepareMatch : failed to spawn spot_ball at initial ball position; ball will be unable to set position on kickoff");
			return false;
		}
	}

	PrepareColoredDecorations();
	
	return true;
}

defaultproperties
{
}
