//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**		##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id$
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class WeaponSkullRod : KArenaWeapon;

//===========================================================================
//
//  A_FireSkullRodPL1
//
//===========================================================================

final void A_FireSkullRodPL1()
{
	EntityEx A;

	UseWeaponMana();
	A = Actor(Owner).SpawnPlayerMissile_2(self, HornRodMissile1);
	// Randomize the first frame
	if (A && P_Random() > 128)
	{
		A.SetState(GetStatePlus(A.IdleState, 1));
	}
	if (A)
		ApplyDamageModifiers(A.MissileDamage);
}

//===========================================================================
//
//  A_FireSkullRodPL2
//
//  The special2 field holds the player number that shot the rain missile.
// The specialmobj1 field is used for the seeking routines, special1 as a
// counter for the sound looping.
//
//===========================================================================

final void A_FireSkullRodPL2()
{
	EntityEx	MissileMobj;
	EntityEx	AimTarget;

	UseWeaponMana();
	MissileMobj = Actor(Owner).SpawnPlayerMissileEx_2(self, HornRodMissile2, true, AimTarget);
	// Use MissileMobj instead of the return value from
	// SpawnPlayerMissile because we need to give info to the mobj
	// even if it exploded immediately.
//[Korax]
	/*if (Level.Game.netgame)
	{
		// Multi-player game
		HornRodMissile2(MissileMobj).RainColour = P_GetPlayerNum(Player);
	}
	else*/
	if (MissileMobj)
	{
		// Always use red missiles in single player games
		HornRodMissile2(MissileMobj).RainColour = 2;
		ApplyDamageModifiers(MissileMobj.MissileDamage);
		if (AimTarget)
		{
			MissileMobj.Tracer = AimTarget;
		}
	}
}

states
{
Ready:
	HROD A 1 A_WeaponReady
	Loop
Deselect:
	HROD A 1 A_Lower
	Loop
Select:
	HROD A 1 A_Raise
	Loop
Fire:
	HROD AB 4 A_FireSkullRodPL1
	HROD B 0 A_ReFire
	Goto Ready
}

/*FIFTH*/
defaultproperties
{
	Slot = 5;
	SelectionOrder = 3100;
	AmmoType1 = ItemManaBlue;
	AmmoUse1 = 2;
	BotCombatDist = 384.0 + MISSILERANGE;
	BotCombatDist = 384.0 + MISSILERANGE;
	wis_mod = true;
	int_mod = true;
	dex_mod = false;
	str_mod = false;
	bBotChooseMelee = false;
	bBotChooseMedium = true;
	bBotChooseRanged = true;
	bBotProjectile = true;
	refire_tics = 8.0;
	fire_tics = 4.0;
	PSpriteSY = 15.0;
	PickupMessage = "HELLSTAFF";
	RangedObituary = "$ob_hellstaff";
}
