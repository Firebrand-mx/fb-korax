//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**	        ##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id$
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class MainGameInfo : LineSpecialGameInfo;

const int NUMTOTALBOTS		= 24;
const int NUMBOTTYPES		= 24;

class<Weapon> WeaponClasses[HexenDefs::NUMWEAPONS * HexenDefs::NUMCLASSES];
int		AltWeaponModeCount[HexenDefs::NUM_ALTFIRE];

BotPlayer::botinfo_t botinfo[NUMTOTALBOTS];
int botskill;

//[Korax]
float AutoArmorSave[HexenDefs::NUMCLASSES];
float ArmorIncrement[HexenDefs::NUMCLASSES * HexenDefs::NUMARMOR];

// Colour names
string ColourNames[HexenDefs::MAXPLAYERTEAMS];

//
//  Pickup messages
//
string fourthWeaponText[3];
string TextKeyLockedMessages[HexenDefs::NUMKEYS];

//[CW] Prizes
string TrophyText[HexenDefs::NUMTROPHIES];

float ArmorMax[HexenDefs::NUMCLASSES];

int pieceValueTrans[5];

int whatmana[HexenDefs::NUMWEAPONS];

int classFlags[3];

bool randomclass;

Actor PuffSpawned;

bool		bFirstLevelInited;
int			GameType;			// [CW] since 'deathmatch' is treated as bool now,
								//      we should use this extra var when it is
								//      important to know which exactly is a game mode
bool		bIsCoopGame[HexenDefs::NUMGAMES];
int			MaxTeamsInGame[HexenDefs::NUMGAMES];

PlayerTeam	Teams[HexenDefs::MAXTEAMSINGAME];
HexenLevelInfo	Level;
GameModel		GameModel;			// [CW] for advanced game modes

bool		bCompetitionOpened;	// [CW] is set to true when first player gets first score

//==========================================================================
//
//	Init
//
//==========================================================================

void Init()
{
	SetSeqTrans('Platform', 0, SEQ_Platform);
	SetSeqTrans('Platform', 1, SEQ_Platform);	// a 'heavy' platform is just a platform
	SetSeqTrans('PlatformMetal', 2, SEQ_Platform);
	SetSeqTrans('Platform', 3, SEQ_Platform);	// same with a 'creak' platform
	SetSeqTrans('Silence', 4, SEQ_Platform);
	SetSeqTrans('Lava', 5, SEQ_Platform);
	SetSeqTrans('Water', 6, SEQ_Platform);
	SetSeqTrans('Ice', 7, SEQ_Platform);
	SetSeqTrans('Earth', 8, SEQ_Platform);
	SetSeqTrans('PlatformMetal2', 9, SEQ_Platform);

	SetSeqTrans('DoorNormal', 0, SEQ_Door);
	SetSeqTrans('DoorHeavy', 1, SEQ_Door);
	SetSeqTrans('DoorMetal', 2, SEQ_Door);
	SetSeqTrans('DoorCreak', 3, SEQ_Door);
	SetSeqTrans('Silence', 4, SEQ_Door);
	SetSeqTrans('Lava', 5, SEQ_Door);
	SetSeqTrans('Water', 6, SEQ_Door);
	SetSeqTrans('Ice', 7, SEQ_Door);
	SetSeqTrans('Earth', 8, SEQ_Door);
	SetSeqTrans('DoorMetal2', 9, SEQ_Door);

	SetSeqTrans('Wind', 0, SEQ_Environment);

	InitBotTypes();
}

//==========================================================================
//
//  InitNewGame
//
//==========================================================================

void InitNewGame(int skill)
{
	int mode;

	dprint("MainGameInfo::InitNewGame : GO");

	nomonsters = GetCvar('NoMonsters');
	fastparm = gameskill == sk_nightmare || GetCvar('Fast');
	randomclass = GetCvar('RandomClass');

	// Destroy old game mode (if exists)
	if (GameModel)
		GameModel.End();

	//[CW] we must use GetCvar here because deathmatch param
	//	   is not initialized yet at this point
	// init GameModel
	GameType = GetCvar('deathmatch');
	dprint("MainGameInfo::InitNewGame : GameType = %i", GameType);
	switch (GameType)
	{
	case HexenDefs::game_ctf:
		dprint("Spawn Capture The Flag");
		GameModel = GameModel(SpawnObject(GameCTF)); break;
	case HexenDefs::game_football:
		dprint("Spawn Football");
		GameModel = GameModel(SpawnObject(GameFootball)); break;
	case HexenDefs::game_kth:
		dprint("Spawn Kill The Heresiarch");
		GameModel = GameModel(SpawnObject(GameKTH)); break;
	}
	if (GameModel)
	{
		GameModel.Init(self);
		MaxTeamsInGame[GameType] = GameModel.AllowedTeams();
	}

	bFirstLevelInited = false;
}

//==========================================================================
//
//  CreateWorldInfo
//
//==========================================================================

WorldInfo CreateWorldInfo()
{
	return WorldInfo(SpawnObject(HexenWorldInfo));
}

//==========================================================================
//
//  InitLevel
//
//==========================================================================

void InitLevel(HexenLevelInfo levelinfo)
{
	dprint("MainGameInfo::InitLevel : GO");

	//[CW]
	Level = levelinfo;
	if (GameModel)
		GameModel.Level = levelinfo;

	levelinfo.BodyQueSize = GetCvar('BodyQueSize');
	levelinfo.CorpseQueSize = GetCvar('CorpseQueSize');

	dprint("CreateLevelInfo : BodyQueSize = %i",levelinfo.BodyQueSize);
	dprint("CreateLevelInfo : CorpseQueSize = %i",levelinfo.CorpseQueSize);

	if (bFirstLevelInited)
	{
		int i;
		// Reset everyone's score
		for (i = 0; i < MAXPLAYERS; i++)
		{
			if (Players[i])
			{
				Player(Players[i]).UpdateScore(HexenDefs::scoreevent_PlayerReset);
				Player(Players[i]).TeamFrags = 0;
				Player(Players[i]).TeamKills = 0;
			}
		}
		for (i = 0; i < HexenDefs::MAXTEAMSINGAME; i++)
		{
			if (Teams[i])
			{
				Teams[i].UpdateScore(HexenDefs::scoreevent_TeamReset);
				Teams[i].Frags = 0;
				Teams[i].Kills = 0;
				Teams[i].Goals = 0;
			}
		}
	}
	else
	{
		int bots_count;
		BotSpawner botSpawner;
		bots_count = GetCvar('BotsAutoSpawn');
		if (bots_count > 0)
		{
			botSpawner = levelinfo.Spawn(BotSpawner);
			if (botSpawner)
			{
				botSpawner.time_limit = 1.5;
				botSpawner.SpawnCount = bots_count;
			}
		}
	}

	bFirstLevelInited = true;
}

//==========================================================================
//
//	InitBotTypes
//
//==========================================================================

void InitBotTypes()
{
	SetBotType(0,
		"botf1",
		BotPlayer::bsk_medium, // Accuracy
		BotPlayer::bsk_low, // Intelect
		BotPlayer::bsk_high, // Evade
		BotPlayer::bsk_poor, // Anticipate "Instant shots"
		BotPlayer::bsk_high, // Reaction Time
		"\\name\\Urania\\colour\\7\\class\\0\\model\\\\skin\\"
	);
	SetBotType(1,
		"botc1",
		BotPlayer::bsk_high, // Accuracy
		BotPlayer::bsk_high, // Intelect
		BotPlayer::bsk_high, // Evade
		BotPlayer::bsk_low, // Anticipate "Instant shots"
		BotPlayer::bsk_high, // Reaction Time
		"\\name\\Dreyn\\colour\\3\\class\\1\\model\\\\skin\\"
	);
	SetBotType(2,
		"botm1",
		BotPlayer::bsk_poor, // Accuracy
		BotPlayer::bsk_verypoor, // Intelect
		BotPlayer::bsk_high, // Evade
		BotPlayer::bsk_low, // Anticipate "Instant shots"
		BotPlayer::bsk_medium, // Reaction Time
		"\\name\\Meros\\colour\\1\\class\\2\\model\\\\skin\\"
	);
	SetBotType(3,
		"both1",
		BotPlayer::bsk_low, // Accuracy
		BotPlayer::bsk_poor, // Intelect
		BotPlayer::bsk_medium, // Evade
		BotPlayer::bsk_verypoor, // Anticipate "Instant shots"
		BotPlayer::bsk_medium, // Reaction Time
		"\\name\\Metuon\\colour\\7\\class\\3\\model\\\\skin\\"
	);
	SetBotType(4,
		"botd1",
		BotPlayer::bsk_poor, // Accuracy
		BotPlayer::bsk_poor, // Intelect
		BotPlayer::bsk_low, // Evade
		BotPlayer::bsk_supreme, // Anticipate "Instant shots"
		BotPlayer::bsk_medium, // Reaction Time
		"\\name\\Eppelio\\colour\\2\\class\\4\\model\\\\skin\\"
	);
	SetBotType(5,
		"botw1",
		BotPlayer::bsk_excellent, // Accuracy
		BotPlayer::bsk_poor, // Intelect
		BotPlayer::bsk_supreme, // Evade
		BotPlayer::bsk_high, // Anticipate "Instant shots"
		BotPlayer::bsk_excellent, // Reaction Time
		"\\name\\Baroth\\colour\\7\\class\\5\\model\\\\skin\\"
	);
	SetBotType(6,
		"botf2",
		BotPlayer::bsk_supreme, // Accuracy
		BotPlayer::bsk_excellent, // Intelect
		BotPlayer::bsk_supreme, // Evade
		BotPlayer::bsk_medium, // Anticipate "Instant shots"
		BotPlayer::bsk_high, // Reaction Time
		"\\name\\Sorveth\\colour\\0\\class\\0\\model\\\\skin\\"
	);
	SetBotType(7,
		"botc2",
		BotPlayer::bsk_supreme, // Accuracy
		BotPlayer::bsk_excellent, // Intelect
		BotPlayer::bsk_supreme, // Evade
		BotPlayer::bsk_medium, // Anticipate "Instant shots"
		BotPlayer::bsk_high, // Reaction Time
		"\\name\\Ekion\\colour\\1\\class\\1\\model\\\\skin\\"
	);
	SetBotType(8,
		"botm2",
		BotPlayer::bsk_medium, // Accuracy
		BotPlayer::bsk_low, // Intelect
		BotPlayer::bsk_low, // Evade
		BotPlayer::bsk_supreme, // Anticipate "Instant shots"
		BotPlayer::bsk_high, // Reaction Time
		"\\name\\Heimer\\colour\\6\\class\\2\\model\\\\skin\\"
	);
	SetBotType(9,
		"both2",
		BotPlayer::bsk_excellent, // Accuracy
		BotPlayer::bsk_high, // Intelect
		BotPlayer::bsk_low, // Evade
		BotPlayer::bsk_low, // Anticipate "Instant shots"
		BotPlayer::bsk_low, // Reaction Time
		"\\name\\Deadia\\colour\\6\\class\\3\\model\\\\skin\\"
	);
	SetBotType(10,
		"botd2",
		BotPlayer::bsk_high, // Accuracy
		BotPlayer::bsk_excellent, // Intelect
		BotPlayer::bsk_supreme, // Evade
		BotPlayer::bsk_poor, // Anticipate "Instant shots"
		BotPlayer::bsk_poor, // Reaction Time
		"\\name\\Zelig\\colour\\2\\class\\4\\model\\\\skin\\"
	);
	SetBotType(11,
		"botw2",
		BotPlayer::bsk_poor, // Accuracy
		BotPlayer::bsk_poor, // Intelect
		BotPlayer::bsk_high, // Evade
		BotPlayer::bsk_verypoor, // Anticipate "Instant shots"
		BotPlayer::bsk_supreme, // Reaction Time
		"\\name\\Blacke\\colour\\6\\class\\5\\model\\\\skin\\"
	);
	SetBotType(12,
		"botf3",
		BotPlayer::bsk_excellent, // Accuracy
		BotPlayer::bsk_verypoor, // Intelect
		BotPlayer::bsk_verypoor, // Evade
		BotPlayer::bsk_excellent, // Anticipate "Instant shots"
		BotPlayer::bsk_verypoor, // Reaction Time
		"\\name\\Misel\\colour\\3\\class\\0\\model\\\\skin\\"
	);
	SetBotType(13,
		"botc3",
		BotPlayer::bsk_low, // Accuracy
		BotPlayer::bsk_high, // Intelect
		BotPlayer::bsk_supreme, // Evade
		BotPlayer::bsk_poor, // Anticipate "Instant shots"
		BotPlayer::bsk_medium, // Reaction Time
		"\\name\\Hahn\\colour\\3\\class\\1\\model\\\\skin\\"
	);
	SetBotType(14,
		"botm3",
		BotPlayer::bsk_low, // Accuracy
		BotPlayer::bsk_high, // Intelect
		BotPlayer::bsk_medium, // Evade
		BotPlayer::bsk_medium, // Anticipate "Instant shots"
		BotPlayer::bsk_medium, // Reaction Time
		"\\name\\Gylend\\colour\\5\\class\\2\\model\\\\skin\\"
	);
	SetBotType(15,
		"both3",
		BotPlayer::bsk_high, // Accuracy
		BotPlayer::bsk_excellent, // Intelect
		BotPlayer::bsk_excellent, // Evade
		BotPlayer::bsk_high, // Anticipate "Instant shots"
		BotPlayer::bsk_low, // Reaction Time
		"\\name\\Vorkul\\colour\\4\\class\\3\\model\\\\skin\\"
	);
	SetBotType(16,
		"botd3",
		BotPlayer::bsk_verypoor, // Accuracy
		BotPlayer::bsk_poor, // Intelect
		BotPlayer::bsk_poor, // Evade
		BotPlayer::bsk_medium, // Anticipate "Instant shots"
		BotPlayer::bsk_supreme, // Reaction Time
		"\\name\\Victor\\colour\\1\\class\\4\\model\\\\skin\\"
	);
	SetBotType(17,
		"botw3",
		BotPlayer::bsk_verypoor, // Accuracy
		BotPlayer::bsk_high, // Intelect
		BotPlayer::bsk_excellent, // Evade
		BotPlayer::bsk_poor, // Anticipate "Instant shots"
		BotPlayer::bsk_excellent, // Reaction Time
		"\\name\\Yohan\\colour\\5\\class\\5\\model\\\\skin\\"
	);
	SetBotType(18,
		"botf5",
		BotPlayer::bsk_low, // Accuracy
		BotPlayer::bsk_high, // Intelect
		BotPlayer::bsk_high, // Evade
		BotPlayer::bsk_low, // Anticipate "Instant shots"
		BotPlayer::bsk_high, // Reaction Time
		"\\name\\Baratus\\colour\\2\\class\\0\\model\\\\skin\\"
	);
	SetBotType(19,
		"botc4",
		BotPlayer::bsk_poor, // Accuracy
		BotPlayer::bsk_low, // Intelect
		BotPlayer::bsk_supreme, // Evade
		BotPlayer::bsk_high, // Anticipate "Instant shots"
		BotPlayer::bsk_supreme, // Reaction Time
		"\\name\\Parias\\colour\\0\\class\\1\\model\\\\skin\\"
	);
	SetBotType(20,
		"botm4",
		BotPlayer::bsk_medium, // Accuracy
		BotPlayer::bsk_poor, // Intelect
		BotPlayer::bsk_medium, // Evade
		BotPlayer::bsk_medium, // Anticipate "Instant shots"
		BotPlayer::bsk_high, // Reaction Time
		"\\name\\Daedalon\\colour\\1\\class\\2\\model\\\\skin\\"
	);
	SetBotType(21,
		"both4",
		BotPlayer::bsk_high, // Accuracy
		BotPlayer::bsk_supreme, // Intelect
		BotPlayer::bsk_excellent, // Evade
		BotPlayer::bsk_medium, // Anticipate "Instant shots"
		BotPlayer::bsk_verypoor, // Reaction Time
		"\\name\\Corvus\\colour\\3\\class\\3\\model\\\\skin\\"
	);
	SetBotType(22,
		"botd4",
		BotPlayer::bsk_medium, // Accuracy
		BotPlayer::bsk_medium, // Intelect
		BotPlayer::bsk_poor, // Evade
		BotPlayer::bsk_poor, // Anticipate "Instant shots"
		BotPlayer::bsk_low, // Reaction Time
		"\\name\\Flynn Taggart\\colour\\4\\class\\4\\model\\\\skin\\"
	);
	SetBotType(23,
		"botw4",
		BotPlayer::bsk_supreme, // Accuracy
		BotPlayer::bsk_poor, // Intelect
		BotPlayer::bsk_excellent, // Evade
		BotPlayer::bsk_low, // Anticipate "Instant shots"
		BotPlayer::bsk_low, // Reaction Time
		"\\name\\Alcas\\colour\\0\\class\\5\\model\\\\skin\\"
	);
}

//==========================================================================
//
//  SetBotType
//
//==========================================================================

void SetBotType(int i, string Name, int accuracy, int intelect, int evade,
	int anticip, int reaction, string userinfo)
{
	botinfo[i].Name = Name;
	botinfo[i].accuracy = accuracy;
	botinfo[i].intelect = intelect;
	botinfo[i].evade = evade;
	botinfo[i].anticip = anticip;
	botinfo[i].reaction = reaction;
	botinfo[i].userinfo = userinfo;
}

//==========================================================================
//
//  GetPlayerCount
//
//==========================================================================

int GetPlayerCount()
{
	int i, count;
	for (i = 0, count = 0; i < MAXPLAYERS; i++)
	{
		if (Players[i]) count++;
	}

	return count;
}

//==========================================================================
//
//  GetTeamCount
//
//==========================================================================

int GetTeamCount()
{
	int i;
	for (i = 0; i < HexenDefs::MAXTEAMSINGAME; i++)
	{
		if (Teams[i] == none)
			break;
	}

	if (i == HexenDefs::MAXTEAMSINGAME - 1 && Teams[HexenDefs::MAXTEAMSINGAME - 1])
		i++;

	return i;
}

//==========================================================================
//
//  InsertPlayer
//
//	[CW] function decides what team this new player shall join
//
//==========================================================================

void InsertPlayer(Player pl)
{
	int teamnum;
	teamnum = -1;

	if(GameType < HexenDefs::NUMGAMESNOTEAM)
	{
		// In no-teams game all players are put into one-for-all team,
		// which only meaning is to set their right scoretable positions
		teamnum	= 0;
	}
	else
	{
		int i, maxteams;

		maxteams = MaxTeamsInGame[GameType] > HexenDefs::MAXTEAMSINGAME ?
						HexenDefs::MAXTEAMSINGAME : MaxTeamsInGame[GameType];

		for (i = 0; i < maxteams; i++)
		{
			if (!Teams[i])
				break;
			else if (Teams[i].Colour == pl.Colour)
			{
				teamnum = i;
				break;
			}
		}

		if (teamnum == -1)
		{
			if (i == maxteams)
			{
				pl.Level.bprint("unsufficient allowed teams, new player is added to team 0");
				// TODO: set colour by Player.SetPlayerColour?
				pl.Colour = Teams[0].Colour;
				teamnum = 0;
			}
			else
				teamnum = i;
		}
	}

	// if this team does not exist, create a new one
	if (!Teams[teamnum])
	{
		Teams[teamnum] = PlayerTeam(SpawnObject(PlayerTeam));
		Teams[teamnum].Game = self;
		Teams[teamnum].Colour = pl.Colour;
		
		// if an advanced game mode is running, notify it that
		// a new team object is created
		if (GameModel)
			GameModel.NotifyUpdateTeams();
			
		if (GameType >= HexenDefs::NUMGAMESNOTEAM)
			pl.Level.bprint("team %s enters competition", ColourNames[Teams[teamnum].Colour]);
		
		Teams[teamnum].UpdateCompetition();
	}

	// update team selection menus for all human players
	// with team selection menu screen activated
	if (GameType >= HexenDefs::NUMGAMESNOTEAM)
	{
		int i;
		for (i = 0; i < MAXPLAYERS; i++)
		{
			if (Players[i] && !Players[i].bIsBot &&
					(Player(Players[i]).TeamSelection == HexenDefs::teamselection_wait ||
					Player(Players[i]).TeamSelection == HexenDefs::teamselection_reselect) )
			{
				dprint("MainGameInfo::InsertPlayer : call team selection screen update for player %i", i);
				Player(Players[i]).SelectPlayerTeam();
			}
		}
	}

	Teams[teamnum].EnlistPlayer(pl);
}

//==========================================================================
//
//  ScoreboardsUpdate
//
// [CW] Updates shown scoreboards of single or all the players.
// Used when a client connects to / disconnects from server, when anyone
// dies and when player info changes.
//
//==========================================================================

void ScoreboardsUpdate(Player thisPlayer)
{
	int i, j, plnum;
	Player pl;

	//[CW] iterate through all connected players
	for (plnum = 0; plnum < MAXPLAYERS; plnum++)
	{
		if (!Players[plnum])
			break;

		// no need to update scoreboards for bots
		if (Players[plnum].bIsBot)
			continue;

		if (thisPlayer && Players[plnum] != thisPlayer)
			continue;

		//[CW] update team scores list for this player
		pl = Player(Players[plnum]);
		
		for (i = 0; i < HexenDefs::MAXTEAMSINGAME; i++)
		{
			if (!Teams[i])
			   break;

			pl.teamscores[i] = Teams[i].Score;
		}
	}

	dprint("MainGameInfo::ScoreboardsUpdate : end");
}

//==========================================================================
//
//  bcentreprint
//
//	[CW] broadcast centreprint
//
//==========================================================================

void bcentreprint(string msg)
{
	int i;
	for (i = 0; i < MAXPLAYERS; i++)
	{
		if (Players[i])
			Players[i].centreprint(msg);
	}
}

//==========================================================================
//
//  BroadcastLocalSound
//
//	[CW]
//
//==========================================================================

void BroadcastLocalSound(int sound, bool put_in_queue, float delay)
{
	int i;

	for (i = 0; i < MAXPLAYERS; i++)
	{
		if (!Players[i])
			continue;
		if (!Players[i].bSpawned)
			continue;
		Player(Players[i]).CallLocalSound(sound, put_in_queue, delay);
	}
}

//==========================================================================
//
//  SpawnDynamicLight
//
//	[CW]
//
//	NOTES:		colour is interpreted as ARGB format (0xAARRGGBB);
//				lifetime and decay are treated as 1/100 parts of second
//					(i.e. lifetime = 1250 actually means 12.5 secs)
//
//==========================================================================

void SpawnDynamicLight(int colour, TVec org, int radius, int lifetime, int decay)
{
	int i;

	for (i = 0; i < MAXPLAYERS; i++)
	{
		if (!Players[i])
			continue;
		if (!Players[i].bSpawned)
			continue;
		Player(Players[i]).ClientDynamicLightEx(colour, org, radius, lifetime, decay);
	}
}


defaultproperties
{
	LevelInfoClass = HexenLevelInfo;
	PlayerReplicationInfoClass = KArenaPlayerReplicationInfo;
	bDefaultMonsterFallingDamage = true;
	bUseHexenPolyobjTypes = true;
	bBloodSplatter = true;
	bNoDamageThrustInvulnerable = true;
	TeleFogHeight = Actor::TELEFOGHEIGHT;
	TeleportFogClass = TeleportFog;
	DefaultKickBack = 150.0;


	bIsCoopGame[HexenDefs::game_unused] = false;
	bIsCoopGame[HexenDefs::game_dm] = false;
	bIsCoopGame[HexenDefs::game_kth] = false;
	bIsCoopGame[HexenDefs::game_sweep] = true;
	bIsCoopGame[HexenDefs::game_dmteam] = false;
	bIsCoopGame[HexenDefs::game_ctf] = false;
	bIsCoopGame[HexenDefs::game_sweepteam] = false;
	bIsCoopGame[HexenDefs::game_football] = false;

	MaxTeamsInGame[HexenDefs::game_unused] = 0;
	MaxTeamsInGame[HexenDefs::game_dm] = 1;
	MaxTeamsInGame[HexenDefs::game_sweep] = 1;
	MaxTeamsInGame[HexenDefs::game_dmteam] = 2;
	MaxTeamsInGame[HexenDefs::game_sweepteam] = 2;
	

	//
	// First Weapon	
	//
	WeaponClasses[0] = WeaponFighterPunch;
	WeaponClasses[1] = WeaponClericMace;
	WeaponClasses[2] = WeaponStaff;
	WeaponClasses[3] = WeaponGauntlets;
	WeaponClasses[4] = WeaponChainsaw;
	WeaponClasses[5] = WeaponWitchavenPunch;
	WeaponClasses[6] = WeaponPigSnout;
	WeaponClasses[7] = WeaponHeresiarchClaw;
	//
	//Second Weapon
	//
	WeaponClasses[8] = WeaponFighterAxe;
	WeaponClasses[9] = WeaponClericStaff;
	WeaponClasses[10] = WeaponMageWandGrey;
	WeaponClasses[11] = WeaponGoldWand;
	WeaponClasses[12] = WeaponPistol;
	WeaponClasses[13] = WeaponWitchavenSSword;
	WeaponClasses[14] = WeaponPigSnout;
	WeaponClasses[15] = WeaponHeresiarchPRay;
	//
	//Third Weapon
	//
	WeaponClasses[16] = WeaponDarkness;//WeaponFighterHammerMelee,
	WeaponClasses[17] = WeaponClericMorningStar;//WeaponHealing,
	WeaponClasses[18] = WeaponMageWandRed;
	WeaponClasses[19] = WeaponCrossbow;
	WeaponClasses[20] = WeaponShotgun;
	WeaponClasses[21] = WeaponWitchavenMorningStar;
	WeaponClasses[22] = WeaponPigSnout;
	WeaponClasses[23] = WeaponHeresiarchStorm;
	//
	//Fourth Weapon	
	//
	WeaponClasses[24] = WeaponBlasterUp;
	WeaponClasses[25] = WeaponClericFire;
	WeaponClasses[26] = WeaponMageCone;
	WeaponClasses[27] = WeaponBlaster;
	WeaponClasses[28] = WeaponChaingun;
	WeaponClasses[29] = WeaponWitchavenMissileSpell;
	WeaponClasses[30] = WeaponPigSnout;
	WeaponClasses[31] = WeaponHeresiarchHand;
	//
	//Fifth Weapon
	//
	WeaponClasses[32] = WeaponSkullRod;
	WeaponClasses[33] = WeaponMageWand;
	WeaponClasses[34] = WeaponMageLightning;
	WeaponClasses[35] = WeaponGoldWandUp;
	WeaponClasses[36] = WeaponMissile;
	WeaponClasses[37] = WeaponWitchavenLSword;
	WeaponClasses[38] = WeaponPigSnout;
	WeaponClasses[39] = WeaponHereisarchHoly;
	//
	//Sixth Weapon
	//
	WeaponClasses[40] = WeaponFighterHammer;
	WeaponClasses[41] = WeaponPoisonBreath;
	WeaponClasses[42] = WeaponMageStaff;//WeaponWhirlWind;
	WeaponClasses[43] = WeaponSkullRodUp;
	WeaponClasses[44] = WeaponSuperShotgun;
	WeaponClasses[45] = WeaponWitchavenFireballSpell;
	WeaponClasses[46] = WeaponPigSnout;
	WeaponClasses[47] = WeaponHereisarchHoly;
	//	
	//Seventh Weapon
	//
	WeaponClasses[48] = WeaponFighterSwordMelee;
	WeaponClasses[49] = WeaponPhoenixRod;
	WeaponClasses[50] = WeaponMageWyvern;//WeaponMageStaff;
	WeaponClasses[51] = WeaponPhoenixRodUp;
	WeaponClasses[52] = WeaponPlasma;
	WeaponClasses[53] = WeaponWitchavenLongBow;
	WeaponClasses[54] = WeaponPigSnout;
	WeaponClasses[55] = WeaponHereisarchHoly;
	//
	//Eighth Weapon
	//
	WeaponClasses[56] = WeaponFighterSword;
	WeaponClasses[57] = WeaponClericHoly;
	WeaponClasses[58] = WeaponHorriblePain;
	WeaponClasses[59] = WeaponMaceUp;
	WeaponClasses[60] = WeaponBFG;
	WeaponClasses[61] = WeaponWitchavenDisintegrationSpell;
	WeaponClasses[62] = WeaponPigSnout;
	WeaponClasses[63] = WeaponHereisarchHoly;

	AltWeaponModeCount[HexenDefs::ALTFIRE_BLASTRADIUS] = HexenDefs::ALTFIRE_BLASTRADIUS_MODES;
	AltWeaponModeCount[HexenDefs::ALTFIRE_POISONBAG] = HexenDefs::ALTFIRE_POISONBAG_MODES;

	//[Korax]
	AutoArmorSave[0] = 15.0;
	AutoArmorSave[1] = 10.0;
	AutoArmorSave[2] = 5.0;
	AutoArmorSave[3] = 10.0;
	AutoArmorSave[4] = 15.0;
	AutoArmorSave[5] = 10.0;

	//	ARMOR 			SHIELD			 HELMET			 AMULET
	ArmorIncrement[0] = 20.0; ArmorIncrement[1] = 15.0; ArmorIncrement[2] = 10.0; ArmorIncrement[3] = 5.0;
	ArmorIncrement[4] = 20.0; ArmorIncrement[5] = 15.0; ArmorIncrement[6] = 10.0; ArmorIncrement[7] = 5.0;
	ArmorIncrement[8] = 20.0; ArmorIncrement[9] = 15.0; ArmorIncrement[10] = 10.0; ArmorIncrement[11] = 5.0;
	ArmorIncrement[12] = 20.0; ArmorIncrement[13] = 15.0; ArmorIncrement[14] = 10.0; ArmorIncrement[15] = 5.0; // Heretic Class
	ArmorIncrement[16] = 20.0; ArmorIncrement[17] = 15.0; ArmorIncrement[18] = 10.0; ArmorIncrement[19] = 5.0; // Marine Class
	ArmorIncrement[20] = 20.0; ArmorIncrement[21] = 15.0; ArmorIncrement[22] = 10.0; ArmorIncrement[23] = 5.0; // Witchaven Class
	ArmorIncrement[24] = 0.0; ArmorIncrement[25] = 0.0; ArmorIncrement[26] = 0.0; ArmorIncrement[27] = 0.0;

	ColourNames[0] = "blue";
	ColourNames[1] = "red";
	ColourNames[2] = "gold";
	ColourNames[3] = "lime";
	ColourNames[4] = "green";
	ColourNames[5] = "gray";
	ColourNames[6] = "brown";
	ColourNames[7] = "magenta";

	fourthWeaponText[0] = "$txt_weapon_f4";
	fourthWeaponText[1] = "$txt_weapon_c4";
	fourthWeaponText[2] = "$txt_weapon_m4";

	TextKeyLockedMessages[0] = "$txt_need_key_steel";
	TextKeyLockedMessages[1] = "$txt_need_key_cave";
	TextKeyLockedMessages[2] = "$txt_need_key_axe";
	TextKeyLockedMessages[3] = "$txt_need_key_fire";
	TextKeyLockedMessages[4] = "$txt_need_key_emerald";
	TextKeyLockedMessages[5] = "$txt_need_key_dungeon";
	TextKeyLockedMessages[6] = "$txt_need_key_silver";
	TextKeyLockedMessages[7] = "$txt_need_key_rusted";
	TextKeyLockedMessages[8] = "$txt_need_key_horn";
	TextKeyLockedMessages[9] = "$txt_need_key_swamp";
	TextKeyLockedMessages[10] = "$txt_need_key_castle";

	//
	//		Trophy Names
	//
	
	TrophyText[0] = "double kill!";
	TrophyText[1] = "tripple kill!";
	TrophyText[2] = "quadrupple kill!";
	TrophyText[3] = "multiple kill!";
	TrophyText[4] = "impossible kill!";
	TrophyText[5] = "good hunt!";
	TrophyText[6] = "massacre!";
	TrophyText[7] = "devastation!";
	TrophyText[8] = "elimination!";
	TrophyText[9] = "%i frags in a row!";
	TrophyText[10] = "%i kills in a row!";
	TrophyText[11] = "accuracy!";

	ArmorMax[0] = 20.0;
	ArmorMax[1] = 18.0;
	ArmorMax[2] = 16.0;
	ArmorMax[3] = 16.0;
	ArmorMax[4] = 1.0;

	pieceValueTrans[0] = 0;	// 0: never
	pieceValueTrans[1] = WeaponPiece::WPIECE1 | WeaponPiece::WPIECE2 | WeaponPiece::WPIECE3;	// WPIECE1 (1)
	pieceValueTrans[2] = WeaponPiece::WPIECE2 | WeaponPiece::WPIECE3;	// WPIECE2 (2)
	pieceValueTrans[3] = 0;	// 3: never
	pieceValueTrans[4] = WeaponPiece::WPIECE3;	// WPIECE3 (4)

	whatmana[0] = HexenDefs::MANA_NONE;
	whatmana[1] = HexenDefs::MANA_1;
	whatmana[2] = HexenDefs::MANA_2;
	whatmana[3] = HexenDefs::MANA_3;
	whatmana[4] = HexenDefs::MANA_1;
	whatmana[5] = HexenDefs::MANA_2;
	whatmana[6] = HexenDefs::MANA_3;
	whatmana[7] = HexenDefs::NUMMANA;

	classFlags[0] = HexenLevelInfo::MTF_FIGHTER;
	classFlags[1] = HexenLevelInfo::MTF_CLERIC;
	classFlags[2] = HexenLevelInfo::MTF_MAGE;
}
