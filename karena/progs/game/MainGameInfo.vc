//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**	        ##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id$
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class MainGameInfo : LineSpecialGameInfo;

const int NUMTOTALBOTS		= 24;
const int NUMBOTTYPES		= 24;

const float TELEFOGHEIGHT	= 32.0;

int		AltWeaponModeCount[HexenDefs::NUM_ALTFIRE];

BotPlayer::botinfo_t botinfo[NUMTOTALBOTS];
int botskill;

// Colour names
//string ColourNames[HexenDefs::MAXPLAYERTEAMS];

// Registered team infos
array<TeamInfoParser::teaminfo_t> TeamInfos;

//[CW] Prizes
string TrophyText[HexenDefs::NUMTROPHIES];

int classFlags[3];

bool randomclass;

bool		bFirstLevelInited;
int			GameType;			// [CW] since 'deathmatch' is treated as bool now,
								//      we should use this extra var when it is
								//      important to know which exactly is a game mode
bool		bIsCoopGame[HexenDefs::NUMGAMES];
int			MaxTeamsInGame[HexenDefs::NUMGAMES];

PlayerTeam	Teams[HexenDefs::MAXTEAMSINGAME];
HexenLevelInfo	Level;
GameModel		GameModel;			// [CW] for advanced game modes

bool		bCompetitionOpened;	// [CW] is set to true when first player gets first score
int			Highscore;

//==========================================================================
//
//	Init
//
//==========================================================================

void Init()
{
	::Init();
	SetSeqTrans('Platform', 0, SEQ_Platform);
	SetSeqTrans('Platform', 1, SEQ_Platform);	// a 'heavy' platform is just a platform
	SetSeqTrans('PlatformMetal', 2, SEQ_Platform);
	SetSeqTrans('Platform', 3, SEQ_Platform);	// same with a 'creak' platform
	SetSeqTrans('Silence', 4, SEQ_Platform);
	SetSeqTrans('Lava', 5, SEQ_Platform);
	SetSeqTrans('Water', 6, SEQ_Platform);
	SetSeqTrans('Ice', 7, SEQ_Platform);
	SetSeqTrans('Earth', 8, SEQ_Platform);
	SetSeqTrans('PlatformMetal2', 9, SEQ_Platform);

	SetSeqTrans('DoorNormal', 0, SEQ_Door);
	SetSeqTrans('DoorHeavy', 1, SEQ_Door);
	SetSeqTrans('DoorMetal', 2, SEQ_Door);
	SetSeqTrans('DoorCreak', 3, SEQ_Door);
	SetSeqTrans('Silence', 4, SEQ_Door);
	SetSeqTrans('Lava', 5, SEQ_Door);
	SetSeqTrans('Water', 6, SEQ_Door);
	SetSeqTrans('Ice', 7, SEQ_Door);
	SetSeqTrans('Earth', 8, SEQ_Door);
	SetSeqTrans('DoorMetal2', 9, SEQ_Door);

	SetSeqTrans('Wind', 0, SEQ_Environment);

	InitBotTypes();

	RegisterTeams();
}

//==========================================================================
//
//  RegisterTeams
//
//==========================================================================

void RegisterTeams()
{
	TeamInfoParser::teaminfo_t tinfo;
	TeamInfoParser sc = TeamInfoParser(SpawnObject(TeamInfoParser));


	sc.OpenLumpName('teaminfo');
	if (sc.AtEnd())
	{
		sc.Destroy();
		Error("MainGameInfo::RegisterTeams : TEAMINFO lump missing or empty");
		return;
	}

	while(sc.ReadTeam(&tinfo))
	{
		TeamInfos.Num = TeamInfos.Num + 1;
		TeamInfos[TeamInfos.Num - 1].Name = tinfo.Name;
		TeamInfos[TeamInfos.Num - 1].Colour = tinfo.Colour;
		TeamInfos[TeamInfos.Num - 1].FontColour = tinfo.FontColour;
		TeamInfos[TeamInfos.Num - 1].sndAnLeads = tinfo.sndAnLeads;
		print("Registered Team %s", TeamInfos[TeamInfos.Num - 1].Name);
	}

	sc.Destroy();


	print("TEAMINFO lump read, %i teams registered", TeamInfos.Num);
}

//==========================================================================
//
//  InitNewGame
//
//==========================================================================

void InitNewGame(int skill)
{
	int mode;

	SetSkill(skill);
	dprint("MainGameInfo::InitNewGame : GO");

	nomonsters = GetCvar('NoMonsters');
	randomclass = GetCvar('RandomClass');

	// Destroy old game mode (if exists)
	if (GameModel)
	{
		GameModel.Destroy();
		GameModel = none;
	}

	//[CW] we must use GetCvar here because deathmatch param
	//	   is not initialized yet at this point
	// init GameModel
	GameType = GetCvar('deathmatch');
	dprint("MainGameInfo::InitNewGame : GameType = %i", GameType);
	switch (GameType)
	{
	case HexenDefs::game_ctf:
		dprint("Spawn Capture The Flag");
		GameModel = GameModel(SpawnObject(GameCTF)); break;
	case HexenDefs::game_football:
		dprint("Spawn Football");
		GameModel = GameModel(SpawnObject(GameFootball)); break;
	case HexenDefs::game_kth:
		dprint("Spawn Kill The Heresiarch");
		GameModel = GameModel(SpawnObject(GameKTH)); break;
	case HexenDefs::game_domination:
		dprint("Spawn Domination");
		GameModel = GameModel(SpawnObject(GameDomination)); break;
	case HexenDefs::game_xmas:
		dprint("Spawn XMas Havoc");
		GameModel = GameModel(SpawnObject(GameXmasHavoc)); break;
	}
	if (GameModel)
	{
		GameModel.Init(self);
		MaxTeamsInGame[GameType] = GameModel.AllowedTeams();
	}

	bFirstLevelInited = false;

	// [FB] KA always wants to make items respawn
	bRespawnItems = true;
}

//==========================================================================
//
//  CreateWorldInfo
//
//==========================================================================

WorldInfo CreateWorldInfo()
{
	return WorldInfo(SpawnObject(HexenWorldInfo));
}

//==========================================================================
//
//  InitLevel
//
//==========================================================================

void InitLevel(HexenLevelInfo levelinfo)
{
	dprint("MainGameInfo::InitLevel : GO");

	//[CW]
	Level = levelinfo;
	if (GameModel)
		GameModel.Level = levelinfo;

	levelinfo.BodyQueSize = GetCvar('BodyQueSize');
	levelinfo.CorpseQueSize = GetCvar('CorpseQueSize');

	levelinfo.skyflatnum = skyflatnum;
	
	if (bFirstLevelInited)
	{
		int i;
		// Reset everyone's score
		for (i = 0; i < MAXPLAYERS; i++)
		{
			if (Players[i])
			{
				Player(Players[i]).UpdateScore(HexenDefs::scoreevent_PlayerReset);
				Player(Players[i]).TeamFrags = 0;
				Player(Players[i]).TeamKills = 0;
			}
		}
		for (i = 0; i < HexenDefs::MAXTEAMSINGAME; i++)
		{
			if (Teams[i])
			{
				Teams[i].UpdateScore(HexenDefs::scoreevent_TeamReset);
				Teams[i].Frags = 0;
				Teams[i].Kills = 0;
				Teams[i].Goals = 0;
			}
		}
	}
	else
	{
		int bots_count;
		BotSpawner botSpawner;
		bots_count = GetCvar('BotsAutoSpawn');
		if (bots_count > 0)
		{
			botSpawner = levelinfo.Spawn(BotSpawner);
			if (botSpawner)
			{
				botSpawner.time_limit = 1.5;
				botSpawner.SpawnCount = bots_count;
				botSpawner.Randomize();
			}
		}
	}

	Highscore = 0;
	bCompetitionOpened = false;
	bFirstLevelInited = true;
}

//==========================================================================
//
//	InitBotTypes
//
//==========================================================================

void InitBotTypes()
{
   SetBotType (0,
               "botf1",
               BotPlayer::bsk_low, // Accuracy Skill
               BotPlayer::bsk_poor, // Intellect Skill
               BotPlayer::bsk_verypoor, // Evasion Skill
               BotPlayer::bsk_medium, // Anticipation Skill
               BotPlayer::bsk_poor, // Reaction Skill
               1, // Piss Chance
               104, // Threshold
               39, // Health *Danger Level* mark
               "\\name\\Urania\\colour\\24 22 e3\\class\\0\\model\\\\skin\\"
   );
   SetBotType (1,
               "botc1",
               BotPlayer::bsk_excellent, // Accuracy Skill
               BotPlayer::bsk_medium, // Intellect Skill
               BotPlayer::bsk_verypoor, // Evasion Skill
               BotPlayer::bsk_medium, // Anticipation Skill
               BotPlayer::bsk_high, // Reaction Skill
               10, // Piss Chance
               164, // Threshold
               49, // Health *Danger Level* mark
               "\\name\\Dreyn\\colour\\f6 bb af\\class\\1\\model\\\\skin\\"
   );
   SetBotType (2,
               "botm1",
               BotPlayer::bsk_poor, // Accuracy Skill
               BotPlayer::bsk_verypoor, // Intellect Skill
               BotPlayer::bsk_verypoor, // Evasion Skill
               BotPlayer::bsk_supreme, // Anticipation Skill
               BotPlayer::bsk_poor, // Reaction Skill
               2, // Piss Chance
               168, // Threshold
               26, // Health *Danger Level* mark
               "\\name\\Meros\\colour\\c7 10 7a\\class\\2\\model\\\\skin\\"
   );
   SetBotType (3,
               "both1",
               BotPlayer::bsk_high, // Accuracy Skill
               BotPlayer::bsk_excellent, // Intellect Skill
               BotPlayer::bsk_supreme, // Evasion Skill
               BotPlayer::bsk_poor, // Anticipation Skill
               BotPlayer::bsk_high, // Reaction Skill
               7, // Piss Chance
               208, // Threshold
               50, // Health *Danger Level* mark
               "\\name\\Metuon\\colour\\88 54 ef\\class\\3\\model\\\\skin\\"
   );
   SetBotType (4,
               "botd1",
               BotPlayer::bsk_verypoor, // Accuracy Skill
               BotPlayer::bsk_medium, // Intellect Skill
               BotPlayer::bsk_excellent, // Evasion Skill
               BotPlayer::bsk_poor, // Anticipation Skill
               BotPlayer::bsk_verypoor, // Reaction Skill
               10, // Piss Chance
               145, // Threshold
               43, // Health *Danger Level* mark
               "\\name\\Eppelio\\colour\\68 b7 c9\\class\\4\\model\\\\skin\\"
   );
   SetBotType (5,
               "botw1",
               BotPlayer::bsk_poor, // Accuracy Skill
               BotPlayer::bsk_supreme, // Intellect Skill
               BotPlayer::bsk_excellent, // Evasion Skill
               BotPlayer::bsk_supreme, // Anticipation Skill
               BotPlayer::bsk_medium, // Reaction Skill
               8, // Piss Chance
               187, // Threshold
               25, // Health *Danger Level* mark
               "\\name\\Baroth\\colour\\7a 91 d5\\class\\5\\model\\\\skin\\"
   );
   SetBotType (6,
               "botf2",
               BotPlayer::bsk_supreme, // Accuracy Skill
               BotPlayer::bsk_medium, // Intellect Skill
               BotPlayer::bsk_excellent, // Evasion Skill
               BotPlayer::bsk_high, // Anticipation Skill
               BotPlayer::bsk_low, // Reaction Skill
               10, // Piss Chance
               254, // Threshold
               35, // Health *Danger Level* mark
               "\\name\\Sorveth\\colour\\06 5c 17\\class\\0\\model\\\\skin\\"
   );
   SetBotType (7,
               "botc2",
               BotPlayer::bsk_poor, // Accuracy Skill
               BotPlayer::bsk_low, // Intellect Skill
               BotPlayer::bsk_excellent, // Evasion Skill
               BotPlayer::bsk_verypoor, // Anticipation Skill
               BotPlayer::bsk_excellent, // Reaction Skill
               6, // Piss Chance
               32, // Threshold
               37, // Health *Danger Level* mark
               "\\name\\Ekion\\colour\\a4 7d 6a\\class\\1\\model\\\\skin\\"
   );
   SetBotType (8,
               "botm2",
               BotPlayer::bsk_supreme, // Accuracy Skill
               BotPlayer::bsk_low, // Intellect Skill
               BotPlayer::bsk_excellent, // Evasion Skill
               BotPlayer::bsk_high, // Anticipation Skill
               BotPlayer::bsk_high, // Reaction Skill
               9, // Piss Chance
               66, // Threshold
               37, // Health *Danger Level* mark
               "\\name\\Heimer\\colour\\d2 72 d5\\class\\2\\model\\\\skin\\"
   );
   SetBotType (9,
               "both2",
               BotPlayer::bsk_excellent, // Accuracy Skill
               BotPlayer::bsk_poor, // Intellect Skill
               BotPlayer::bsk_verypoor, // Evasion Skill
               BotPlayer::bsk_high, // Anticipation Skill
               BotPlayer::bsk_high, // Reaction Skill
               4, // Piss Chance
               184, // Threshold
               45, // Health *Danger Level* mark
               "\\name\\Deadia\\colour\\27 4a df\\class\\3\\model\\\\skin\\"
   );
   SetBotType (10,
               "botd2",
               BotPlayer::bsk_medium, // Accuracy Skill
               BotPlayer::bsk_excellent, // Intellect Skill
               BotPlayer::bsk_supreme, // Evasion Skill
               BotPlayer::bsk_supreme, // Anticipation Skill
               BotPlayer::bsk_excellent, // Reaction Skill
               3, // Piss Chance
               150, // Threshold
               35, // Health *Danger Level* mark
               "\\name\\Zelig\\colour\\42 e9 f4\\class\\4\\model\\\\skin\\"
   );
   SetBotType (11,
               "botw2",
               BotPlayer::bsk_medium, // Accuracy Skill
               BotPlayer::bsk_supreme, // Intellect Skill
               BotPlayer::bsk_medium, // Evasion Skill
               BotPlayer::bsk_high, // Anticipation Skill
               BotPlayer::bsk_supreme, // Reaction Skill
               9, // Piss Chance
               133, // Threshold
               43, // Health *Danger Level* mark
               "\\name\\Blacke\\colour\\89 b3 f1\\class\\5\\model\\\\skin\\"
   );
   SetBotType (12,
               "botf3",
               BotPlayer::bsk_supreme, // Accuracy Skill
               BotPlayer::bsk_verypoor, // Intellect Skill
               BotPlayer::bsk_low, // Evasion Skill
               BotPlayer::bsk_supreme, // Anticipation Skill
               BotPlayer::bsk_low, // Reaction Skill
               9, // Piss Chance
               108, // Threshold
               43, // Health *Danger Level* mark
               "\\name\\Misel\\colour\\28 d5 46\\class\\0\\model\\\\skin\\"
   );
   SetBotType (13,
               "botc3",
               BotPlayer::bsk_excellent, // Accuracy Skill
               BotPlayer::bsk_high, // Intellect Skill
               BotPlayer::bsk_supreme, // Evasion Skill
               BotPlayer::bsk_high, // Anticipation Skill
               BotPlayer::bsk_verypoor, // Reaction Skill
               8, // Piss Chance
               250, // Threshold
               27, // Health *Danger Level* mark
               "\\name\\Hahn\\colour\\5c d0 b6\\class\\1\\model\\\\skin\\"
   );
   SetBotType (14,
               "botm3",
               BotPlayer::bsk_high, // Accuracy Skill
               BotPlayer::bsk_supreme, // Intellect Skill
               BotPlayer::bsk_verypoor, // Evasion Skill
               BotPlayer::bsk_verypoor, // Anticipation Skill
               BotPlayer::bsk_poor, // Reaction Skill
               8, // Piss Chance
               170, // Threshold
               30, // Health *Danger Level* mark
               "\\name\\Gylend\\colour\\88 7f 98\\class\\2\\model\\\\skin\\"
   );
   SetBotType (15,
               "both3",
               BotPlayer::bsk_supreme, // Accuracy Skill
               BotPlayer::bsk_poor, // Intellect Skill
               BotPlayer::bsk_low, // Evasion Skill
               BotPlayer::bsk_poor, // Anticipation Skill
               BotPlayer::bsk_excellent, // Reaction Skill
               8, // Piss Chance
               189, // Threshold
               42, // Health *Danger Level* mark
               "\\name\\Vorkul\\colour\\54 cf 5e\\class\\3\\model\\\\skin\\"
   );
   SetBotType (16,
               "botd3",
               BotPlayer::bsk_low, // Accuracy Skill
               BotPlayer::bsk_medium, // Intellect Skill
               BotPlayer::bsk_supreme, // Evasion Skill
               BotPlayer::bsk_low, // Anticipation Skill
               BotPlayer::bsk_low, // Reaction Skill
               7, // Piss Chance
               140, // Threshold
               39, // Health *Danger Level* mark
               "\\name\\Victor\\colour\\44 42 03\\class\\4\\model\\\\skin\\"
   );
   SetBotType (17,
               "botw3",
               BotPlayer::bsk_medium, // Accuracy Skill
               BotPlayer::bsk_poor, // Intellect Skill
               BotPlayer::bsk_verypoor, // Evasion Skill
               BotPlayer::bsk_excellent, // Anticipation Skill
               BotPlayer::bsk_medium, // Reaction Skill
               10, // Piss Chance
               200, // Threshold
               40, // Health *Danger Level* mark
               "\\name\\Yohan\\colour\\76 3b 2f\\class\\5\\model\\\\skin\\"
   );
   SetBotType (18,
               "botf4",
               BotPlayer::bsk_low, // Accuracy Skill
               BotPlayer::bsk_high, // Intellect Skill
               BotPlayer::bsk_supreme, // Evasion Skill
               BotPlayer::bsk_poor, // Anticipation Skill
               BotPlayer::bsk_high, // Reaction Skill
               5, // Piss Chance
               165, // Threshold
               26, // Health *Danger Level* mark
               "\\name\\Baratus\\colour\\e7 ec 56\\class\\0\\model\\\\skin\\"
   );
   SetBotType (19,
               "botc4",
               BotPlayer::bsk_poor, // Accuracy Skill
               BotPlayer::bsk_supreme, // Intellect Skill
               BotPlayer::bsk_low, // Evasion Skill
               BotPlayer::bsk_low, // Anticipation Skill
               BotPlayer::bsk_medium, // Reaction Skill
               4, // Piss Chance
               247, // Threshold
               28, // Health *Danger Level* mark
               "\\name\\Parias\\colour\\29 f5 91\\class\\1\\model\\\\skin\\"
   );
   SetBotType (20,
               "botm4",
               BotPlayer::bsk_excellent, // Accuracy Skill
               BotPlayer::bsk_poor, // Intellect Skill
               BotPlayer::bsk_low, // Evasion Skill
               BotPlayer::bsk_medium, // Anticipation Skill
               BotPlayer::bsk_verypoor, // Reaction Skill
               3, // Piss Chance
               84, // Threshold
               39, // Health *Danger Level* mark
               "\\name\\Daedalon\\colour\\59 a9 bb\\class\\2\\model\\\\skin\\"
   );
   SetBotType (21,
               "both4",
               BotPlayer::bsk_supreme, // Accuracy Skill
               BotPlayer::bsk_low, // Intellect Skill
               BotPlayer::bsk_high, // Evasion Skill
               BotPlayer::bsk_medium, // Anticipation Skill
               BotPlayer::bsk_poor, // Reaction Skill
               9, // Piss Chance
               239, // Threshold
               33, // Health *Danger Level* mark
               "\\name\\Corvus\\colour\\07 d9 1d\\class\\3\\model\\\\skin\\"
   );
   SetBotType (22,
               "botd4",
               BotPlayer::bsk_verypoor, // Accuracy Skill
               BotPlayer::bsk_supreme, // Intellect Skill
               BotPlayer::bsk_high, // Evasion Skill
               BotPlayer::bsk_supreme, // Anticipation Skill
               BotPlayer::bsk_low, // Reaction Skill
               5, // Piss Chance
               240, // Threshold
               27, // Health *Danger Level* mark
               "\\name\\Flynn Taggart\\colour\\4b a1 5b\\class\\4\\model\\\\skin\\"
   );
   SetBotType (23,
               "botw4",
               BotPlayer::bsk_excellent, // Accuracy Skill
               BotPlayer::bsk_low, // Intellect Skill
               BotPlayer::bsk_excellent, // Evasion Skill
               BotPlayer::bsk_poor, // Anticipation Skill
               BotPlayer::bsk_high, // Reaction Skill
               3, // Piss Chance
               121, // Threshold
               32, // Health *Danger Level* mark
               "\\name\\Alcas\\colour\\b4 d1 bd\\class\\5\\model\\\\skin\\"
   );
}

//==========================================================================
//
//  SetBotType
//
//==========================================================================

void SetBotType(int i, string Name, int accuracy, int intelect, int evade,
	int anticip, int reaction, int pisschance, int threshold,
	int dangerlevel, string userinfo)
{
	botinfo[i].Name = Name;
	botinfo[i].accuracy = accuracy;
	botinfo[i].intelect = intelect;
	botinfo[i].evade = evade;
	botinfo[i].anticip = anticip;
	botinfo[i].reaction = reaction;
	botinfo[i].pisschance = pisschance;
	botinfo[i].threshold = threshold;
	botinfo[i].dangerlevel = dangerlevel;
	botinfo[i].userinfo = userinfo;
}

//==========================================================================
//
//  GetPlayerCount
//
//==========================================================================

int GetPlayerCount()
{
	int i, count;
	for (i = 0, count = 0; i < MAXPLAYERS; i++)
	{
		if (Players[i]) count++;
	}

	return count;
}

//==========================================================================
//
//  GetTeamCount
//
//==========================================================================

int GetTeamCount()
{
	int i;
	for (i = 0; i < HexenDefs::MAXTEAMSINGAME; i++)
	{
		if (Teams[i] == none)
			break;
	}

	if (i == HexenDefs::MAXTEAMSINGAME - 1 && Teams[HexenDefs::MAXTEAMSINGAME - 1])
		i++;

	return i;
}

//==========================================================================
//
//  InsertPlayer
//
//	[CW] function decides what team this new player shall join
//
//==========================================================================

void InsertPlayer(Player pl, int TeamIndex)
{
	int teamnum;
	teamnum = -1;

	dprint("MainGameInfo::InsertPlayer : %i", TeamIndex);

	if(GameType < HexenDefs::NUMGAMESNOTEAM)
	{
		// In no-teams game all players are put into one-for-all team,
		// which only meaning is to set their right scoretable positions
		teamnum	= 0;
	}
	else
	{
		int i, maxteams;

		maxteams = MaxTeamsInGame[GameType] > HexenDefs::MAXTEAMSINGAME ?
						HexenDefs::MAXTEAMSINGAME : MaxTeamsInGame[GameType];

		for (i = 0; i < maxteams; i++)
		{
			if (!Teams[i])
				break;
			else if (Teams[i].Index == pl.curTeamIndex)
			{
				teamnum = i;
				break;
			}
		}

		if (teamnum == -1)
		{
			if (i == maxteams)
			{
				pl.Level.bprint("unsufficient allowed teams, new player is added to team 0");
				pl.Colour = Teams[0].Colour;
				teamnum = 0;
			}
			else
				teamnum = i;
		}
	}

	dprint("MainGameInfo::InsertPlayer : teamnum = %i", teamnum);

	// if this team does not exist, create a new one
	if (!Teams[teamnum])
	{
		Teams[teamnum] = PlayerTeam(SpawnObject(PlayerTeam));
		Teams[teamnum].Game = self;
		Teams[teamnum].Index = TeamIndex;
		TeamInfos[TeamIndex].bTeamInPlay = true;

		if (GameType < HexenDefs::NUMGAMESNOTEAM)
		{
			Teams[teamnum].FontColour = CR_UNTRANSLATED;
		}
		else
		{
			Teams[teamnum].Name = TeamInfos[TeamIndex].Name;
			Teams[teamnum].Colour = TeamInfos[TeamIndex].Colour;
			Teams[teamnum].FontColour = TeamInfos[TeamIndex].FontColour;
			Teams[teamnum].sndAnLeads = TeamInfos[TeamIndex].sndAnLeads;
			//Teams[teamnum].Colour = pl.Colour;
			//pl.Colour = Teams[teamnum].Colour;
		}

		// if an advanced game mode is running, notify it that
		// a new team object is created
		if (GameModel)
			GameModel.NotifyUpdateTeams();
			
		if (GameType >= HexenDefs::NUMGAMESNOTEAM)
			pl.Level.bprint("team %s enters competition", Teams[teamnum].Name);
			//ColourNames[Teams[teamnum].Colour]);
		
		Teams[teamnum].UpdateCompetition();
	}
	Teams[teamnum].EnlistPlayer(pl);

	// update team selection menus for all human players
	// with team selection menu screen activated
	if (GameType >= HexenDefs::NUMGAMESNOTEAM)
	{
		int i;
		for (i = 0; i < MAXPLAYERS; i++)
		{
			if (Players[i] && !Players[i].bIsBot &&
					(Player(Players[i]).TeamSelection == HexenDefs::teamselection_wait ||
					Player(Players[i]).TeamSelection == HexenDefs::teamselection_reselect) )
			{
				dprint("MainGameInfo::InsertPlayer : call team selection screen update for player %i", i);
				Player(Players[i]).SelectPlayerTeam();
			}
		}
	}
}

//==========================================================================
//
//  ScoreboardsUpdate
//
// [CW] Updates shown scoreboards of single or all the players.
// Used when a client connects to / disconnects from server, when anyone
// dies and when player info changes.
//
//==========================================================================

void ScoreboardsUpdate(Player thisPlayer)
{
	int i, j, plnum;
	Player pl;

	//[CW] iterate through all connected players
	for (plnum = 0; plnum < MAXPLAYERS; plnum++)
	{
		if (!Players[plnum])
			break;

		// no need to update scoreboards for bots
		if (Players[plnum].bIsBot)
			continue;

		if (thisPlayer && Players[plnum] != thisPlayer)
			continue;

		//[CW] update team scores list for this player
		pl = Player(Players[plnum]);
		
		for (i = 0; i < HexenDefs::MAXTEAMSINGAME; i++)
		{
			if (!Teams[i])
			   break;

			pl.teamscores[i] = Teams[i].Score;
		}
	}
}

//==========================================================================
//
//  UpdateHighscore
//
//	[CW] 
//
//==========================================================================

void UpdateHighscore(int score)
{
	int i;

	if (score > Highscore)
	{
		int scorelimit = GetCvar('ScoreLimit');
		Highscore = score;

		if (!scorelimit)
			return;

		//
		// [CW] We assume that UpdateHighscore is called from Player only in non-team games
		//		and from PlayerTeam only in team games
		//
		switch (GameType)
		{
		case HexenDefs::game_dm:
		case HexenDefs::game_kth:
		case HexenDefs::game_dmteam:
			// [CW] Announce 'X frags left'
			if (Highscore < scorelimit && Highscore >= scorelimit - 5)
			{
				BroadcastLocalSoundNamed('misc/chat', true, 0.0);
				bcentreprint(va("%i frags left!", scorelimit - Highscore));
			}
			break;
		case HexenDefs::game_sweep: 
		case HexenDefs::game_sweepteam: 
			// [CW] NOTE: In Sweep points could be earned both by killing and fragging, so we do not
			// know exactly how these score points have been gained.
			// [CW] Announce 'X points left'
			if (Highscore < scorelimit && Highscore >= scorelimit - 10)
			{
				BroadcastLocalSoundNamed('misc/chat', true, 0.0);
				bcentreprint(va("%i points left!", scorelimit - Highscore));
			}
			break;
		case HexenDefs::game_xmas:
			// [CW] Announce 'X burned trees left'
			if (Highscore < scorelimit && Highscore >= scorelimit - 25)
			{
				BroadcastLocalSoundNamed('misc/chat', true, 0.0);
				bcentreprint(va("%i burned trees left!", scorelimit - Highscore));
			}
			break;
		case HexenDefs::game_domination:
			// [CW] Announce 'X points left'
			if (Highscore < scorelimit && Highscore >= scorelimit - 25)
			{
				BroadcastLocalSoundNamed('misc/chat', true, 0.0);
				bcentreprint(va("%i points left!", scorelimit - Highscore));
			}
			break;
		case HexenDefs::game_ctf:
			// [CW] Announce 'X flags left'
			if (Highscore < scorelimit && Highscore >= scorelimit - 3)
			{
				BroadcastLocalSoundNamed('misc/chat', true, 0.0);
				bcentreprint(va("%i captures left!", scorelimit - Highscore));
			}
			break;
		case HexenDefs::game_football:
			// [CW] Announce 'X goals left'
			if (Highscore < scorelimit && Highscore >= scorelimit - 5)
			{
				BroadcastLocalSoundNamed('misc/chat', true, 0.0);
				bcentreprint(va("%i goals left!", scorelimit - Highscore));
			}
			break;
		}

		if (scorelimit <= Highscore)
		{
			for (i = 0; i < MAXPLAYERS; i++)
			{
				if (Players[i] && !Players[i].bIsBot)
				{
					Player(Players[i]).level_ender_counter = 0.5;
				}
			}
		}
	}
}

//==========================================================================
//
//  bcentreprint
//
//	[CW] broadcast centreprint
//
//==========================================================================

void bcentreprint(string msg)
{
	int i;
	for (i = 0; i < MAXPLAYERS; i++)
	{
		if (Players[i])
			Players[i].centreprint(msg);
	}
}

//==========================================================================
//
//  BroadcastLocalSound
//
//	[CW]
//
//==========================================================================

void BroadcastLocalSound(int sound, bool put_in_queue, float delay)
{
	int i;

	for (i = 0; i < MAXPLAYERS; i++)
	{
		if (!Players[i])
			continue;
		if (!Players[i].bSpawned)
			continue;
		if (Players[i].bIsBot)
			continue;
		Player(Players[i]).CallLocalSound(sound, put_in_queue, delay);
	}
}

//==========================================================================
//
//  BroadcastLocalSoundNamed
//
//	[CW]
//
//==========================================================================

void BroadcastLocalSoundNamed(name sound, bool put_in_queue, float delay)
{
	int i;

	for (i = 0; i < MAXPLAYERS; i++)
	{
		if (!Players[i])
			continue;
		if (!Players[i].bSpawned)
			continue;
		if (Players[i].bIsBot)
			continue;
		Player(Players[i]).CallLocalSoundNamed(sound, put_in_queue, delay);
	}
}

//==========================================================================
//
//  SpawnDynamicLight
//
//	[CW]
//
//	NOTES:		colour is interpreted as ARGB format (0xAARRGGBB);
//				lifetime and decay are treated as 1/100 parts of second
//					(i.e. lifetime = 1250 actually means 12.5 secs)
//
//==========================================================================

void SpawnDynamicLight(int colour, TVec org, int radius, int lifetime, int decay)
{
	int i;

	for (i = 0; i < MAXPLAYERS; i++)
	{
		if (!Players[i])
			continue;
		if (!Players[i].bSpawned)
			continue;
		Player(Players[i]).ClientDynamicLightEx(colour, org, radius, lifetime, decay);
	}
}


defaultproperties
{
	LevelInfoClass = HexenLevelInfo;
	GameFilterFlag = EntityEx::GAME_Hexen;
	PlayerReplicationInfoClass = KArenaPlayerReplicationInfo;
	bDefaultBloodSplatter = true;
	bUseHexenPolyobjTypes = true;
	bBloodSplatter = true;
	bNoDamageThrustInvulnerable = true;
	bNightmareFastChase = true;
	bRavenStylePickupRespawn = true;
	TeleFogHeight = TELEFOGHEIGHT;
	TeleportFogClass = TeleportFog;
	DefaultKickBack = 150.0;
	NonMonsterAngleIncrements = 1;


	bIsCoopGame[HexenDefs::game_unused] = false;
	bIsCoopGame[HexenDefs::game_dm] = false;
	bIsCoopGame[HexenDefs::game_kth] = false;
	bIsCoopGame[HexenDefs::game_sweep] = true;
	bIsCoopGame[HexenDefs::game_dmteam] = false;
	bIsCoopGame[HexenDefs::game_ctf] = false;
	bIsCoopGame[HexenDefs::game_domination] = false;
	bIsCoopGame[HexenDefs::game_sweepteam] = false;
	bIsCoopGame[HexenDefs::game_football] = false;
	bIsCoopGame[HexenDefs::game_xmas] = true;

	MaxTeamsInGame[HexenDefs::game_unused] = 0;
	MaxTeamsInGame[HexenDefs::game_dm] = 1;
	MaxTeamsInGame[HexenDefs::game_sweep] = 1;
	MaxTeamsInGame[HexenDefs::game_dmteam] = 2;
	MaxTeamsInGame[HexenDefs::game_sweepteam] = 2;

	AltWeaponModeCount[HexenDefs::ALTFIRE_BLASTRADIUS] = HexenDefs::ALTFIRE_BLASTRADIUS_MODES;
	AltWeaponModeCount[HexenDefs::ALTFIRE_POISONBAG] = HexenDefs::ALTFIRE_POISONBAG_MODES;

/*	ColourNames[0] = "blue";
	ColourNames[1] = "red";
	ColourNames[2] = "gold";
	ColourNames[3] = "lime";
	ColourNames[4] = "green";
	ColourNames[5] = "gray";
	ColourNames[6] = "brown";
	ColourNames[7] = "magenta";*/

	//
	//		Trophy Names
	//
	
	TrophyText[0] = "double kill!";
	TrophyText[1] = "tripple kill!";
	TrophyText[2] = "quadrupple kill!";
	TrophyText[3] = "multiple kill!";
	TrophyText[4] = "impossible kill!";
	TrophyText[5] = "good hunt!";
	TrophyText[6] = "massacre!";
	TrophyText[7] = "devastation!";
	TrophyText[8] = "elimination!";
	TrophyText[9] = "%i frags in a row!";
	TrophyText[10] = "%i kills in a row!";
	TrophyText[11] = "accuracy!";

	classFlags[0] = HexenLevelInfo::MTF_FIGHTER;
	classFlags[1] = HexenLevelInfo::MTF_CLERIC;
	classFlags[2] = HexenLevelInfo::MTF_MAGE;

	PlayerClasses.Num = 6;
	PlayerClasses[0] = PlayerFighter;
	PlayerClasses[1] = PlayerCleric;
	PlayerClasses[2] = PlayerMage;
	PlayerClasses[3] = PlayerHeretic;
	PlayerClasses[4] = PlayerMarine;
	PlayerClasses[5] = PlayerWitchaven;

	WeaponSlots[1].Weapons[0] = WeaponFighterPunch;
	WeaponSlots[2].Weapons[0] = WeaponFighterAxe;
	WeaponSlots[3].Weapons[0] = WeaponDarkness;//WeaponFighterHammerMelee,
	WeaponSlots[4].Weapons[0] = WeaponBlasterUp;
	WeaponSlots[5].Weapons[0] = WeaponSkullRod;
	WeaponSlots[6].Weapons[0] = WeaponFighterHammer;
	WeaponSlots[7].Weapons[0] = WeaponFighterSwordMelee;
	WeaponSlots[8].Weapons[0] = WeaponFighterSword;

	WeaponSlots[1].Weapons[1] = WeaponClericMace;
	WeaponSlots[2].Weapons[1] = WeaponClericStaff;
	WeaponSlots[3].Weapons[1] = WeaponClericMorningStar;//WeaponHealing,
	WeaponSlots[4].Weapons[1] = WeaponClericFire;
	WeaponSlots[5].Weapons[1] = WeaponMageWand;
	WeaponSlots[6].Weapons[1] = WeaponPoisonBreath;
	WeaponSlots[7].Weapons[1] = WeaponPhoenixRod;
	WeaponSlots[8].Weapons[1] = WeaponClericHoly;

	WeaponSlots[1].Weapons[2] = WeaponStaff;
	WeaponSlots[2].Weapons[2] = WeaponMageWandGrey;
	WeaponSlots[3].Weapons[2] = WeaponMageWandRed;
	WeaponSlots[4].Weapons[2] = WeaponMageCone;
	WeaponSlots[5].Weapons[2] = WeaponMageLightning;
	WeaponSlots[6].Weapons[2] = WeaponMageStaff;//WeaponWhirlWind;
	WeaponSlots[7].Weapons[2] = WeaponMageWyvern;//WeaponMageStaff;
	WeaponSlots[8].Weapons[2] = WeaponHorriblePain;

	WeaponSlots[1].Weapons[3] = WeaponGauntlets;
	WeaponSlots[2].Weapons[3] = WeaponGoldWand;
	WeaponSlots[3].Weapons[3] = WeaponCrossbow;
	WeaponSlots[4].Weapons[3] = WeaponBlaster;
	WeaponSlots[5].Weapons[3] = WeaponGoldWandUp;
	WeaponSlots[6].Weapons[3] = WeaponSkullRodUp;
	WeaponSlots[7].Weapons[3] = WeaponPhoenixRodUp;
	WeaponSlots[8].Weapons[3] = WeaponMaceUp;

	WeaponSlots[1].Weapons[4] = WeaponChainsaw;
	WeaponSlots[2].Weapons[4] = WeaponPistol;
	WeaponSlots[3].Weapons[4] = WeaponShotgun;
	WeaponSlots[4].Weapons[4] = WeaponChaingun;
	WeaponSlots[5].Weapons[4] = WeaponMissile;
	WeaponSlots[6].Weapons[4] = WeaponSuperShotgun;
	WeaponSlots[7].Weapons[4] = WeaponPlasma;
	WeaponSlots[8].Weapons[4] = WeaponBFG;

	WeaponSlots[1].Weapons[5] = WeaponWitchavenPunch;
	WeaponSlots[2].Weapons[5] = WeaponWitchavenSSword;
	WeaponSlots[3].Weapons[5] = WeaponWitchavenMorningStar;
	WeaponSlots[4].Weapons[5] = WeaponWitchavenMissileSpell;
	WeaponSlots[5].Weapons[5] = WeaponWitchavenLSword;
	WeaponSlots[6].Weapons[5] = WeaponWitchavenFireballSpell;
	WeaponSlots[7].Weapons[5] = WeaponWitchavenLongBow;
	WeaponSlots[8].Weapons[5] = WeaponWitchavenDisintegrationSpell;

	WeaponSlots[1].Weapons[6] = WeaponHeresiarchClaw;
	WeaponSlots[2].Weapons[6] = WeaponHeresiarchPRay;
	WeaponSlots[3].Weapons[6] = WeaponHeresiarchStorm;
	WeaponSlots[4].Weapons[6] = WeaponHeresiarchHand;
	WeaponSlots[5].Weapons[6] = WeaponHeresiarchHoly;
	WeaponSlots[6].Weapons[6] = WeaponHeresiarchHoly;
	WeaponSlots[7].Weapons[6] = WeaponHeresiarchHoly;
	WeaponSlots[8].Weapons[6] = WeaponHeresiarchHoly;
}
