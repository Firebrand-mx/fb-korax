//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class WeaponSuperShotgun : WeaponDoomBase;

//===========================================================================
//
//  A_FireShotgun2
//
//===========================================================================

void A_FireShotgun2()
{
	int i;
	int damage;
	TAVec rot;
	TVec aimDir;
	TVec dir;
	TAVec angles;

	Player.MO.PlaySound('SuperShotgunFire', CHAN_WEAPON);
	Player.MO.SetState(Player.MO.MissileState);

	UseWeaponMana();

	Player.SetPsprite(ps_flash, FlashState);

	angles = Player.MO.Angles;
	Player.MO.AimLineAttack(&angles, MISSILERANGE);
	AngleVector(&angles, &aimDir);
//	aimDir = Aim(Player.MO, 16.0 * 64.0);
	for (i = 0; i < 20; i++)
	{
		rot.pitch = (Random() - Random()) * 45.0 / 8.0;
		rot.yaw = (Random() - Random()) * 45.0 / 4.0;
		rot.roll = 0.0;
		dir = RotateDirectionVector(aimDir, rot);
		damage = 7; //5 * (P_Random() % 3 + 1);
		if (int_mod)
		{
			if(!active_damage)
			{
				damage = damage * Player.strength / 10;
			}
			else // [FB] PI Damage
			{
				damage = (damage * Player.intelligence / 10) * ftoi(3.1415);
			}
		}
		Player.MO.LineAttack(dir, MISSILERANGE, damage, DoomPuff);
	}
	Player.MO.Effects |= EF_DL_MUZZLEFLASH;
}

//===========================================================================
//
//  A_OpenShotgun2
//
//===========================================================================

void A_OpenShotgun2()
{
	Player.MO.PlaySound('SuperShotgunOpen', CHAN_WEAPON);
}

//===========================================================================
//
//  A_LoadShotgun2
//
//===========================================================================

void A_LoadShotgun2()
{
	Player.MO.PlaySound('SuperShotgunLoad', CHAN_WEAPON);
}

//===========================================================================
//
//  A_CloseShotgun2
//
//===========================================================================

void A_CloseShotgun2()
{
	Player.MO.PlaySound('SuperShotgunClose', CHAN_WEAPON);
	A_ReFire();
}

__states__
{
	S_DSGUN('SHT2', 0, 1.0 / 35.0, S_DSGUN) { A_WeaponReady(); }
	S_DSGUNDOWN('SHT2', 0, 1.0 / 35.0, S_DSGUNDOWN) { A_Lower(); }
	S_DSGUNUP('SHT2', 0, 1.0 / 35.0, S_DSGUNUP) { A_Raise(); }
	S_DSGUN1('SHT2', 0, 3.0 / 35.0, S_DSGUN2) { }
	S_DSGUN2('SHT2', 0, 7.0 / 35.0, S_DSGUN3) { A_FireShotgun2(); }
	S_DSGUN3('SHT2', 1, 7.0 / 35.0, S_DSGUN4) { }
	S_DSGUN4('SHT2', 2, 7.0 / 35.0, S_DSGUN5) { if (!IsWeaponManaUsable()) SetState(S_DSGUN);/*A_CheckReload();*/ }
	S_DSGUN5('SHT2', 3, 7.0 / 35.0, S_DSGUN6) { A_OpenShotgun2(); }
	S_DSGUN6('SHT2', 4, 7.0 / 35.0, S_DSGUN7) { }
	S_DSGUN7('SHT2', 5, 7.0 / 35.0, S_DSGUN8) { A_LoadShotgun2(); }
	S_DSGUN8('SHT2', 6, 6.0 / 35.0, S_DSGUN9) { }
	S_DSGUN9('SHT2', 7, 6.0 / 35.0, S_DSGUN10) { A_CloseShotgun2(); }
	S_DSGUN10('SHT2', 0, 5.0 / 35.0, S_DSGUN) { A_ReFire(); }
	S_DSNR1('SHT2', 1, 7.0 / 35.0, S_DSNR2) { }
	S_DSNR2('SHT2', 0, 3.0 / 35.0, S_DSGUNDOWN) { }
	S_DSGUNFLASH1('SHT2', 8 | FF_FULLBRIGHT, 5.0 / 35.0, S_DSGUNFLASH2) { /*A_Light1();*/ }
	S_DSGUNFLASH2('SHT2', 9 | FF_FULLBRIGHT, 4.0 / 35.0, S_LIGHTDONE) { /*A_Light2();*/ }
}

defaultproperties
{
	UpState = S_DSGUNUP;
	DownState = S_DSGUNDOWN;
	ReadyState = S_DSGUN;
	AttackState = S_DSGUN1;
	FlashState = S_DSGUNFLASH1;
	HoldAttackState = S_DSGUN1;
	Mana = MANA_2;
	manause = 25;
	wis_mod = true;
	int_mod = true;
	dex_mod = false;
	str_mod = false;
	PickUpMessage = "SUPER SHOTGUN";
}

//**************************************************************************
//
//  $Log$
//  Revision 1.8  2006/02/15 23:37:46  dj_jl
//  Moved all server progs global variables to classes.
//
//  Revision 1.7  2005/12/11 21:37:29  dj_jl
//  Made path traversal callbacks class members.
//
//  Revision 1.6  2005/08/12 23:04:25  firebrand_kh
//  Fixed weapons to work with the PI Damage artifact
//
//  Revision 1.5  2005/08/08 18:16:52  firebrand_kh
//  Took out model definitions
//
//  Revision 1.4  2005/07/27 21:00:06  firebrand_kh
//  Balanced weapon damage rates & mana usage
//
//  Revision 1.3  2005/02/03 01:05:06  firebrand_kh
//  Fixed Doom Guy weapon bug with the new effects
//
//  Revision 1.2  2004/12/09 00:03:57  firebrand_kh
//  Added stuff for the Doom Guy weapon effects
//
//  Revision 1.1  2004/11/16 13:33:22  dj_jl
//  Initial import.
//
//  Revision 1.2  2003/11/12 16:48:33  dj_jl
//  Changed player structure into a class
//
//  Revision 1.1  2002/10/26 16:32:20  dj_jl
//  New style of defining classes.
//
//**************************************************************************
