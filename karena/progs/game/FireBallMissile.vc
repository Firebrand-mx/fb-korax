//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class FireBallMissile:Projectile;

//===========================================================================
//
//  RoughCheckThing
//
//===========================================================================

bool RoughCheckThing(Entity Other)
{
	float angle;
	Actor link = Actor(Other);
	
	if (!(link.bCountKill || link.bIsPlayer) || link == Instigator ||
		link.bDormant)
	{
		return false;
	}
	if (!link.bShootable)
	{
		return false;
	}
	if (netgame && !deathmatch && link.bIsPlayer)
	{
		return false;
	}
	if (CanSee(link))
	{
		angle = AngleMod360(atan2(
			link.Origin.y - Instigator.Origin.y,
			link.Origin.x - Instigator.Origin.x) -
			Instigator.Angles.yaw);
		if (angle > 226.0 * 360.0 / 256.0 ||
			angle < 30.0 * 360.0 / 256.0)
		{
			return true;
		}
	}
	return false;
}

//==========================================================================
//
//  A_FBallTrack
//
//==========================================================================

void A_FBallTrack(void)
{
	if (!Enemy && (P_Random() < 50))
	{
		Enemy = Actor(RoughMonsterSearch(2));
	}
	SeekerMissile(2.0, 10.0);
}

__states__
{
	S_FBALLMISSILE_FX_1('WEFT', 0 | FF_FULLBRIGHT, 2.0 / 35.0, S_FBALLMISSILE_FX_2) { A_FBallTrack(); }
	S_FBALLMISSILE_FX_2('WEFT', 1 | FF_FULLBRIGHT, 2.0 / 35.0, S_FBALLMISSILE_FX_3) { A_FBallTrack(); }
	S_FBALLMISSILE_FX_3('WEFT', 2 | FF_FULLBRIGHT, 2.0 / 35.0, S_FBALLMISSILE_FX_4) { A_FBallTrack(); }
	S_FBALLMISSILE_FX_4('WEFT', 3 | FF_FULLBRIGHT, 2.0 / 35.0, S_FBALLMISSILE_FX_1) { A_FBallTrack(); }
	S_FBALLMISSILE_FX_X1('WEFT', 4 | FF_FULLBRIGHT, 2.0 / 35.0, S_FBALLMISSILE_FX_X2) { }
	S_FBALLMISSILE_FX_X2('WEFT', 5 | FF_FULLBRIGHT, 2.0 / 35.0, S_FBALLMISSILE_FX_X3) { }
	S_FBALLMISSILE_FX_X3('WEFT', 6 | FF_FULLBRIGHT, 2.0 / 35.0, S_FBALLMISSILE_FX_X4) { }
	S_FBALLMISSILE_FX_X4('WEFT', 7 | FF_FULLBRIGHT, 2.0 / 35.0, S_FBALLMISSILE_FX_X5) { }
	S_FBALLMISSILE_FX_X5('WEFT', 8 | FF_FULLBRIGHT, 2.0 / 35.0, S_FBALLMISSILE_FX_X6) { }
	S_FBALLMISSILE_FX_X6('WEFT', 9 | FF_FULLBRIGHT, 2.0 / 35.0, S_FBALLMISSILE_FX_X7) { }
	S_FBALLMISSILE_FX_X7('WEFT', 10 | FF_FULLBRIGHT, 2.0 / 35.0, S_FBALLMISSILE_FX_X8) { }
	S_FBALLMISSILE_FX_X8('WEFT', 11 | FF_FULLBRIGHT, 2.0 / 35.0, S_FBALLMISSILE_FX_X9) { }
	S_FBALLMISSILE_FX_X9('WEFT', 12 | FF_FULLBRIGHT, 2.0 / 35.0, S_FBALLMISSILE_FX_X10) { }
	S_FBALLMISSILE_FX_X10('WEFT', 13 | FF_FULLBRIGHT, 2.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	Radius = 8.0;
	Height = 8.0;
	Speed = 1050.0;
	MissileDamage = 75;
	bFireDamage = true;
	bSeekerMissile = true;
	IdleState = S_FBALLMISSILE_FX_1;
	DeathState = S_FBALLMISSILE_FX_X1;
	DeathSound = 'MageStaffExplode';
	Effects = EF_DL_RED;
}

//**************************************************************************
//
//  Revision 1.1  2002/10/26 16:32:26  dj_jl
//  New style of defining classes.
//
//**************************************************************************
