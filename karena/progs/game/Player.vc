//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**	        ##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id$
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Player : PlayerEx;

const float
	INVULNTIME2				= 5.0,
	MAULATORTIME			= 25.0;

const float HEAL_RADIUS_DIST		= 255.0;

struct trophies_t
{
	int		frags_at_once;
	int		kills_at_once;
	float	fao_timer;
	float	kao_timer;
	int		frags_row;
	int		kills_row;
};

enum
{
	targetinfo_none,
	targetinfo_noshoot,
	targetinfo_shoot
};

struct targetinfo_t
{
	byte	type;
	string	sname;
	byte	level;
	byte	healthpc;	// [CW] health percentage
};

int		altWeapon;
int		altWeaponMode[HexenDefs::NUM_ALTFIRE];

// [FB] Flash for the Darkness Missile
int BlindCount;
float LastBlindTime;
/*Actor*/Player Blinder;		///// none for non-player mobjs
int count;

BotPlayer Bot;

Actor Rain1;	// active rain maker 1
Actor Rain2;	// active rain maker 2

bool inited;

int pcount; // [FB] counter

// [Korax]
// [FB] Scores for the different gameplay modes
int Score;	//[CW] personal player's score value (depends on game mode)
int TeamFrags; // [FB] Frags from each team	// [CW] you mean THIS PLAYER's team
int TeamKills; // [FB] How many enemies has each team killed	// [CW] you mean THIS PLAYER's team
int TeamPosition; // [CW] team position in global competition list
int PlayerPosition; // [CW] player position in team inner competition list

// [FB] Player atributes for leveling system
int experience;
int exp_level;
int next_level;
int old_level; // [FB] If we are going backwards we need this
int strength;
int intelligence;
int wisdom;
int dexterity;
int constitution;
//
//  Other stats (for status bar)
//
int max_health;
int old_maxhealth;	// [FB] To decrease the health
int bak_health;		// [FB] To keep an older level health

int				teamscores[HexenDefs::MAXTEAMSINGAME];

int use_power;				// [CW] is needed for some advanced game modes (football);
							//	stores time USE button was held pressed

int		TeamSelection;	//[CW] team selection process state
int		curTeamIndex;	//[CW] Team to join when spawn

						//////// used to skip respawn if Team Selection screen was cancelled
						///////// while REselecting team
PlayerTeam	Team;

bool			targetinfo_enabled;
int				targetinfo_counter;
targetinfo_t	targetinfo;

bool bNoHUD;

// [CW] for trophy announcements
trophies_t	Trophies;

bool bShowScoreboard; // [CW] True if scoreboard should be visible

bool bUnControllable; //[CW] Ignore user/AI commands (move/attack etc)

float	respawn_counter; // [CW] Time player must wait after his death before he may respawn
bool	bRecalculateLevelOnRespawn; // [CW] Forces to recalc exp level on player respawn

float	level_ender_counter; // [CW] Time to wait before exit level

replication
{
	reliable if (!bIsClient)
		Score, TeamFrags, TeamKills, TeamPosition, PlayerPosition,
		experience, exp_level, next_level, old_level, strength,
		intelligence, wisdom, dexterity, constitution, max_health,
		old_maxhealth, bak_health, use_power, altWeapon, teamscores,
		altWeaponMode, targetinfo;

	unreliable if (!bIsClient)
		ClientDynamicLightEx, ParticleEffectEx;

	reliable if (!bIsClient)
		SetFOV, ClientTeamSelect, ClientScoreboard, CallLocalSound,
		CallLocalSoundNamed;

	reliable if (bIsClient)
		ServerDisconnectBot, ServerTeamSelect, ServerJoinTeam;
}

//==========================================================================
//
//	PutClientIntoServer
//
//==========================================================================

void PutClientIntoServer()
{
	if (bIsBot)
	{
		Bot = BotPlayer(SpawnObject(BotPlayer));
		Bot.player = self;
		Bot.OnBeginPlay();
	}
	TeamSelection = HexenDefs::teamselection_none;
}

//==========================================================================
//
//  SpawnClient
//
//==========================================================================

void SpawnClient()
{
	bool playerWasReborn;
	Weapon bestWeapon;
	EntityEx OldMO = EntityEx(MO);
	Inventory Item;

	Attacker = none;
	Blinder = none;
	Poisoner = none;

	TeamPosition = -1;
	PlayerPosition = -1;
	bUnControllable = false;

	if (Level.Game.netgame && !Level.Game.deathmatch)
	{
		// Cooperative net-play, retain keys and weapons
		playerWasReborn = (PlayerState == PST_REBORN);
	}

	//  Spawn player
	if (Level.Game.deathmatch)
	{
		DeathMatchSpawnPlayer();
	}
	else
	{
		SpawnPlayer(&Level.PlayerStarts[Level.Game.RebornPosition * MAXPLAYERS +
			GetPlayerNum()]);
	}

	if (Level.Game.netgame && !Level.Game.deathmatch && playerWasReborn)
	{
		// Restore keys and weapons when reborn in co-op
		bestWeapon = none;
		if (OldMO)
		{
			for (Item = OldMO.Inventory; Item; )
			{
				Inventory Next = Item.Inventory;
				if (Weapon(Item))
				{
					if (!bestWeapon || bestWeapon.SelectionOrder >
						Weapon(Item).SelectionOrder)
					{
						bestWeapon = Weapon(Item);
					}
					Item.AttachToOwner(EntityEx(MO));
				}
				else if (Key(Item))
				{
					Item.AttachToOwner(EntityEx(MO));
				}
				Item = Next;
			}
		}
		GiveMana(Mana1, 0);
		GiveMana(Mana2, 0);
		GiveMana(ItemManaRed, 0);
		EntityEx(MO).FindInventory(Mana1).Amount = 25;
		EntityEx(MO).FindInventory(Mana2).Amount = 25;
		EntityEx(MO).FindInventory(ItemManaRed).Amount = 25;
		if (bestWeapon)
		{
			// Bring up the best weapon
			PendingWeapon = bestWeapon;
		}
	}

	// Destroy all things touching players
	Actor(MO).TeleportMove(MO.Origin);
}

//==========================================================================
//
//  NetGameReborn
//
//==========================================================================

void NetGameReborn()
{
	int i;
	bool foundSpot;
	Weapon bestWeapon;
	EntityEx OldMO = EntityEx(MO);
	Inventory Item;

	// remove pitch and roll angles from corpse
	MO.Angles.pitch = 0.0;
	MO.Angles.roll = 0.0;

	// first dissasociate the corpse
	MO.Player = none;
	MO.bIsPlayer = false;

	// spawn at random spot if in death match
	if (Level.Game.deathmatch)
	{
		OldMO.DestroyAllInventory();
		DeathMatchSpawnPlayer();
		return;
	}

	foundSpot = false;
	if (CheckSpot(&Level.PlayerStarts[Level.Game.RebornPosition * MAXPLAYERS +
		GetPlayerNum()]))
	{
		// Appropriate player start spot is open
		SpawnPlayer(&Level.PlayerStarts[Level.Game.RebornPosition * MAXPLAYERS +
			GetPlayerNum()]);
		foundSpot = true;
	}
	else
	{
		// Try to spawn at one of the other player start spots
		for (i = 0; i < MAXPLAYERS; i++)
		{
			if (CheckSpot(&Level.PlayerStarts[Level.Game.RebornPosition * MAXPLAYERS + i]))
			{
				// Found an open start spot
				SpawnPlayer(&Level.PlayerStarts[Level.Game.RebornPosition * MAXPLAYERS + i]);
				foundSpot = true;
				break;
			}
		}
	}

	if (!foundSpot)
	{
		// Player's going to be inside something
		SpawnPlayer(&Level.PlayerStarts[Level.Game.RebornPosition * MAXPLAYERS +
			GetPlayerNum()]);
	}

	// Restore keys and weapons
	bestWeapon = none;
	for (Item = OldMO.Inventory; Item; Item = Item.Inventory)
	{
		if (Weapon(Item))
		{
			if (!bestWeapon || bestWeapon.SelectionOrder >
				Weapon(Item).SelectionOrder)
			{
				bestWeapon = Weapon(Item);
			}
			Item.AttachToOwner(EntityEx(MO));
		}
		else if (Key(Item))
		{
			Item.AttachToOwner(EntityEx(MO));
		}
	}
	GiveMana(Mana1, 0);
	GiveMana(Mana2, 0);
	GiveMana(ItemManaRed, 0);
	EntityEx(MO).FindInventory(Mana1).Amount = 25;
	EntityEx(MO).FindInventory(Mana2).Amount = 25;
	EntityEx(MO).FindInventory(ItemManaRed).Amount = 25;
	if (bestWeapon)
	{
		// Bring up the best weapon
		PendingWeapon = bestWeapon;
	}
	OldMO.DestroyAllInventory();
}

//==========================================================================
//
//  DisconnectClient
//
//==========================================================================

void DisconnectClient()
{
	int i;

	if (Bot != none)
	{
		Bot.Destroy();
		Bot = none;
	}
	if (MO)
	{
		MO.Player = none;
		MO.bIsPlayer = false;
		Actor(MO).Damage(none, none, 10000);
	}
	Level.bprint("%s left the game\n", PlayerName);
	MO.PlaySound('misc/chat', CHAN_AUTO, 1.0, ATTN_NONE);

	//[CW] set leaving player down the competition table
	// NOTE: for future, should leaving player really loose his/her score?
	if (Team)
		Team.DiscardPlayer(self);

	// [CW] get rid of the MO corpse
	MO.Destroy();
	MO = none;
}

//==========================================================================
//
//  ServerDisconnectBot
//
//==========================================================================

void ServerDisconnectBot(int pl)
{
	if (Level.Game.Players[pl])
	{
		if (Level.Game.Players[pl].bIsBot)
			Level.Game.Players[pl].DisconnectBot();
		else
			Error("Player::ServerDisconnectBot : called for non-bot player %i", pl);
	}
}

//==========================================================================
//
//  UserinfoChanged
//
//==========================================================================

void UserinfoChanged()
{
	targetinfo_enabled = !bIsBot && GetCvar('TargetInfo');
	bNoHUD = !bIsBot && GetCvar('NoHUD');
}

//==========================================================================
//
//  SelectPlayerTeam
//
//==========================================================================

void SelectPlayerTeam()
{
	if (bIsBot || GetCvar('TeamAutoSelect') && TeamSelection != HexenDefs::teamselection_reselect)
	{
		AutoSelectTeam();
	}
	else
	{
		int i;
		int maxTeams;
		maxTeams = MainGameInfo(Level.Game).MaxTeamsInGame[MainGameInfo(Level.Game).GameType]
						> HexenDefs::MAXTEAMSINGAME ? HexenDefs::MAXTEAMSINGAME :
						MainGameInfo(Level.Game).MaxTeamsInGame[MainGameInfo(Level.Game).GameType];
		for (i = 0; i < HexenDefs::MAXTEAMSINGAME; i++)
		{
			if (MainGameInfo(Level.Game).Teams[i] == none)
				break;
		}
		
		if (TeamSelection != HexenDefs::teamselection_reselect)
		{
			TeamSelection = HexenDefs::teamselection_wait;
			SetControllable(false);
		}
		
		ClientTeamSelect(maxTeams, MainGameInfo(Level.Game).TeamInfos.Num, i,
			/*curTeamIndex*/Team ? Team.Index : -1,
			MainGameInfo(Level.Game).Teams[0] ? MainGameInfo(Level.Game).Teams[0].Index : -1,
			MainGameInfo(Level.Game).Teams[0] ? MainGameInfo(Level.Game).Teams[0].GetPlayerCount() : 0,
			MainGameInfo(Level.Game).Teams[1] ? MainGameInfo(Level.Game).Teams[1].Index : -1,
			MainGameInfo(Level.Game).Teams[1] ? MainGameInfo(Level.Game).Teams[1].GetPlayerCount() : 0);
	}
}

//==========================================================================
//
//  AutoSelectTeam
//
//==========================================================================

void AutoSelectTeam()
{
	int i;
	int new_index = -1;
	int free_team_slots = 0;
	//bool team_indices_free[HexenDefs::MAXPLAYERTEAMS];
	array<bool> team_indices_free;

	dprint("Player::AutoSelectTeam : AAA");

	MainGameInfo Game = MainGameInfo(Level.Game);

	bool bKeepEqual = GetCvar('KeepTeamsEqual');
	int count_limit = 0;
	if (bKeepEqual && Game.Teams[0] && Game.Teams[1])
		count_limit = Game.Teams[0].GetPlayerCount();

	dprint("Player::AutoSelectTeam : BBB");

	team_indices_free.Num = Game.TeamInfos.Num;

	//for (i = 0; i < /*HexenDefs::MAXPLAYERTEAMS*/team_indices_free.Num; i++)
	//	team_indices_free[i] = true;
	for (i = 0; i < /*HexenDefs::MAXTEAMSINGAME*/team_indices_free.Num; i++)
	{
		if (Game.TeamInfos[i].bTeamInPlay)
			team_indices_free[i] = false;
		else
			team_indices_free[i] = true;
		//if (Game.Teams[i])
		//	team_indices_free[Game.Teams[i].Index] = false;
	}

	dprint("Player::AutoSelectTeam : CCC");

	for (i = 0; i < Game.MaxTeamsInGame[Game.GameType]; i++)
	{
		if (Game.Teams[i] == none)
			free_team_slots++;
		else
		{
			if (bKeepEqual)
			{
				int count = Game.Teams[i].GetPlayerCount();
				if (count_limit > count)
					count_limit = count;
			}
		}
	}

	dprint("Player::AutoSelectTeam : DDD");

	//curTeamIndex = Game.Teams[P_Random() % (Game.MaxTeamsInGame[Game.GameType] - free_team_slots)].Index;

	////if (free_team_slots == Game.MaxTeamsInGame[Game.GameType] /*||
	////		free_team_slots > 0 && !(bKeepEqual && !team_indices_free[curTeamIndex]) && P_Random() > 127*/)
	////{
	////	dprint("Player::AutoSelectTeam : EEE 1");
	////	new_index = P_Random() % Game.TeamInfos.Num;
	////		//curTeamIndex;
	////}
	////else
	{
		dprint("Player::AutoSelectTeam : EEE 2");
		if (free_team_slots != Game.MaxTeamsInGame[Game.GameType] && bKeepEqual)
		{
			dprint("Player::AutoSelectTeam : EEE 21");
			for (i = 0; i < Game.MaxTeamsInGame[Game.GameType]; i++)
			{
				// [CW] Choose one of the existing teams that is available for joining
				if (Game.Teams[i] == none)
					break;
				if (Game.Teams[i].GetPlayerCount() <= count_limit)
				{
					new_index = Game.Teams[i].Index;
					break;
				}
			}

			if (new_index < 0)
			{
				dprint("Player::AutoSelectTeam : EEE 211");
				// [CW] Choose new team
				do
					new_index = P_Random() % /*HexenDefs::MAXPLAYERTEAMS*/team_indices_free.Num;
				while (!team_indices_free[new_index]);
			}
		}
		else
		{
			dprint("Player::AutoSelectTeam : EEE 22");
			if (!free_team_slots ||
				((free_team_slots != Game.MaxTeamsInGame[Game.GameType]) && P_Random() > 127))
				// [CW] Choose one of the existing teams
				new_index = 
					Game.Teams[P_Random() % (Game.MaxTeamsInGame[Game.GameType] - free_team_slots)].Index;
			else
			{
				dprint("Player::AutoSelectTeam : EEE 221");
				// [CW] Choose new team
				do
					new_index = P_Random() % team_indices_free.Num;
				while (!team_indices_free[new_index]);
			}
				//Game.Teams[P_Random() % (Game.MaxTeamsInGame[Game.GameType] - free_team_slots)].Index;
		}
	}
	dprint("Player::AutoSelectTeam : FFF");
	curTeamIndex = new_index;
	TeamSelection = HexenDefs::teamselection_done;//teamselection_autoselect;
}

//==========================================================================
//
//  ClientTeamSelect
//
//	[CW] TODO: pass array here as Cols if this is possible?
//
//==========================================================================

void ClientTeamSelect(int maxTeams, int registeredTeams, int activeTeams, int curSelection,
	int Col1, int Count1, int Col2, int Count2)
{
	ClientGameBaseEx(ClGame).TeamSelect(maxTeams, registeredTeams, activeTeams, curSelection,
		Col1, Count1, Col2, Count2);
}

//==========================================================================
//
//  ServerTeamSelect
//
//==========================================================================

void ServerTeamSelect()
{
	TeamSelection = HexenDefs::teamselection_reselect;
	SelectPlayerTeam();
}

//==========================================================================
//
//  ServerJoinTeam
//
//==========================================================================

void ServerJoinTeam(int Index)
{
	dprint("Player::ServerJoinTeam : %i", Index);
	if (!bSpawned)
	{
		dprint("Player::ServerJoinTeam : not spawned! out");
		return;
	}

	dprint("Player::ServerJoinTeam : TeamSelection = %i", TeamSelection);

	// [CW] respawn player if team is selected or re-selected
	if (TeamSelection == HexenDefs::teamselection_wait ||
		TeamSelection == HexenDefs::teamselection_reselect/* ||
		TeamSelection == HexenDefs::teamselection_autoselect*/)
	{
		curTeamIndex = Index;

		if (/*TeamSelection != HexenDefs::teamselection_autoselect &&*/
			!(TeamSelection == HexenDefs::teamselection_reselect && (Team ? Team.Index : -1) == Index))
		{
			TeamSelection = HexenDefs::teamselection_done;	
			if (PlayerState != PST_DEAD)
			{
				MO.Destroy();
				MO = none;
				PlayerState = PST_REBORN;
				SpawnClient();
			}
			else
			{
				// [CW] For player's convenience
				Scoreboard(false);
				centreprint("you will join selected team after respawn");
			}
		}
		else
			TeamSelection = HexenDefs::teamselection_done;
	}

	//[CW] update all server clients' scoreboards
	MainGameInfo(Level.Game).ScoreboardsUpdate(none);
}

//==========================================================================
//
//  DeathMatchSpawnPlayer
//
//  Spawns a player at one of the random death match spots called at level
// load and each death
//
//==========================================================================

void DeathMatchSpawnPlayer()
{
	int i;
	int j;

	for (j = 0; j < 20; j++)
	{
		i = P_Random() % Level.NumDeathmatchStarts;
		if (CheckSpot(&Level.DeathmatchStarts[i]))
		{
			SpawnPlayer(&Level.DeathmatchStarts[i]);
			return;
		}
	}
}

//==========================================================================
//
//  CheckSpot
//
//  Returns false if the player cannot be respawned at the given mthing_t
// spot because something is occupying it
//
//==========================================================================

bool CheckSpot(mthing_t * mthing)
{
	float x;
	float y;
	sector_t *sec;
	float an;
	Actor A;
	int i;

	if (!MO)
	{
		// first spawn of level, before corpses
		for (i = 0; i < MAXPLAYERS; i++)
			if (Level.Game.Players[i] && Level.Game.Players[i].MO &&
				Level.Game.Players[i].MO.Origin.x == mthing->x &&
				Level.Game.Players[i].MO.Origin.y == mthing->y)
				return false;
		return true;
	}

	x = mthing->x;
	y = mthing->y;

	MO.bPassMobj = false;
	if (!MO.CheckPosition(vector(x, y, Actor::ONFLOORZ)))
	{
		MO.bPassMobj = true;
		return false;
	}
	MO.bPassMobj = true;

	if (!PlayerChunk(MO))
	{
		LineSpecialLevelInfo(Level).AddPlayerCorpse(EntityEx(MO));
	}

	// spawn a teleport fog 
	sec = Level.XLevel.PointInSector(vector(x, y, 0.0));
	an = itof(45 * (mthing->angle / 45));

	A = HexenLevelInfo(Level).Spawn(TeleportFog, vector(x + 20.0 * cos(an), y + 20.0 * sin(an),
		sec->floorheight + MainGameInfo::TELEFOGHEIGHT));
	A.PlaySound('Teleport', CHAN_VOICE);

	return true;
}

//==========================================================================
//
//  SpawnPlayer
//
//  Called when a player is spawned on the level.  Most of the player
// structure stays unchanged between levels.
//
//==========================================================================

void SpawnPlayer(mthing_t * mthing)
{
	float x, y, z;
	KArenaPlayerPawn pp;
	bool ResetInventory = false;
	Inventory Item;
	int i;
	class<Inventory> Cls;

	if (PlayerState == PST_REBORN)
	{
		PlayerReborn();
		ResetInventory = true;
		if (TeamSelection != HexenDefs::teamselection_none)
			TeamSelection == HexenDefs::teamselection_done;
		/*if (TeamSelection != HexenDefs::teamselection_none &&
			TeamSelection != HexenDefs::teamselection_done)
		{
			TeamSelection = HexenDefs::teamselection_autoselect;
		}*/
	}
	if (MainGameInfo(Level.Game).randomclass && Level.Game.deathmatch)
	{
		PClass = P_Random() % 6;
		if (PClass == BaseClass)
		{
			PClass = (PClass + 1) % 6;
		}
		BaseClass = PClass;
		SB_Start();
	}
	else
	{
		PClass = BaseClass;
	}

	if (MainGameInfo(Level.Game).GameType >= HexenDefs::NUMGAMESNOTEAM &&
		TeamSelection == HexenDefs::teamselection_none)
	{
		SelectPlayerTeam();
	}

	x = mthing->x;
	y = mthing->y;
	z = Actor::ONFLOORZ;
	if (PClass >= Level.Game.PlayerClasses.Num)
	{
		Error("Player::SpawnPlayer : Unknown class type");
	}
	pp = HexenLevelInfo(Level).Spawn(class<KArenaPlayerPawn>(
		Level.Game.PlayerClasses[PClass]), vector(x, y, z),,, false);
	pp.Origin.z += mthing->height;
	pp.LinkToWorld();

	pp.Angles.yaw = itof(45 * (mthing->angle / 45));
	pp.Player = self;
	pp.bIsPlayer = true;
	pp.Health = Health;
	MO = pp;
	Camera = pp;
	PlayerState = PST_LIVE;
	Refire = 0;
	DamageFlash = 0.0;
	BonusFlash = 0.0;
	PoisonCount = 0;
	BlindCount = 0; // [FB] Reset the blind count too!
	MorphTime = 0.0;
	ExtraLight = 0;
	FixedColourmap = 0;
	LastSectorDamageTime = 0.0;
	LastHazardTime = 0.0;
	ViewHeight = pp.ViewHeight;
	ViewOrg = MO.Origin;
	ViewOrg.z += ViewHeight;
	ViewAngles = pp.Angles;
	bFixAngle = true;
	pcount = 0; // [FB] Reset counter
	respawn_counter = 2.0;

//[Korax]
	if (!inited)
	{
		InitiateLevel();
		inited = true;
	}

	pp.Inventory = SavedInventory;
	for (Item = pp.Inventory; Item; Item = Item.Inventory)
	{
		Item.Owner = MO;
	}

	if (ResetInventory)
	{
		while (pp.Inventory)
		{
			pp.Inventory.Destroy();
		}
		AddDefaultInventory();
		LevelChanged();
	}
	SetupPsprites();
	if (Level.Game.deathmatch)
	{
		// Give all keys in death match mode
		foreach AllClasses(Key, Cls)
		{
			if (!FindClassState(Cls, 'Spawn'))
			{
				//	Abstract class.
				continue;
			}
			pp.GiveInventoryType(Cls);
		}
		// [FB] Give temporary invulnerability in DM only
		pp.GiveInventoryType(InitialInvulnerability);
	}

	// Set translation table data
	TranslStart = pp.TranslStart;
	TranslEnd = pp.TranslEnd;
	pp.Translation = (Entity::TRANSL_Player << Entity::TRANSL_TYPE_SHIFT) +
		GetPlayerNum();
	if (bIsBot)
	{
		Bot.OnSpawn();
	}

	//
	// [CW] if the trophy data should be stored, do it here
	//
	Trophies.kills_at_once = 0;
	Trophies.kao_timer = 0.0;
	Trophies.frags_at_once = 0;
	Trophies.fao_timer = 0.0;
	Trophies.frags_row = 0;
	Trophies.kills_row = 0;

	// [FB] There's a penalty for dying; you lost some experience
	if(inited && PlayerState == PST_LIVE)
	{
		// [CW] recalc attributes if needed
		if (bRecalculateLevelOnRespawn)
		{
			int bak_level;

			bRecalculateLevelOnRespawn = false;
			bak_level = exp_level;
			InitiateLevel();
			ActivateLevel(bak_level, false);
		}

		experience -= (200 * exp_level);
		if(experience < 0)
		{
			experience = 0; // [FB] We don't want to have negative experience, right?
		}

		KArenaPlayerPawn(MO).experience = experience;

		// [FB] But what if the experience we lost has made us lost a level??
		//	Then we use the old_level value to compare our current experience,
		//	if it is lower to it, then we activate a level less than
		//	our current one
		while(experience < old_level && exp_level >= 1)
		{
			DeactivateLevel(exp_level - 1, true); // [FB] Update Stats accordingly
		}
	}

	if (bUnControllable)
		MO.Deactivate();

	//[CW] put player into corresponding team
	dprint("Player::SpawnPlayer : TeamSelection = %i, curTeamIndex = %i", TeamSelection, curTeamIndex);
	if (MainGameInfo(Level.Game).GameType < HexenDefs::NUMGAMESNOTEAM ||
		TeamSelection == HexenDefs::teamselection_done)
	{
		MainGameInfo(Level.Game).InsertPlayer(self, curTeamIndex);
	}

	// [CW] if there is advanced game mode initiated, notify it of player spawn
	if (MainGameInfo(Level.Game).GameModel)
		MainGameInfo(Level.Game).GameModel.NotifyPlayerSpawn(self);

	// [FB] Destroy all things touching players
	Actor(MO).TeleportMove(MO.Origin);

	if (ResetInventory)
	{
		Level.XLevel.StartTypedACScripts(Level::SCRIPT_Respawn, 0, 0, 0, MO,
			true, false);
	}
}

//===========================================================================
//
//	AddDefaultInventory
//
//===========================================================================

final void AddDefaultInventory()
{
	int i;

	BasicArmor BArmor = Level.Spawn(BasicArmor,,,, false);
	BArmor.Amount = 0;
	BArmor.AttachToOwner(EntityEx(MO));

	for (i = 0; i < KArenaPlayerPawn(MO).DropItemList.Num; i++)
	{
		Inventory Item = Inventory(Level.Spawn(KArenaPlayerPawn(MO).DropItemList[i].Type,,,, false));
		Item.bIgnoreSkill = true;
		Item.Amount = KArenaPlayerPawn(MO).DropItemList[i].Amount;
		if (KArenaWeapon(Item))
		{
			//	For better control empty weapon's ammo.
			KArenaWeapon(Item).AmmoGive1 = 0;
			KArenaWeapon(Item).AmmoGive2 = 0;
			KArenaWeapon(Item).AmmoGive3 = 0;
		}
		if (!Item.TryPickup(EntityEx(MO)))
		{
			Item.Destroy();
		}
		else if (KArenaWeapon(Item) && KArenaWeapon(Item).CheckAmmo(false))
		{
			SetWeapon(KArenaWeapon(Item));
		}
	}
}

//==========================================================================
//
//  PlayerReborn
//
//  Called after a player dies almost everything is cleared and initialised
//
//==========================================================================

void PlayerReborn()
{
	// [CW] not needed since no ClearPlayer called? CHECKME
	//targetinfo_enabled = !bIsBot && GetCvar('TargetInfo');

	PClass = BaseClass;

	bUseDown = true;	// don't do anything immediately
	bAttackDown = true;
	PlayerState = PST_LIVE;
	Health = max_health;

	LocalQuakeHappening = 0;

	Scoreboard(false); // [CW]
}

//==========================================================================
//
//  PlayerExitMap
//
//  Called when the player leaves a map.
//
//==========================================================================

void PlayerExitMap(bool clusterChange)
{
	int i;
	Inventory Item;

	// Strip all current powers
	for (Item = EntityEx(MO).Inventory; Item;)
	{
		Inventory Next = Item.Inventory;
		if (Powerup(Item) && (Level.Game.deathmatch || clusterChange ||
			!Item.bHubPower))
		{
			Item.Destroy();
		}
		Item = Next;
	}

	if (!Level.Game.deathmatch)
	{
		if (clusterChange)
		{
			// Entering new cluster
			// Some items are stripped.
			for (Item = EntityEx(MO).Inventory; Item;)
			{
				Inventory Next = Item.Inventory;
				if (Item.bInterHubStrip)
				{
					Item.Destroy();
				}
				Item = Next;
			}
		}
	}

	if (MorphTime || MO.Class == PlayerHeresiarch)
	{
		SetWeapon(Weapon(Actor(MO).Tracer));	// Restore weapon
		MorphTime = 0.0;
	}
	MO.Angles.pitch = 0.0;
	MO.RenderStyle = Entity::STYLE_Translucent;
	MO.Alpha = 1.0;
	EntityEx(MO).bShadow = false;	// Remove invisibility
	ExtraLight = 0;	// Remove weapon flashes
	FixedColourmap = 0;	// Remove torch
	DamageFlash = 0.0;	// No palette changes
	BonusFlash = 0.0;
	PoisonCount = 0;
	BlindCount = 0; // [FB] Reset the blind count too!
	BlendR = 0.0;
	BlendG = 0.0;
	BlendB = 0.0;
	BlendA = 0.0;
}

//==========================================================================
//
//  SetControllable
//
//  [CW] toggles UnControllable mode on/off
//
//==========================================================================

void SetControllable(bool Mode)
{
	if (Mode)
	{
		bUnControllable = false;
		if (MO)
		{
			MO.Activate();
			MO.LinkToWorld();	// [CW] reassurance...
		}
	}
	else
	{
		bUnControllable = true;
		if (MO)
			MO.Deactivate();
		PoisonCount = 0;
		BlindCount = 0;
	}
}

//==========================================================================
//
//  GiveMana
//
//  Returns true if the player accepted the mana, false if it was refused.
//
//==========================================================================

bool GiveMana(class<Ammo> ammo, int count)
{
	int oldammo;

	if (!ammo)
	{
		return false;
	}

	Ammo AmmoItem = Ammo(EntityEx(MO).FindInventory(ammo));
	if (!AmmoItem)
	{
		AmmoItem = Level.Spawn(ammo,,,, false);
		AmmoItem.AttachToOwner(EntityEx(MO));
		AmmoItem.Amount = 0;
	}
	if (!count)
	{
		return false;
	}
	if (AmmoItem.Amount == AmmoItem.MaxAmount)
	{
		return false;
	}

	if (Level.Game.gameskill == sk_baby ||
		(Level.Game.gameskill == sk_nightmare &&
		LineSpecialGameInfo(Level.Game).bNightmareExtraAmmo))
	{
		// extra ammo in baby mode and nightmare mode
		if (LineSpecialGameInfo(Level.Game).bBabyNightmareDoubleAmmo)
		{
			count <<= 1;
		}
		else
		{
			count += count >> 1;
		}
	}

	oldammo = AmmoItem.Amount;
	AmmoItem.Amount += count;
	if (AmmoItem.Amount > AmmoItem.MaxAmount)
	{
		AmmoItem.Amount = AmmoItem.MaxAmount;
	}

	if (oldammo <= 0)
	{
		GotAmmo(AmmoItem);
	}
	return true;
}

//==========================================================================
//
//	GotAmmo
//
//==========================================================================

void GotAmmo(Ammo NewAmmo)
{
	if (ReadyWeapon.bWimpyWeapon)
	{
		Weapon Best = BestWeapon(class<Ammo>(NewAmmo.Class));
		if (Best && Best.SelectionOrder < ReadyWeapon.SelectionOrder)
		{
			PendingWeapon = Best;
		}
	}
}

//==========================================================================
//
//	GetMaxHealth
//
//==========================================================================

int GetMaxHealth()
{
	return max_health;
}

//[Korax]
//==========================================================================
//
//  GiveExperience
//
//==========================================================================

void GiveExperience(int exp)
{
	experience += exp;
	if(experience > 9999)
	{
		experience = 9999;
	}

	KArenaPlayerPawn(MO).experience = experience;

	while (experience >= next_level && exp_level < 11)
	{
		ActivateLevel(exp_level + 1, true);
	}
}

//============================================================================
//
//  ActivateLevel
//
//  [FB] Using the new leveling system the maximum level is 10
//
//============================================================================

void ActivateLevel(int to_lvl, bool message)
{
	int addhealth;
	int i;

	while (exp_level < 11 && exp_level < to_lvl) // [FB] MAX Level it's 10
	{
		old_level = 1000 * (exp_level); // [FB] We need to keep this to compare it
		exp_level++;
		next_level = 1000 * exp_level;

		strength += strength * 25 / 100;
		constitution += constitution * 25 / 100;
		dexterity += dexterity * 25 / 100;
		intelligence += intelligence * 25 / 100;
		wisdom += wisdom * 25 / 100;
		old_maxhealth = max_health;
		bak_health = old_maxhealth - old_maxhealth * 9 / 100; // Save a previous level's health

		/*if (old_maxhealth == 212)
		{
			//	Don't do anything
			addhealth = 0;
		}
		else
		{*/
		/*	if ((max_health + max_health * 9 / 100) >= 212)
			{
				addhealth = 212 - max_health;
			}
			else
			{*/
				addhealth = max_health * 9 / 100;
			//}
		//}

		//if (addhealth > 0)
		//{
			max_health += addhealth;
			Health = ftoi(itof(Health) / itof(old_maxhealth) * itof(max_health));
			MO.Health = Health;
		//}

	}

	LevelChanged();

	if (message)
	{
		cprint("YOU REACHED LEVEL %d", exp_level);
		MO.PlaySound('misc/chat', CHAN_AUTO);
	}

	pcount = 0;	/// reset exps loosing counter
}

//============================================================================
//
//  DeactivateLevel
//
//  [FB] We lost a level, so we need to update the attributes then!
//
//============================================================================

void DeactivateLevel(int to_lvl, bool message)
{
	int addhealth;
	int i;

	while(exp_level > 1 && exp_level > to_lvl)
	{
		exp_level--; // [FB] Decrese experience level
		next_level = 1000 * exp_level; // [FB] Decrease the next to the old_level
		old_level = 1000 * (exp_level - 1); // [FB] Also decrease the old_level

		strength -= strength * 25 / 100;
		constitution -= constitution * 25 / 100;
		dexterity -= dexterity * 25 / 100;
		intelligence -= intelligence * 25 / 100;
		wisdom -= wisdom * 25 / 100;

		// [FB] We already calculated the bak_health value
		/*if (old_maxhealth < 100)
		{
			// Don't do anything
			addhealth = 0;
		}
		else
		{*/
			addhealth = old_maxhealth * 9 / 100;
		//}

		//if (addhealth > 0)
		//{
			max_health -= addhealth;
			// [CW] not logical to increase health to max_health when level in lowered
			//
			if (Health > max_health)
				Health = max_health;
			//Health = max_health; // [FB] Just make it the same as the max_health value
			MO.Health = Health;
		//}
	}

	LevelChanged();

	if (message)
	{
		cprint("YOU LOWERED TO LEVEL %d", exp_level);
		MO.PlaySound('misc/chat', CHAN_AUTO);
	}

	pcount = 0;	/// reset exps loosing counter
}

//============================================================================
//
//  InitiateLevel
//
//============================================================================

void InitiateLevel()
{
	max_health = KArenaPlayerPawn(MO).default.Health;	//100;

	exp_level = 1;
	next_level =  1000 * exp_level;
	old_level = 1000 * (exp_level - 1);
	Health = max_health;
	MO.Health = Health;

	strength = KArenaPlayerPawn(MO).InitialStrength;
	wisdom = KArenaPlayerPawn(MO).InitialWisdom;
	dexterity = KArenaPlayerPawn(MO).InitialDexterity;
	constitution = KArenaPlayerPawn(MO).InitialConstitution;
	intelligence = KArenaPlayerPawn(MO).InitialIntelligence;

	LevelChanged();
}

//==========================================================================
//
//  LooseExperience
//
//  [FB] If the player camps much time he'll lost experience too
//	[CW] Now it works all the time..
//
//==========================================================================

void LooseExperience()
{
	// [FB] Let's see, if a tic is 1/35 of a second, a second should
	//	be multiplied by 35 to have an equality, every 3 secs. the
	//	player stays camping (even if he's shooting), we'll start
	//	decreasing his experience according his level, so...
	int limit;

	limit = 17; // [FB] 0.5 seconds

	if(inited && (pcount >= limit) && (pcount % (1 * 35) == 0) && PlayerState == PST_LIVE)
	{
		experience -= (1 * exp_level); // [FB] Depending the player level

		if(experience < 0)
		{
			experience = 0; // [FB] We don't want to have negative experience
		}

		KArenaPlayerPawn(MO).experience = experience;

		if(pcount == 525)
		{
			pcount = 105; // [FB] To avoid overflows
		}

		// [FB] But what if the experience we lost has made us lost a level??
		//	Then we use the old_level value to compare our current experience,
		//	if it is lower than it, then we activate a level less than
		//	our current one
		while(experience < old_level && exp_level >= 1)
		{
			DeactivateLevel(exp_level - 1, true); // [FB] Update Stats accordingly
		}
	}
}	   

//==========================================================================
//
//  Scoreboard
//
// [FB] Here we keep a track of everything needed to make KA's scoreboard
//	for every gameplay mode
//
//==========================================================================

void Scoreboard(bool show)
{
	// [CW] If show == true, update scoreboard data first.
	if (show)
		MainGameInfo(Level.Game).ScoreboardsUpdate(self);
	
	// [CW] Set bShowScoreboard flag
	bShowScoreboard = show;
	ClientScoreboard(bShowScoreboard);
}

//==========================================================================
//
//  ClientScoreboard
//
//==========================================================================

void ClientScoreboard(bool show)
{
	ClientGameBaseEx(ClGame).ShowScoreBoard(show);
}

//==========================================================================
//
//  PlayerImpulse
//
//==========================================================================

void PlayerImpulse()
{
	int impulse;
	int i;

	impulse = Impulse;
	Impulse = 0;

	if (bUnControllable)
	{
		// Player can do almost nothing when uncontrollable
		if (impulse != HexenDefs::IMPULSE__SUICIDE && impulse != HexenDefs::IMPULSE__SCOREBOARD)
			return;
	}

	if (impulse <= HexenDefs::NUMWEAPONSLOTS)
	{
		ChangeWeapon(impulse);
	}
	else if (impulse == HexenDefs::IMPULSE__WEAPON_PREV)
	{
		PrevWeapon();
	}
	else if (impulse == HexenDefs::IMPULSE__WEAPON_NEXT)
	{
		NextWeapon();
	}
	else if (impulse == HexenDefs::IMPULSE__SUICIDE)
	{
		Actor(MO).Damage(none, Actor(self.MO), 10000);
	}
	// [FB] We want to make the scoreboard accesible with a new impulse value
	else if (impulse == HexenDefs::IMPULSE__SCOREBOARD)
	{
		// [FB] The player is calling the scoreboard!!
		Scoreboard(!bShowScoreboard);
	}
	else if (impulse == HexenDefs::IMPULSE__ATTACK2)
	{
		AlternateAttack();
	}
	else if (impulse == HexenDefs::IMPULSE__TOGGLE_BLASTRAD)
	{
		ToggleAltAttack(HexenDefs::ALTFIRE_BLASTRADIUS);
	}
	else if (impulse == HexenDefs::IMPULSE__TOGGLE_POSIONBAG)
	{
		ToggleAltAttack(HexenDefs::ALTFIRE_POISONBAG);
	}
	else if (impulse == HexenDefs::IMPULSE__FIXME)
	{
		KArenaPlayerPawn(MO).MoveToFreePosition();
	}
}

//==========================================================================
//
//  ToggleAltAttack
//
//==========================================================================

void ToggleAltAttack(int weapon)
{
	if (altWeapon == weapon)
	{
		if (altWeaponMode[altWeapon] == MainGameInfo(Level.Game).AltWeaponModeCount[altWeapon] - 1)
			altWeaponMode[altWeapon] = 0;
		else
			altWeaponMode[altWeapon]++;
	}

	altWeapon = weapon;
}

//==========================================================================
//
//  AlternateAttack
//
//==========================================================================

void AlternateAttack()
{
	Ammo type;

	switch (altWeapon)
	{
	case HexenDefs::ALTFIRE_BLASTRADIUS:
		type = Ammo(EntityEx(MO).FindInventory(ArtifactBlastRadius));
		if (type && type.Amount > 0)
		{
			// [FB] Use correct ammo
			type.Amount -= 10;
			UseArtiBlastRadius();
		}
		break;
	case HexenDefs::ALTFIRE_POISONBAG:
		type = Ammo(EntityEx(MO).FindInventory(ArtifactFlechette));
		if (type && type.Amount > 0)
		{
			type.Amount -= 10;
			UseArtiPoisonBag();
		}
		break;
	}
}

//==========================================================================
//
//  MorphPlayerThink
//
//==========================================================================

void MorphPlayerThink()
{
	//FIXME this sucks
	if (ftoi(32.0 * MorphTime) & 15)
	{
		return;
	}
	if (!(MO.Velocity.x + MO.Velocity.y) && P_Random() < 64)
	{
		// Snout sniff
		KArenaWeapon(ReadyWeapon).SnoutSniff();
		MO.PlaySound('PigActive1', CHAN_VOICE);	// snort
		return;
	}
	if (P_Random() < 48)
	{
		if (P_Random() < 128)
		{
			MO.PlaySound('PigActive1', CHAN_VOICE);
		}
		else
		{
			MO.PlaySound('PigActive2', CHAN_VOICE);
		}
	}
}

//==========================================================================
//
//  UndoPlayerMorph
//
//==========================================================================

bool UndoPlayerMorph()
{
	Actor fog;
	Actor A;
	int bak_level;
 
	MO.UnlinkFromWorld();
	if (BaseClass >= Level.Game.PlayerClasses.Num)
	{
		Error("UndoPlayerMorph: Unknown class type");
	}
	A = HexenLevelInfo(Level).Spawn(class<KArenaPlayerPawn>(
		Level.Game.PlayerClasses[BaseClass]), MO.Origin,,, false);
	if (!A.TestLocation())
	{
		// Didn't fit
		A.Destroy();
		MO.LinkToWorld();
		MorphTime = 2.0;
		return false;
	}
	MO.LinkToWorld();
	A.Angles = MO.Angles;
	A.Player = self;
	A.bIsPlayer = true;
	A.ReactionTime = 0.5;
	if (MO.bFly)
	{
		A.bFly = true;
		A.bNoGravity = true;
	}
	A.bShadow = EntityEx(MO).bShadow;
	A.bGhost = EntityEx(MO).bGhost;
	A.ObtainInventory(EntityEx(MO));
	MorphTime = 0.0;
	A.Health = max_health;
	Health = A.Health;
	PClass = BaseClass;
	A.Translation = (Entity::TRANSL_Player << Entity::TRANSL_TYPE_SHIFT) +
		GetPlayerNum();
	PostMorphWeapon(Weapon(Actor(MO).Tracer));

	fog = HexenLevelInfo(Level).Spawn(TeleportFog, MO.Origin + vector(20.0 * cos(MO.Angles.yaw),
		20.0 * sin(MO.Angles.yaw), MainGameInfo::TELEFOGHEIGHT));
	fog.PlaySound('Teleport', CHAN_VOICE);

	MO.SetState(MO.FindState('FreeTargMobj'));
	MO = A;
	Camera = A;

	// [CW] recalc attributes
	bak_level = exp_level;
	InitiateLevel();
	ActivateLevel(bak_level, false);
	bRecalculateLevelOnRespawn = false;

	return true;
}

//==========================================================================
//
//  DeathPlayerTick
//
//  Fall on your face when dying. Decrease POV height to floor height.
//
//==========================================================================

void DeathPlayerTick(float deltaTime)
{
	int dir;
	float delta;
	int lookDelta;

	if (respawn_counter > 0.0)
		respawn_counter -= deltaTime;

	MovePsprites(deltaTime);
	if (MO.WaterLevel > 1)
	{
		MO.Velocity.z -= 60.0;	// drift towards bottom
	}

	onground = (MO.Origin.z <= MO.FloorZ);

	if (PlayerChunk(MO))
	{
		// Flying bloody skull or flying ice chunk
		ViewHeight = 6.0;
		DeltaViewHeight = 0.0;
		//damagecount = 20;
		if (onground)
		{
#ifdef FIXME
			if (lookdir < 60)
			{
				lookDelta = (60 - lookdir) / 8;
				if (lookDelta < 1 && (Level.Game.level->tictime & 1))
				{
					lookDelta = 1;
				}
				else if (lookDelta > 6)
				{
					lookDelta = 6;
				}
				lookdir += lookDelta;
			}
#endif
		}
	}
	else if (Actor(MO).DamageType != 'Ice')
	{
		// Fall to ground (if not frozen)
		DeltaViewHeight = 0.0;
		if (ViewHeight > 6.0)
		{
			ViewHeight -= 35.0 * deltaTime;
		}
		if (ViewHeight < 6.0)
		{
			ViewHeight = 6.0;
		}
#ifdef FIXME
		if (lookdir > 0)
		{
			lookdir -= 6;
		}
		else if (lookdir < 0)
		{
			lookdir += 6;
		}
		if (abs(lookdir) < 6)
		{
			lookdir = 0;
		}
#endif
	}
	CalcHeight(deltaTime);

	if (Attacker && Attacker != MO)
	{
		// Watch killer
		dir = EntityEx(MO).FaceActor(EntityEx(Attacker), delta);
		if (delta < 10.0)
		{
			// Looking at killer, so fade damage and poison counters
			if (DamageFlash)
			{
				DamageFlash -= deltaTime;
				if (DamageFlash <= 0.0)
					DamageFlash = 0.0;
			}
			if (PoisonCount)
			{
				PoisonCount--;
			}
		}
		delta = delta / 8.0;
		if (delta > 5.0)
		{
			delta = 5.0;
		}
		if (dir)
		{
			// Turn clockwise
			MO.Angles.yaw += delta;
		}
		else
		{	// Turn counter clockwise
			MO.Angles.yaw -= delta;
		}
	}
	else if (DamageFlash)
	{
		DamageFlash -= deltaTime;
		if (DamageFlash <= 0.0)
			DamageFlash = 0.0;
	}
	else if (PoisonCount)
	{
		PoisonCount--;
	}

	if (respawn_counter <= 0.0 &&
		(bIsBot || (Buttons & BT_USE || Buttons & BT_ATTACK || Buttons & BT_JUMP )))
	{
		PlayerState = PST_REBORN;
		Actor(MO).Special1 = PClass;
		if (Actor(MO).Special1 > 2)
		{
			Actor(MO).Special1 = 0;
		}
	}
}

//==========================================================================
//
//  UpdateTargetInfo
//
//==========================================================================

void UpdateTargetInfo()
{
	if (PlayerState != PST_DEAD && Team && targetinfo_enabled)
	{
		TAVec angles;
		TVec Dir;
		
		angles = MO.Angles;
		KArenaPlayerPawn(MO).bOverrideCoop = true;
		EntityEx AimTarget = Actor(MO).AimLineAttack(Dir, angles, 64.0 * 64.0);
		KArenaPlayerPawn(MO).bOverrideCoop = false;
		if (AimTarget)
		{
			if (AimTarget.Player)
			{
				int teamfactor = GameModel::teamfactor_any;
				if (MainGameInfo(Level.Game).GameModel)
					teamfactor = MainGameInfo(Level.Game).GameModel.TeamFactor(Actor(MO), AimTarget);
				if (teamfactor == GameModel::teamfactor_any)
				{
					if (MainGameInfo(Level.Game).GameType < HexenDefs::NUMGAMESNOTEAM &&
						!MainGameInfo(Level.Game).bIsCoopGame[MainGameInfo(Level.Game).GameType])
						targetinfo.type = targetinfo_shoot;
					else
						targetinfo.type =
							(MainGameInfo(Level.Game).bIsCoopGame[MainGameInfo(Level.Game).GameType] ||
							Team.Index == Player(AimTarget.Player).Team.Index)
								? targetinfo_noshoot : targetinfo_shoot;
				}
				else
					targetinfo.type = teamfactor == GameModel::teamfactor_coop ? targetinfo_noshoot : targetinfo_shoot;

				targetinfo.sname = AimTarget.Player.PlayerName;
				targetinfo.level = Player(AimTarget.Player).exp_level;
				if (Player(AimTarget.Player).max_health)	// [CW] paranoia
					targetinfo.healthpc = 100 * Player(AimTarget.Player).Health / Player(AimTarget.Player).max_health;
				else
					targetinfo.healthpc = 0;
			}
			else
			{
				targetinfo.type = targetinfo_none;
				targetinfo.sname = "";
			}
			targetinfo_counter = 30;	//[CW] this should use real time, i think
		}
		
	}
	if (targetinfo_counter > 0)
	{
		targetinfo_counter--;
		if (!targetinfo_counter)
		{
			targetinfo.type = targetinfo_none;
			targetinfo.sname = "";
		}
	}
}

//==========================================================================
//
//  PlayerTick
//
//==========================================================================

void PlayerTick(float deltaTime)
{
	int newweapon;
	Actor speedA;

	if (bNoHUD)
		ViewStates[ps_weapon].SY += 1000.0;

	if (bUnControllable)
	{
		Buttons = 0;
		ForwardMove = 0.0;
		SideMove = 0.0;
	}

	// [CW]
	if (level_ender_counter > 0.0)
	{
		level_ender_counter -= deltaTime;
		if (level_ender_counter <= 0.0)
		{
			level_ender_counter = 0.0;
			// [FB] Exit map
			Level.ExitLevel(0);
		}
	}

	if (!MO)
		Error("Player::PlayerTick : MO reference not set to an instance of an object");

	if (!bUnControllable)
	{
		if (bIsBot)
		{
			Bot.BotTick(deltaTime);
		}

		// Copy view angles
		if (MO == Camera)
		{
			MO.Angles = ViewAngles;
		}
	}

	// fixme: do this in the cheat code
	if (Cheats & CF_NOCLIP)
	{
		MO.bColideWithThings = false;
		MO.bColideWithWorld = false;
	}
	else
	{
		MO.bColideWithThings = true;
		MO.bColideWithWorld = true;
	}

	if (Actor(MO).bJustAttacked)
	{
		ForwardMove = 100.0;
		SideMove = 0.0;
		Actor(MO).bJustAttacked = false;
	}

	if (bTotallyFrozen)
	{
		Buttons &= BT_USE;
		Impulse = 0;
		ViewAngles = MO.Angles;
		ForwardMove = 0.0;
		SideMove = 0.0;
		FlyMove = 0.0;
	}
	else if (bFrozen)
	{
		ForwardMove = 0.0;
		SideMove = 0.0;
		FlyMove = 0.0;
	}

	WorldTimer += deltaTime;

	if (!bIsBot)
		UpdateTargetInfo();

	if (PlayerState == PST_DEAD)
	{
		DeathPlayerTick(deltaTime);
		if (bNoHUD)
			ViewStates[ps_weapon].SY -= 1000.0;
		return;
	}

	//[CW] trophies timed update
	UpdateTimedTrophies(deltaTime);

	if (JumpTime)
	{
		JumpTime -= deltaTime;
		if (JumpTime <= 0.0)
			JumpTime = 0.0;
	}
	if (MorphTime)
	{
		MorphPlayerThink();
	}

	if (bUnControllable)
	{
		ForwardMove = 0.0;
		SideMove = 0.0;
	}

	//  Move around.
	//  ReactionTime is used to prevent movement for a bit after a teleport.
	if (Actor(MO).ReactionTime)
	{
		Actor(MO).ReactionTime -= deltaTime;
		if (Actor(MO).ReactionTime <= 0.0)
			Actor(MO).ReactionTime = 0.0;
		if (Actor(MO).bWaterJump)
			WaterJump();
	}
	else
	{
		if (MO.WaterLevel >= 2)
			WaterMove(deltaTime);
		else
			MovePlayer(deltaTime);
		if (EntityEx(MO).FindInventory(PowerSpeed) &&
			!(Level.XLevel.TicTime & 1) && Length(MO.Velocity) > 12.0 * 35.0)
		{
			speedA = HexenLevelInfo(Level).Spawn(PlayerSpeed, MO.Origin);
			if (speedA)
			{
				speedA.Angles.yaw = MO.Angles.yaw;
				speedA.Translation = MO.Translation;
				speedA.Target = Actor(MO);
				speedA.Special1 = PClass;
				if (speedA.Special1 > 2)
				{
					speedA.Special1 = 0;
				}
				int Idx;
				switch (PClass)
				{
				case HexenDefs::PCLASS_FIGHTER:
					Idx = 0;
					break;
				case HexenDefs::PCLASS_CLERIC:
					Idx = 2;
					break;
				case HexenDefs::PCLASS_MAGE:
					Idx = 4;
					break;
				case HexenDefs::PCLASS_HERETIC:
					Idx = 6;
					break;
				case HexenDefs::PCLASS_MARINE:
					Idx = 8;
					break;
				case HexenDefs::PCLASS_WITCHAVEN:
					Idx = 10;
					break;
				case HexenDefs::PCLASS_PIG:
					Idx = 12;
					break;
				}
				speedA.SetState(GetStatePlus(speedA.IdleState, Idx, true));
				speedA.FloorClip = MO.FloorClip;
#ifdef FIXME
				if (self == GPlayers[consoleplayer])
				{
					speedA.bHidden = true;
				}
#endif
			}
		}
	}

	CalcHeight(deltaTime);
	
	if (!MO.Sector)
		Error("Player::PlayerTick : MO.Sector pointer is NULL");

	if (MO.Sector->special || MO.Sector->Damage)
	{
		PlayerInSpecialSector(deltaTime);
	}
	PlayerOnSpecialFlat(Actor(MO).GetFloorType());
	PlayerInContents(deltaTime);

	if (MO.Velocity.z <= -35.0 * 35.0 && MO.Velocity.z >= -40.0 * 35.0 &&
		PClass != HexenDefs::PCLASS_PIG && !GetSoundPlayingInfo(MO, GetSoundID('*falling')))
	{
		MO.PlaySound('*falling', CHAN_VOICE);
	}

	// Check for weapon change.
	if (Impulse)
	{
		PlayerImpulse();
	}

	// check for use
	if (Buttons & BT_USE)
	{
		if (!bUseDown)
		{
			P_UseLines();
			bUseDown = true;
		}
	}
	else
	{
		bUseDown = false;
	}

	// Morph counter
	if (MorphTime)
	{
		MorphTime -= deltaTime;
		if (MorphTime <= 0.0)
		{
			// Attempt to undo the pig
			MorphTime = 0.0;
			UndoPlayerMorph();
		}
	}

	// cycle psprites
	MovePsprites(deltaTime);

	// Counters
	
	// [CW]
	if (PoisonCount && Actor(MO).bDormant)
		PoisonCount = 0;

	if (PoisonCount && Level.XLevel.Time - LastPoisonTime >= 0.5)
	{
		PoisonCount -= 5;
		if (PoisonCount < 0)
		{
			PoisonCount = 0;
		}
		LastPoisonTime = Level.XLevel.Time;
		if (PoisonerPlayer && !PoisonerPlayer.MO)
			Error("Player::PlayerTick : PoisonerPlayer.MO reference not set to an instance of an object");
		Actor(MO).PoisonDamage(none, Poisoner ? Actor(PoisonerPlayer.MO) : none, 1, true);
	}

	// [FB] Darkness blinding effect
	if (BlindCount && Level.XLevel.Time - LastBlindTime >= 0.5)
	{
		BlindCount -= 5;
		count += 1;
		if (BlindCount < 0)
		{
			BlindCount = 0;
		}
		LastBlindTime = Level.XLevel.Time;
		if(count % 5 == 0) // [FB] Damage the blinded player after some time
		{
			if (Blinder && !Blinder.MO)
				Error("Player::PlayerTick : Blinder.MO reference not set to an instance of an object");
			KArenaPlayerPawn(MO).BlindDamage(Blinder ? Actor(Blinder.MO) : none, 1, true);
		}
	}

	if (DamageFlash)
	{
		DamageFlash -= deltaTime;
		if (DamageFlash <= 0.0)
			DamageFlash = 0.0;
	}

	if (BonusFlash)
	{
		BonusFlash -= deltaTime;
		if (BonusFlash <= 0.0)
			BonusFlash = 0.0;
	}

	if (HazardTime)
	{
		HazardTime -= deltaTime;
		if (HazardTime <= 0.0)
			HazardTime = 0.0;
		if (Level.XLevel.Time - LastHazardTime >= 32.0 / 35.0 &&
			HazardTime > 16.0)
		{
			LastHazardTime = Level.XLevel.Time;
			Actor(MO).Damage(none, none, 5);
		}
	}

	if(!bUnControllable)
	{
		// [CW] No need for this processing when player has lost all experience
		if (experience > 0)
		{
			pcount++;
			LooseExperience();
		}
	}
	else
	{
		pcount = 0;
	}

	if (bNoHUD)
		ViewStates[ps_weapon].SY -= 1000.0;
}

//==========================================================================
//
//  PaletteFlash
//
//  Sets the new palette colour shift based upon the current values of
// Player.DamageFlash and Player.BonusFlash, contents and other inventory
// items.
//
//==========================================================================

void PaletteFlash()
{
	::PaletteFlash();

	// [FB] Black palette for blinding effect
	if (BlindCount)
	{
		float r = 0.0;
		float g = 0.0;
		float b = 0.0;
		float a = 0.0;
		AddBlend(r, g, b, a, CShift);
		AddBlend(r, g, b, a, RGBA(0, 0, 0, BlindCount));
		CShift = RGBA(ftoi(r * 255.0), ftoi(g * 255.0),
			ftoi(b * 255.0), ftoi(a * 255.0));
	}
}

//==========================================================================
//
//  SetViewPos
//
//==========================================================================

void SetViewPos()
{
	int		i;

	//	Just in a case camera entity has been destroyed
	if (!Camera)
	{
		Camera = MO;
	}

	if (MO != Camera)
	{
		ViewOrg = Camera.Origin;
		ViewOrg.z += EntityEx(Camera).CameraHeight;
		ViewAngles = Camera.Angles;
	}
	else
	{
		ViewOrg.x = MO.Origin.x;
		ViewOrg.y = MO.Origin.y;

		if (LocalQuakeHappening)
		{
			float intensity;

			intensity = itof(LocalQuakeHappening);
			ViewOrg.x += (Random() - 0.5) * (intensity * 4.0);
			ViewOrg.y += (Random() - 0.5) * (intensity * 4.0);
		}

		ViewAngles = MO.Angles;
	}

	PaletteFlash();

	ClientSetViewOrg(ViewOrg.x, ViewOrg.y, ViewOrg.z);
}

//==========================================================================
//
//  Blast
//
//==========================================================================

final void Blast(Actor victim, Actor source, float strength)
{
	float angle;
	float ang;
	Actor A;
	float x;
	float y;
	float z;

	angle = atan2(victim.Origin.y - source.Origin.y,
		victim.Origin.x - source.Origin.x);
	if (strength < KArenaActor::BLAST_FULLSTRENGTH)
	{
		victim.Velocity.x = strength * cos(angle) * 35.0;
		victim.Velocity.y = strength * sin(angle) * 35.0;
		if (victim.bIsPlayer)
		{
			// Players handled automatically
		}
		else
		{
			victim.bSlide = true;
			victim.bBlasted = true;
		}
	}
	else	// full strength blast from artifact
	{
		if (victim.bMissile)
		{
			if (SorcererBall(victim))
			{
				// don't blast sorcerer balls
				return;
			}
			else if (MageStaffFX2(victim) || InfernalHandFX(victim))
			{
				// Reflect to originator
				victim.Tracer = victim.Target;
				victim.Target = source;
			}
		}
		if (victim.Class == HolyFX)
		{
			if (victim.Tracer == source)
			{
				victim.Tracer = victim.Target;
				victim.Target = source;
			}
		}
		victim.Velocity.x = KArenaActor::BLAST_SPEED * cos(angle) * 35.0;
		victim.Velocity.y = KArenaActor::BLAST_SPEED * sin(angle) * 35.0;

		// Spawn blast puff
		ang = atan2(source.Origin.y - victim.Origin.y,
			source.Origin.x - victim.Origin.x);
		x = victim.Origin.x + (victim.Radius + 1.0) * cos(ang);
		y = victim.Origin.y + (victim.Radius + 1.0) * sin(ang);
		z = victim.Origin.z - victim.FloorClip + victim.Height / 2.0;
		A = Level.Spawn(BlastEffect, vector(x, y, z));
		if (A)
		{
			A.Velocity.x = victim.Velocity.x;
			A.Velocity.y = victim.Velocity.y;
		}

		if (victim.bMissile)
		{
			victim.Velocity.z = 8.0 * 35.0;
			A.Velocity.z = victim.Velocity.z;
		}
		else
		{
			victim.Velocity.z = 1000.0 / victim.Mass * 35.0;
		}
		if (victim.bIsPlayer)
		{
			// Players handled automatically
		}
		else
		{
			victim.bSlide = true;
			victim.bBlasted = true;
		}
	}
}

//==========================================================================
//
//  BlastRadius
//
//==========================================================================

final void BlastRadius(optional int Limit)
{
	Actor mo;
	float dist;
	int blasts = 0;

	MO.PlaySound('BlastRadius', CHAN_ITEM);
	HexenLevelInfo(Level).NoiseAlert(MO, MO);

	foreach Level.AllThinkers(Actor, mo)
	{
		if ((mo == MO) || mo.bBoss)
		{
			// Not a valid monster
			continue;
		}
		if (mo.bCanBlast || mo.bIceCorpse)	// frozen corpse
		{
			// Let these special cases go
		}
		else if (mo.bMonster && (mo.Health <= 0))
		{
			continue;
		}
		else if (!mo.bMonster && !mo.bIsPlayer && !mo.bMissile)
		{
			// Must be monster, player, or missile
			continue;
		}
		if (mo.bDormant)
		{
			continue;	// no dormant creatures
		}
		if (mo.bDontBlast)
		{
			continue;
		}
		dist = MO.DistTo(mo);
		if (dist > KArenaActor::BLAST_RADIUS_DIST)
		{
			// Out of range
			continue;
		}
		Blast(mo, Actor(MO), KArenaActor::BLAST_FULLSTRENGTH);

		blasts++;
		if (specified_Limit && blasts >= Limit)
			break;
	}
}

//==========================================================================
//
//  UseArtiBlastRadius
//
//  Blast all mobj things away
//
//==========================================================================

void UseArtiBlastRadius()
{
	switch(altWeaponMode[HexenDefs::ALTFIRE_BLASTRADIUS])
	{
	case HexenDefs::ALTFIRE_BLASTRADIUS_INSTANT:
		BlastRadius();
		break;
	case HexenDefs::ALTFIRE_BLASTRADIUS_BOMB:
		KArenaPlayerPawn(MO).Spawn_2(none, BlastRadiusBomb, MO.Origin +
			vector(16.0 * cos(MO.Angles.yaw), 24.0 * sin(MO.Angles.yaw), 8.0 - MO.FloorClip));
		break;
	case HexenDefs::ALTFIRE_BLASTRADIUS_MISSILE:
		KArenaPlayerPawn(MO).SpawnPlayerMissile_2(none, BlastRadiusMissile);
		break;
	}
}

//==========================================================================
//
//  UseArtiPoisonBag
//
//==========================================================================

void UseArtiPoisonBag()
{
	float angle;
	Actor bomb;

	angle = MO.Angles.yaw;

	switch(altWeaponMode[HexenDefs::ALTFIRE_POISONBAG])
	{
	case HexenDefs::ALTFIRE_POISONBAG_GRENADE:
		bomb = KArenaPlayerPawn(MO).Spawn_2(none, ThrowingBomb, MO.Origin +
			vector(0.0, 0.0, 35.0 - MO.FloorClip));
		if (bomb)
		{
			bomb.Angles.yaw = AngleMod360(MO.Angles.yaw +
				(Random() * 2.0 - 1.0) * 45.0 / 8.0);
			bomb.Velocity.z =
				(4.0 + 173.0 * -tan(MO.Angles.pitch) / 16.0) * 35.0;
			bomb.Origin.z += 173.0 * -tan(MO.Angles.pitch) / 16.0;
			bomb.Velocity.x += bomb.Speed * cos(bomb.Angles.yaw);
			bomb.Velocity.y += bomb.Speed * sin(bomb.Angles.yaw);
			bomb.Velocity.x += MO.Velocity.x / 2.0;
			bomb.Velocity.y += MO.Velocity.y / 2.0;
			bomb.Obituary = "$ob_playergrenade";
			bomb.StateTime -= Random() * 0.1;
			bomb.CheckMissileSpawn();
		}
		break;
		
	case HexenDefs::ALTFIRE_POISONBAG_BOMB:
		bomb = KArenaPlayerPawn(MO).Spawn_2(none, FireBomb, MO.Origin +
			vector(16.0 * cos(angle), 24.0 * sin(angle), 8.0 - MO.FloorClip));
		if (bomb)
		{
			bomb.Obituary = "$ob_playertimebomb";
		}
		break;

	case HexenDefs::ALTFIRE_POISONBAG_CLOUD:	
		bomb = KArenaPlayerPawn(MO).Spawn_2(none, PoisonBag, MO.Origin +
			vector(16.0 * cos(angle), 24.0 * sin(angle), 8.0 - MO.FloorClip));
		if (bomb)
		{
			bomb.Obituary = "$ob_poisonbreathcloud";
		}
		break;
	}
}

//==========================================================================
//
//  AdjustPlayerAngle
//
//==========================================================================

void AdjustPlayerAngle(EntityEx AimTarget)
{
	float angle;
	float difference;

	angle = atan2(AimTarget.Origin.y - MO.Origin.y,
		AimTarget.Origin.x - MO.Origin.x);
	difference = AngleMod180(angle - MO.Angles.yaw);
	if (fabs(difference) > 5.0)
	{
		MO.Angles.yaw += difference > 0.0 ? 5.0 : -5.0;
	}
	else
	{
		MO.Angles.yaw = angle;
	}
	bFixAngle = true;
}

//==========================================================================
//
//  MovePsprites
//
//  Called every tic by player thinking routine
//
//==========================================================================

void MovePsprites(float deltaTime)
{
//[Korax]
	if (KArenaWeapon(ReadyWeapon).dex_mod)
	{
		if (dexterity < 6)
			deltaTime *= 0.8;
		else if (dexterity > 34)
			deltaTime *= 3.5;
		else if (dexterity > 24)
			deltaTime *= 2.5;
		else if (dexterity > 14)
			deltaTime *= 1.5;
	}
	::MovePsprites(deltaTime);
}

//==========================================================================
//
//  ActivateHeresiarchWeapon
//
//==========================================================================

void ActivateHeresiarchWeapon()
{
	AddDefaultInventory();
	ViewStates[ps_weapon].SY = Weapon::WEAPONTOP;
	SetWeapon(KArenaWeapon(EntityEx(MO).FindInventory(WeaponHeresiarchClaw)));
	SetViewState(ps_weapon, ReadyWeapon.GetReadyState());
}

//==========================================================================
//
//  ActivateMorphWeapon
//
//==========================================================================

void ActivateMorphWeapon()
{
	AddDefaultInventory();
	ViewStates[ps_weapon].SY = Weapon::WEAPONTOP;
	SetWeapon(KArenaWeapon(EntityEx(MO).FindInventory(WeaponPigSnout)));	// Snout is the first weapon
	SetViewState(ps_weapon, ReadyWeapon.GetReadyState());
}

//==========================================================================
//
//  PostMorphWeapon
//
//==========================================================================

void PostMorphWeapon(Weapon weapon)
{
	ReadyWeapon.Destroy();
	SetWeapon(weapon);
	ViewStates[ps_weapon].SY = Weapon::WEAPONBOTTOM;
	SetViewState(ps_weapon, ReadyWeapon.GetUpState());
}

//==========================================================================
//
//  ParticleEffectEx
//
//==========================================================================

void ParticleEffectEx(int count, int type1, int type2, TVec origin, TVec ornd,
	TVec velocity, TVec vrnd, TVec acceleration, float grav, int colour, float duration, float ramp,
	int Pattern)
{
	dprint("Player::ParticleEffectEx : %i,%i,%i, vel.z=%f", count,type1,type2,velocity.z);
	HexenLevelInfo(Level).ParticleEffectEx(count, type1, type2, origin, ornd, velocity, vrnd, acceleration,
				grav, colour, duration, ramp, Pattern);
}

//==========================================================================
//
//  P_UseLines
//
//  Looks for special lines in front of the player to activate.
//
//==========================================================================

void P_UseLines()
{
	float x1;
	float y1;
	float x2;
	float y2;
	TVec useDir;
	intercept_t* in;
	TVec hit_point;
	opening_t *open;

	AngleVector(&MO.Angles, &useDir);
	x1 = MO.Origin.x;
	y1 = MO.Origin.y;

	x2 = x1 + USETHINGRANGE * useDir.x;
	y2 = y1 + USETHINGRANGE * useDir.y;
	foreach MO.PathTraverse(in, x1, y1, x2, y2, PT_ADDLINES | PT_ADDTHINGS)
	{
		if (!in->bIsALine)
		{
			//	Check height.
			if (MO.Origin.z >= in->Thing.Origin.z + in->Thing.Height ||
				MO.Origin.z + MO.Height <= in->Thing.Origin.z)
			{
				continue;
			}
			if (LineSpecialLevelInfo(Level).StartConversation(Actor(MO), Actor(in->Thing)))
			{
				break;
			}
			continue;
		}

		if (!(in->line->flags & ML_TWOSIDED))
			break;	// stop

		hit_point = MO.Origin + (USETHINGRANGE * in->frac) * useDir;
		open = LineOpenings(in->line, hit_point);
		open = FindOpening(open, hit_point.z, hit_point.z + MO.Height);
		if (!open || open->range < 1.0)
		{
			// can't use through a wall
			break;
		}
		continue;
	}

	x2 = x1 + USERANGE * useDir.x;
	y2 = y1 + USERANGE * useDir.y;
	bool DoSecAct = true;
	bool FoundLine = false;
	foreach MO.PathTraverse(in, x1, y1, x2, y2, PT_ADDLINES)
	{
		line_t* line;
		float pheight;

		line = in->line;
		if (!line->special || (Level.GET_SPAC(line->flags) != SPAC_USE &&
			Level.GET_SPAC(line->flags) != SPAC_USETHROUGH))
		{
			hit_point = MO.Origin + (USERANGE * in->frac) * useDir;
			open = LineOpenings(line, hit_point);
			open = FindOpening(open, hit_point.z + MO.Height / 2.0,
				hit_point.z + MO.Height);
			if (!open)
			{
				DoSecAct = false;

				//	Let sector intercept the use.
				if (MO.Sector->ActionList &&
					SectorAction(MO.Sector->ActionList).TriggerAction(
					EntityEx(MO), SectorAction::SECSPAC_Use))
				{
					break;
				}

				sector_t* Sec = PointOnPlaneSide(MO.Origin, line) == 0 ?
					line->frontsector : line->backsector;
				if (Sec->ActionList &&
					SectorAction(Sec->ActionList).TriggerAction(
					EntityEx(MO), SectorAction::SECSPAC_UseWall))
				{
					break;
				}

				MO.PlaySound('*usefail', CHAN_VOICE);
				break;	// can't use through a wall
			}
			pheight = MO.Origin.z + MO.Height / 2.0;
			if ((open->top < pheight) || (open->bottom > pheight))
			{
				MO.PlaySound('*usefail', CHAN_VOICE);
			}
			FoundLine = true;
			continue;	// not a special line, but keep checking
		}

		if (PointOnPlaneSide(MO.Origin, line) == 1)
		{
			//	Don't use back side unless it's a two-sided line.
			if (line->backsector != NULL)
				continue;
			break;
		}

		HexenLevelInfo(Level).ActivateLine(line, Actor(MO), 0, SPAC_USE);

		//WAS can't use more than one special line in a row
		//jff 3/21/98 NOW multiple use allowed with enabling line flag
		if (Level.GET_SPAC(line->flags) != SPAC_USETHROUGH)
		{
			DoSecAct = false;
			break;
		}
	}

	if (DoSecAct && MO.Sector->ActionList)
	{
		//	Let sector intercept the use.
		int Spac = SectorAction::SECSPAC_Use;
		if (FoundLine)
		{
			Spac |= SectorAction::SECSPAC_UseWall;
		}
		SectorAction(MO.Sector->ActionList).TriggerAction(EntityEx(MO),
			Spac);
	}
}

//==========================================================================
//
//  Cheat_God
//
//==========================================================================

void Cheat_God()
{
	Cheats ^= CF_GODMODE;
	if (Cheats & CF_GODMODE)
	{
		cprint("GOD MODE ON");
	}
	else
	{
		cprint("GOD MODE OFF");
	}
}

//==========================================================================
//
//  Cheat_NoClip
//
//==========================================================================

void Cheat_NoClip()
{
	Cheats ^= CF_NOCLIP;
	if (Cheats & CF_NOCLIP)
	{
		cprint("NO CLIPPING ON");
	}
	else
	{
		cprint("NO CLIPPING OFF");
	}
}

//==========================================================================
//
//  Cheat_Gimme
//
//==========================================================================

void Cheat_Gimme()
{
	class<Inventory>	Cls;
	class<WeaponPickup>	WpnCls;

	if (Cmd_CheckParm("weapons"))
	{
		int i;

		BasicArmor Armor = BasicArmor(EntityEx(MO).FindInventory(
			BasicArmor));
		Armor.Amount = 200;
		foreach AllClasses(WeaponPickup, WpnCls)
		{
			WeaponPickup Wpn = Level.Spawn(WpnCls,,,, false);
			Wpn.AmmoGive1 = 0;
			Wpn.AmmoGive2 = 0;
			Wpn.AmmoGive3 = 0;
			if (!Wpn.TryPickup(EntityEx(MO)))
			{
				Wpn.Destroy();
			}
		}
		foreach AllClasses(Ammo, Cls)
		{
			//	Only direct descendants.
			if (GetClassParent(Cls) != Ammo)
			{
				continue;
			}
			Inventory AmmoItem = EntityEx(MO).FindInventory(Cls);
			if (!AmmoItem)
			{
				AmmoItem = Level.Spawn(Cls,,,, false);
				if (!AmmoItem.TryPickup(EntityEx(MO)))
				{
					AmmoItem.Destroy();
					AmmoItem = none;
				}
			}
			if (AmmoItem)
			{
				AmmoItem.Amount = AmmoItem.MaxAmount;
			}
		}
		cprint("ALL WEAPONS");
	}
	if (Cmd_CheckParm("health"))
	{
		MO.Health = max_health;
		Health = MO.Health;
		cprint("FULL HEALTH");
	}
	if (Cmd_CheckParm("keys"))
	{
		foreach AllClasses(Key, Cls)
		{
			if (!Cls.default.IdleState)
			{
				//	Abstract class
				continue;
			}
			EntityEx(MO).GiveInventoryType(Cls);
		}
		cprint("ALL KEYS");
	}
	if (Cmd_CheckParm("puzzles"))
	{
		foreach AllClasses(PuzzleItem, Cls)
		{
			if (!Cls.default.IdleState)
			{
				//	Abstract class
				continue;
			}
			EntityEx(MO).GiveInventoryType(Cls);
		}
		cprint("ALL ARTIFACTS");
	}
	if (Cmd_CheckParm("exp"))
	{
		GiveExperience(10000);
		cprint("LOTS OF EXP");
	}
}

//==========================================================================
//
//  P_Massacre
//
//  Kills all monsters.
//
//==========================================================================

int P_Massacre()
{
	int count;
	Actor mo;

	count = 0;
	foreach MO.AllThinkers(Actor, mo)
	{
		if (mo.bMonster && mo.Health > 0)
		{
			mo.bNonShootable = false;
			mo.bInvulnerable = false;
			mo.bShootable = true;
			mo.Damage(none, none, 10000);
			count++;
		}
	}
	return count;
}

//==========================================================================
//
//  Cheat_KillAll
//
//==========================================================================

void Cheat_KillAll()
{
	cprint("%d MONSTERS KILLED", P_Massacre());
}

//==========================================================================
//
//  Cheat_Morph
//
//==========================================================================

void Cheat_Morph()
{
	if (MorphTime)
	{
		UndoPlayerMorph();
	}
	else
	{
		MorphProjectile Tmp = Level.Spawn(EggMissile);
		Tmp.MorphPlayer(Actor(MO));
		Tmp.Destroy();
	}
	cprint("SQUEAL!!");
}

//==========================================================================
//
//  Cheat_NoWeapons
//
//==========================================================================

void Cheat_NoWeapons()
{
	if (MorphTime)
	{
		return;
	}
	//	Find weakest weapon.
	Inventory Item;
	Weapon Weakest = none;
	for (Item = EntityEx(MO).Inventory; Item; Item = Item.Inventory)
	{
		if (Weapon(Item) && (!Weakest ||
			Weakest.SelectionOrder < Weapon(Item).SelectionOrder))
		{
			Weakest = Weapon(Item);
		}
	}
	//	Removed all others.
	for (Item = EntityEx(MO).Inventory; Item; )
	{
		Inventory Next = Item.Inventory;
		if (Weapon(Item) && Item != Weakest)
		{
			Item.Destroy();
		}
		Item = Next;
	}
	SetWeapon(Weakest);
	PendingWeapon = Weakest;
	cprint("CHEATER - YOU DON'T DESERVE WEAPONS");
}

//==========================================================================
//
//  Cheat_Class
//
//==========================================================================

void Cheat_Class()
{
	int i;
	int pclass;

	if (MorphTime || MO.Class == PlayerHeresiarch)
	{
		// don't change class if the player is morphed
		return;
	}
	if (Cmd_CheckParm("fighter"))
		pclass = HexenDefs::PCLASS_FIGHTER;
	else if (Cmd_CheckParm("cleric"))
		pclass = HexenDefs::PCLASS_CLERIC;
	else if (Cmd_CheckParm("mage"))
		pclass = HexenDefs::PCLASS_MAGE;
	else if (Cmd_CheckParm("heretic"))
		pclass = HexenDefs::PCLASS_HERETIC;
	else if (Cmd_CheckParm("marine"))
		pclass = HexenDefs::PCLASS_MARINE;
	else if (Cmd_CheckParm("witchaven"))
		pclass = HexenDefs::PCLASS_WITCHAVEN;
	else
	{
		cprint("INVALID PLAYER CLASS");
		return;
	}
	PClass = pclass;
	BasicArmor Armor = BasicArmor(EntityEx(MO).FindInventory(BasicArmor));
	Armor.Amount = 0;
	BaseClass = pclass;
//	PostMorphWeapon(HexenDefs::WP_FIRST);
	SetCvar('class', pclass);
	SB_Start();
}

//==========================================================================
//
//  SetFOV
//
//==========================================================================

void SetFOV(int FOV)
{
	SetCvar('FOV', FOV);
}

//==========================================================================
//
//  CallLocalSound
//
//	[CW]
//
//==========================================================================

void CallLocalSound(int sound, bool put_in_queue, float delay)
{
	ClientGameBaseEx(ClGame).PlayAnouncerSound(sound, put_in_queue, delay);
}

//==========================================================================
//
//  CallLocalSoundNamed
//
//	[CW] TODO: use only this for all local sounds?
//
//==========================================================================

void CallLocalSoundNamed(name sound, bool put_in_queue, float delay)
{
	ClientGameBaseEx(ClGame).PlayAnouncerSoundNamed(sound, put_in_queue, delay);
}

//==========================================================================
//
//  UpdateScore
//
//  [CW] Updates current player's score.
//	 Scoring event list is defined in 'hexndefs.vc'.
//
//==========================================================================

void UpdateScore(int event)
{
	int i;
	int mod = 0;
	bool force_update = false;

	switch(event)
	{
		case HexenDefs::scoreevent_PlayerDiscard:
		
			dprint("Player::UpdateScore : scoreevent_PlayerDiscard");
			i = Team.GetPlayerCount();
			if (i > 1)
				mod = Team.Players[--i].Score - Score - 1;
			else
				mod = -Score;
			force_update = true;
			break;
		
		case HexenDefs::scoreevent_PlayerReset:
			dprint("Player::UpdateScore : scoreevent_PlayerReset");
			mod = -Score;
			force_update = true;
			break;	// this should always set Score to 0
		case HexenDefs::scoreevent_Frag:
		case HexenDefs::scoreevent_Kill:
		case HexenDefs::scoreevent_KthHeresiarchDeath:
			mod = 1;
			break;
		case HexenDefs::scoreevent_FtbGoal:
			mod = 5;
			break;
		case HexenDefs::scoreevent_FtbSelfGoal:
			mod = -5;
			break;
		case HexenDefs::scoreevent_SelfFrag:
		case HexenDefs::scoreevent_TeamFrag:
			mod = -1;
			break;
		case HexenDefs::scoreevent_KthHeresiarchFrag:
			// [CW] This is an interesting case: whoever this called Player is,
			//		frag should go to Heresiarch and no one else!
			if (MainGameInfo(Level.Game).GameModel && MainGameInfo(Level.Game).GameModel.IsA('GameKTH'))
			{
				Player plH = GameKTH(MainGameInfo(Level.Game).GameModel).plHeresiarch;
				if (self == plH)
					mod = 1;
				else
					plH.UpdateScore(HexenDefs::scoreevent_KthHeresiarchFrag);
			}
			break;
		case HexenDefs::scoreevent_CtfCapture:
			mod = 5;
			break;
		case HexenDefs::scoreevent_CtfSaveFlag:
			mod = 2;
			break;
		case HexenDefs::scoreevent_DomSigilCapture:
			mod = 1;
			break;
		case HexenDefs::scoreevent_XmasTree:
			mod = 1;
			break;
	}

	Score += mod;

	if (Level && Level.Game && (MainGameInfo(Level.Game).GameType >= HexenDefs::NUMGAMESNOTEAM) && Team)
	{
		Team.UpdateScore(event);
		// update team stats for clientstate	
		TeamFrags = Team.Frags;
		TeamKills = Team.Kills;
	}

	if (mod || force_update)
	{
		UpdateCompetition();
		// No player-referred announces in team games
		if (Level && Level.Game && (MainGameInfo(Level.Game).GameType < HexenDefs::NUMGAMESNOTEAM) &&
				(MainGameInfo(Level.Game).GetPlayerCount() > 1))
			CompetitionAnnouncements(Score - mod);

		if (Level && Level.Game)	// in case score is somehow updated between levels
		{
			if (mod > 0)
				MainGameInfo(Level.Game).bCompetitionOpened = true;
			MainGameInfo(Level.Game).ScoreboardsUpdate(none);
		}
	}

	// [CW] Check score limit
	if (Level && Level.Game && (MainGameInfo(Level.Game).GameType < HexenDefs::NUMGAMESNOTEAM))
		MainGameInfo(Level.Game).UpdateHighscore(Score);
}

//==========================================================================
//
//  CompetitionAnnouncements
//
//  [CW]
//
//==========================================================================

void CompetitionAnnouncements(int oldScore)
{
	int i;
			
	if (Score > oldScore)
	{
		// Is this player a new and only leader?
		if (PlayerPosition == 0)
		{
			if (Team.Players[1] && Team.Players[1].Score >= oldScore)
			{
				// [FB] Announce new leader!
				CallLocalSound(HexenDefs::lsid_gen_an_y_lead, true, HexenDefs::STANDART_LSQ_DELAY);
				Level.bprint("%s leads!", PlayerName);
				
				// Anyone lost the Lead?
				int oldLeaderScore = Team.Players[1].Score;
				for (i = 1; i < MAXPLAYERS; i++)
				{
					if (!Team.Players[i])
						break;
					if (Team.Players[i].Score == oldLeaderScore)
					{
					   Team.Players[i].CallLocalSound(HexenDefs::lsid_gen_an_y_lost_the_lead, true, HexenDefs::STANDART_LSQ_DELAY);
					   //Team.Players[i].centreprint("You lost the lead!");
					}
					else
					   break;
				}
			}
			else if (Score > 0 && !MainGameInfo(Level.Game).bCompetitionOpened)
			{
				// [FB] Announce new leader!
				CallLocalSound(HexenDefs::lsid_gen_an_y_lead, true, HexenDefs::STANDART_LSQ_DELAY);
				Level.bprint("%s leads!", PlayerName);
			}
		}
		// Is he tied for the lead then?
		else
		{
			if (Score == Team.Players[0].Score)
			{
				// [FB] Tied for the lead!
				CallLocalSound(HexenDefs::lsid_gen_an_y_tied_ftl, true, HexenDefs::STANDART_LSQ_DELAY);
				//centreprint("You are tied for the lead!");
				
				// If there was a single leader, notify him that he is tied for the lead now
				// (elsewise there's already a tied group)
				if (PlayerPosition == 1)
				{
					Team.Players[0].CallLocalSound(HexenDefs::lsid_gen_an_y_tied_ftl, true, HexenDefs::STANDART_LSQ_DELAY);
					//Team.Players[0].centreprint("You are tied for the lead!");
				}
			}
		}
	}
	// Score may drop down in case of self-frag or similar events
	else if (Score < oldScore)
	{
		// Is he tied for the lead?
		if (PlayerPosition == 0)
		{
			if (Team.Players[1] && Team.Players[1].Score == Score)
			{
				CallLocalSound(HexenDefs::lsid_gen_an_y_tied_ftl, true, HexenDefs::STANDART_LSQ_DELAY);
				//centreprint("You are tied for the lead!");
				
				// Who else is tied?
				for (i = 1; i < MAXPLAYERS; i++)
				{
					if (!Team.Players[i])
						break;
					if (Team.Players[i].Score == Score)
					{
					   Team.Players[i].CallLocalSound(HexenDefs::lsid_gen_an_y_tied_ftl, true, HexenDefs::STANDART_LSQ_DELAY);
					   //Team.Players[i].centreprint("You are tied for the lead!");
					}
					else
					   break;
				}
			}
		}
		// Was he a single leader or tied?
		else if (Team.Players[0].Score <= oldScore)
		{
			// [FB] You've lost the lead!
			CallLocalSound(HexenDefs::lsid_gen_an_y_lost_the_lead, true, HexenDefs::STANDART_LSQ_DELAY);
			//centreprint("You lost the lead!");
			
			// If he was a single leader, some others have the lead now
			if (Team.Players[0].Score < oldScore)
			{
				int newLeaderScore = Team.Players[0].Score;
				if (PlayerPosition != 1 && Team.Players[1].Score == newLeaderScore)
				{
					for (i = 0; i < PlayerPosition; i++)
					{
						if (Team.Players[i].Score < newLeaderScore)
							break;
						Team.Players[i].CallLocalSound(HexenDefs::lsid_gen_an_y_tied_ftl, true, HexenDefs::STANDART_LSQ_DELAY);
						//Team.Players[i].centreprint("You are tied for the lead!");
					}
				}
				else
				{
					// [FB] Announce new leader!
					Team.Players[0].CallLocalSound(HexenDefs::lsid_gen_an_y_lead, true, HexenDefs::STANDART_LSQ_DELAY);
					//Team.Players[0].centreprint("You lead!");
					Level.bprint("%s leads!", Team.Players[0].PlayerName);
				}
			}
		}
	}
}

//==========================================================================
//
//  UpdateCompetition
//
//  [CW] Updates player's position in inner team table.
//
//==========================================================================

void UpdateCompetition()
{
	bool bPositionShifted;
	int i, j;
	Player pl2;

	if (!Team)
		Error("Player::UpdateCompetition : Team reference is not set to real object");

	for (i = 0; i < MAXPLAYERS; i++)
	{
		if(Team.Players[i] == self)
		   break;
	}
	
	PlayerPosition = i;

	// first see if previous players has lower score now
	if (i != 0)
	{
		j = i-1;
		while (j >= 0)
		{
			pl2 = Team.Players[j];
			if (!pl2)
				Error("Player::UpdateCompetition : previous player slot in team has no reference to object");
			
			if (pl2.Score < Score)
			{
				bPositionShifted = true;
				Team.Players[j] = self;
				Team.Players[i] = pl2;
				PlayerPosition = j;
				pl2.PlayerPosition = i;
				i = j;
			}
			else
				break;
			j--;
		};
	}
	// secondly (in other case) see if next players has higher score (in case score gone down)
	if (!bPositionShifted && i != MAXPLAYERS - 1)
	{
		j = i+1;
		while (Team.Players[j] && j < MAXPLAYERS)
		{
			pl2 = Team.Players[j];

			if (pl2.Score > Score)
			{
				Team.Players[j] = self;
				Team.Players[i] = pl2;
				PlayerPosition = j;
				pl2.PlayerPosition = i;
				i = j;
			}
			else
				break;
			j++;
		};
	}
}

//==========================================================================
//
//  DisplayObituary
//
//  [CW] Displays message notificating that player was killed.
//
//
//	1) if damage type is 'Falling' or 'Telefrag', corresponding Obituaries
//	are used with 1 parameter: died player's name.
//
//	2) if both source & inflictor are null, it was pure enviroment:
//	slime, lava and such. Use generic messages like "was in wrong place" etc,
//	with 1 parameter: this player's name.
//
//	3) if inflictor has some value and source is null, it should be some trap
//	or similar thing; then use inflictor's Obituary with 1 parameter
//	as in pp.1,2.
//
//	4) if both inflictor and source has some values, but they are not
//	equal, that means that either a pawn or player have shot current
//	player with a missile (or killed by other spawned object);
//	use inflictor's Obituary with 2 parameters:	current player name and
//	either pawn name or killer's PlayerName.
//
//	5) if inflictor and source have equal values (not null), then it might
//	be melee attack OR instant ranged attack (like gunshot) by pawn or player;
//	use either pawn's Obituary or active player Weapon's Obituary, with 2
//	parameters as in p.4.
//
//	6) if there's source but no inflictor, it could be delayed kill like
//	poisoning or darkness power; use corresponding Obituary with 2 parameters
//	as in p.4.
//
//	7) in any case, if there is a source and source is equal to died player,
//	that means that player have killed himself either by his weapon, or using
//	'suicide' command; use corresponding Obituary with 1 parameter as in p.1.
//
//==========================================================================

void DisplayObituary(EntityEx inflictor, EntityEx source, name DmgType)
{
	string		Msg;

	if (DmgType == 'Falling')
	{
		//[CW] falling damage
		Msg = va("$ob_falling%d", (P_Random() % 3) + 1);
	}
	else if (DmgType == 'Telefrag')
	{
		// telefrag
		if (inflictor.bIsPlayer)
		{
			Msg = va("$ob_telefrag%d", (P_Random() % 3) + 1);
		}
		// telefrag
		else
		{
			Msg = va("$ob_monsttelefrag%d", (P_Random() % 3) + 1);
		}
	}
	else if (source)
	{
		//[CW] p.4: melee or instant ranged attack
		if (source == inflictor)
		{
			if (source.bIsPlayer)
			{
				KArenaWeapon kaw = KArenaWeapon(Player(inflictor.Player).ReadyWeapon);
				if (kaw.MeleeObituary)
					Msg = kaw.MeleeObituary;
				else
					Msg = kaw.RangedObituary;
			}
			else if (source.IsA('Pawn'))
			{
				Pawn p = Pawn(source);
				if (p.Obituary)
					Msg = p.Obituary;
				else
					Msg = p.RangedObituary;
			}
		}
		//[CW] p.3: missile attack
		else if (inflictor)
		{
			if(source.bIsPlayer && source.Player == self)
			{
				Msg = va("$ob_selffrag%d", (P_Random() % 3) + 1);
			}
			else
			{
				Msg = Actor(inflictor).Obituary;
			}
		}
		else if (source.bIsPlayer)
		{
			// [CW] killed by slow poison
			if (DmgType == 'Poison')
			{
				if (Player(source.Player) == self)
					Msg = va("$ob_selfpoison");
				else
					Msg = va("$ob_poisoned");
			}
			// [CW] killed by darkness energy
			else if (DmgType == 'Blind')
			{
				if (Player(source.Player) == self)
					Msg = va("$ob_selfblind");//???
				else
					Msg = va("$ob_blinded");//???
			}
			//[CW] suicide
			else if (Player(source.Player) == self)
				Msg = va("$ob_suicide%d", (P_Random() % 3) + 1);
		}
	}
	//[CW] p.2: fragged by enviromental thing or trap
	else if (inflictor)
	{
		Msg = Actor(inflictor).Obituary;
	}

	if (!Msg)
	{
		//[CW] p.1: fragged by pure enviroment
		Msg = va("$ob_generic%d", (P_Random() % 3) + 1);
	}

	//	Look up string in language lump is necesary.
	if (StrStartsWith(Msg, "$"))
	{
		Msg = GetLangString(StrToName(substr(Msg, 1, strlen(Msg) - 1)));
	}

	//	Do replacements.
	Msg = StrReplace(Msg, "%o", PlayerName);
	if (source)
	{
		if (source.Player)
			Msg = StrReplace(Msg, "%k", source.Player.PlayerName);
		else if (source.IsA('Pawn'))
			Msg = StrReplace(Msg, "%k", Pawn(source).Name);
	}

	Level.bprint("%s", Msg);
}

//==========================================================================
//
//  ConfirmTrophy
//
//	[CW]
//
//==========================================================================

void ConfirmTrophy(int type)
{
	int a, announcement;
	int value;

	if (type >= HexenDefs::NUMTROPHIES)
		return;

	switch (type)
	{
	case HexenDefs::trophycl_killsatonce:
		a = -1;
		if (Trophies.kills_at_once == HexenDefs::TROPHY_KAO_HUNT) a = 0;
		if (Trophies.kills_at_once == HexenDefs::TROPHY_KAO_MASSACRE) a = 1;
		if (Trophies.kills_at_once == HexenDefs::TROPHY_KAO_DEVASTATION) a = 2;
		if (Trophies.kills_at_once == HexenDefs::TROPHY_KAO_ELIMINATION) a = 3;
		if (a < 0)
		{
			//Trophies.kills_at_once = 0;
			//Trophies.kao_timer = 0.0;
			return;
		}
		announcement = HexenDefs::trophy_hunt + a;
		value = Trophies.kills_at_once;
		break;
	case HexenDefs::trophycl_fragsatonce:
		if (Trophies.frags_at_once < 2)
		{
			//Trophies.frags_at_once = 0;
			//Trophies.fao_timer = 0.0;
			return;
		}
		announcement = HexenDefs::trophy_doublekill + Trophies.frags_at_once - 2;
		if (announcement > HexenDefs::trophy_LAST_fao)
			announcement = HexenDefs::trophy_LAST_fao;
		value = Trophies.frags_at_once;
		break;
	case HexenDefs::trophycl_fragsrow:
		/*if (Trophies.frags_row < HexenDefs::TROPHY_FRAGSROW_LIMIT)
		{
			Trophies.frags_row = 0;
			return;
		}*/
		if (Trophies.frags_row % HexenDefs::TROPHY_FRAGSROW_LIMIT != 0)
			return;
		announcement = HexenDefs::trophy_frags_row;
		value = Trophies.frags_row;
		break;
	case HexenDefs::trophycl_killsrow:
		/*if (Trophies.kills_row < HexenDefs::TROPHY_KILLSROW_LIMIT)
		{
			Trophies.kills_row = 0;
			return;
		}*/
		if (Trophies.kills_row % HexenDefs::TROPHY_KILLSROW_LIMIT != 0)
			return;
		announcement = HexenDefs::trophy_kills_row;
		value = Trophies.kills_row;
		break;
	case HexenDefs::trophycl_accuracy:
		announcement = HexenDefs::trophy_accuracy; break;
	default:
		return;
	}
	centreprint(va(MainGameInfo(Level.Game).TrophyText[announcement], value));
	CallLocalSound(HexenDefs::lsid_PLAYERTROPHY + announcement,	true, HexenDefs::STANDART_LSQ_DELAY);
}

//==========================================================================
//
//  UpdateQueuedTrophy
//
//	[CW] Queued trophies are trophies that depend on number
//		 of specific events occured in a sequence (there's a
//		 split for timed and non-timed).
//
//==========================================================================

void UpdateQueuedTrophy(int type, int value)
{
	if (type >= HexenDefs::NUMTROPHIES)
		return;

	switch (type)
	{
	case HexenDefs::trophycl_killsatonce:
		Trophies.kills_at_once += value;
		Trophies.kao_timer = HexenDefs::TROPHY_KAO_TIME;
		ConfirmTrophy(HexenDefs::trophycl_killsatonce);
		break;
	case HexenDefs::trophycl_fragsatonce:
		Trophies.frags_at_once += value;
		Trophies.fao_timer = HexenDefs::TROPHY_FAO_TIME;
		ConfirmTrophy(HexenDefs::trophycl_fragsatonce);
		break;
	case HexenDefs::trophycl_fragsrow:
		Trophies.frags_row += value;
		ConfirmTrophy(HexenDefs::trophycl_fragsrow);
		break;
	case HexenDefs::trophycl_killsrow:
		Trophies.kills_row += value;
		ConfirmTrophy(HexenDefs::trophycl_killsrow);
		break;
	}
}

//==========================================================================
//
//  UpdateTimedTrophies
//
//	[CW]
//
//==========================================================================

void UpdateTimedTrophies(float deltaTime)
{
	if (Trophies.kao_timer > 0.0)
	{
		Trophies.kao_timer -= deltaTime;
		if (Trophies.kao_timer <= 0.0)
		{
			Trophies.kills_at_once = 0;
			//ConfirmTrophy(HexenDefs::trophycl_killsatonce);
		}
	}
	if (Trophies.fao_timer > 0.0)
	{
		Trophies.fao_timer -= deltaTime;
		if (Trophies.fao_timer <= 0.0)
		{
			Trophies.frags_at_once = 0;
			//ConfirmTrophy(HexenDefs::trophycl_fragsatonce);
		}
	}
}

//==========================================================================
//
//  ClientDynamicLightEx
//
//	[CW] Full data dlight parsing
//
//==========================================================================

void ClientDynamicLightEx(int colour, TVec org, int radius, int lifetime, int decay)
{
	dlight_t *dl;

	dl = Level.AllocDlight(none);

	dl->colour = colour;
	dl->origin = org;
	dl->radius = itof(radius);
	dl->die = Level.XLevel.Time + itof(lifetime) * 0.01;
	dl->decay = itof(decay) * 0.01;
}

//==========================================================================
//
//  CheckFriendlyFire
//
//==========================================================================

bool CheckFriendlyFire(EntityEx source, int damage)
{
	if (!GetCvar('FriendlyFire'))
	{
		// [FB] Don't do damage to teammates in team game modes
		// [CW] ... and allies as well...
		if (source != MO && source && 
				(source.bIsPlayer ||
				!source.IsA('Pawn') && source.Target && source.Target.bIsPlayer) &&
				damage < 1000)
		{
			if (MainGameInfo(Level.Game).GameModel)
			{
				int teamfactor = MainGameInfo(Level.Game).GameModel.TeamFactor(EntityEx(MO),
							source.bIsPlayer ? source : source.Target);
				if (teamfactor == GameModel::teamfactor_coop)
					return true;
			}

			if (MainGameInfo(Level.Game).GameType >= HexenDefs::NUMGAMESNOTEAM ||
				MainGameInfo(Level.Game).bIsCoopGame[MainGameInfo(Level.Game).GameType])
			{
				PlayerTeam col = (source.bIsPlayer ? Player(source.Player).Team : Player(source.Target.Player).Team);
				if (col == Team && damage < 1000)
					return true;
			}
		}
	}

	return false;
}

//==========================================================================
//
//  IsWeaponAlwaysExtremeDeath
//
//==========================================================================

bool IsWeaponAlwaysExtremeDeath()
{
	// Always extreme death from eight weapon
	return ReadyWeapon.bExtremeDeath;
}

//==========================================================================
//
//	LevelChanged
//
//==========================================================================

final void LevelChanged()
{
	//	Update armor save percentages.
	BasicArmor Armor = BasicArmor(EntityEx(MO).FindInventory(BasicArmor));
	if (Armor && Armor.Amount)
	{
		Armor.SavePercent = 0.333 + itof(constitution) * 0.4;
		if (Armor.SavePercent > 0.75)
		{
			Armor.SavePercent = 0.75;
		}
	}

	//	Update player speed.
	float Value;
	if (PlayerPig(MO))
	{
		Value = 0.97 + itof(dexterity) / 100.0;
	}
	else
	{
		// [FB] We make every class walk at the same speed now
		Value = 0.9 + itof(dexterity) / 100.0;
	}
	KArenaPlayerPawn(MO).ForwardMove1 = Value;
	KArenaPlayerPawn(MO).ForwardMove2 = Value;
	KArenaPlayerPawn(MO).SideMove1 = Value;
	KArenaPlayerPawn(MO).SideMove2 = Value;
}

//==========================================================================
//
// Damaged
//
//==========================================================================

void Damaged(EntityEx inflictor)
{
	if(bIsBot)
	{
		Bot.React(inflictor);
	}
}

//==========================================================================
//
// FireWeapon
//
// [FB] We need to override this method to make bots update their reaction timer
//
//==========================================================================

void FireWeapon()
{
	int i;

	// [FB] Not sure if this is the right way to do it, anyway....
	for (i = 0; i < MAXPLAYERS; i++)
	{
		// [FB] Set t_anticip for our bot enemies
		if (Level.Game.Players[i] && Level.Game.Players[i].MO &&
			Level.Game.Players[i].bIsBot &&
			Player(Level.Game.Players[i]).Bot.enemy && 
			Player(Level.Game.Players[i]).Bot.enemy == MO)
			Player(Level.Game.Players[i]).Bot.t_anticip = 
					KArenaWeapon(ReadyWeapon).refire_tics;
	}

	::FireWeapon();
}

//==========================================================================
//
// IsOutOfAmmo
//
// [CW] Returns TRUE if cannot attack with any weapon that requires ammo
//
//==========================================================================

bool IsOutOfAmmo(optional class<KArenaWeapon> WeaponClass, optional class<Ammo> AmmoType)
{
	Inventory Item;
	for (Item = EntityEx(MO).Inventory; Item; Item = Item.Inventory)
	{
		//	Must be a weapon
		KArenaWeapon Wpn = KArenaWeapon(Item);
		if (!Wpn)
		{
			continue;
		}

		if (WeaponClass)
		{
			if (Wpn.Class != WeaponClass)
				continue;
		}

		if (AmmoType)
		{
			if (Wpn.AmmoType1 != AmmoType && Wpn.AmmoType2 != AmmoType && Wpn.AmmoType3 != AmmoType)
				continue;
		}

		if (Wpn.CheckAmmo(false, true))
			return false;
	}
	return true;
}

//==========================================================================
//
// IsAmmoBelowLevel
//
//==========================================================================

bool IsAmmoBelowLevel(int AmountLimit, optional class<KArenaWeapon> WeaponClass, optional class<Ammo> AmmoType)
{
	Inventory Item;
	for (Item = EntityEx(MO).Inventory; Item; Item = Item.Inventory)
	{
		//	Must be an Ammo
		Ammo ammo = Ammo(Item);
		if (!ammo)
		{
			continue;
		}

		if (WeaponClass)
		{
			if (WeaponClass.default.AmmoType1 != ammo.Class &&
					WeaponClass.default.AmmoType2 != ammo.Class &&
					WeaponClass.default.AmmoType3 != ammo.Class)
				continue;
		}

		if (AmmoType)
		{
			if (ammo.Class != AmmoType)
				continue;
		}

		if (ammo.Amount > AmountLimit)
			return false;
	}
	return true;
}

//==========================================================================
//
//	KilledActor
//
//==========================================================================

void KilledActor(EntityEx Victim)
{
	bool bKilledByAlly = Victim.IsTeammate(EntityEx(MO));

	// [CW] Process actor-specific event
	if (Victim.IsA('KArenaActor'))
		KArenaActor(Victim).KilledByPlayer(KArenaPlayerPawn(MO));

	// [FB] Increase the player's KillCount
	if (Victim.bMonster)
	{
		//[CW] update player's score
		UpdateScore(HexenDefs::scoreevent_Kill);

		//[CW] update kill trophies
		UpdateQueuedTrophy(HexenDefs::trophycl_killsatonce, 1);
		UpdateQueuedTrophy(HexenDefs::trophycl_killsrow, 1);
		
		// [FB] Check how many monsters there are in castle sweep mode
		if (MainGameInfo(Level.Game).GameType == HexenDefs::game_sweep ||
		    MainGameInfo(Level.Game).GameType == HexenDefs::game_sweepteam)
		{
			if (Level.CurrentKills < Level.TotalKills && Level.TotalKills - Level.CurrentKills <= 10)
			{
				MO.PlaySound('misc/chat', CHAN_AUTO);
				MainGameInfo(Level.Game).bcentreprint(va("%i monsters left!", Level.TotalKills - Level.CurrentKills));
			}
			
			// [FB] No more monsters, so end the game!
			if (Level.TotalKills == Level.CurrentKills)
			{
				// [FB] Exit map
				//Level.ExitLevel(0);
				int i;
				for (i = 0; i < MAXPLAYERS; i++)
				{
					if (Level.Game.Players[i] && !Level.Game.Players[i].bIsBot)
					{
						Player(Level.Game.Players[i]).level_ender_counter = 0.5;
					}
				}
			}
		}
	}

	// Check for frag changes
	if (Victim.bIsPlayer)
	{
		if (bIsBot)
		{
			Bot.Killed(Victim);
		}

		if (Victim.Player.bIsBot)
		{
			Player(Victim.Player).Bot.Died(EntityEx(MO));
		}

		if (Victim == MO)
		{
			// Self-frag
			Frags--;

			UpdateScore(HexenDefs::scoreevent_SelfFrag);
		}
		else
		{
			int se = bKilledByAlly ? HexenDefs::scoreevent_TeamFrag : HexenDefs::scoreevent_Frag;

			if (bKilledByAlly)
			{
				Frags--;
			}
			else
			{
				Frags++;
				GiveExperience(500 * Player(Victim.Player).exp_level / exp_level);
			}

			if (MainGameInfo(Level.Game).GameModel)
				se = MainGameInfo(Level.Game).GameModel.GetFragScoreEvent(self, Player(Victim.Player));

			UpdateScore(se);

			//[CW] update frag trophies
			if (!bKilledByAlly)
			{
				UpdateQueuedTrophy(HexenDefs::trophycl_fragsatonce, 1);
				UpdateQueuedTrophy(HexenDefs::trophycl_fragsrow, 1);
			}
		}
	}
}

//==========================================================================
//
//	Killed
//
//==========================================================================

void Killed(EntityEx source, EntityEx inflictor)
{
	::Killed(source, inflictor);

	//[CW] Show scoreboard for died player
	Scoreboard(true);

	if (MorphTime || MO.Class == PlayerHeresiarch)
		bRecalculateLevelOnRespawn = true;

	//[CW] notify advanced game mode
	if (MainGameInfo(Level.Game).GameModel)
		MainGameInfo(Level.Game).GameModel.NotifyPlayerDeath(self, source);

	SetFOV(HexenDefs::DEFAULT_FOV);
}

//==========================================================================
//
//	PlayerMorphed
//
//==========================================================================

void PlayerMorphed(Actor OldMO)
{
	PClass = HexenDefs::PCLASS_PIG;
	// [CW] Recalc attributes based on the new player's body
	int bak_level = exp_level;
	InitiateLevel();
	ActivateLevel(bak_level, false);
}

defaultproperties
{
}
