//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Player : BasePlayer;

const int
	STARTREDPALS    		= 1,
	STARTBONUSPALS  		= 9,
	STARTPOISONPALS 		= 13,
	STARTICEPAL				= 21,
	STARTHOLYPAL			= 22,
	STARTSCOURGEPAL 		= 25,
	NUMREDPALS      		= 8,
	NUMBONUSPALS    		= 4,
	NUMPOISONPALS			= 8;

const float BLINKTHRESHOLD	= 4.0;

const float
	INVULNTIME				= 30.0,
	INVULNTIME2				= 5.0,
	INFRATIME				= 120.0,
	FLIGHTTIME 				= 60.0,
	SPEEDTIME 				= 45.0,
	MORPHTIME 				= 40.0,
	MAULATORTIME 			= 30.0,
	INVISTIME				= 40.0,
	DAMAGETIME				= 40.0;

const int MAXMORPHHEALTH	= 30;
const float VIEWHEIGHT 		= 48.0;

//
// Player internal flags, for cheats and debug.
//
const int
	CF_NOCLIP				= 1,	// No clipping, walk through barriers.
	CF_GODMODE				= 2;	// No damage, no health loss.

// 16 pixels of bob
const float MAXBOB			= 16.0;

const float HEAL_RADIUS_DIST		= 255.0;

const float USERANGE 		= 64.0;

const float
	BLAST_RADIUS_DIST		= 255.0,
	BLAST_FULLSTRENGTH		= 0.0038909912,
	BLAST_SPEED				= 20.0;

struct inventory_t
{
	int type;
	int count;
};

//
//  FIRST FIELDS ARE STATS THAT ARE SENT TO CLIENT FOR STATUS BAR
//

bool bShowScoreboard; // [CW] True if scoreboard should be visible

int SBFlags;

int ArmorPoints;

float InventoryTime;

int ArtifactFlash;
int ReadyArtifact;
int InvPtr;
int InvCurPos;
int InventorySlotNum;
inventory_t Inventory[HexenDefs::NUMARTIFACTS];

int Mana[HexenDefs::NUMMANA];

// [Korax]
// [FB] Scores for the different gameplay modes
int TeamFrags; // [FB] Frags from each team	// [CW] you mean THIS PLAYER's team
int KillsCount; // [FB] How many enemies the player killed	// [CW] only monsters (?)
int TeamKills; // [FB] How many enemies has each team killed	// [CW] you mean THIS PLAYER's team
int TotalKills; // [FB] How many enemies there are in a map

// [CW] I hate to do this, but it is still only way to sent these params to client.
// I hope Janis shall develop additional data transition mechanism which will allow
// copying data directly from Level or GameInfo.
struct scoreboard_t
{
	bool		IsActive;
	string		plname;		// player name
	bool		IsBot;		// true if player is bot, false if is human
	int		team;		// color
	int		frags;
	int		nplkills;	// non-player kills
	int		deaths;
};

scoreboard_t gamescores[MAXPLAYERS];

// [FB] Player atributes for leveling system
int experience;
int exp_level;
int next_level;
int old_level; // [FB] If we are going backwards we need this
int strength;
int intelligence;
int wisdom;
int dexterity;
int constitution;
//
//  Other stats (for status bar)
//
int max_health;
int old_maxhealth; // [FB] To decrease the health

//
// [CW] Firebrand, take a look at this: check that old_maxhealth is not mentioned in MainClientState class!
// It has bak_health instead on the place, where old_maxhealth should be. Isn't it a mistake?
//
int bak_health; // [FB] To keep an older level health

//
//  ----------
//

int Keys;

// Power ups. invinc and invis are tic counters.
float Powers[NUMPOWERS];

int Arti;	// artitype_t to use

// Base height above floor for viewz.
float ViewHeight;
// Bob/squat speed.
float DeltaViewHeight;
// bounded/scaled total momentum.
float Bob;

float FlyHeight;

int ArtifactCount;

// Bit flags, for cheats and debug.
// See cheat_t, above.
int Cheats;

// Refired shots are less accurate.
int Refire;

//[Korax]
//int Pieces;	// Fourth Weapon pieces

// Is wp_nochange if not changing.
int PendingWeapon;
int ReadyWeapon;

bool WeaponOwned[HexenDefs::NUMWEAPONS];

// Who did damage (none for floors/ceilings).
Actor Attacker;

// For screen flashing (red or bright).
float DamageFlash;
float BonusFlash;

// [FB] Flash for the Darkness Missile
int BlindCount;
float LastBlindTime;
Actor Blinder;		// none for non-player mobjs
int count;

int PoisonCount;	// screen flash for poison damage
float LastPoisonTime;
Actor Poisoner;		// none for non-player mobjs

float JumpTime;
int LocalQuakeHappening;

int NewTorch;	// used in the torch flicker effect.
int NewTorchDelta;

int WeaponPalette;
float MorphTime;	// player is a pig if > 0

TVec MoveDir;

// For cleric's invulnerability effect
bool bAltShadow;
bool bShadow;
bool bDontDraw;

float LastSectorDamageTime;

float HazardTime;
float LastHazardTime;

BotPlayer Bot;

Actor Rain1;	// active rain maker 1
Actor Rain2;	// active rain maker 2

bool inited;

int PuzzleItemType;
bool PuzzleActivated;
TVec PuzzleUseDir;

int pcount; // [FB] counter
int dam_am; // [FB] Just for the hero's shield

bool onground;

//==========================================================================
//
//	PutClientIntoServer
//
//==========================================================================

void PutClientIntoServer()
{
	ViewEnts[ps_weapon] = Weapon(SpawnObject(Weapon));
	ViewEnts[ps_weapon].Player = self;
	ViewEnts[ps_flash] = Weapon(SpawnObject(Weapon));
	ViewEnts[ps_flash].Player = self;
	if (bIsBot)
	{
		Bot = BotPlayer(SpawnObject(BotPlayer));
		Bot.player = self;
		Bot.OnBeginPlay();
	}

	//[CW] update all server clients' scoreboards
	ScoreboardsUpdate(false);
}

//==========================================================================
//
//  SpawnClient
//
//==========================================================================

void SpawnClient()
{
	int j;
	int oldKeys;
//	int oldPieces;
	bool oldWeaponowned[HexenDefs::NUMWEAPONS];
	bool playerWasReborn;
	int bestWeapon;

	Attacker = none;
	Poisoner = none;
	Blinder = none;

	if (Level.Game.netgame && !Level.Game.deathmatch)
	{
		// Cooperative net-play, retain keys and weapons
		oldKeys = Keys;
//		oldPieces = Pieces;
		for (j = 0; j < HexenDefs::NUMWEAPONS; j++)
		{
			oldWeaponowned[j] = WeaponOwned[j];
		}
		playerWasReborn = (PlayerState == PST_REBORN);
	}

	//  Spawn player
	if (Level.Game.deathmatch)
	{
		DeathMatchSpawnPlayer();
	}
	else
	{
		SpawnPlayer(&Level.PlayerStarts[Level.Game.RebornPosition * MAXPLAYERS +
			P_GetPlayerNum(self)]);
	}

	if (Level.Game.netgame && !Level.Game.deathmatch && playerWasReborn)
	{
		// Restore keys and weapons when reborn in co-op
		Keys = oldKeys;
//		player.Pieces = oldPieces;
		for (bestWeapon = 0, j = 0; j < HexenDefs::NUMWEAPONS; j++)
		{
			if (oldWeaponowned[j])
			{
				bestWeapon = j;
				WeaponOwned[j] = true;
			}
		}
		Mana[HexenDefs::MANA_1] = 25;
		Mana[HexenDefs::MANA_2] = 25;
		Mana[HexenDefs::MANA_3] = 25;
		if (bestWeapon)
		{
			// Bring up the best weapon
			PendingWeapon = bestWeapon;
		}
	}

	// Destroy all things touching players
	Actor(MO).TeleportMove(MO.Origin);
}

//==========================================================================
//
//  NetGameReborn
//
//==========================================================================

void NetGameReborn()
{
	int i;
	bool oldWeaponowned[HexenDefs::NUMWEAPONS];
	int oldKeys;
//	int oldPieces;
	bool foundSpot;
	int bestWeapon;

	// remove pitch and roll angles from corpse
	MO.Angles.pitch = 0.0;
	MO.Angles.roll = 0.0;

	// first dissasociate the corpse
	MO.Player = none;
	MO.bIsPlayer = false;

	// spawn at random spot if in death match
	if (Level.Game.deathmatch)
	{
		DeathMatchSpawnPlayer();
		return;
	}

	// Cooperative net-play, retain keys and weapons
	oldKeys = Keys;
//	oldPieces = Pieces;
	for (i = 0; i < HexenDefs::NUMWEAPONS; i++)
	{
		oldWeaponowned[i] = WeaponOwned[i];
	}

	foundSpot = false;
	if (CheckSpot(&Level.PlayerStarts[Level.Game.RebornPosition * MAXPLAYERS +
		P_GetPlayerNum(self)]))
	{
		// Appropriate player start spot is open
		SpawnPlayer(&Level.PlayerStarts[Level.Game.RebornPosition * MAXPLAYERS +
			P_GetPlayerNum(self)]);
		foundSpot = true;
	}
	else
	{
		// Try to spawn at one of the other player start spots
		for (i = 0; i < MAXPLAYERS; i++)
		{
			if (CheckSpot(&Level.PlayerStarts[Level.Game.RebornPosition * MAXPLAYERS + i]))
			{
				// Found an open start spot
				SpawnPlayer(&Level.PlayerStarts[Level.Game.RebornPosition * MAXPLAYERS + i]);
				foundSpot = true;
				break;
			}
		}
	}

	if (!foundSpot)
	{
		// Player's going to be inside something
		SpawnPlayer(&Level.PlayerStarts[Level.Game.RebornPosition * MAXPLAYERS +
			P_GetPlayerNum(self)]);
	}

	// Restore keys and weapons
	Keys = oldKeys;
//	Pieces = oldPieces;
	for (bestWeapon = 0, i = 0; i < HexenDefs::NUMWEAPONS; i++)
	{
		if (oldWeaponowned[i])
		{
			bestWeapon = i;
			WeaponOwned[i] = true;
		}
	}
	Mana[HexenDefs::MANA_1] = 25;
	Mana[HexenDefs::MANA_2] = 25;
	Mana[HexenDefs::MANA_3] = 25;
	if (bestWeapon)
	{
		// Bring up the best weapon
		PendingWeapon = bestWeapon;
	}
}

//==========================================================================
//
//  DisconnectClient
//
//==========================================================================

void DisconnectClient()
{
	int i;

	if (Bot != none)
	{
		Bot.Destroy();
		Bot = none;
	}
	if (MO)
	{
		MO.Player = none;
		MO.bIsPlayer = false;
		Actor(MO).Damage(none, none, 10000);
	}
	for (i = 0; i < NUMPSPRITES; i++)
	{
		if (ViewEnts[i])
		{
			ViewEnts[i].Destroy();
			ViewEnts[i] = none;
		}
	}
	bprint("%s left the game\n", ARR2STR(PlayerName));
	MO.PlayFullVolumeSound('Chat', CHAN_AUTO);

	//[CW] update all server clients' scoreboards
	ScoreboardsUpdate(false);
}

//==========================================================================
//
//  UserinfoChanged
//
//==========================================================================

void UserinfoChanged()
{
	if (!bSpawned)
	{
		return;
	}
	SetPlayerColor();

	//[CW] update all server clients' scoreboards
	ScoreboardsUpdate(false);
}

//==========================================================================
//
//  SetPlayerColor
//
//==========================================================================

void SetPlayerColor()
{
	MO.Translation = 0;
	if (PClass == HexenDefs::PCLASS_WITCHAVEN)
	{
		// [FB] The first type should be blue, and the second should be the
		// Witchaven's original red color
		if (Color == 0)
			MO.Translation = 1 + PClass * (MAXPLAYERS - 1);
		else if (Color != 1)
			MO.Translation = Color + PClass * (MAXPLAYERS - 1);
	}
	else if (PClass == HexenDefs::PCLASS_FIGHTER)
	{
		// The first type should be blue, and the third should be the
		// Fighter's original gold color
		if (Color == 0)
		{
			MO.Translation = 2;
		}
		else if (Color != 2)
		{
			MO.Translation = Color;
		}
	}
	else if (PClass == HexenDefs::PCLASS_HERETIC)
	{
		if (Color == 0)
			MO.Translation = 3 + PClass * (MAXPLAYERS - 1);
		else if (Color != 3)
			MO.Translation = Color + PClass * (MAXPLAYERS - 1);
	}
	else if (PClass == HexenDefs::PCLASS_MARINE)
	{
		if (Color == 0)
			MO.Translation = 4 + PClass * (MAXPLAYERS - 1);
		else if (Color != 4)
			MO.Translation = Color + PClass * (MAXPLAYERS - 1);
	}
	else if (Color)
	{
		// Set color translation bits for player sprites
		MO.Translation = PClass * (MAXPLAYERS - 1) + Color;
	}
}

//==========================================================================
//
//  DeathMatchSpawnPlayer
//
//  Spawns a player at one of the random death match spots called at level
// load and each death
//
//==========================================================================

void DeathMatchSpawnPlayer()
{
	int i;
	int j;

	for (j = 0; j < 20; j++)
	{
		i = P_Random() % Level.NumDeathmatchStarts;
		if (CheckSpot(&Level.DeathmatchStarts[i]))
		{
			SpawnPlayer(&Level.DeathmatchStarts[i]);
			return;
		}
	}

	// no good spot, so the player will probably get stuck 
	SpawnPlayer(&Level.PlayerStarts[P_GetPlayerNum(self)]);
}

//==========================================================================
//
//  CheckSpot
//
//  Returns false if the player cannot be respawned at the given mthing_t
// spot because something is occupying it
//
//==========================================================================

bool CheckSpot(mthing_t * mthing)
{
	float x;
	float y;
	sector_t *sec;
	float an;
	Actor A;
	int i;

	if (!MO)
	{
		// first spawn of level, before corpses
		for (i = 0; i < MAXPLAYERS; i++)
			if (Level.Game.Players[i] && Level.Game.Players[i].MO &&
				Level.Game.Players[i].MO.Origin.x == mthing->x &&
				Level.Game.Players[i].MO.Origin.y == mthing->y)
				return false;
		return true;
	}

	x = mthing->x;
	y = mthing->y;

	MO.bNoPassMobj = true;
	if (!MO.CheckPosition(vector(x, y, Actor::ONFLOORZ)))
	{
		MO.bNoPassMobj = false;
		return false;
	}
	MO.bNoPassMobj = false;

	// spawn a teleport fog 
	sec = Level.XLevel.PointInSector(vector(x, y, 0.0));
	an = itof(45 * (mthing->angle / 45));

	A = HexenLevelInfo(Level).Spawn(TeleportFog, vector(x + 20.0 * cos(an), y + 20.0 * sin(an),
		sec->floorheight + Actor::TELEFOGHEIGHT));
	A.PlaySound('Teleport', CHAN_VOICE);

	return true;
}

//==========================================================================
//
//  SpawnPlayer
//
//  Called when a player is spawned on the level.  Most of the player
// structure stays unchanged between levels.
//
//==========================================================================

void SpawnPlayer(mthing_t * mthing)
{
	int i;
	float x, y, z;
	PlayerPawn pp;

	if (PlayerState == PST_REBORN)
	{
		PlayerReborn();
	}
	if (MainGameInfo(Level.Game).randomclass && Level.Game.deathmatch)
	{
		PClass = P_Random() % 6;
		if (PClass == BaseClass)
		{
			PClass = (PClass + 1) % 6;
		}
		BaseClass = PClass;
		SB_Start();
	}
	else
	{
		PClass = BaseClass;
	}
	x = mthing->x;
	y = mthing->y;
	z = Actor::ONFLOORZ;
	switch (PClass)
	{
	case HexenDefs::PCLASS_FIGHTER:
		pp = PlayerPawn(HexenLevelInfo(Level).Spawn(PlayerFighter, vector(x, y, z)));
		break;
	case HexenDefs::PCLASS_CLERIC:
		pp = PlayerPawn(HexenLevelInfo(Level).Spawn(PlayerCleric, vector(x, y, z)));
		break;
	case HexenDefs::PCLASS_MAGE:
		pp = PlayerPawn(HexenLevelInfo(Level).Spawn(PlayerMage, vector(x, y, z)));
		break;
	case HexenDefs::PCLASS_HERETIC:
		pp = PlayerPawn(HexenLevelInfo(Level).Spawn(PlayerHeretic, vector(x, y, z)));
		break;
	case HexenDefs::PCLASS_MARINE:
		pp = PlayerPawn(HexenLevelInfo(Level).Spawn(PlayerMarine, vector(x, y, z)));
		break;
	case HexenDefs::PCLASS_WITCHAVEN:
		pp = PlayerPawn(HexenLevelInfo(Level).Spawn(PlayerWitchaven, vector(x, y, z)));
		break;
	default:
		Error("P_SpawnPlayer: Unknown class type");
		break;
	}
	pp.Origin.z += mthing->height;
	pp.LinkToWorld();

	pp.Angles.yaw = itof(45 * (mthing->angle / 45));
	pp.Player = self;
	pp.bIsPlayer = true;
	pp.Health = Health;
	MO = pp;
	PlayerState = PST_LIVE;
	Refire = 0;
	DamageFlash = 0.0;
	BonusFlash = 0.0;
	PoisonCount = 0;
	BlindCount = 0; // [FB] Reset the blind count too!
	MorphTime = 0.0;
	ExtraLight = 0;
	FixedColormap = 0;
	LastSectorDamageTime = 0.0;
	LastHazardTime = 0.0;
	ViewHeight = VIEWHEIGHT;
	ViewAngles = pp.Angles;
	bFixAngle = true;
	pcount = 0; // [FB] Reset counter

//[Korax]
	if (!inited)
	{
		InitiateLevel();
		// [FB] Start TotalKills counter with all monster count, but just once!
		if (!Level.Game.deathmatch || Level.Game.deathmatch == 5)
			TotalKills = Level.Game.level->totalkills;
		inited = true;
	}

	// [FB] Wear out any power we had
	for (i = 0; i < NUMPOWERS; i++)
		Powers[i] = 0.0;

	SetupPsprites();
	if (Level.Game.deathmatch)
	{
		// Give all keys in death match mode
		Keys = 2047;
		// [FB] Give temporary invulnerability in DM only
		GivePower(pw_invulnerability2);
	}

	// Set translation table data
	SetPlayerColor();
	if (bIsBot)
	{
		Bot.OnSpawn();
	}

	// [FB] There's a penalty for dying; you lost some experience
	if(inited && PlayerState == PST_LIVE)
	{
		experience -= (200 * exp_level);
		Actor(MO).experience = experience;

		if(experience < 0)
		{
			experience = 0; // [FB] We don't want to have negative experience, right?
		}

		Actor(MO).experience = experience;

		// [FB] But what if the experience we lost has made us lost a level??
		//	Then we use the old_level value to compare our current experience,
		//	if it is lower to it, then we activate a level less than
		//	our current one
		while(experience < old_level && exp_level >= 1/* && (cl < PCLASS_PIG)*/)
		{
			exp_level--; // [FB] Decrese experience level
			next_level = 1000 * exp_level; // [FB] Decrease the next to the old_level
			old_level = 1000 * (exp_level - 1); // [FB] Also decrease the old_level
			DeactivateLevel(exp_level); // [FB] Update Stats accordingly
		}
	}
}

//==========================================================================
//
//  PlayerReborn
//
//  Called after a player dies almost everything is cleared and initialized
//
//==========================================================================

void PlayerReborn()
{
	BotPlayer B;

	B = Bot;
	if (!inited && Level.Game.deathmatch)
	{
		ClearPlayer(self);
	}
	else if (Level.Game.deathmatch)
	{
		WeaponOwned[HexenDefs::WP_THIRD] = false;
		WeaponOwned[HexenDefs::WP_FOURTH] = false;
		WeaponOwned[HexenDefs::WP_FIFTH] = false;
		WeaponOwned[HexenDefs::WP_SIXTH] = false;
		WeaponOwned[HexenDefs::WP_SEVENTH] = false;
		WeaponOwned[HexenDefs::WP_EIGHTH] = false;
		Mana[HexenDefs::MANA_4] = 0;
		Mana[HexenDefs::MANA_5] = 0;
		ArmorPoints = 0;
	}
	Bot = B;

	PClass = BaseClass;

	bUseDown = true;	// don't do anything immediately
	bAttackDown = true;
	PlayerState = PST_LIVE;
	Health = max_health;
	WeaponOwned[HexenDefs::WP_FIRST] = true;
	WeaponOwned[HexenDefs::WP_SECOND] = true;
	Mana[HexenDefs::MANA_1] = 25;
	Mana[HexenDefs::MANA_2] = 25;
	Mana[HexenDefs::MANA_3] = 25;
	SetWeapon(HexenDefs::WP_SECOND);
	LocalQuakeHappening = 0;

	Scoreboard(false); // [CW]
}

//==========================================================================
//
//  PlayerExitMap
//
//  Called when the player leaves a map.
//
//==========================================================================

void PlayerExitMap(bool clusterChange)
{
	int i;
	float flightPower;

	// Strip all current powers (retain flight)
	flightPower = Powers[pw_flight];
	for (i = 0; i < NUMPOWERS; i++)
		Powers[i] = 0.0;
//  memset(Powers, 0, sizeof(Powers));
	Powers[pw_flight] = flightPower;

	if (Level.Game.deathmatch)
	{
		Powers[pw_flight] = 0.0;
	}
	else
	{
		if (clusterChange)
		{	// Entering new cluster
			// Strip all keys
			Keys = 0;

			// Strip flight artifact
			for (i = 0; i < 25; i++)
			{
				Powers[pw_flight] = 0.0;
				PlayerUseArtifact(HexenDefs::arti_fly);
			}
			Powers[pw_flight] = 0.0;
		}
	}

	if (MorphTime)
	{
		SetWeapon(Actor(MO)._Special1);	// Restore weapon
		MorphTime = 0.0;
	}
	MO.Angles.pitch = 0.0;
	MO.Translucency = 0;	// Remove invisibility
	ExtraLight = 0;	// Remove weapon flashes
	FixedColormap = 0;	// Remove torch
	DamageFlash = 0.0;	// No palette changes
	BonusFlash = 0.0;
	PoisonCount = 0;
	BlindCount = 0; // [FB] Reset the blind count too!
}

//==========================================================================
//
//  GiveMana
//
//  Returns true if the player accepted the mana, false if it was
// refused (player has MAX_MANA).
//
//==========================================================================

bool GiveMana(int mana, int count)
{
	int prevMana;

	if (mana == HexenDefs::MANA_NONE)
	{
		return false;
	}
	if (mana < 0 || mana >= HexenDefs::NUMMANA)
	{
		Error("Actor::GiveMana: bad type %i", mana);
	}
	if (Mana[mana] == HexenDefs::MAX_MANA)
	{
		return false;
	}
	if (Level.Game.gameskill == sk_baby || Level.Game.gameskill == sk_nightmare)
	{
		// extra mana in baby mode and nightmare mode
		count += count >> 1;
	}
	prevMana = Mana[mana];

	Mana[mana] += count;
	if (Mana[mana] > HexenDefs::MAX_MANA)
	{
		Mana[mana] = HexenDefs::MAX_MANA;
	}
	if (prevMana <= 0)
	{
		Weapon(ViewEnts[ps_weapon]).GotMana(mana);
	}
	if (Bot)
	{
		Bot.GaveMana(mana);
	}
	return true;
}

//==========================================================================
//
//  GiveBody
//
//  Returns false if the body isn't needed at all.
//
//==========================================================================

bool GiveBody(int num)
{
	int max;

	max = max_health;
	if (MorphTime)
	{
		max = MAXMORPHHEALTH;
	}
	if (Health >= max)
	{
		return false;
	}
	Health += num;
	if (Health > max)
	{
		Health = max;
	}
	MO.Health = Health;
	return true;
}

//==========================================================================
//
//  GiveArmor
//
//  Works like in Doom and Heretic now
//
//==========================================================================

bool GiveArmor(int armortype, int amount)
{
	float hits;
	float totalArmor;

	if (amount == -1)
	{
/*		hits = ArmorIncrement[Player.PClass * NUMARMOR + armortype];
		if (ArmorPoints[armortype] >= hits)
		{
			return false;
		}
		else
		{
			ArmorPoints[armortype] = hits;
		}
*/
		hits = MainGameInfo(Level.Game).ArmorIncrement[PClass * HexenDefs::NUMARMOR + armortype] * 2.0;
	}
	else
	{
/*		hits = itof(amount) * 5.0;
		totalArmor = ArmorPoints[ARMOR_ARMOR]
			+ ArmorPoints[ARMOR_SHIELD]
			+ ArmorPoints[ARMOR_HELMET]
			+ ArmorPoints[ARMOR_AMULET]
			+ AutoArmorSave[PClass];
		if (totalArmor < ArmorMax[PClass] * 5.0)
		{
			ArmorPoints[armortype] += hits;
		}
		else
		{
			return false;
		}
*/
		hits = itof(amount) * 10.0;
	}
	if (ArmorPoints < 200)
	{
		ArmorPoints += (ftoi(hits) < 200 - ArmorPoints ? ftoi(hits) : 200 - ArmorPoints);
		return true;
	}
	return false;
}
//==========================================================================
//
//  GiveKey
//
//==========================================================================

bool GiveKey(int key)
{
	if (Keys & (1 << key))
	{
		return false;
	}
	BonusFlash += Actor::BONUSADD;
	Keys |= 1 << key;
	return true;
}

//==========================================================================
//
//  GivePower
//
//  Returns true if power accepted.
//
//==========================================================================

bool GivePower(int power)
{
	if (power == pw_invulnerability)
	{
		if (Powers[power] > BLINKTHRESHOLD)
		{
			// Already have it
			return false;
		}
		Powers[power] = INVULNTIME;
		Actor(MO).bInvulnerable = true;
		// [KORAX]
		/*if (PClass == PCLASS_MAGE)
		{
			MO.bReflective = true;
		}*/
		// [KORAX]
		return true;
	}
	if (power == pw_invulnerability2)
	{
		if (Powers[power] > BLINKTHRESHOLD)
		{
			// Already have it
			return false;
		}
		Powers[power] = INVULNTIME2;
		Actor(MO).bInvulnerable = true;
		return true;
	}
	if (power == pw_flight)
	{
		if (Powers[power] > BLINKTHRESHOLD)
		{
			// Already have it
			return false;
		}
		Powers[power] = FLIGHTTIME;
		MO.bFly = true;
		MO.bNoGravity = true;
		if (MO.Origin.z <= MO.FloorZ)
		{
			FlyHeight = 10.0;	// thrust the player in the air a bit
		}
		return (true);
	}
	if (power == pw_infrared)
	{
		if (Powers[power] > BLINKTHRESHOLD)
		{
			// Already have it
			return false;
		}
		Powers[power] = INFRATIME;
		return true;
	}
	if (power == pw_speed)
	{
		if (Powers[power] > BLINKTHRESHOLD)
		{
			// Already have it
			return false;
		}
		Powers[power] = SPEEDTIME;
		return true;
	}
	if (power == pw_minotaur)
	{
		// Doesn't matter if already have power, renew ticker
		Powers[power] = MAULATORTIME;
		return true;
	}
	if (power == pw_invisibility)
	{
		if (Powers[power] > BLINKTHRESHOLD)
		{
			// Already have it
			return false;
		}
		Powers[power] = INVISTIME;
		MO.Translucency = 33;
		return true;
	}
	if (power == pw_damage)
	{
		if (Powers[power] > BLINKTHRESHOLD)
		{
			// Already have it
			return false;
		}
		Powers[power] = DAMAGETIME;
		Weapon(ViewEnts[ps_weapon]).active_damage = 1; // [FB] Adjust weapon damage
		return true;
	}
	if (Powers[power])
	{
		return false;	// already got it
	}
	Powers[power] = 1.0;
	return true;
}

//==========================================================================
//
//  GiveArtifact
//
//  Returns true if artifact accepted.
//
//==========================================================================

bool GiveArtifact(int arti)
{
//[Korax]
	if (arti == HexenDefs::arti_invulnerability)
	{
		return GivePower(pw_invulnerability);
	}
	else if (arti == HexenDefs::arti_speed)
	{
		return GivePower(pw_speed);
	}
	else if (arti == HexenDefs::arti_boostarmor)
	{
		return GiveArmor(0, 40);
	}
	else if (arti == HexenDefs::arti_summon)
	{
//		return GivePower(pw_minotaur);
		UseArtiSummon();
		return true;
	}
	else if (arti == HexenDefs::arti_torch)
	{
		return GivePower(pw_infrared);
	}
	else if (arti == HexenDefs::arti_invisibility)
	{
		return GivePower(pw_invisibility);
	}
	else if (arti == HexenDefs::arti_damage)
	{
		return GivePower(pw_damage);
	}
	else if (arti == HexenDefs::arti_egg)
	{
		UseArtiPig();
		return true;
	}
	else
	{
		return false;
	}
	int i;
	int j;
	bool slidePointer;

	slidePointer = false;
	i = 0;
	while (Inventory[i].type != arti && i < InventorySlotNum)
	{
		i++;
	}
	if (i == InventorySlotNum)
	{
		if (arti < HexenDefs::arti_firstpuzzitem)
		{
			i = 0;
			while (Inventory[i].type < HexenDefs::arti_firstpuzzitem
				&& i < InventorySlotNum)
			{
				i++;
			}
			if (i != InventorySlotNum)
			{
				for (j = InventorySlotNum; j > i; j--)
				{
					Inventory[j].count = Inventory[j - 1].count;
					Inventory[j].type = Inventory[j - 1].type;
					slidePointer = true;
				}
			}
		}
		Inventory[i].count = 1;
		Inventory[i].type = arti;
		InventorySlotNum++;
	}
	else
	{
		if (arti >= HexenDefs::arti_firstpuzzitem && Level.Game.netgame && !Level.Game.deathmatch)
		{
			// Can't carry more than 1 puzzle item in coop netplay
			return false;
		}
		if (Inventory[i].count >= 25)
		{
			// Player already has 25 of this item
			return false;
		}
		Inventory[i].count++;
	}
	if (!ArtifactCount)
	{
		ReadyArtifact = arti;
	}
	else if (slidePointer && i <= InvPtr)
	{
		InvPtr++;
		InvCurPos++;
		if (InvCurPos > 6)
		{
			InvCurPos = 6;
		}
	}
	ArtifactCount++;
	return true;
}

//[Korax]
//============================================================================
//
//  GiveExperience
//
//============================================================================

void GiveExperience(int exp)
{
	experience += exp;
	Actor(MO).experience = experience;

	if(experience > 9999)
	{
		experience = 9999;
	}

	Actor(MO).experience = experience;

	while (experience >= next_level && exp_level < 11/* && (cl < PCLASS_PIG)*/)
	{
		old_level = 1000 * (exp_level); // [FB] We need to keep this to compare it
		exp_level++;
		next_level = 1000 * exp_level;
		ActivateLevel(exp_level);
	}
}

//============================================================================
//
//  ActivateLevel
//
//  [FB] Using the new leveling system the maximum level is 10
//
//============================================================================

void ActivateLevel(int lvl)
{
	int addhealth;
	int i;

	if(exp_level < 11) // [FB] MAX Level it's 10
	{
		strength += strength * 25 / 100;
		constitution += constitution * 25 / 100;
		dexterity += dexterity * 25 / 100;
		intelligence += intelligence * 25 / 100;
		wisdom += wisdom * 25 / 100;
		old_maxhealth = max_health;
		bak_health = old_maxhealth - old_maxhealth * 9 / 100; // Save a previous level's health

		if (old_maxhealth == 212)
		{
			//	Don't do anything
			addhealth = 0;
		}
		else
		{
			if ((max_health + max_health * 9 / 100) >= 212)
			{
				addhealth = 212 - max_health;
			}
			else
			{
				addhealth = max_health * 9 / 100;
			}
		}

		if (addhealth > 0)
		{
			max_health += addhealth;
			Health = ftoi(itof(Health) / itof(old_maxhealth) * itof(max_health));
			MO.Health = Health;
		}

		cprint(self, "YOU REACHED LEVEL %d", lvl);
		MO.PlaySound('Chat', CHAN_ITEM);
	}
}

//============================================================================
//
//  DeactivateLevel
//
//  [FB] We lost a level, so we need to update the attributes then!
//
//============================================================================

void DeactivateLevel(int lvl)
{
	int addhealth;
	int i;

	if(exp_level >= 1)
	{
		strength -= strength * 25 / 100;
		constitution -= constitution * 25 / 100;
		dexterity -= dexterity * 25 / 100;
		intelligence -= intelligence * 25 / 100;
		wisdom -= wisdom * 25 / 100;

		// [FB] We already calculated the bak_health value
		if (old_maxhealth < 100)
		{
			// Don't do anything
			addhealth = 0;
		}
		else
		{
			addhealth = old_maxhealth * 9 / 100;
		}

		if (addhealth > 0)
		{
			max_health -= addhealth;
			Health = max_health; // [FB] Just make it the same as the max_health value
			MO.Health = Health;
		}

		cprint(self, "YOU LOWERED TO LEVEL %d", lvl);
		MO.PlaySound('Chat', CHAN_ITEM);
	}
}

//============================================================================
//
//  InitiateLevel
//
//============================================================================

void InitiateLevel()
{
	max_health = 100;

	exp_level = 1;
	next_level =  1000 * exp_level;
	old_level = 1000 * (exp_level - 1);
	Actor(MO).experience = 0;
	Health = max_health;
	MO.Health = Health;

	strength = PlayerPawn(MO).InitialStrength;
	wisdom = PlayerPawn(MO).InitialWisdom;
	dexterity = PlayerPawn(MO).InitialDexterity;
	constitution = PlayerPawn(MO).InitialConstitution;
	intelligence = PlayerPawn(MO).InitialIntelligence;
}

//==========================================================================
//
//  PlayerCamping
//
//  [FB] If the player camps much time he'll lost experience too
//
//==========================================================================

void PlayerCamping()
{
	// [FB] Let's see, if every a tic is 1/35 of a second, a second should
	//	be multiplied by 35 to have an equality, every 3 secs. the
	//	player stays camping (even if he's shooting), we'll start
	//	decreasing his experience according his level, so...
	int limit;

	limit = 17; // [FB] 0.5 seconds

	if(inited && (pcount >= limit) && (pcount % (1 * 35) == 0) && PlayerState == PST_LIVE)
	{
		experience -= (1 * exp_level); // [FB] Depending the player level

		if(experience < 0)
		{
			experience = 0; // [FB] We don't want to have negative experience
		}

		Actor(MO).experience = experience;

		if(pcount == 525)
		{
			pcount = 105; // [FB] To avoid overflows
		}

		// [FB] But what if the experience we lost has made us lost a level??
		//	Then we use the old_level value to compare our current experience,
		//	if it is lower than it, then we activate a level less than
		//	our current one
		while(experience < old_level && exp_level >= 1/* && (cl < PCLASS_PIG)*/)
		{
			exp_level--; // [FB] Decrese experience level
			next_level = next_level - 1000; // [FB] Decrease the next to the old_level
			old_level = old_level - 1000; // [FB] Also decrease the old_level
			DeactivateLevel(exp_level); // [FB] Update Stats accordingly
		}
	}
}	   

//==========================================================================
//
//  Scoreboard
//
// [FB] Here we keep a track of everything needed to make KA's scoreboard
//	for every gameplay mode
//
//==========================================================================

void Scoreboard(bool show)
{
	// [CW] If show == true, update scoreboard data first.
	if (show)
		ScoreboardsUpdate(true);
	
	// [CW] Set bShowScoreboard flag
	bShowScoreboard = show;
}

//==========================================================================
//
//  ScoreboardsUpdate
//
// [CW] Updates shown scoreboards of current or all the players.
// Used when a client connects to / disconnects from server, when anyone
// dies and when player info changes.
//
//==========================================================================

void ScoreboardsUpdate(bool ThisPlayerOnly)
{
	int plnum, i, j;
	Player pl;

	//[CW] iterate through all connected players
	for (plnum = 0; plnum < MAXPLAYERS; plnum++)
	{
		if (!Level.Game.Players[plnum])
			return;

		if (ThisPlayerOnly && Level.Game.Players[plnum] != self)
			continue;

		//[CW] update scoreboard for player number "plnum"
		pl = Player(Level.Game.Players[plnum]);
		for (i = 0; i < MAXPLAYERS; i++)
		{
			if (!Level.Game.Players[i])
				break;

			pl.gamescores[i].IsActive = true;
			pl.gamescores[i].plname = ARR2STR(Level.Game.Players[i].PlayerName);
			pl.gamescores[i].IsBot = Level.Game.Players[i].bIsBot;
			pl.gamescores[i].team = Level.Game.Players[i].Color;
			pl.gamescores[i].frags = Level.Game.Players[i].Frags;
			pl.gamescores[i].nplkills = Player(Level.Game.Players[i]).KillsCount;
			pl.gamescores[i].deaths = 0;

			// [CW] counts times all other players killed this one
			// (and times he was killed by self/monsters/enviroment)
			for (j = 0; j < MAXPLAYERS; j++)
			{
				if (!Level.Game.Players[j])
					break;
				pl.gamescores[i].deaths += Level.Game.Players[j].FragsStats[i];
			}
		}
	}
}

//==========================================================================
//
//  InventoryLeft
//
//==========================================================================

void InventoryLeft()
{
	if (!InventoryTime)
	{
		InventoryTime = 5.0;
		return;
	}
	InventoryTime = 5.0;
	InvPtr--;
	if (InvPtr < 0)
	{
		InvPtr = 0;
	}
	else
	{
		InvCurPos--;
		if (InvCurPos < 0)
		{
			InvCurPos = 0;
		}
	}
}

//==========================================================================
//
//  InventoryRight
//
//==========================================================================

void InventoryRight()
{
	if (!InventoryTime)
	{
		InventoryTime = 5.0;
		return;
	}
	InventoryTime = 5.0;
	InvPtr++;
	if (InvPtr >= InventorySlotNum)
	{
		InvPtr--;
		if (InvPtr < 0)
			InvPtr = 0;
	}
	else
	{
		InvCurPos++;
		if (InvCurPos > 6)
		{
			InvCurPos = 6;
		}
	}
}

//==========================================================================
//
//  InventoryUse
//
//==========================================================================

void InventoryUse()
{
	ReadyArtifact = Inventory[InvPtr].type;
	// flag to denote that it's okay to use an artifact
	if (InventoryTime)
	{
		InventoryTime = 0.0;
	}
	else
	{
		Arti = ReadyArtifact;
	}
}

//==========================================================================
//
//  InventoryTick
//
//==========================================================================

void InventoryTick(float deltaTime)
{
	// turn inventory off after a certain amount of time
	if (InventoryTime)
	{
		InventoryTime -= deltaTime;
		if (InventoryTime <= 0.0)
		{
			InventoryTime = 0.0;
			ReadyArtifact = Inventory[InvPtr].type;
		}
	}
	if (ArtifactFlash)
	{
		ArtifactFlash--;
	}
}

//==========================================================================
//
//  MovePlayer
//
//==========================================================================

void MovePlayer(float deltaTime)
{
	float fly;
	float forward;
	float side;
	TVec vforward;
	TVec vright;
	TVec vup;
	TVec wishvel;

	forward = ForwardMove;
	side = SideMove;

	switch (PClass)
	{
	// [FB] We make every class walk at the same speed now
	case HexenDefs::PCLASS_FIGHTER:
	case HexenDefs::PCLASS_CLERIC:
	case HexenDefs::PCLASS_MAGE:
	case HexenDefs::PCLASS_HERETIC:
	case HexenDefs::PCLASS_MARINE:
	case HexenDefs::PCLASS_WITCHAVEN:
		forward *= 0.9 + itof(dexterity) / 100.0;
		side *= 0.9 + itof(dexterity) / 100.0;
		break;

	case HexenDefs::PCLASS_PIG:
		forward *= 0.97 + itof(dexterity) / 100.0;
		side *= 0.97 + itof(dexterity) / 100.0;
		break;
	}

	if (Powers[pw_speed] && !MorphTime)
	{
		// Adjust for a player with a speed artifact
		forward *= 1.5;
		side *= 1.5;
	}
	if ((!Powers[pw_flight] || MO.Origin.z <= MO.FloorZ) &&
		(Actor(MO).GetFloorType() == FLOOR_ICE ||
		(MO.Sector->special & SECSPEC_BASE_MASK) == SECSPEC_FrictionLow))
	{
		forward *= 0.5;
		side *= 0.5;
	}

	// Do not let the player control movement
	//  if not onground.
	onground = (MO.Origin.z <= MO.FloorZ) || Actor(MO).bOnMobj;
	if (!(onground || MO.bFly))
	{
		//  not on ground, so little effect on velocity
		forward *= MainGameInfo(Level.Game).air_control;
		side *= MainGameInfo(Level.Game).air_control;
	}

	AngleVectors(&MO.Angles, &vforward, &vright, &vup);

	wishvel = forward * vforward + side * vright;
	if (onground && !MO.bFly)
	{
		wishvel.z = 0.0;
	}

	MO.Velocity += 5.0 * deltaTime * wishvel;
	if (forward || side)
	{
		SetPlayerRunState();
	}

	fly = FlyMove / 16.0;
	if (fly && Powers[pw_flight])
	{
		if (FlyMove != TOCENTER)
		{
			FlyHeight = fly * 2.0;
			if (!MO.bFly)
			{
				MO.bFly = true;
				MO.bNoGravity = true;
				if (MO.Velocity.z <= -39.0 * 35.0)
				{
					// stop falling scream
					MO.StopSound(CHAN_AUTO);
				}
			}
		}
		else
		{
			MO.bFly = false;
			MO.bNoGravity = false;
		}
	}
	else if (fly > 0.0)
	{
		PlayerUseArtifact(HexenDefs::arti_fly);
	}
	if (MO.bFly)
	{
		MO.Velocity.z = FlyHeight * 35.0 + wishvel.z;
		if (FlyHeight)
		{
			FlyHeight /= 2.0;
		}
	}
	if ((Buttons & BT_JUMP) && onground && !JumpTime)
	{
		if (MorphTime)
		{
			MO.Velocity.z = 6.5 * 35.0;
		}
		else
		{
			MO.Velocity.z = 9.5 * 35.0;
		}
		Actor(MO).bOnMobj = false;
		JumpTime = 0.5;
	}
}

//==========================================================================
//
//  CheckWaterJump
//
//==========================================================================

void CheckWaterJump()
{
	TVec start;
	TVec end;
	TVec vforward;

	// check for a jump-out-of-water
	AngleVector(&MO.Angles, &vforward);
	start = MO.Origin;
	start.z += MO.Height * 0.5 + 8.0;
	vforward.z = 0.0;
	vforward = Normalise(vforward);
	end = start + vforward * 24.0;
	if (!Level.TraceLine(start, end))
	{
		// solid at waist
		start.z = MO.Origin.z + MO.Height;
		end = start + vforward * 24.0;
		MoveDir = Level.trace_plane_normal * -50.0;
		if (Level.TraceLine(start, end))
		{
			// open at eye level
			Actor(MO).bWaterJump = true;
			MO.Velocity.z = 350.0;
			Actor(MO).ReactionTime = 2.0;	// safety net
		}
	}
}

//==========================================================================
//
//  WaterMove
//
//==========================================================================

void WaterMove(float deltaTime)
{
	float forward;
	float side;
	TVec vforward;
	TVec vright;
	TVec vup;
	TVec wishvel;

	// Do not let the player control movement
	//  if not onground.
	onground = (MO.Origin.z <= MO.FloorZ) || Actor(MO).bOnMobj;

	AngleVectors(&MO.Angles, &vforward, &vright, &vup);

	forward = ForwardMove;
	side = SideMove;

	//  Adjust speed depending on class. Originaly this is done in input
	// code, but to simplify it, we do it here.
	//  Fighter moves faster, cleric at original speed, mage - slower,
	// pig - slower, but faster than mage
	switch (PClass)
	{
	case HexenDefs::PCLASS_FIGHTER:
	case HexenDefs::PCLASS_CLERIC:
	case HexenDefs::PCLASS_MAGE:
	case HexenDefs::PCLASS_HERETIC:
	case HexenDefs::PCLASS_MARINE:
	case HexenDefs::PCLASS_WITCHAVEN:
		forward *= 0.9 + itof(dexterity) / 100.0;
		side *= 0.9 + itof(dexterity) / 100.0;
		break;

	case HexenDefs::PCLASS_PIG:
		forward *= 0.97 + itof(dexterity) / 100.0;
		side *= 0.97 + itof(dexterity) / 100.0;
		break;
	}

	if (Powers[pw_speed] && !MorphTime)
	{
		// Adjust for a player with a speed artifact
		forward *= 1.5;
		side *= 1.5;
	}

	wishvel = vforward * forward + vright * side;
	if (!forward && !side /* && !cmd.upmove */ )
		wishvel.z -= 60.0;	// drift towards bottom
//  	else
//      	wishvel.z += cmd.upmove;

	MO.Velocity += 3.5 * deltaTime * wishvel;

	if (forward || side)
	{
		SetPlayerRunState();
	}

	if (Buttons & BT_JUMP)
	{
		if (MO.WaterType == CONTENTS_WATER)
			MO.Velocity.z = 100.0;
		else if (MO.WaterType == CONTENTS_SLUDGE)
			MO.Velocity.z = 80.0;
		else
			MO.Velocity.z = 50.0;
	}
	CheckWaterJump();
}

//==========================================================================
//
//  WaterJump
//
//==========================================================================

void WaterJump()
{
	if (!Actor(MO).ReactionTime || !MO.WaterLevel)
	{
		Actor(MO).bWaterJump = false;
		Actor(MO).ReactionTime = 0.0;
	}
	MO.Velocity.x = MoveDir.x;
	MO.Velocity.y = MoveDir.y;
}

//==========================================================================
//
//  ThrustPlayer
//
//  Moves the given origin along a given angle.
//
//==========================================================================

void ThrustPlayer(float angle, float move, float deltaTime)
{
	if (!(Powers[pw_flight] && !(MO.Origin.z <= MO.FloorZ)) &&
		(Actor(MO).GetFloorType() == FLOOR_ICE ||
		(MO.Sector->special & SECSPEC_BASE_MASK) == SECSPEC_FrictionLow))
	{
		move *= 0.5;
	}
	MO.Velocity.x += move * cos(angle) * deltaTime;
	MO.Velocity.y += move * sin(angle) * deltaTime;
}

//==========================================================================
//
//  CalcHeight
//
//  Calculate the walking / running height adjustment
//
//==========================================================================

void CalcHeight(float deltaTime)
{
	float angle;
	float bob;

	// Regular movement bobbing
	// (needs to be calculated for gun swing
	// even if not on ground)
	// OPTIMIZE: tablify angle
	// Note: a LUT allows for effects
	//  like a ramp with low health.
	Bob = MO.Velocity.x * MO.Velocity.x + MO.Velocity.y * MO.Velocity.y;
	Bob /= 4.0 * 35.0 * 35.0;
	if (Bob > MAXBOB)
		Bob = MAXBOB;

	if (MO.bFly && !onground)
	{
		Bob = 0.5;
	}

	angle = 180.0 * 35.0 / 10.0 * Level.Game.level->time;
	bob = Bob / 2.0 * sin(angle);

	// move viewheight
	if (PlayerState == PST_LIVE)
	{
		ViewHeight += DeltaViewHeight * deltaTime;

		if (ViewHeight > VIEWHEIGHT)
		{
			ViewHeight = VIEWHEIGHT;
			DeltaViewHeight = 0.0;
		}

		if (ViewHeight < VIEWHEIGHT / 2.0)
		{
			ViewHeight = VIEWHEIGHT / 2.0;
			if (DeltaViewHeight <= 0.0)
				DeltaViewHeight = 0.00001;
		}

		if (DeltaViewHeight)
		{
			DeltaViewHeight += 256.0 * deltaTime;
			if (!DeltaViewHeight)
				DeltaViewHeight = 0.00001;
		}
	}
	if (MorphTime)
	{
		ViewOrg.z = MO.Origin.z + ViewHeight - 20.0;
	}
	else
	{
		ViewOrg.z = MO.Origin.z + ViewHeight + bob;
	}
	if (MO.FloorClip && PlayerState != PST_DEAD &&
		MO.Origin.z <= MO.FloorZ)
	{
		ViewOrg.z -= MO.FloorClip;
	}
	if (ViewOrg.z < MO.FloorZ + 4.0)
	{
		ViewOrg.z = MO.FloorZ + 4.0;
	}

	if (ViewOrg.z > MO.CeilingZ - 4.0)
		ViewOrg.z = MO.CeilingZ - 4.0;
}

//==========================================================================
//
//  PlayerInSpecialSector
//
//  Called every tic frame that the player origin is in a special sector.
//
//==========================================================================

void PlayerInSpecialSector(float deltaTime)
{
	float speed;
	float finean;

	if (MO.Origin.z != GetPlanePointZ(&MO.Sector->floor, MO.Origin))
	{
		// Player is not touching the floor
		return;
	}

	if (MO.Sector->special & SECSPEC_SECRET_MASK)
	{
		//	Secret area.
		SecretCount++;
		Level.Game.level->currentsecret++;
		MO.Sector->special &= ~SECSPEC_SECRET_MASK;
		centerprint(self, "You found a secret area");
	}

	if (MO.Sector->special <= SECSPEC_LightFlicker &&
		MO.Sector->special >= 255)
	{
		switch (MO.Sector->special)
		{
		case SECSPEC_DamageHellslime:
			if (Level.Game.level->time - LastSectorDamageTime >= 32.0 / 35.0)
			{
				LastSectorDamageTime = Level.Game.level->time;
				Actor(MO).Damage(none, none, 10);
			}
			break;
		case SECSPEC_DamageSludge:
			if (Level.Game.level->time - LastSectorDamageTime >= 32.0 / 35.0)
			{
				LastSectorDamageTime = Level.Game.level->time;
				Actor(MO).Damage(none, none, 4);
			}
			break;
		case SECSPEC_DamageNukage:
			if (Level.Game.level->time - LastSectorDamageTime >= 32.0 / 35.0)
			{
				LastSectorDamageTime = Level.Game.level->time;
				Actor(MO).Damage(none, none, 5);
			}
			break;
		case SECSPEC_LightStrobeFastDamage:
		case SECSPEC_DamageSuperHellslime:
			if (Level.Game.level->time - LastSectorDamageTime >= 32.0 / 35.0)
			{
				LastSectorDamageTime = Level.Game.level->time;
				Actor(MO).Damage(none, none, 20);
			}
			break;
		case SECSPEC_DamageSuperHellslimeExit:
			// EXIT SUPER DAMAGE! (for E1M8 finale)
			Cheats &= ~CF_GODMODE;
	
			if (Level.Game.level->time - LastSectorDamageTime >= 32.0 / 35.0)
			{
				LastSectorDamageTime = Level.Game.level->time;
				Actor(MO).Damage(none, none, 20);
			}
	
			if (Health <= 10)
			{
				G_ExitLevel(0);
			}
			break;
		case SECSPEC_DamageLavaWimpy:
			if (Level.Game.level->time - LastSectorDamageTime >= 16.0 / 35.0)
			{
				LastSectorDamageTime = Level.Game.level->time;
				Actor(MO).Damage(HexenLevelInfo(Level).GLavaInflictor, none, 5);
				Actor(MO).HitFloorType();
				MO.PlaySound('LavaSizzle', CHAN_BODY);
			}
			break;
		case SECSPEC_DamageLavaHefty:
			if (Level.Game.level->time - LastSectorDamageTime >= 16.0 / 35.0)
			{
				LastSectorDamageTime = Level.Game.level->time;
				Actor(MO).Damage(HexenLevelInfo(Level).GLavaInflictor, none, 8);
				Actor(MO).HitFloorType();
				MO.PlaySound('LavaSizzle', CHAN_BODY);
			}
			break;
		case SECSPEC_ScrollEastLavaDamage:
			ThrustPlayer(0.0, 1024.0, deltaTime);
			if (Level.Game.level->time - LastSectorDamageTime >= 16.0 / 35.0)
			{
				LastSectorDamageTime = Level.Game.level->time;
				Actor(MO).Damage(HexenLevelInfo(Level).GLavaInflictor, none, 5);
				Actor(MO).HitFloorType();
				MO.PlaySound('LavaSizzle', CHAN_BODY);
			}
			break;
		case SECSPEC_DamageHazard:
			HazardTime += 2.0 * deltaTime;
			break;
		case SECSPEC_DamageInstantDeath:
			Actor(MO).Damage(none, none, 999);
			break;
		case SECSPEC_DamageSuperHazard:
			HazardTime += 4.0 * deltaTime;
			break;
		}
	}
	else
	{
		//	Extended sector damage type.
		switch (MO.Sector->special & SECSPEC_DAMAGE_MASK)
		{
		case 0x0100:
			if (Level.Game.level->time - LastSectorDamageTime >= 32.0 / 35.0)
			{
				LastSectorDamageTime = Level.Game.level->time;
				Actor(MO).Damage(none, none, 5);
			}
			break;
		case 0x0200:
			if (Level.Game.level->time - LastSectorDamageTime >= 32.0 / 35.0)
			{
				LastSectorDamageTime = Level.Game.level->time;
				Actor(MO).Damage(none, none, 10);
			}
			break;
		case 0x0300:
			if (Level.Game.level->time - LastSectorDamageTime >= 32.0 / 35.0)
			{
				LastSectorDamageTime = Level.Game.level->time;
				Actor(MO).Damage(none, none, 20);
			}
			break;
		}
	}

	//	Apply any customizable damage
	if (MO.Sector->Damage)
	{
		if (MO.Sector->Damage < 20)
		{
			if (Level.Game.level->time - LastSectorDamageTime >= 32.0 / 35.0)
			{
				LastSectorDamageTime = Level.Game.level->time;
				Actor(MO).Damage(none, none, MO.Sector->Damage);
			}
		}
		else if (MO.Sector->Damage < 50)
		{
			if (Level.Game.level->time - LastSectorDamageTime >= 32.0 / 35.0)
			{
				LastSectorDamageTime = Level.Game.level->time;
				Actor(MO).Damage(none, none, MO.Sector->Damage);
			}
		}
		else if (Level.Game.level->time - LastSectorDamageTime >= 1.0 / 35.0)
		{
			LastSectorDamageTime = Level.Game.level->time;
			Actor(MO).Damage(none, none, MO.Sector->Damage);
		}
	}

	switch (MO.Sector->special)
	{
	case SECSPEC_ScrollCurrent:
		speed = itof((MO.Sector->tag - 100) % 10) / 16.0 * 35.0;
		finean = itof((MO.Sector->tag - 100) / 10) * 45.0;
		MO.Velocity.x += speed * cos(finean);
		MO.Velocity.y += speed * sin(finean);
		break;
	case SECSPEC_ScrollNorthSlow:
	case SECSPEC_ScrollNorthMedium:
	case SECSPEC_ScrollNorthFast:
		ThrustPlayer(90.0, MainGameInfo(Level.Game).pushTab[(MO.Sector->special &
			SECSPEC_BASE_MASK) - SECSPEC_ScrollNorthSlow], deltaTime);
		break;
	case SECSPEC_ScrollEastSlow:
	case SECSPEC_ScrollEastMedium:
	case SECSPEC_ScrollEastFast:
		ThrustPlayer(0.0, MainGameInfo(Level.Game).pushTab[(MO.Sector->special &
			SECSPEC_BASE_MASK) - SECSPEC_ScrollEastSlow], deltaTime);
		break;
	case SECSPEC_ScrollSouthSlow:
	case SECSPEC_ScrollSouthMedium:
	case SECSPEC_ScrollSouthFast:
		ThrustPlayer(270.0, MainGameInfo(Level.Game).pushTab[(MO.Sector->special &
			SECSPEC_BASE_MASK) - SECSPEC_ScrollSouthSlow], deltaTime);
		break;
	case SECSPEC_ScrollWestSlow:
	case SECSPEC_ScrollWestMedium:
	case SECSPEC_ScrollWestFast:
		ThrustPlayer(180.0, MainGameInfo(Level.Game).pushTab[(MO.Sector->special &
			SECSPEC_BASE_MASK) - SECSPEC_ScrollWestSlow], deltaTime);
		break;
	case SECSPEC_ScrollNorthWestSlow:
	case SECSPEC_ScrollNorthWestMedium:
	case SECSPEC_ScrollNorthWestFast:
		ThrustPlayer(135.0, MainGameInfo(Level.Game).pushTab[(MO.Sector->special &
			SECSPEC_BASE_MASK) - SECSPEC_ScrollNorthWestSlow], deltaTime);
		break;
	case SECSPEC_ScrollNorthEastSlow:
	case SECSPEC_ScrollNorthEastMedium:
	case SECSPEC_ScrollNorthEastFast:
		ThrustPlayer(45.0, MainGameInfo(Level.Game).pushTab[(MO.Sector->special &
			SECSPEC_BASE_MASK) - SECSPEC_ScrollNorthEastSlow], deltaTime);
		break;
	case SECSPEC_ScrollSouthEastSlow:
	case SECSPEC_ScrollSouthEastMedium:
	case SECSPEC_ScrollSouthEastFast:
		ThrustPlayer(315.0, MainGameInfo(Level.Game).pushTab[(MO.Sector->special &
			SECSPEC_BASE_MASK) - SECSPEC_ScrollSouthEastSlow], deltaTime);
		break;
	case SECSPEC_ScrollSouthWestSlow:
	case SECSPEC_ScrollSouthWestMedium:
	case SECSPEC_ScrollSouthWestFast:
		ThrustPlayer(225.0, MainGameInfo(Level.Game).pushTab[(MO.Sector->special &
			SECSPEC_BASE_MASK) - SECSPEC_ScrollSouthWestSlow], deltaTime);
		break;
	case SECSPEC_ScrollEast5:
	case SECSPEC_ScrollEast10:
	case SECSPEC_ScrollEast25:
	case SECSPEC_ScrollEast30:
	case SECSPEC_ScrollEast35:
		ThrustPlayer(0.0, MainGameInfo(Level.Game).pushTab[(MO.Sector->special &
			SECSPEC_BASE_MASK) - SECSPEC_ScrollEast5], deltaTime);
		break;
	case SECSPEC_ScrollNorth5:
	case SECSPEC_ScrollNorth10:
	case SECSPEC_ScrollNorth25:
	case SECSPEC_ScrollNorth30:
	case SECSPEC_ScrollNorth35:
		ThrustPlayer(90.0, MainGameInfo(Level.Game).pushTab[(MO.Sector->special &
			SECSPEC_BASE_MASK) - SECSPEC_ScrollNorth5], deltaTime);
		break;
	case SECSPEC_ScrollSouth5:
	case SECSPEC_ScrollSouth10:
	case SECSPEC_ScrollSouth25:
	case SECSPEC_ScrollSouth30:
	case SECSPEC_ScrollSouth35:
		ThrustPlayer(270.0, MainGameInfo(Level.Game).pushTab[(MO.Sector->special &
			SECSPEC_BASE_MASK) - SECSPEC_ScrollSouth5], deltaTime);
		break;
	case SECSPEC_ScrollWest5:
	case SECSPEC_ScrollWest10:
	case SECSPEC_ScrollWest25:
	case SECSPEC_ScrollWest30:
	case SECSPEC_ScrollWest35:
		ThrustPlayer(180.0, MainGameInfo(Level.Game).pushTab[(MO.Sector->special &
			SECSPEC_BASE_MASK) - SECSPEC_ScrollWest5], deltaTime);
		break;
	}
}

//============================================================================
//
//  PlayerOnSpecialFlat
//
//============================================================================

void PlayerOnSpecialFlat(int floorType)
{
	if (MO.Origin.z != MO.FloorZ)
	{
		// Player is not touching the floor
		return;
	}
	switch (floorType)
	{
	case FLOOR_LAVA:
		if (!(Level.Game.level->tictime & 31))
		{
			Actor(MO).Damage(HexenLevelInfo(Level).GLavaInflictor, none, 10);
			Actor(MO).HitFloorType();
			MO.PlaySound('LavaSizzle', CHAN_BODY);
		}
		break;
	default:
		break;
	}
}

//==========================================================================
//
//  PlayerInContents
//
//==========================================================================

void PlayerInContents()
{
	if (!MO.WaterLevel)
	{
		return;
	}
	switch (MO.WaterType)
	{
	case CONTENTS_LAVA:
		if (!(Level.Game.level->tictime & 31))
		{
			Actor(MO).Damage(HexenLevelInfo(Level).GLavaInflictor, none, 10);
			Actor(MO).HitFloorType();
			MO.PlaySound('LavaSizzle', CHAN_BODY);
		}
		break;
	}
}

//==========================================================================
//
//  PrevWeapon
//
//==========================================================================

void PrevWeapon()
{
	int			i;
	int			NewWeap;

	if (MorphTime)
		return;
	for (i = HexenDefs::NUMWEAPONS - 1; i > 0; i--)
	{
		NewWeap = (ReadyWeapon + i) % HexenDefs::NUMWEAPONS;
		if (WeaponOwned[NewWeap])
		{
			PendingWeapon = NewWeap;
			return;
		}
	}
}

//==========================================================================
//
//  NextWeapon
//
//==========================================================================

void NextWeapon()
{
	int			i;
	int			NewWeap;

	if (MorphTime)
		return;
	for (i = 1; i < HexenDefs::NUMWEAPONS; i++)
	{
		NewWeap = (ReadyWeapon + i) % HexenDefs::NUMWEAPONS;
		if (WeaponOwned[NewWeap])
		{
			PendingWeapon = NewWeap;
			return;
		}
	}
}

//==========================================================================
//
//  PlayerImpulse
//
//==========================================================================

void PlayerImpulse()
{
	int impulse;
	int i;

	impulse = Impulse;
	Impulse = 0;
	Arti = 0;

	if (impulse <= HexenDefs::NUMWEAPONS)
	{
		// The actual changing of the weapon is done when the weapon
		// psprite can do it (A_WeaponReady), so it doesn't happen in
		// the middle of an attack.
		if (WeaponOwned[impulse - 1] &&
			impulse - 1 != ReadyWeapon && !MorphTime)
		{
			PendingWeapon = impulse - 1;
		}
	}
	else if (impulse == 13 && !MorphTime)
	{
		int newWeapon;
		newWeapon = ReadyWeapon;
		do 
		{
			newWeapon = newWeapon -1;
			if (newWeapon == -1)
				newWeapon = HexenDefs::NUMWEAPONS -1;
		}
		while (!WeaponOwned[newWeapon]);
		if (newWeapon != ReadyWeapon)
		{
			PendingWeapon = newWeapon;
		}		
	}
	else if (impulse == 14 && !MorphTime)
	{
		int newWeapon;
		newWeapon = ReadyWeapon;
		do 
		{
			newWeapon = newWeapon + 1;
			if (newWeapon == HexenDefs::NUMWEAPONS)
				newWeapon = 0;
		}
		while (!WeaponOwned[newWeapon]);
		if (newWeapon != ReadyWeapon)
		{
			PendingWeapon = newWeapon;
		}		
	}
//[Korax]
/*	else if (impulse == 13)
	{
		InventoryLeft();
	}
	else if (impulse == 14)
	{
		InventoryRight();
	}
	else if (impulse == 15)
	{
		InventoryUse();
	}*/
	else if (impulse == 16)
	{
		Actor(MO).Damage(none, none, 10000);
	}
	else if (impulse == 17)
	{
		PrevWeapon();
	}
	else if (impulse == 18)
	{
		NextWeapon();
	}
	// [FB] We want to make the scoreboard accesible with a new impulse value
	else if (impulse == 19)
	{
		// [FB] The player is calling the scoreboard!!
		// [CW] invert (toggle) showscoreboard flag
		Scoreboard(!bShowScoreboard);
		dprint("Player::PlayerImpulse : showscoreboard = %d", bShowScoreboard);
	}

	// Hexen artifact hot keys
	if (!Arti)
	{
/*		if (impulse == 11)
		{
			Arti = NUMARTIFACTS;
		}
		else if (impulse == 12 && (Health < max_health))
		{
			Arti = arti_health;
		}
		else */	if (impulse == 10)
		{
			PlayerUseArtifact(HexenDefs::arti_poisonbag);
		}
		else if (impulse == 9)
		{
			PlayerUseArtifact(HexenDefs::arti_blastradius);
		}/*
		else if (impulse == 8)
		{
			Arti = arti_teleport;
		}
		else if (impulse == 7)
		{
			Arti = arti_teleportother;
		}
		else if (impulse == 6)
		{
			Arti = arti_egg;
		}
		else if (impulse == 5 && !Powers[pw_invulnerability])
		{
			Arti = arti_invulnerability;
		}*/
	}
/*
	if (Arti)
	{
		// Use an artifact
		if (Arti == NUMARTIFACTS)
		{
			// use one of each artifact (except puzzle artifacts)
			for (i = 1; i < arti_firstpuzzitem; i++)
			{
				PlayerUseArtifact(i);
			}
		}
		else
		{
			PlayerUseArtifact(Arti);
		}
	}
*/
//[Korax]
}

//==========================================================================
//
//  MorphPlayerThink
//
//==========================================================================

void MorphPlayerThink()
{
	//FIXME this sucks
	if (ftoi(32.0 * MorphTime) & 15)
	{
		return;
	}
	if (!(MO.Velocity.x + MO.Velocity.y) && P_Random() < 64)
	{
		// Snout sniff
		Weapon(ViewEnts[ps_weapon]).SnoutSniff();
		MO.PlaySound('PigActive1', CHAN_VOICE);	// snort
		return;
	}
	if (P_Random() < 48)
	{
		if (P_Random() < 128)
		{
			MO.PlaySound('PigActive1', CHAN_VOICE);
		}
		else
		{
			MO.PlaySound('PigActive2', CHAN_VOICE);
		}
	}
}

//==========================================================================
//
//  UndoPlayerMorph
//
//==========================================================================

bool UndoPlayerMorph()
{
	Actor fog;
	Actor A;

	MO.UnlinkFromWorld();
	switch (BaseClass)
	{
	case HexenDefs::PCLASS_FIGHTER:
		A = HexenLevelInfo(Level).Spawn(PlayerFighter, MO.Origin);
		break;
	case HexenDefs::PCLASS_CLERIC:
		A = HexenLevelInfo(Level).Spawn(PlayerCleric, MO.Origin);
		break;
	case HexenDefs::PCLASS_MAGE:
		A = HexenLevelInfo(Level).Spawn(PlayerMage, MO.Origin);
		break;
	case HexenDefs::PCLASS_HERETIC:
		A = HexenLevelInfo(Level).Spawn(PlayerHeretic, MO.Origin);
		break;
	case HexenDefs::PCLASS_MARINE:
		A = HexenLevelInfo(Level).Spawn(PlayerMarine, MO.Origin);
		break;
	case HexenDefs::PCLASS_WITCHAVEN:
		A = HexenLevelInfo(Level).Spawn(PlayerWitchaven, MO.Origin);
		break;
	default:
		Error("UndoPlayerMorph: Unknown player class %d", BaseClass);
	}
	if (!A.TestLocation())
	{
		// Didn't fit
		A.Remove();
		MO.LinkToWorld();
		MorphTime = 2.0;
		return false;
	}
	MO.LinkToWorld();
	A.Angles = MO.Angles;
	A.Player = self;
	A.bIsPlayer = true;
	A.ReactionTime = 0.5;
	if (MO.bFly)
	{
		A.bFly = true;
		A.bNoGravity = true;
	}
	MorphTime = 0.0;
	A.Health = max_health;
	Health = A.Health;
	PClass = BaseClass;
	SetPlayerColor();
	PostMorphWeapon(Actor(MO)._Special1);

	fog = HexenLevelInfo(Level).Spawn(TeleportFog, MO.Origin + vector(20.0 * cos(MO.Angles.yaw),
		20.0 * sin(MO.Angles.yaw), Actor::TELEFOGHEIGHT));
	fog.PlaySound('Teleport', CHAN_VOICE);

	MO.SetState(Actor::S_FREETARGMOBJ);
	MO = A;
	return true;
}

//==========================================================================
//
//  SetPlayerRunState
//
//==========================================================================

void SetPlayerRunState()
{
	if (MO.State == Actor(MO).IdleState)
	{
		MO.SetState(Actor(MO).SeeState);
	}
}

//==========================================================================
//
//  DeathPlayerTick
//
//  Fall on your face when dying. Decrease POV height to floor height.
//
//==========================================================================

void DeathPlayerTick(float deltaTime)
{
	int dir;
	float delta;
	int lookDelta;

	MovePsprites();
	if (MO.WaterLevel > 1)
	{
		MO.Velocity.z -= 60.0;	// drift towards bottom
	}

	onground = (MO.Origin.z <= MO.FloorZ);

	if (MO.Class == BloodySkull || MO.Class == IceChunk)
	{
		// Flying bloody skull or flying ice chunk
		ViewHeight = 6.0;
		DeltaViewHeight = 0.0;
		//player->damagecount = 20;
		if (onground)
		{
#ifdef FIXME
			if (player->lookdir < 60)
			{
				lookDelta = (60 - player->lookdir) / 8;
				if (lookDelta < 1 && (Level.Game.level->tictime & 1))
				{
					lookDelta = 1;
				}
				else if (lookDelta > 6)
				{
					lookDelta = 6;
				}
				player->lookdir += lookDelta;
			}
#endif
		}
	}
	else if (!Actor(MO).bIceDamage)
	{
		// Fall to ground (if not frozen)
		DeltaViewHeight = 0.0;
		if (ViewHeight > 6.0)
		{
			ViewHeight -= 35.0 * deltaTime;
		}
		if (ViewHeight < 6.0)
		{
			ViewHeight = 6.0;
		}
#ifdef FIXME
		if (player->lookdir > 0)
		{
			player->lookdir -= 6;
		}
		else if (player->lookdir < 0)
		{
			player->lookdir += 6;
		}
		if (abs(player->lookdir) < 6)
		{
			player->lookdir = 0;
		}
#endif
	}
	CalcHeight(deltaTime);

	if (Attacker && Attacker != MO)
	{
		// Watch killer
		dir = Actor(MO).FaceActor(Attacker, &delta);
		if (delta < 10.0)
		{
			// Looking at killer, so fade damage and poison counters
			if (DamageFlash)
			{
				DamageFlash -= deltaTime;
				if (DamageFlash <= 0.0)
					DamageFlash = 0.0;
			}
			if (PoisonCount)
			{
				PoisonCount--;
			}
		}
		delta = delta / 8.0;
		if (delta > 5.0)
		{
			delta = 5.0;
		}
		if (dir)
		{
			// Turn clockwise
			MO.Angles.yaw += delta;
		}
		else
		{	
			// Turn counter clockwise
			MO.Angles.yaw -= delta;
		}
	}
	else if (DamageFlash || PoisonCount)
	{
		if (DamageFlash)
		{
			DamageFlash -= deltaTime;
			if (DamageFlash <= 0.0)
				DamageFlash = 0.0;
		}
		else
		{
			PoisonCount--;
		}
	}

	//[CW] Show scoreboard for died player
	Scoreboard(true);

	if (Buttons & BT_USE)
	{
		Palette = 0;
		WeaponPalette = 0;
		InvPtr = 0;
		InvCurPos = 0;
		NewTorch = 0;
		NewTorchDelta = 0;
		PlayerState = PST_REBORN;
		Actor(MO)._Special1 = PClass;
		if (Actor(MO)._Special1 > 2)
		{
			Actor(MO)._Special1 = 0;
		}
		// Let the mobj know the player has entered the reborn state.  Some
		// mobjs need to know when it's ok to remove themselves.
		Actor(MO)._Special2 = 666;
	}
}

//==========================================================================
//
//  PlayerTick
//
//==========================================================================

void PlayerTick(float deltaTime)
{
	int floorType;
	int newweapon;
	Actor speedA;

	if (bIsBot)
	{
		Bot.BotTick(deltaTime);
	}

//[Korax]
	experience = Actor(MO).experience;

	// Copy view angles
	MO.Angles = ViewAngles;

	// fixme: do this in the cheat code
	if (Cheats & CF_NOCLIP)
	{
		MO.bColideWithThings = false;
		MO.bColideWithWorld = false;
	}
	else
	{
		MO.bColideWithThings = true;
		MO.bColideWithWorld = true;
	}

	if (Actor(MO).bJustAttacked)
	{
		ForwardMove = 100.0;
		SideMove = 0.0;
		Actor(MO).bJustAttacked = false;
	}

	WorldTimer++;
	InventoryTick(deltaTime);

	if (PlayerState == PST_DEAD)
	{
		DeathPlayerTick(deltaTime);
		return;
	}

	if (JumpTime)
	{
		JumpTime -= deltaTime;
		if (JumpTime <= 0.0)
			JumpTime = 0.0;
	}
	if (MorphTime)
	{
		MorphPlayerThink();
	}

	//  Move around.
	//  ReactionTime is used to prevent movement for a bit after a teleport.
	if (Actor(MO).ReactionTime)
	{
		Actor(MO).ReactionTime -= deltaTime;
		if (Actor(MO).ReactionTime <= 0.0)
			Actor(MO).ReactionTime = 0.0;
		if (Actor(MO).bWaterJump)
			WaterJump();
	}
	else
	{
		if (MO.WaterLevel >= 2)
			WaterMove(deltaTime);
		else
			MovePlayer(deltaTime);
		if (Powers[pw_speed] && !(Level.Game.level->tictime & 1) &&
			Length(MO.Velocity) > 12.0 * 35.0)
		{
			speedA = HexenLevelInfo(Level).Spawn(PlayerSpeed, MO.Origin);
			if (speedA)
			{
				speedA.Angles.yaw = MO.Angles.yaw;
				speedA.Translation = MO.Translation;
				speedA.Instigator = Actor(MO);
				speedA._Special1 = PClass;
				if (speedA._Special1 > 2)
				{
					speedA._Special1 = 0;
				}
				speedA.SpriteIndex = MO.SpriteIndex;
				speedA.FloorClip = MO.FloorClip;
#ifdef FIXME
				if (self == GPlayers[consoleplayer])
				{
					speedA.bHidden = true;
				}
#endif
			}
		}
	}

	CalcHeight(deltaTime);

	if (MO.Sector->special)
	{
		PlayerInSpecialSector(deltaTime);
	}
	floorType = Actor(MO).GetFloorType();
	if (floorType != FLOOR_SOLID)
	{
		PlayerOnSpecialFlat(floorType);
	}
	PlayerInContents();

	if (MO.Velocity.z <= -35.0 * 35.0 && MO.Velocity.z >= -40.0 * 35.0 &&
		!MorphTime && !GetSoundPlayingInfo(MO, GetSoundID('*falling')))
	{
		MO.PlaySound('*falling', CHAN_VOICE);
	}

	// Check for weapon change.
	if (Impulse)
	{
		PlayerImpulse();
	}

	// check for use
	if (Buttons & BT_USE)
	{
		if (!bUseDown)
		{
			P_UseLines();
			bUseDown = true;
		}
	}
	else
	{
		bUseDown = false;
	}

	// Morph counter
	if (MorphTime)
	{
		MorphTime -= deltaTime;
		if (MorphTime <= 0.0)
		{
			// Attempt to undo the pig
			MorphTime = 0.0;
			UndoPlayerMorph();
		}
	}

	// cycle psprites
	MovePsprites();

	// Counters, time dependend power ups.
	if (Powers[pw_invulnerability])
	{
		//[KORAX]
		/*if (PClass == PCLASS_CLERIC)
		{
			if (!(Level.Game.level->tictime & 7) && bShadow && !bDontDraw)
			{
				bShadow = false;
				if (!bAltShadow)
				{
					bDontDraw = true;
 					MO.bNonShootable = true;
				}
			}
			if (!(Level.Game.level->tictime & 31))
			{
				if (bDontDraw)
				{
					if (!bShadow)
					{
						bShadow = true;
 						bAltShadow = true;
					}
					else
					{
						bDontDraw = false;
 						MO.bNonShootable = false;
					}
				}
				else
				{
					bShadow = true;
					bAltShadow = false;
				}
			}
			if (bDontDraw)
			{
				MO.Translucency = 100;
			}
			else if (bShadow)
			{
				MO.Translucency = 66;
			}
			else if (bAltShadow)
			{
				MO.Translucency = 33;
			}
			else
			{
				MO.Translucency = 0;
			}
		}*/
		//[KORAX]
		Powers[pw_invulnerability] -= deltaTime;
		if (Powers[pw_invulnerability] <= 0.0)
		{
			Powers[pw_invulnerability] = 0.0;
			Actor(MO).bInvulnerable = false;
			//[KORAX]
			/*MO.bReflective = false;
			if (PClass == PCLASS_CLERIC)
			{
				MO.bNonShootable = false;
				MO.Translucency = 0;
			}*/
			//[KORAX]
		}
	}
	if (Powers[pw_invulnerability2])
	{
		if (!(Level.Game.level->tictime & 1) && bShadow && !bDontDraw)
		{
			bShadow = false;
			if (!bAltShadow)
			{
				bDontDraw = true;
			}
		}
		if (!(Level.Game.level->tictime & 2))
		{
			if (bDontDraw)
			{
				if (!bShadow)
				{
					bShadow = true;
					bAltShadow = true;
				}
				else
				{
					bDontDraw = false;
				}
			}
			else
			{
				bShadow = true;
				bAltShadow = false;
			}
		}
		if (!(Level.Game.level->tictime & 3) && bShadow && !bDontDraw)
		{
			bShadow = false;
			if (!bAltShadow)
			{
				bDontDraw = true;
			}
		}
		if (!(Level.Game.level->tictime & 4))
		{
			if (bDontDraw)
			{
				if (!bShadow)
				{
					bShadow = true;
					bAltShadow = true;
				}
				else
				{
					bDontDraw = false;
				}
			}
			else
			{
				bShadow = true;
				bAltShadow = false;
			}
		}
		if (bDontDraw)
		{
			MO.Translucency = 100;
		}
		else if (bShadow)
		{
			MO.Translucency = 66;
		}
		else if (bAltShadow)
		{
			MO.Translucency = 33;
		}
		else
		{
			MO.Translucency = 0;
		}
		Powers[pw_invulnerability2] -= deltaTime;
		if (Powers[pw_invulnerability2] <= 0.0)
		{
			Powers[pw_invulnerability2] = 0.0;
			Actor(MO).bInvulnerable = false;
			MO.Translucency = 0;
		}
	}
	if (Powers[pw_minotaur])
	{
		Powers[pw_minotaur] -= deltaTime;
		if (Powers[pw_minotaur] <= 0.0)
			Powers[pw_minotaur] = 0.0;
	}

	if (Powers[pw_infrared])
	{
		Powers[pw_infrared] -= deltaTime;
		if (Powers[pw_infrared] <= 0.0)
			Powers[pw_infrared] = 0.0;
	}

	if (Powers[pw_speed])
	{
		Powers[pw_speed] -= deltaTime;
		if (Powers[pw_speed] <= 0.0)
			Powers[pw_speed] = 0.0;
	}

	if (Powers[pw_flight] && Level.Game.netgame)
	{
		Powers[pw_flight] -= deltaTime;
		if (Powers[pw_flight] <= 0.0)
		{
			Powers[pw_flight] = 0.0;
			if (MO.Origin.z != MO.FloorZ)
			{
//FIXME             		player->centering = true;
			}
			MO.bFly = false;
			MO.bNoGravity = false;
		}
	}
	if (Powers[pw_invisibility])
	{
		Powers[pw_invisibility] -= deltaTime;
		if (Powers[pw_invisibility] <= 0.0)
		{
			Powers[pw_invisibility] = 0.0;
			MO.Translucency = 0;
		}
	}
	if (Powers[pw_damage])
	{
		Powers[pw_damage] -= deltaTime;
		if (Powers[pw_damage] <= 0.0)
		{
			Powers[pw_damage] = 0.0;
			Weapon(ViewEnts[ps_weapon]).active_damage = 0; // [FB] Return to using normal damage
		}
	}


	if (PoisonCount && Level.Game.level->time - LastPoisonTime >= 0.5)
	{
		PoisonCount -= 5;
		if (PoisonCount < 0)
		{
			PoisonCount = 0;
		}
		LastPoisonTime = Level.Game.level->time;
		Actor(MO).PoisonDamage(Poisoner, 1, true);
	}

	// [FB] Darkness blinding effect
	if (BlindCount && Level.Game.level->time - LastBlindTime >= 0.5)
	{
		BlindCount -= 5;
		count += 1;
		if (BlindCount < 0)
		{
			BlindCount = 0;
		}
		LastBlindTime = Level.Game.level->time;
		if(count % 5 == 0) // [FB] Damage the blinded player after some time
		{
			Actor(MO).BlindDamage(Blinder, 1, true);
		}
	}

	if (DamageFlash)
	{
		DamageFlash -= deltaTime;
		if (DamageFlash <= 0.0)
			DamageFlash = 0.0;
	}

	if (BonusFlash)
	{
		BonusFlash -= deltaTime;
		if (BonusFlash <= 0.0)
			BonusFlash = 0.0;
	}

	if (HazardTime)
	{
		HazardTime -= deltaTime;
		if (HazardTime <= 0.0)
			HazardTime = 0.0;
		if (Level.Game.level->time - LastHazardTime >= 32.0 / 35.0 &&
			HazardTime > 16.0)
		{
			LastHazardTime = Level.Game.level->time;
			Actor(MO).Damage(none, none, 5);
		}
	}

	// Handling colormaps.
	if (Powers[pw_infrared])
	{
		if (Powers[pw_infrared] <= BLINKTHRESHOLD)
		{
			if (ftoi(Powers[pw_infrared] * 35.0) & 8)
			{
				FixedColormap = 0;
			}
			else
			{
				FixedColormap = 1;
			}
		}
		else if (!(Level.Game.level->tictime & 16))
		{
			if (NewTorch)
			{
				if (FixedColormap + NewTorchDelta > 7 ||
					FixedColormap + NewTorchDelta < 1 ||
					FixedColormap == NewTorch)
				{
					NewTorch = 0;
				}
				else
				{
					FixedColormap += NewTorchDelta;
				}
			}
			else
			{
				NewTorch = (P_Random() & 7) + 1;
				NewTorchDelta = (NewTorch == FixedColormap) ? 0 :
					((NewTorch > FixedColormap) ? 1 : -1);
			}
		}
	}
	else
		FixedColormap = 0;

	if((MO.Velocity.x == 0.0) || (MO.Velocity.y == 0.0)) // [FB] Check for the player camping
	{
		pcount++;
		PlayerCamping();
	}
	else if((MO.Velocity.x != 0.0) || (MO.Velocity.y != 0.0)) // [FB] The player is moving
	{
		pcount = 0;
	}
}

//==========================================================================
//
//  PaletteFlash
//
//  Sets the new palette based upon the current values of
// Player.DamageFlash and Player.BonusFlash.
//
//==========================================================================

void PaletteFlash()
{
	CShifts[CSHIFT_CONTENTS] = 0;
	if (MO.WaterLevel == 3)
	{
		switch (MO.WaterType)
		{
		case CONTENTS_WATER:
			if (BlindCount > 40) // [FB] Black palette for blinding effect
			{
				CShifts[CSHIFT_CONTENTS] = CSHIFT(0, 0, 0, BlindCount);
			}
			else
			{
				CShifts[CSHIFT_CONTENTS] = CSHIFT(130, 80, 50, 128);
			}
			break;

		case CONTENTS_SLUDGE:
			if (BlindCount > 40) // [FB] Black palette for blinding effect
			{
				CShifts[CSHIFT_CONTENTS] = CSHIFT(0, 0, 0, BlindCount);
			}
			else
			{
				CShifts[CSHIFT_CONTENTS] = CSHIFT(128, 160, 128, 150);
			}
			break;

		case CONTENTS_LAVA:
			if (BlindCount > 40) // [FB] Black palette for blinding effect
			{
				CShifts[CSHIFT_CONTENTS] = CSHIFT(0, 0, 0, BlindCount);
			}
			else
			{
				CShifts[CSHIFT_CONTENTS] = CSHIFT(255, 80, 0, 150);
			}
			break;
		}
	}
	else if (BlindCount) // [FB] Black palette for blinding effect
		CShifts[CSHIFT_CONTENTS] = CSHIFT(0, 0, 0, BlindCount);

	if (PoisonCount)
	{
		Palette = ((32 * PoisonCount) + 7) >> 3;
		if (Palette >= NUMPOISONPALS)
		{
			Palette = NUMPOISONPALS - 1;
		}
		Palette += STARTPOISONPALS;
	}
	else if (DamageFlash)
	{
		Palette = (ftoi(32.0 * DamageFlash) + 7) >> 3;
		if (Palette >= NUMREDPALS)
		{
			Palette = NUMREDPALS - 1;
		}
		Palette += STARTREDPALS;
	}
	else if (BonusFlash)
	{
		Palette = (ftoi(32.0 * BonusFlash) + 7) >> 3;
		if (Palette >= NUMBONUSPALS)
		{
			Palette = NUMBONUSPALS - 1;
		}
		Palette += STARTBONUSPALS;
	}
	else if (Actor(MO).bIceDamage)
	{
		// Frozen player
		Palette = STARTICEPAL;
	}
	else
	{
		Palette = WeaponPalette;
	}
}

//==========================================================================
//
//  SetViewPos
//
//==========================================================================

void SetViewPos()
{
	ViewOrg.x = MO.Origin.x;
	ViewOrg.y = MO.Origin.y;

	if (LocalQuakeHappening)
	{
		float intensity;

		intensity = itof(LocalQuakeHappening);
		ViewOrg.x += (Random() - 0.5) * (intensity * 4.0);
		ViewOrg.y += (Random() - 0.5) * (intensity * 4.0);
	}

	ViewAngles = MO.Angles;

	PaletteFlash();

	SBFlags = Keys;
	SBFlags |= ReadyWeapon << HexenDefs::SBF_WPN_SHIFT;
//[Korax]
//	Stats.flags |= Pieces << SBF_PIECES_SHIFT;
	if (Powers[pw_flight])
	{
		if (Powers[pw_flight] > BLINKTHRESHOLD ||
			!(ftoi(Powers[pw_flight] * 35.0) & 16))
		{
			SBFlags |= HexenDefs::SBF_POWER_FLIGHT;
		}
	}
	if (Powers[pw_speed])
	{
		if (Powers[pw_speed] > BLINKTHRESHOLD ||
			!(ftoi(Powers[pw_speed] * 35.0) & 16))
		{
			SBFlags |= HexenDefs::SBF_POWER_SPEED;
		}
	}
	if (Powers[pw_invulnerability])
	{
		if (Powers[pw_invulnerability] > BLINKTHRESHOLD ||
			!(ftoi(Powers[pw_invulnerability] * 35.0) & 16))
		{
			SBFlags |= HexenDefs::SBF_POWER_INVULN;
		}
	}
	if (Powers[pw_minotaur])
	{
		if (Powers[pw_minotaur] > BLINKTHRESHOLD ||
			!(ftoi(Powers[pw_minotaur] * 35.0) & 16))
		{
			SBFlags |= HexenDefs::SBF_POWER_MINOTAUR;
		}
	}
	if (Powers[pw_invisibility])
	{
		if (Powers[pw_invisibility] > BLINKTHRESHOLD ||
			!(ftoi(Powers[pw_invisibility] * 35.0) & 16))
		{
			SBFlags |= HexenDefs::SBF_POWER_INVISIBILITY;
		}
	}
	if (Powers[pw_damage])
	{
		if (Powers[pw_damage] > BLINKTHRESHOLD ||
			!(ftoi(Powers[pw_damage] * 35.0) & 16))
		{
			SBFlags |= HexenDefs::SBF_POWER_DAMAGE;
		}
	}
	if (MO.bFly)
	{
		SBFlags |= HexenDefs::SBF_IN_FLIGHT;
	}
}

//==========================================================================
//
//  PlayerUseArtifact
//
//==========================================================================

void PlayerUseArtifact(int arti)
{
//[Korax]
	if (arti == HexenDefs::arti_poisonbag)
	{
		int manause = 20;
		manause = manause * 10 / wisdom;
		if (Mana[HexenDefs::MANA_5] >= manause)
		{
			UseArtiPoisonBag();
			Mana[HexenDefs::MANA_5] -= manause;
		}
		return;
	}
	else if (arti == HexenDefs::arti_blastradius)
	{
		int manause = 20;
		manause = manause * 10 / wisdom;
		if (Mana[HexenDefs::MANA_4] >= manause)
		{
			UseArtiBlastRadius();
			Mana[HexenDefs::MANA_4] -= manause;
		}
		return;
	}
//[Korax]

	int i;

	for (i = 0; i < InventorySlotNum; i++)
	{
		if (Inventory[i].type == arti)
		{
			// Found match - try to use
			if (UseArtifact(arti))
			{
				// Artifact was used - remove it from inventory
				PlayerRemoveArtifact(i);
				if (arti < HexenDefs::arti_firstpuzzitem)
				{
					MO.PlaySound('UseArtifact', CHAN_ITEM);
				}
				else
				{
					MO.PlaySound('PuzzleSuccess', CHAN_ITEM);
				}
				ArtifactFlash = 4;
			}
			else if (arti < HexenDefs::arti_firstpuzzitem)
			{
				// Unable to use artifact, advance pointer
				PlayerNextArtifact();
			}
			break;
		}
	}

}

//==========================================================================
//
//  PlayerNextArtifact
//
//==========================================================================

void PlayerNextArtifact()
{
	InvPtr--;
	if (InvPtr < 6)
	{
		InvCurPos--;
		if (InvCurPos < 0)
		{
			InvCurPos = 0;
		}
	}
	if (InvPtr < 0)
	{
		InvPtr = InventorySlotNum - 1;
		if (InvPtr < 6)
		{
			InvCurPos = InvPtr;
		}
		else
		{
			InvCurPos = 6;
		}
	}
	ReadyArtifact = Inventory[InvPtr].type;
}

//==========================================================================
//
//  PlayerRemoveArtifact
//
//==========================================================================

void PlayerRemoveArtifact(int slot)
{
	int i;

	ArtifactCount--;
	if (!(--Inventory[slot].count))
	{
		// Used last of a type - compact the artifact list
		ReadyArtifact = HexenDefs::arti_none;
		Inventory[slot].type = HexenDefs::arti_none;
		for (i = slot + 1; i < InventorySlotNum; i++)
		{
			Inventory[i - 1].type = Inventory[i].type;
			Inventory[i - 1].count = Inventory[i].count;
		}
		InventorySlotNum--;
		// Set position markers and get next ReadyArtifact
		InvPtr--;
		if (InvPtr < 6)
		{
			InvCurPos--;
			if (InvCurPos < 0)
			{
				InvCurPos = 0;
			}
		}
		if (InvPtr >= InventorySlotNum)
		{
			InvPtr = InventorySlotNum - 1;
		}
		if (InvPtr < 0)
		{
			InvPtr = 0;
		}
		ReadyArtifact = Inventory[InvPtr].type;
	}
}

//==========================================================================
//
//  UseArtifact
//
//  Returns true if the artifact was used.
//
//==========================================================================

bool UseArtifact(int arti)
{
	int i;
	int count;

	switch (arti)
	{
	case HexenDefs::arti_health:
		if (!GiveBody(25))
		{
			return false;
		}
		break;
	case HexenDefs::arti_superhealth:
		if (!GiveBody(100))
		{
			return false;
		}
		break;
	case HexenDefs::arti_invulnerability:
		if (!GivePower(pw_invulnerability))
		{
			return false;
		}
		break;
	case HexenDefs::arti_torch:
		if (!GivePower(pw_infrared))
		{
			return false;
		}
		break;
	case HexenDefs::arti_fly:
		if (!GivePower(pw_flight))
		{
			return false;
		}
		if (MO.Velocity.z <= -35.0 * 35.0)
		{
			// stop falling scream
			MO.StopSound(CHAN_AUTO);
		}
		break;
	case HexenDefs::arti_teleport:
		UseArtiTele();
		break;
	case HexenDefs::arti_egg:
		UseArtiPig();
		break;
	case HexenDefs::arti_healingradius:
		if (!UseArtiHealRadius())
		{
			return false;
		}
		break;
	case HexenDefs::arti_summon:
		UseArtiSummon();
		break;
	case HexenDefs::arti_blastradius:
		UseArtiBlastRadius();
		break;
	case HexenDefs::arti_poisonbag:
		UseArtiPoisonBag();
		break;
	case HexenDefs::arti_teleportother:
		UseArtiTeleportOther();
		break;
	case HexenDefs::arti_speed:
		if (!GivePower(pw_speed))
		{
			return false;
		}
		break;
	case HexenDefs::arti_boostmana:
		if (!GiveMana(HexenDefs::MANA_3, HexenDefs::MAX_MANA))
		{
			return false;
		}
		break;
	case HexenDefs::arti_boostarmor:
		count = 0;

		for (i = 0; i < HexenDefs::NUMARMOR; i++)
		{
			count += GiveArmor(i, 1);	// 1 point per armor type
		}
		if (!count)
		{
			return false;
		}
		break;
	case HexenDefs::arti_invisibility:
		if (!GivePower(pw_invisibility))
		{
			return false;
		}
		break;
	case HexenDefs::arti_damage:
		if (!GivePower(pw_damage))
		{
			return false;
		}
		break;

	case HexenDefs::arti_puzzskull:
	case HexenDefs::arti_puzzgembig:
	case HexenDefs::arti_puzzgemred:
	case HexenDefs::arti_puzzgemgreen1:
	case HexenDefs::arti_puzzgemgreen2:
	case HexenDefs::arti_puzzgemblue1:
	case HexenDefs::arti_puzzgemblue2:
	case HexenDefs::arti_puzzbook1:
	case HexenDefs::arti_puzzbook2:
	case HexenDefs::arti_puzzskull2:
	case HexenDefs::arti_puzzfweapon:
	case HexenDefs::arti_puzzcweapon:
	case HexenDefs::arti_puzzmweapon:
	case HexenDefs::arti_puzzgear1:
	case HexenDefs::arti_puzzgear2:
	case HexenDefs::arti_puzzgear3:
	case HexenDefs::arti_puzzgear4:
		if (P_UsePuzzleItem(arti - HexenDefs::arti_firstpuzzitem))
		{
			return true;
		}
		else
		{
			centerprint(self, "YOU CANNOT USE THIS HERE");
			return false;
		}
		break;
	default:
		return false;
	}
	return true;
}

//==========================================================================
//
//  UseArtiTele
//
//==========================================================================

void UseArtiTele()
{
	int i;
	float destX;
	float destY;
	float destAngle;

	if (Level.Game.deathmatch)
	{
		i = P_Random() % Level.NumDeathmatchStarts;
		destX = Level.DeathmatchStarts[i].x;
		destY = Level.DeathmatchStarts[i].y;
		destAngle = itof(45 * (Level.DeathmatchStarts[i].angle / 45));
	}
	else
	{
		destX = Level.PlayerStarts[0].x;
		destY = Level.PlayerStarts[0].y;
		destAngle = itof(45 * (Level.PlayerStarts[0].angle / 45));
	}
	Actor(MO).Teleport(vector(destX, destY, Actor::ONFLOORZ), destAngle, true, true,
		false);
	if (MorphTime)
	{
		// Teleporting away will undo any morph effects (pig)
		UndoPlayerMorph();
	}
}

//==========================================================================
//
//  UseArtiPig
//
//==========================================================================

void UseArtiPig()
{
	int i;

	for(i = 0; i < 49; i++)
	{
		SpawnPlayerMissileAngle(EggMissile, AngleMod360(MO.Angles.yaw - 7.5 * itof(i)));
		SpawnPlayerMissileAngle(EggMissile, AngleMod360(MO.Angles.yaw + 7.5 * itof(i)));
	}
}

//==========================================================================
//
//  UseArtiHealRadius
//
//  Do class specific effect for everyone in radius
//
//==========================================================================

bool UseArtiHealRadius()
{
	PlayerPawn P;
	float dist;
	int effective = false;
	int amount;

	FOREACH(PlayerPawn, P)
	{
		if (!P.bIsPlayer)
			continue;
		if (P.Health <= 0)
			continue;
		dist = MO.DistTo(P);
		if (dist > HEAL_RADIUS_DIST)
		{
			// Out of range
			continue;
		}

		switch (PClass)
		{
		case HexenDefs::PCLASS_FIGHTER:	// Radius armor boost
			if ((Player(P.Player).GiveArmor(HexenDefs::ARMOR_ARMOR, 1)) ||
				(Player(P.Player).GiveArmor(HexenDefs::ARMOR_SHIELD, 1)) ||
				(Player(P.Player).GiveArmor(HexenDefs::ARMOR_HELMET, 1)) ||
				(Player(P.Player).GiveArmor(HexenDefs::ARMOR_AMULET, 1)))
			{
				effective = true;
				P.PlaySound('MysticIncant', CHAN_ITEM);
			}
			break;
		case HexenDefs::PCLASS_CLERIC:	// Radius heal
			amount = 50 + (P_Random() % 50);
			if (Player(P.Player).GiveBody(amount))
			{
				effective = true;
				P.PlaySound('MysticIncant', CHAN_ITEM);
			}
			break;
		case HexenDefs::PCLASS_MAGE:	// Radius mana boost
			amount = 50 + (P_Random() % 50);
			if ((Player(P.Player).GiveMana(HexenDefs::MANA_1, amount)) ||
				(Player(P.Player).GiveMana(HexenDefs::MANA_2, amount)) ||
				(Player(P.Player).GiveMana(HexenDefs::MANA_3, amount)))
			{
				effective = true;
				P.PlaySound('MysticIncant', CHAN_ITEM);
			}
			break;
		case HexenDefs::PCLASS_PIG:
		default:
			break;
		}
	}
	return effective;
}

//==========================================================================
//
//  UseArtiSummon
//
//  [FB] Original function
//
//==========================================================================

void UseArtiSummon()
{
/*	Actor mo;

	mo = SpawnPlayerMissile(SummonMissile);
	if (mo)
	{
		mo.Instigator = MO;
		mo.Velocity.z = 5.0 * 35.0;
	}*/
//                          ^
// [FB] Old behaviour above |
	int i;
	float x;
	float y;
	float z;
	TVec Orig;
	TVec dir;
	Actor fog, newmobj;

	if (!HexenLevelInfo(Level).MinotaurSpotCount)
	{
		// No spots
		return;
	}
	i = P_Random();

	i++;
	x = HexenLevelInfo(Level).MinotaurSpot[i % HexenLevelInfo(Level).MinotaurSpotCount].x;
	y = HexenLevelInfo(Level).MinotaurSpot[i % HexenLevelInfo(Level).MinotaurSpotCount].y;
	z = HexenLevelInfo(Level).MinotaurSpot[i % HexenLevelInfo(Level).MinotaurSpotCount].z;
	dir = HexenLevelInfo(Level).MinotaurSpot[i % HexenLevelInfo(Level).MinotaurSpotCount] /*-Origin*/;
	Orig = vector(x, y, z);

	fog = HexenLevelInfo(Level).Spawn(TeleportFog, Orig);
	fog.PlaySound('Teleport', CHAN_VOICE);
	newmobj = HexenLevelInfo(Level).Spawn(SummonMissile, Orig);
	newmobj.Origin = Orig;
	newmobj.Angles.yaw = HexenLevelInfo(Level).MinotaurSpot_angle[i % HexenLevelInfo(Level).MinotaurSpotCount];
	newmobj.Velocity.z = 5.0 * 35.0;
	newmobj.Instigator = Actor(MO);
	newmobj.bTelestomp = true;
}

//==========================================================================
//
//  UseArtiBlastRadius
//
//  Blast all mobj things away
//
//==========================================================================

void UseArtiBlastRadius()
{
	Actor mo;
	float dist;

	MO.PlaySound('BlastRadius', CHAN_ITEM);
	HexenLevelInfo(Level).NoiseAlert(Actor(MO), Actor(MO));

	FOREACH(Actor, mo)
	{
		if ((mo == MO) || mo.bBoss)
		{
			// Not a valid monster
			continue;
		}
		if ((mo.Class == PoisonCloud) ||	// poison cloud
			(mo.Class == HolyFX) ||		// holy fx
			mo.bIceCorpse)			// frozen corpse
		{
			// Let these special cases go
		}
		else if (mo.bCountKill && (mo.Health <= 0))
		{
			continue;
		}
		else if (!mo.bCountKill && !mo.bIsPlayer && !mo.bMissile)
		{
			// Must be monster, player, or missile
			continue;
		}
		if (mo.bDormant)
		{
			continue;	// no dormant creatures
		}
		if ((mo.Class == WraithBuried) && mo.bHidden)
		{
			continue;	// no underground wraiths
		}
		if ((mo.Class == SplashBase) || (mo.Class == Splash))
		{
			continue;
		}
		if (mo.Class == Serpent || mo.Class == SerpentLeader)
		{
			continue;
		}
		dist = MO.DistTo(mo);
		if (dist > BLAST_RADIUS_DIST)
		{
			// Out of range
			continue;
		}
		mo.Blast(Actor(MO), BLAST_FULLSTRENGTH);
	}
}

//==========================================================================
//
//  UseArtiPoisonBag
//
//==========================================================================

void UseArtiPoisonBag()
{
	float angle;
	Actor bomb;

	angle = MO.Angles.yaw;
	if (PClass == HexenDefs::PCLASS_CLERIC || PClass == HexenDefs::PCLASS_WITCHAVEN)
	{
		bomb = HexenLevelInfo(Level).Spawn(PoisonBag, MO.Origin +
			vector(16.0 * cos(angle), 24.0 * sin(angle), 8.0 - MO.FloorClip));
		if (bomb)
		{
			bomb.Instigator = Actor(MO);
		}
	}
	else if (PClass == HexenDefs::PCLASS_MAGE || PClass == HexenDefs::PCLASS_HERETIC)
	{
		bomb = HexenLevelInfo(Level).Spawn(FireBomb, MO.Origin +
			vector(16.0 * cos(angle), 24.0 * sin(angle), 8.0 - MO.FloorClip));
		if (bomb)
		{
			bomb.Instigator = Actor(MO);
		}
	}
	else	// PCLASS_FIGHTER && PCLASS_MARINE, obviously (also pig, not so obviously)
	{
		bomb = HexenLevelInfo(Level).Spawn(ThrowingBomb, MO.Origin +
			vector(0.0, 0.0, 35.0 - MO.FloorClip));
		if (bomb)
		{
			bomb.Angles.yaw = AngleMod360(MO.Angles.yaw +
				(Random() * 2.0 - 1.0) * 45.0 / 8.0);
			bomb.Velocity.z =
				(4.0 + 173.0 * -tan(MO.Angles.pitch) / 16.0) * 35.0;
			bomb.Origin.z += 173.0 * -tan(MO.Angles.pitch) / 16.0;
			bomb.Velocity.x += bomb.Speed * cos(bomb.Angles.yaw);
			bomb.Velocity.y += bomb.Speed * sin(bomb.Angles.yaw);
			bomb.Velocity.x += MO.Velocity.x / 2.0;
			bomb.Velocity.y += MO.Velocity.y / 2.0;
			bomb.Instigator = Actor(MO);
			bomb.StateTime -= Random() * 0.1;
			bomb.CheckMissileSpawn();
		}
	}
}

//==========================================================================
//
//  UseArtiTeleportOther
//
//==========================================================================

void UseArtiTeleportOther()
{
	Actor mo;

	mo = SpawnPlayerMissile(TeleportOtherFX1);
	if (mo)
	{
		mo.Instigator = Actor(MO);
	}
}

//==========================================================================
//
//  SpawnPlayerMissile
//
//  Tries to aim at a nearby monster
//
//==========================================================================

Actor SpawnPlayerMissile(classid type)
{
	return SpawnPlayerMissile2(type, true);
}

//==========================================================================
//
//  SpawnPlayerMissile2
//
//  Tries to aim at a nearby monster
//
//==========================================================================

Actor SpawnPlayerMissile2(classid type, bool explode)
{
	Actor MissileMobj;
	TAVec angles;
	TVec vforward;
	TVec org;

	// Try to find a target
	angles = MO.Angles;
	Actor(MO).AimLineAttack(&angles, 16.0 * 64.0);
	if (!Actor(MO).linetarget)
	{
		angles.yaw = AngleMod360(angles.yaw + 45.0 / 8.0);
		Actor(MO).AimLineAttack(&angles, 16.0 * 64.0);
		if (!Actor(MO).linetarget)
		{
			angles.yaw = AngleMod360(angles.yaw - 45.0 / 4.0);
			Actor(MO).AimLineAttack(&angles, 16.0 * 64.0);
			if (!Actor(MO).linetarget)
			{
				angles.yaw = MO.Angles.yaw;
			}
		}
	}
	org = MO.Origin;
	if (type == LightningFloor)
	{
		org.z = Actor::ONFLOORZ;
		angles.pitch = 0.0;
	}
	else if (type == LightningCeiling)
	{
		org.z = Actor::ONCEILINGZ;
		angles.pitch = 0.0;
	}
	else
	{
		org.z = MO.Origin.z + 4.0 * 8.0 - tan(MO.Angles.pitch);
		org.z -= MO.FloorClip;
	}
	MissileMobj = HexenLevelInfo(Level).Spawn(type, org);
	MissileMobj.Instigator = Actor(MO);
	MissileMobj.Angles = angles;
	AngleVector(&angles, &vforward);
	MissileMobj.Velocity = vforward * MissileMobj.Speed;
	if (MissileMobj.Class == MageWandMissile || MissileMobj.Class == MageWandRedMissile ||
		 MissileMobj.Class == MageWandGreyMissile || MissileMobj.Class == ClericFlameMissile)
	{
		// Ultra-fast ripper spawning missile
		MissileMobj.Origin += MissileMobj.Velocity * Level.Game.frametime / 8.0;
	}
	else
	{
		// Normal missile
		MissileMobj.Origin += MissileMobj.Velocity * Level.Game.frametime / 2.0;
	}
	if (explode)
	{
		if (!MissileMobj.TryMove(MissileMobj.Origin))
		{
			// Exploded immediately
			MissileMobj.ExplodeMissile();
			return none;
		}
	}
	return MissileMobj;
}

//===========================================================================
//
//  SpawnPlayerMissileAngle
//
//===========================================================================

Actor SpawnPlayerMissileAngle(classid type, float angle)
{
	TAVec angles;
	TVec vforward;
	Actor th;
	TVec org;

	//
	// see which target is to be aimed at
	//
	angles = MO.Angles;
	angles.yaw = angle;
	Actor(MO).AimLineAttack(&angles, 16.0 * 64.0);
	if (!Actor(MO).linetarget)
	{
		angles.yaw = AngleMod360(angles.yaw + 45.0 / 8.0);
		Actor(MO).AimLineAttack(&angles, 16.0 * 64.0);
		if (!Actor(MO).linetarget)
		{
			angles.yaw = AngleMod360(angles.yaw - 45.0 / 4.0);
			Actor(MO).AimLineAttack(&angles, 16.0 * 64.0);
			if (!Actor(MO).linetarget)
			{
				angles.yaw = angle;
			}
		}
	}
	org = MO.Origin;
	org.z = MO.Origin.z + 4.0 * 8.0 - tan(MO.Angles.pitch);
	org.z -= MO.FloorClip;
	th = HexenLevelInfo(Level).Spawn(type, org);
	th.Instigator = Actor(MO);
	th.Angles = angles;
	AngleVector(&angles, &vforward);
	th.Velocity = vforward * th.Speed;
	return th.CheckMissileSpawn() ? th : none;
}

//===========================================================================
//
//  SpawnPlayerMissileAngleXYZ
//
//===========================================================================

Actor SpawnPlayerMissileAngleXYZ(TVec org, classid type, float angle)
{
	Actor th;
	TAVec angles;
	TVec vforward;

	//
	// see which target is to be aimed at
	//
	angles = MO.Angles;
	angles.yaw = angle;
	Actor(MO).AimLineAttack(&angles, 16.0 * 64.0);
	if (!Actor(MO).linetarget)
	{
		angles.yaw = AngleMod360(angles.yaw + 45.0 / 8.0);
		Actor(MO).AimLineAttack(&angles, 16.0 * 64.0);
		if (!Actor(MO).linetarget)
		{
			angles.yaw = AngleMod360(angles.yaw - 45.0 / 4.0);
			Actor(MO).AimLineAttack(&angles, 16.0 * 64.0);
			if (!Actor(MO).linetarget)
			{
				angles.yaw = angle;
			}
		}
	}
	org.z += 4.0 * 8.0 - tan(MO.Angles.pitch);
	org.z -= MO.FloorClip;
	th = HexenLevelInfo(Level).Spawn(type, org);
	th.Instigator = Actor(MO);
	th.Angles = angles;
	AngleVector(&angles, &vforward);
	th.Velocity = vforward * th.Speed;
	return th.CheckMissileSpawn() ? th : none;
}

//============================================================================
//
//  AdjustPlayerAngle
//
//============================================================================

void AdjustPlayerAngle()
{
	float angle;
	float difference;

	angle = atan2(Actor(MO).linetarget.Origin.y - MO.Origin.y,
		Actor(MO).linetarget.Origin.x - MO.Origin.x);
	difference = AngleMod180(angle - MO.Angles.yaw);
	if (fabs(difference) > 5.0)
	{
		MO.Angles.yaw += difference > 0.0 ? 5.0 : -5.0;
	}
	else
	{
		MO.Angles.yaw = angle;
	}
	bFixAngle = true;
}

//****************************************************************************
//
//  WEAPON UTILITES
//
//****************************************************************************

//==========================================================================
//
//	SetWeapon
//
//==========================================================================

void SetWeapon(int NewWeapon)
{
	ReadyWeapon = NewWeapon;
	PendingWeapon = HexenDefs::wp_nochange;

	if (ViewEnts[ps_weapon])
	{
		ViewEnts[ps_weapon].Destroy();
	}
	ViewEnts[ps_weapon] = Weapon(SpawnObject(MainGameInfo(Level.Game).WeaponClasses[
		NewWeapon * HexenDefs::NUMCLASSES + PClass]));
	ViewEnts[ps_weapon].Player = self;
	PSpriteSY = Weapon(ViewEnts[ps_weapon]).PSpriteSY;
}

//===========================================================================
//
//  SetPsprite
//
//===========================================================================

void SetPsprite(int position, state stnum)
{
	ViewEnts[position].SetState(stnum);
}

//===========================================================================
//
//  BringUpWeapon
//
//  Starts bringing the pending weapon up from the bottom of the screen.
//
//==========================================================================

void BringUpWeapon()
{
	PendingWeapon = HexenDefs::wp_nochange;
	ViewEnts[ps_weapon].SY = Weapon::WEAPONBOTTOM;
	ViewEnts[ps_weapon].SetState(Weapon(ViewEnts[ps_weapon]).GetUpState());
}

//==========================================================================
//
//  DropWeapon
//
//  The player died, so put the weapon away.
//
//==========================================================================

void DropWeapon()
{
	ViewEnts[ps_weapon].SetState(Weapon(ViewEnts[ps_weapon]).GetDownState());
}

//==========================================================================
//
//  SetupPsprites
//
//  Called at start of level for each player
//
//==========================================================================

void SetupPsprites()
{
	int i;

	// Remove all psprites
	for (i = 0; i < NUMPSPRITES; i++)
	{
		ViewEnts[i].State = none;
	}
	// Spawn the ready weapon
	BringUpWeapon();
}

//==========================================================================
//
//  MovePsprites
//
//  Called every tic by player thinking routine
//
//==========================================================================

void MovePsprites()
{
	int i;
	ViewEntity e;

	for (i = 0; i < NUMPSPRITES; i++)
	{
		e = ViewEnts[i];
		if (e.State)	// a null state means not active
		{
			// drop tic count and possibly change state
			if (e.StateTime != -1.0)	// a -1 tic count never changes
			{
//[Korax]
				if (Weapon(e).dex_mod)
				{
					if (dexterity < 6)
						e.StateTime -= Level.Game.frametime * 0.8;
					else if (dexterity > 34)
						e.StateTime -= Level.Game.frametime * 3.5;
					else if (dexterity > 24)
						e.StateTime -= Level.Game.frametime * 2.5;
					else if (dexterity > 14)
						e.StateTime -= Level.Game.frametime * 1.5;
					else
						e.StateTime -= Level.Game.frametime;
				}
				else
				{
					e.StateTime -= Level.Game.frametime;
				}
				if (e.StateTime <= 0.0)
				{
					e.StateTime = 0.0;
					e.SetState(e.NextState);
				}
			}
		}
	}
	ViewEnts[ps_flash].SX = ViewEnts[ps_weapon].SX;
	ViewEnts[ps_flash].SY = ViewEnts[ps_weapon].SY;
}

//==========================================================================
//
//  CheckMana
//
//  Returns true if there is enough mana to shoot.  If not, selects the
// next weapon to use.
//
//==========================================================================

bool CheckMana()
{
	/*Weapon cur_weap;

	cur_weap = Weapon(player.ViewEnts[ps_weapon]);
	if (cur_weap.Mana == MANA_NONE || cur_weap.needsnomana 
		|| IsWeaponManaUsable(player, cur_weap))*/
	if (GetWeaponMUse(ReadyWeapon))
	{
		return true;
	}
	centerprint(self, "No mana");
	// out of mana, pick a weapon to change to
	do
	{
		if (WeaponOwned[HexenDefs::WP_EIGHTH] && GetWeaponMUse(HexenDefs::WP_EIGHTH))
		{
			PendingWeapon = HexenDefs::WP_EIGHTH;
		}
		else if (WeaponOwned[HexenDefs::WP_SEVENTH] && GetWeaponMUse(HexenDefs::WP_SEVENTH))
		{
			PendingWeapon = HexenDefs::WP_SEVENTH;
		}
		else if (WeaponOwned[HexenDefs::WP_SIXTH] && GetWeaponMUse(HexenDefs::WP_SIXTH))
		{
			PendingWeapon = HexenDefs::WP_SIXTH;
		}
		else if (WeaponOwned[HexenDefs::WP_FIFTH] && GetWeaponMUse(HexenDefs::WP_FIFTH))
		{
			PendingWeapon = HexenDefs::WP_FIFTH;
		}
		else if (WeaponOwned[HexenDefs::WP_FOURTH] && GetWeaponMUse(HexenDefs::WP_FOURTH))
		{
			PendingWeapon = HexenDefs::WP_FOURTH;
		}
		else if (WeaponOwned[HexenDefs::WP_THIRD] && GetWeaponMUse(HexenDefs::WP_THIRD))
		{
			PendingWeapon = HexenDefs::WP_THIRD;
		}
		else if (WeaponOwned[HexenDefs::WP_SECOND] && GetWeaponMUse(HexenDefs::WP_SECOND))
		{
			PendingWeapon = HexenDefs::WP_SECOND;
		}
		else 
		{
			PendingWeapon = HexenDefs::WP_FIRST;
		}
	}
	while (PendingWeapon == HexenDefs::wp_nochange);
	SetPsprite(ps_weapon, Weapon(ViewEnts[ps_weapon]).GetDownState());
	return false;
}

//==========================================================================
//
//  FireWeapon
//
//==========================================================================

void FireWeapon()
{
	if (!CheckMana())
	{
		return;
	}
	MO.SetState(Actor(MO).MissileState);
	ViewEnts[ps_weapon].SetState(
		Weapon(ViewEnts[ps_weapon]).GetAttackState());
	HexenLevelInfo(Level).NoiseAlert(Actor(MO), Actor(MO));
}

//==========================================================================
//
//  ActivateMorphWeapon
//
//==========================================================================

void ActivateMorphWeapon()
{
	ViewEnts[ps_weapon].SY = Weapon::WEAPONTOP;
	SetWeapon(HexenDefs::WP_FIRST);	// Snout is the first weapon
	SetPsprite(ps_weapon, Weapon(ViewEnts[ps_weapon]).ReadyState);
}

//==========================================================================
//
//  PostMorphWeapon
//
//==========================================================================

void PostMorphWeapon(int weapon)
{
	SetWeapon(weapon);
	ViewEnts[ps_weapon].SY = Weapon::WEAPONBOTTOM;
	SetPsprite(ps_weapon, Weapon(ViewEnts[ps_weapon]).UpState);
}

//==========================================================================
//
//  GetWeaponManaUse
//
//==========================================================================

int GetWeaponManaUse(Weapon weapon)
{
	int manause = weapon.manause;
	if (weapon.wis_mod)
	{
		manause = manause * 10 / wisdom;
	}
	// [FB] Always use mana, no matter what
	if(manause < 1)
	{
		manause = 1;
	}
	return manause;
}

//==========================================================================
//
//  GetWeaponMUse
//
//==========================================================================

bool GetWeaponMUse(int weapon)
{
	Weapon w;
	bool manause;

	w = GetWea(weapon);
	manause = w.Mana == HexenDefs::MANA_NONE || w.needsnomana || w.IsWeaponManaUsable();
	w.Destroy();
	return manause;
}

//==========================================================================
//
//  GetWea
//
//==========================================================================

Weapon GetWea(int weapon)
{
	Weapon w;

	w = Weapon(SpawnObject(MainGameInfo(Level.Game).WeaponClasses[
		weapon * HexenDefs::NUMCLASSES + PClass]));
	w.Player = self;
	return w;
}

//==========================================================================
//
//  GetWeaponPickupText
//
//==========================================================================

string GetWeaponPickupText(int weapon)
{
	Weapon w;
	string pick_m;

	w = GetWea(weapon);
	pick_m = w.PickUpMessage;
	w.Destroy();
	return pick_m;
}

//**************************************************************************
//
//  USE LINES
//
//**************************************************************************

//==========================================================================
//
//  PTR_UseTraverse
//
//==========================================================================

bool PTR_UseTraverse(intercept_t * in)
{
	line_t* line;
	float pheight;
	TVec hit_point;
	opening_t *open;
	TVec useDir;

	line = in->line;
	if (!line->special || (GET_SPAC(line->flags) != SPAC_USE &&
		GET_SPAC(line->flags) != SPAC_USETHROUGH))
	{
		AngleVector(&MO.Angles, &useDir);
		hit_point = MO.Origin + (USERANGE * in->frac) * useDir;
		open = LineOpenings(line, hit_point);
		open = FindOpening(open, hit_point.z + MO.Height / 2.0,
			hit_point.z + MO.Height);
		if (!open)
		{
			if (MorphTime)
			{
				MO.PlaySound('PigActive1', CHAN_VOICE);
			}
			else
			{
				MO.PlaySound('*usefail', CHAN_VOICE);
			}
			return false;	// can't use through a wall
		}
		pheight = MO.Origin.z + MO.Height / 2.0;
		if ((open->top < pheight) || (open->bottom > pheight))
		{
			if (MorphTime)
			{
				MO.PlaySound('PigActive1', CHAN_VOICE);
			}
			else
			{
				MO.PlaySound('*usefail', CHAN_VOICE);
			}
		}
		return true;	// not a special line, but keep checking
	}

	if (PointOnPlaneSide(MO.Origin, line) == 1)
	{
		//	Don't use back side unless it's a two-sided line.
		return line->backsector != NULL;
	}

	HexenLevelInfo(Level).ActivateLine(line, Actor(MO), 0, SPAC_USE);

	//WAS can't use more than one special line in a row
	//jff 3/21/98 NOW multiple use allowed with enabling line flag
	return GET_SPAC(line->flags) == SPAC_USETHROUGH;
}

//==========================================================================
//
//  P_UseLines
//
//  Looks for special lines in front of the player to activate.
//
//==========================================================================

void P_UseLines()
{
	float x1;
	float y1;
	float x2;
	float y2;
	TVec useDir;

	AngleVector(&MO.Angles, &useDir);
	x1 = MO.Origin.x;
	y1 = MO.Origin.y;
	x2 = x1 + USERANGE * useDir.x;
	y2 = y1 + USERANGE * useDir.y;
	P_PathTraverse(x1, y1, x2, y2, PT_ADDLINES, self, 'PTR_UseTraverse');
}

//**************************************************************************
//
//  USING A PUZZLE ITEM
//
//**************************************************************************

//==========================================================================
//
// PTR_PuzzleItemTraverse
//
//==========================================================================

bool PTR_PuzzleItemTraverse(intercept_t * in)
{
	Actor mobj;
	TVec hit_point;
	opening_t *open;

	if (in->bIsALine)
	{
		// Check line
		hit_point = MO.Origin + (USERANGE * in->frac) * PuzzleUseDir;
		if (in->line->special != LNSPEC_UsePuzzleItem)
		{
			open = LineOpenings(in->line, hit_point);
			if (!open || open->range <= 0.0)
			{
				MO.PlaySound('*puzzfail', CHAN_VOICE);
				return false;	// can't use through a wall
			}
			return true;	// Continue searching
		}
		if (PointOnPlaneSide(MO.Origin, in->line) == 1)
		{
			// Don't use back sides
			return false;
		}
		if (PuzzleItemType != in->line->arg1)
		{
			// Item type doesn't match
			return false;
		}
		StartACS(in->line->arg2, 0, in->line->arg3, in->line->arg4,
			in->line->arg5, MO, in->line, 0, false, false);
		in->line->special = 0;
		PuzzleActivated = true;
		return false;	// Stop searching
	}
	// Check thing
	mobj = Actor(in->Thing);
	if (mobj.Special != LNSPEC_UsePuzzleItem)
	{
		// Wrong special
		return true;
	}
	if (PuzzleItemType != mobj.Args[0])
	{
		// Item type doesn't match
		return true;
	}
	StartACS(mobj.Args[1], 0, mobj.Args[2], mobj.Args[3], mobj.Args[4],
		MO, NULL, 0, false, false);
	mobj.Special = 0;
	PuzzleActivated = true;
	return false;	// Stop searching
}

//==========================================================================
//
//  P_UsePuzzleItem
//
//  Returns true if the puzzle item was used on a line or a thing.
//
//==========================================================================

bool P_UsePuzzleItem(int itemType)
{
	float x1, y1, x2, y2;

	PuzzleItemType = itemType;
	PuzzleActivated = false;
	AngleVector(&MO.Angles, &PuzzleUseDir);
	x1 = MO.Origin.x;
	y1 = MO.Origin.y;
	x2 = x1 + USERANGE * PuzzleUseDir.x;
	y2 = y1 + USERANGE * PuzzleUseDir.y;
	P_PathTraverse(x1, y1, x2, y2, PT_ADDLINES | PT_ADDTHINGS,
		self, 'PTR_PuzzleItemTraverse');
	return PuzzleActivated;
}

//==========================================================================
//
//  Cheat_God
//
//==========================================================================

void Cheat_God()
{
	Cheats ^= CF_GODMODE;
	if (Cheats & CF_GODMODE)
	{
		cprint(self, "GOD MODE ON");
	}
	else
	{
		cprint(self, "GOD MODE OFF");
	}
}

//==========================================================================
//
//  Cheat_NoClip
//
//==========================================================================

void Cheat_NoClip()
{
	Cheats ^= CF_NOCLIP;
	if (Cheats & CF_NOCLIP)
	{
		cprint(self, "NO CLIPPING ON");
	}
	else
	{
		cprint(self, "NO CLIPPING OFF");
	}
}

//==========================================================================
//
//  Cheat_Gimme
//
//==========================================================================

void Cheat_Gimme()
{
	if (Cmd_CheckParm("weapons"))
	{
		int i;

/*		for (i = 0; i < NUMARMOR; i++)
		{
			ArmorPoints[i] = ArmorIncrement[PClass * NUMARMOR + i];
		}
*/
		ArmorPoints = 200;
		for (i = 0; i < HexenDefs::NUMWEAPONS; i++)
		{
			WeaponOwned[i] = true;
		}
		for (i = 0; i < HexenDefs::NUMMANA; i++)
		{
			Mana[i] = HexenDefs::MAX_MANA;
		}
//		Pieces = 7;
		cprint(self, "ALL WEAPONS");
	}
	if (Cmd_CheckParm("health"))
	{
		if (MorphTime)
		{
			MO.Health = MAXMORPHHEALTH;
			Health = MO.Health;
		}
		else
		{
			MO.Health = max_health;
			Health = MO.Health;
		}
		cprint(self, "FULL HEALTH");
	}
	if (Cmd_CheckParm("keys"))
	{
		Keys = 2047;
		cprint(self, "ALL KEYS");
	}
	if (Cmd_CheckParm("artifacts"))
	{
		int i;
		int j;

		for (i = HexenDefs::arti_none + 1; i < HexenDefs::arti_firstpuzzitem; i++)
		{
			for (j = 0; j < 25; j++)
			{
				GiveArtifact(i);
			}
		}
		cprint(self, "ALL ARTIFACTS");
	}
	if (Cmd_CheckParm("puzzles"))
	{
		int i;

		for (i = HexenDefs::arti_firstpuzzitem; i < HexenDefs::NUMARTIFACTS; i++)
		{
			GiveArtifact(i);
		}
		cprint(self, "ALL ARTIFACTS");
	}
	if (Cmd_CheckParm("exp"))
	{
		GiveExperience(10000);
		cprint(self, "LOTS OF EXP");
	}
}

//==========================================================================
//
//  Cheat_KillAll
//
//==========================================================================

void Cheat_KillAll()
{
	cprint(self, "%d MONSTERS KILLED", HexenLevelInfo(Level).P_Massacre());
}

//==========================================================================
//
//  Cheat_Morph
//
//==========================================================================

void Cheat_Morph()
{
	if (MorphTime)
	{
		UndoPlayerMorph();
	}
	else
	{
		Actor(MO).MorphPlayer();
	}
	cprint(self, "SQUEAL!!");
}

//==========================================================================
//
//  Cheat_NoWeapons
//
//==========================================================================

void Cheat_NoWeapons()
{
	int i;

	if (MorphTime)
	{
		return;
	}
	for (i = 1; i < 4; i++)
	{
		WeaponOwned[i] = false;
	}
	PendingWeapon = HexenDefs::WP_FIRST;
//	Pieces = 0;
	cprint(self, "CHEATER - YOU DON'T DESERVE WEAPONS");
}

//==========================================================================
//
//  Cheat_Class
//
//==========================================================================

void Cheat_Class()
{
	int i;
	int pclass;

	if (MorphTime)
	{
		// don't change class if the player is morphed
		return;
	}
	if (Cmd_CheckParm("fighter"))
		pclass = HexenDefs::PCLASS_FIGHTER;
	else if (Cmd_CheckParm("cleric"))
		pclass = HexenDefs::PCLASS_CLERIC;
	else if (Cmd_CheckParm("mage"))
		pclass = HexenDefs::PCLASS_MAGE;
	else if (Cmd_CheckParm("heretic"))
		pclass = HexenDefs::PCLASS_HERETIC;
	else if (Cmd_CheckParm("marine"))
		pclass = HexenDefs::PCLASS_MARINE;
	else if (Cmd_CheckParm("witchaven"))
		pclass = HexenDefs::PCLASS_WITCHAVEN;
	else
	{
		cprint(self, "INVALID PLAYER CLASS");
		return;
	}
	PClass = pclass;
/*	for (i = 0; i < NUMARMOR; i++)
	{
		ArmorPoints[i] = 0.0;
	}
*/
	ArmorPoints = 0;
	BaseClass = pclass;
	PostMorphWeapon(HexenDefs::WP_FIRST);
	SetCvar('class', pclass);
	SB_Start();
}

//==========================================================================
//
//  DisplayDeathMessage
//
//  [CW] Displays message notificating that player was killed.
//
//	Usage:
//	All of the message strings are members of MainGameInfo. Messages for
//	Player-specific weapons are listed in PlDeathMessage array. Messages for
//	weapons belonging to other pawns or pawns' melee attacks are listed in
//	NPDeathMessage array.
//
//
//	1) if both source & inflictor are null, it was pure enviroment:
//	slime, lava and such. Use generic messages like "was in wrong place" etc,
//	with 1 parameter: this player's name.
//	2) if inflictor has some value and source is null, then use inflictor's
//	third DeathMessage index with 1 parameter as in p.1.
//	3) if both inflictor and source has some values, but they are not
//	equal, that means that either a pawn or player have shot current
//	player with a missile; use inflictor's first/second DeathMessage index with 2 parameters:
//	current player name and either pawn name or player's PlayerName.
//	4) if inflictor and source have equal values (not null), then it might
//	be melee attack by pawn or player; use either pawn deathmessage first index or
//	player's PClass and ReadyWeapon combined as index, with 2 parameters as in p.3.
//
//==========================================================================

void DisplayDeathMessage(Actor source, Actor inflictor)
{
	dprint("Player::DisplayDeathMessage : ");
	dprint("Player::DisplayDeathMessage : source ptr = %d", source);
	dprint("Player::DisplayDeathMessage : inflictor ptr = %d", inflictor);

	if(source)
	{
		//[CW] p.4: melee attack
		if(source == inflictor)
		{
			dprint("Player::DisplayDeathMessage : source == inflictor");
			if(source.bIsPlayer)
			{
				dprint("Player::DisplayDeathMessage : source is PlayerPawn");
				bprint(MainGameInfo(Level.Game).DeathMessage[(HexenDefs::NUMWEAPONS * Player(source.Player).PClass) + Player(source.Player).ReadyWeapon],
						ARR2STR(PlayerName),
						ARR2STR(source.Player.PlayerName));
			}
			else if(source.IsA('Pawn'))
			{
				dprint("Player::DisplayDeathMessage : source is Pawn");
				bprint(MainGameInfo(Level.Game).DeathMessage[source.deathmsgi[0]],
						ARR2STR(PlayerName),
						MainGameInfo(Level.Game).PawnName[Pawn(source).pawnname]);
			}
		}
		//[CW] p.3: missile attack
		else if(inflictor)
		{
			dprint("Player::DisplayDeathMessage : source != inflictor");
			if(source.bIsPlayer)
			{
				dprint("Player::DisplayDeathMessage : source is PlayerPawn");
				if(Player(source.Player) == self)
				{
					dprint("Player::DisplayDeathMessage : self frag");
					bprint(MainGameInfo(Level.Game).SelfFragDeathMessage[P_Random() % 3],
						ARR2STR(PlayerName));
				}
				else
					bprint(MainGameInfo(Level.Game).DeathMessage[inflictor.deathmsgi[0]],
						ARR2STR(PlayerName),
						ARR2STR(source.Player.PlayerName));
			}
			else if(source.IsA('Pawn'))
			{
				dprint("Player::DisplayDeathMessage : source is Pawn");
				bprint(MainGameInfo(Level.Game).DeathMessage[inflictor.deathmsgi[1]],
						ARR2STR(PlayerName),
						MainGameInfo(Level.Game).PawnName[Pawn(source).pawnname]);
			}
		}
		//[CW] falling damage
		else
		{
			dprint("Player::DisplayDeathMessage : falling death message");
			bprint(MainGameInfo(Level.Game).FallingDeathMessage[P_Random() % 3], ARR2STR(PlayerName));
		}
	}
	//[CW] p.2: fragged by enviromental thing or trap
	else if(inflictor)
	{
		dprint("Player::DisplayDeathMessage : enviromental thing message");
		bprint(MainGameInfo(Level.Game).DeathMessage[inflictor.deathmsgi[2]], ARR2STR(PlayerName));
	}
	//[CW] p.1: fragged by pure enviroment
	else
	{
		dprint("Player::DisplayDeathMessage : pure enviroment message");
		bprint(MainGameInfo(Level.Game).GenericDeathMessage[P_Random() % 3], ARR2STR(PlayerName));
	}
}

defaultproperties
{
}

//**************************************************************************
//
//  $Log$
//  Revision 1.42  2006/04/09 10:42:58  dj_jl
//  For some builtins changed string arguments to names.
//
//  Revision 1.41  2006/04/05 18:24:50  dj_jl
//  Fixed initial speed of throwing bomb.
//
//  Revision 1.40  2006/03/19 17:27:15  dj_jl
//  Added explicit type casts.
//
//  Revision 1.39  2006/03/12 19:37:09  dj_jl
//  States as objects, added state variable type.
//
//  Revision 1.38  2006/03/06 19:41:58  firebrand_kh
//  Fixed dying penalty with some new code lines
//
//  Revision 1.37  2006/03/02 18:40:23  dj_jl
//  Don't use game specific classes in common.
//
//  Revision 1.36  2006/02/28 22:49:16  dj_jl
//  Replaced defines with constants.
//
//  Revision 1.35  2006/02/26 20:57:39  dj_jl
//  Proper serialisation of level and players.
//
//  Revision 1.34  2006/02/17 19:17:51  dj_jl
//  Moved common defs to classes.
//
//  Revision 1.33  2006/02/16 17:31:10  firebrand_kh
//  Lots of changes and fixes
//
//  Revision 1.32  2006/02/15 23:37:45  dj_jl
//  Moved all server progs global variables to classes.
//
//  Revision 1.31  2006/02/13 18:44:38  dj_jl
//  Moved all server progs global functions to classes.
//
//  Revision 1.30  2006/02/05 18:57:00  dj_jl
//  Moved common utils to level info class or built-in.
//
//  Revision 1.29  2006/01/18 19:15:30  dj_jl
//  Switch to previous and next weapon.
//
//  Revision 1.28  2005/12/29 17:32:12  dj_jl
//  Created level info class, moved action special handling to it.
//
//  Revision 1.27  2005/12/14 20:52:07  dj_jl
//  State names belong to a class.
//
//  Revision 1.26  2005/12/12 02:17:10  firebrand_kh
//  Some more fixes
//
//  Revision 1.25  2005/12/11 21:37:29  dj_jl
//  Made path traversal callbacks class members.
//
//  Revision 1.24  2005/11/24 20:27:54  dj_jl
//  Removed unused fields from Object class.
//
//  Revision 1.23  2005/11/19 15:23:21  dj_jl
//  Renamed sounds.
//
//  Revision 1.22  2005/10/17 18:18:10  firebrand_kh
//  Temporal Invulnerability, scores, and other fixes added
//
//  Revision 1.21  2005/09/30 15:45:15  firebrand_kh
//  Lots of changes and additions
//
//  Revision 1.20  2005/08/28 20:10:47  firebrand_kh
//  Added update of the old_level value when decreasing levels
//
//  Revision 1.19  2005/08/27 14:15:04  firebrand_kh
//  Removed an incorrect check for the PoisonDamage & unused code
//
//  Revision 1.18  2005/08/26 14:40:09  firebrand_kh
//  Lots of fixes
//
//  Revision 1.17  2005/08/14 16:51:01  firebrand_kh
//  Added new artifacts, fixed some stuff
//
//  Revision 1.16  2005/08/12 16:23:01  firebrand_kh
//  Added new artifacts & made some fixes
//
//  Revision 1.15  2005/08/08 20:07:46  firebrand_kh
//  Fixed Blind count to reset when the player is spawned
//
//  Revision 1.14  2005/08/03 00:56:38  firebrand_kh
//  New leveling system
//
//  Revision 1.13  2005/07/29 13:44:04  firebrand_kh
//  Fixed moving speed to be affected by attributes, level req's for weapons
//
//  Revision 1.12  2005/07/16 10:16:08  dj_jl
//  Increased jump velocity.
//
//  Revision 1.11  2005/05/09 22:49:29  firebrand_kh
//  Fixed Weapon of Darkness to blind the Player
//
//  Revision 1.10  2005/03/28 07:58:56  dj_jl
//  Latest Vavoom updates.
//
//  Revision 1.9  2005/02/11 16:17:01  firebrand_kh
//  Fixed witchavens translations
//
//  Revision 1.8  2005/02/03 01:05:06  firebrand_kh
//  Fixed Doom Guy weapon bug with the new effects
//
//  Revision 1.7  2004/12/30 01:56:48  firebrand_kh
//  Modified for the Witchaven Guy translations
//
//  Revision 1.6  2004/12/27 12:30:01  dj_jl
//  Vavoom version 1.16 changes.
//
//  Revision 1.5  2004/12/09 00:07:08  firebrand_kh
//  Added code for the Witchaven player class
//
//  Revision 1.4  2004/11/25 16:17:16  firebrand_kh
//  Fixed some stuff for the Witchaven class
//
//  Revision 1.3  2004/11/23 12:50:27  dj_jl
//  Added support for many sector specials.
//
//  Revision 1.2  2004/11/17 16:07:53  firebrand_kh
//  *** empty log message ***
//
//  Revision 1.1  2004/11/16 13:33:22  dj_jl
//  Initial import.
//
//  Revision 1.1  2003/11/12 16:50:47  dj_jl
//  Changed player structure into a class
//
//**************************************************************************
