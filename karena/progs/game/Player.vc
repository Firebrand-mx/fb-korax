//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Player : BasePlayer;

//
//  FIRST FIELDS ARE STATS THAT ARE SENT TO CLIENT FOR STATUS BAR
//

sb_stats_t Stats;

int ArmorPoints;

float InventoryTime;

int ArtifactFlash;
int ReadyArtifact;
int InvPtr;
int InvCurPos;
int InventorySlotNum;
inventory_t Inventory[NUMARTIFACTS];

int Mana[NUMMANA];

//[Korax]
int experience;
int exp_level;
int next_level;
int old_level; // [FB] If we are going backwards we need this
int strength;
int intelligence;
int wisdom;
int dexterity;
int constitution;
int max_health;
int bak_health; // [FB] To decrease the health
int pcount; // [FB] counter
int done; // [FB] Was the penalty done?

//
//  ----------
//

int Keys;

// Power ups. invinc and invis are tic counters.
float Powers[NUMPOWERS];

int Arti;	// artitype_t to use

// Base height above floor for viewz.
float ViewHeight;
// Bob/squat speed.
float DeltaViewHeight;
// bounded/scaled total momentum.
float Bob;

float FlyHeight;

int ArtifactCount;

// Bit flags, for cheats and debug.
// See cheat_t, above.
int Cheats;

// Refired shots are less accurate.
int Refire;

//[Korax]
//int Pieces;	// Fourth Weapon pieces

// Is wp_nochange if not changing.
int PendingWeapon;
int ReadyWeapon;

bool WeaponOwned[NUMWEAPONS];

// Who did damage (none for floors/ceilings).
Actor Attacker;

// For screen flashing (red or bright).
float DamageFlash;
float BonusFlash;

// [FB] Flash for the Darkness Missile
int BlindCount;
float LastBlindTime;
Actor Blinder;		// none for non-player mobjs
int count;

int PoisonCount;	// screen flash for poison damage
float LastPoisonTime;
Actor Poisoner;		// none for non-player mobjs

float JumpTime;
int LocalQuakeHappening;

int NewTorch;	// used in the torch flicker effect.
int NewTorchDelta;

int WeaponPalette;
float MorphTime;	// player is a pig if > 0

TVec MoveDir;

// For cleric's invulnerability effect
bool bAltShadow;
bool bShadow;
bool bDontDraw;

float LastSectorDamageTime;

float HazardTime;
float LastHazardTime;

BotPlayer Bot;

Actor Rain1;	// active rain maker 1
Actor Rain2;	// active rain maker 2

bool inited;
bool used; // [FB] Is the minotaur alive??

//==========================================================================
//
//	PutClientIntoServer
//
//==========================================================================

void PutClientIntoServer()
{
	ViewEnts[ps_weapon] = SpawnObject(Weapon, none);
	ViewEnts[ps_weapon].Player = self;
	ViewEnts[ps_flash] = SpawnObject(Weapon, none);
	ViewEnts[ps_flash].Player = self;
	if (bIsBot)
	{
		Bot = SpawnObject(BotPlayer, none);
		Bot.player = self;
		Bot.OnBeginPlay();
	}
}

//==========================================================================
//
//  SpawnClient
//
//==========================================================================

void SpawnClient()
{
	int j;
	int oldKeys;
//	int oldPieces;
	bool oldWeaponowned[NUMWEAPONS];
	bool playerWasReborn;
	int bestWeapon;

	Attacker = none;
	Poisoner = none;
	Blinder = none;

	if (netgame && !deathmatch)
	{
		// Cooperative net-play, retain keys and weapons
		oldKeys = Keys;
//		oldPieces = Pieces;
		for (j = 0; j < NUMWEAPONS; j++)
		{
			oldWeaponowned[j] = WeaponOwned[j];
		}
		playerWasReborn = (PlayerState == PST_REBORN);
	}

	//  Spawn player
	if (deathmatch)
	{
		DeathMatchSpawnPlayer();
	}
	else
	{
		SpawnPlayer(&level->playerstarts[RebornPosition * MAXPLAYERS +
			P_GetPlayerNum(self)]);
	}

	if (netgame && !deathmatch && playerWasReborn)
	{
		// Restore keys and weapons when reborn in co-op
		Keys = oldKeys;
//		player.Pieces = oldPieces;
		for (bestWeapon = 0, j = 0; j < NUMWEAPONS; j++)
		{
			if (oldWeaponowned[j])
			{
				bestWeapon = j;
				WeaponOwned[j] = true;
			}
		}
		Mana[MANA_1] = 25;
		Mana[MANA_2] = 25;
		Mana[MANA_3] = 25;
		if (bestWeapon)
		{
			// Bring up the best weapon
			PendingWeapon = bestWeapon;
		}
	}

	// Destroy all things touching players
	MO.TeleportMove(MO.Origin);
}

//==========================================================================
//
//  NetGameReborn
//
//==========================================================================

void NetGameReborn()
{
	int i;
	bool oldWeaponowned[NUMWEAPONS];
	int oldKeys;
//	int oldPieces;
	bool foundSpot;
	int bestWeapon;

	// remove pitch and roll angles from corpse
	MO.Angles.pitch = 0.0;
	MO.Angles.roll = 0.0;

	// first dissasociate the corpse
	MO.Player = none;
	MO.bIsPlayer = false;

	// spawn at random spot if in death match
	if (deathmatch)
	{
		DeathMatchSpawnPlayer();
		return;
	}

	// Cooperative net-play, retain keys and weapons
	oldKeys = Keys;
//	oldPieces = Pieces;
	for (i = 0; i < NUMWEAPONS; i++)
	{
		oldWeaponowned[i] = WeaponOwned[i];
	}

	foundSpot = false;
	if (CheckSpot(&level->playerstarts[RebornPosition * MAXPLAYERS +
		P_GetPlayerNum(self)]))
	{
		// Appropriate player start spot is open
		SpawnPlayer(&level->playerstarts[RebornPosition * MAXPLAYERS +
			P_GetPlayerNum(self)]);
		foundSpot = true;
	}
	else
	{
		// Try to spawn at one of the other player start spots
		for (i = 0; i < MAXPLAYERS; i++)
		{
			if (CheckSpot(&level->playerstarts[RebornPosition * MAXPLAYERS + i]))
			{
				// Found an open start spot
				SpawnPlayer(&level->playerstarts[RebornPosition * MAXPLAYERS + i]);
				foundSpot = true;
				break;
			}
		}
	}

	if (!foundSpot)
	{
		// Player's going to be inside something
		SpawnPlayer(&level->playerstarts[RebornPosition * MAXPLAYERS +
			P_GetPlayerNum(self)]);
	}

	// Restore keys and weapons
	Keys = oldKeys;
//	Pieces = oldPieces;
	for (bestWeapon = 0, i = 0; i < NUMWEAPONS; i++)
	{
		if (oldWeaponowned[i])
		{
			bestWeapon = i;
			WeaponOwned[i] = true;
		}
	}
	Mana[MANA_1] = 25;
	Mana[MANA_2] = 25;
	Mana[MANA_3] = 25;
	if (bestWeapon)
	{
		// Bring up the best weapon
		PendingWeapon = bestWeapon;
	}
}

//==========================================================================
//
//  DisconnectClient
//
//==========================================================================

void DisconnectClient()
{
	int i;

	if (Bot != none)
	{
		Bot.Destroy();
		Bot = none;
	}
	if (MO)
	{
		MO.Player = none;
		MO.bIsPlayer = false;
		MO.Damage(none, none, 10000);
	}
	for (i = 0; i < NUMPSPRITES; i++)
	{
		if (ViewEnts[i])
		{
			ViewEnts[i].Destroy();
			ViewEnts[i] = none;
		}
	}
	bprint("%s left the game\n", ARR2STR(PlayerName));
	MO.PlayFullVolumeSound('Chat', CHAN_AUTO);
}

//==========================================================================
//
//  UserinfoChanged
//
//==========================================================================

void UserinfoChanged()
{
	if (!bSpawned)
	{
		return;
	}
	SetPlayerColor();
}

//==========================================================================
//
//  SetPlayerColor
//
//==========================================================================

void SetPlayerColor()
{
	MO.Translation = 0;
	if (PClass == PCLASS_WITCHAVEN)
	{
		// [FB] The first type should be blue, and the second should be the
		// Witchaven's original red color
		if (Color == 0)
			MO.Translation = 1 + PClass * (MAXPLAYERS - 1);
		else if (Color != 1)
			MO.Translation = Color + PClass * (MAXPLAYERS - 1);
	}
	else if (PClass == PCLASS_FIGHTER)
	{
		// The first type should be blue, and the third should be the
		// Fighter's original gold color
		if (Color == 0)
		{
			MO.Translation = 2;
		}
		else if (Color != 2)
		{
			MO.Translation = Color;
		}
	}
	else if (PClass == PCLASS_HERETIC)
	{
		if (Color == 0)
			MO.Translation = 3 + PClass * (MAXPLAYERS - 1);
		else if (Color != 3)
			MO.Translation = Color + PClass * (MAXPLAYERS - 1);
	}
	else if (PClass == PCLASS_MARINE)
	{
		if (Color == 0)
			MO.Translation = 4 + PClass * (MAXPLAYERS - 1);
		else if (Color != 4)
			MO.Translation = Color + PClass * (MAXPLAYERS - 1);
	}
	else if (Color)
	{
		// Set color translation bits for player sprites
		MO.Translation = PClass * (MAXPLAYERS - 1) + Color;
	}
}

//==========================================================================
//
//  DeathMatchSpawnPlayer
//
//  Spawns a player at one of the random death match spots called at level
// load and each death
//
//==========================================================================

void DeathMatchSpawnPlayer()
{
	int i;
	int j;

	for (j = 0; j < 20; j++)
	{
		i = P_Random() % level->numdeathmatchstarts;
		if (CheckSpot(&level->deathmatchstarts[i]))
		{
			SpawnPlayer(&level->deathmatchstarts[i]);
			return;
		}
	}

	// no good spot, so the player will probably get stuck 
	SpawnPlayer(&level->playerstarts[P_GetPlayerNum(self)]);
}

//==========================================================================
//
//  CheckSpot
//
//  Returns false if the player cannot be respawned at the given mthing_t
// spot because something is occupying it
//
//==========================================================================

bool CheckSpot(mthing_t * mthing)
{
	float x;
	float y;
	sector_t *sec;
	float an;
	Actor A;
	int i;

	if (!MO)
	{
		// first spawn of level, before corpses
		for (i = 0; i < MAXPLAYERS; i++)
			if (svvars->Players[i] && svvars->Players[i].MO &&
				svvars->Players[i].MO.Origin.x == mthing->x &&
				svvars->Players[i].MO.Origin.y == mthing->y)
				return false;
		return true;
	}

	x = mthing->x;
	y = mthing->y;

	MO.bNoPassMobj = true;
	if (!MO.CheckPosition(vector(x, y, ONFLOORZ)))
	{
		MO.bNoPassMobj = false;
		return false;
	}
	MO.bNoPassMobj = false;

	// spawn a teleport fog 
	sec = GLevel.PointInSector(vector(x, y, 0.0));
	an = itof(45 * (mthing->angle / 45));

	A = Spawn(TeleportFog, vector(x + 20.0 * cos(an), y + 20.0 * sin(an),
		sec->floorheight + TELEFOGHEIGHT));
	A.PlaySound('Teleport', CHAN_VOICE);

	return true;
}

//==========================================================================
//
//  SpawnPlayer
//
//  Called when a player is spawned on the level.  Most of the player
// structure stays unchanged between levels.
//
//==========================================================================

void SpawnPlayer(mthing_t * mthing)
{
	float x, y, z;
	PlayerPawn pp;

	if (PlayerState == PST_REBORN)
	{
		PlayerReborn();
	}
	if (randomclass && deathmatch)
	{
		PClass = P_Random() % 4;
		if (PClass == BaseClass)
		{
			PClass = (PClass + 1) % 4;
		}
		BaseClass = PClass;
		SB_Start();
	}
	else
	{
		PClass = BaseClass;
	}
	x = mthing->x;
	y = mthing->y;
	z = ONFLOORZ;
	switch (PClass)
	{
	case PCLASS_FIGHTER:
		pp = PlayerPawn(Spawn(PlayerFighter, vector(x, y, z)));
		break;
	case PCLASS_CLERIC:
		pp = PlayerPawn(Spawn(PlayerCleric, vector(x, y, z)));
		break;
	case PCLASS_MAGE:
		pp = PlayerPawn(Spawn(PlayerMage, vector(x, y, z)));
		break;
	case PCLASS_HERETIC:
		pp = PlayerPawn(Spawn(PlayerHeretic, vector(x, y, z)));
		break;
	case PCLASS_MARINE:
		pp = PlayerPawn(Spawn(PlayerMarine, vector(x, y, z)));
		break;
	case PCLASS_WITCHAVEN:
		pp = PlayerPawn(Spawn(PlayerWitchaven, vector(x, y, z)));
		break;
	default:
		Error("P_SpawnPlayer: Unknown class type");
		break;
	}
	pp.Origin.z += mthing->height;
	pp.LinkToWorld();

	pp.Angles.yaw = itof(45 * (mthing->angle / 45));
	pp.Player = self;
	pp.bIsPlayer = true;
	pp.Health = Health;
	MO = pp;
	PlayerState = PST_LIVE;
	Refire = 0;
	DamageFlash = 0.0;
	BonusFlash = 0.0;
	PoisonCount = 0;
	BlindCount = 0; // [FB] Reset the blind count too!
	MorphTime = 0.0;
	ExtraLight = 0;
	FixedColormap = 0;
	LastSectorDamageTime = 0.0;
	LastHazardTime = 0.0;
	ViewHeight = VIEWHEIGHT;
	ViewAngles = pp.Angles;
	bFixAngle = true;
	done = 0; // [FB] We start with no penalty
	pcount = 0; // [FB] Reset counter
//	team = 0; // [FB] The player doesn't belong to any team
//[Korax]
	if (!inited)
	{
		InitiateLevel();
//		pp.experience = 0; [FB] This is the cause?
		inited = true;
	}
	else
	{
		// [FB] There's a penalty for dying, you lost some experience
		pp.experience = experience - ((200  * exp_level) + P_Random() & 150);
		// [FB] But what if the experience we lost has made us lost a level??
		//	Then we use the old_level value to compare our current experience,
		//	if it is lower to it, then we activate a level less than
		//	our current one
		if(pp.experience < old_level && done == 0 && exp_level > 1 /* && (cl < PCLASS_PIG)*/)
		{
			next_level = next_level - (1000 * exp_level); // [FB] Decrease the next to the old_level
			exp_level--; // [FB] Decrese experience level
			DeactivateLevel(exp_level); // [FB] Update Stats accordingly
			done = 1; // [FB] Do this only once
		}
		if(pp.experience < 0)
		{
			pp.experience = 0; // [FB] We don't want to have negative experience, right?
		}
	}

	SetupPsprites();
	if (deathmatch)
	{
		// Give all keys in death match mode
		Keys = 2047;
	}
/*	if (deathmatch = 2)
	{
		team = Color; // [FB] If team deatchmatch give a player a team
	}*/

	// Set translation table data
	SetPlayerColor();
	if (bIsBot)
	{
		Bot.OnSpawn();
	}
}

//==========================================================================
//
//  PlayerReborn
//
//  Called after a player dies almost everything is cleared and initialized
//
//==========================================================================

void PlayerReborn()
{
	BotPlayer B;

	B = Bot;
	if (!inited && deathmatch)
	{
		ClearPlayer(self);
	}
	else if (deathmatch)
	{
		WeaponOwned[WP_THIRD] = false;
		WeaponOwned[WP_FOURTH] = false;
		WeaponOwned[WP_FIFTH] = false;
		WeaponOwned[WP_SIXTH] = false;
		WeaponOwned[WP_SEVENTH] = false;
		WeaponOwned[WP_EIGHTH] = false;
		Mana[MANA_4] = 0;
		Mana[MANA_5] = 0;
		ArmorPoints = 0;
	}
	Bot = B;

	PClass = BaseClass;

	bUseDown = true;	// don't do anything immediately
	bAttackDown = true;
	PlayerState = PST_LIVE;
	Health = max_health;
	WeaponOwned[WP_FIRST] = true;
	WeaponOwned[WP_SECOND] = true;
	Mana[MANA_1] = 25;
	Mana[MANA_2] = 25;
	Mana[MANA_3] = 25;
	SetWeapon(WP_SECOND);
	LocalQuakeHappening = 0;
	done = 0; // [FB] Reset Penalty
}

//==========================================================================
//
//  PlayerExitMap
//
//  Called when the player leaves a map.
//
//==========================================================================

void PlayerExitMap(bool clusterChange)
{
	int i;
	float flightPower;

	// Strip all current powers (retain flight)
	flightPower = Powers[pw_flight];
	for (i = 0; i < NUMPOWERS; i++)
		Powers[i] = 0.0;
//  memset(Powers, 0, sizeof(Powers));
	Powers[pw_flight] = flightPower;

	if (deathmatch)
	{
		Powers[pw_flight] = 0.0;
	}
	else
	{
		if (clusterChange)
		{	// Entering new cluster
			// Strip all keys
			Keys = 0;

			// Strip flight artifact
			for (i = 0; i < 25; i++)
			{
				Powers[pw_flight] = 0.0;
				PlayerUseArtifact(arti_fly);
			}
			Powers[pw_flight] = 0.0;
		}
	}

	if (MorphTime)
	{
		SetWeapon(MO._Special1);	// Restore weapon
		MorphTime = 0.0;
	}
	MO.Angles.pitch = 0.0;
	MO.Translucency = 0;	// Remove invisibility
	ExtraLight = 0;	// Remove weapon flashes
	FixedColormap = 0;	// Remove torch
	DamageFlash = 0.0;	// No palette changes
	BonusFlash = 0.0;
	PoisonCount = 0;
}

//==========================================================================
//
//  GiveMana
//
//  Returns true if the player accepted the mana, false if it was
// refused (player has MAX_MANA).
//
//==========================================================================

bool GiveMana(int mana, int count)
{
	int prevMana;

	if (mana == MANA_NONE)
	{
		return false;
	}
	if (mana < 0 || mana > NUMMANA)
	{
		Error("Actor::GiveMana: bad type %i", mana);
	}
	if (Mana[mana] == MAX_MANA)
	{
		return false;
	}
	if (gameskill == sk_baby || gameskill == sk_nightmare)
	{
		// extra mana in baby mode and nightmare mode
		count += count >> 1;
	}
	prevMana = Mana[mana];

	Mana[mana] += count;
	if (Mana[mana] > MAX_MANA)
	{
		Mana[mana] = MAX_MANA;
	}
	if (prevMana <= 0)
	{
		Weapon(ViewEnts[ps_weapon]).GotMana(mana);
	}
	if (Bot)
	{
		Bot.GaveMana(mana);
	}
	return true;
}

//==========================================================================
//
//  GiveBody
//
//  Returns false if the body isn't needed at all.
//
//==========================================================================

bool GiveBody(int num)
{
	int max;

	max = max_health;
	if (MorphTime)
	{
		max = MAXMORPHHEALTH;
	}
	if (Health >= max)
	{
		return false;
	}
	Health += num;
	if (Health > max)
	{
		Health = max;
	}
	MO.Health = Health;
	return true;
}

//==========================================================================
//
//  GiveArmor
//
//  Works like in Doom and Heretic now
//
//==========================================================================

bool GiveArmor(int armortype, int amount)
{
	float hits;
	float totalArmor;

	if (amount == -1)
	{
/*		hits = ArmorIncrement[Player.PClass * NUMARMOR + armortype];
		if (ArmorPoints[armortype] >= hits)
		{
			return false;
		}
		else
		{
			ArmorPoints[armortype] = hits;
		}
*/
		hits = ArmorIncrement[PClass * NUMARMOR + armortype] * 2.0;
	}
	else
	{
/*		hits = itof(amount) * 5.0;
		totalArmor = ArmorPoints[ARMOR_ARMOR]
			+ ArmorPoints[ARMOR_SHIELD]
			+ ArmorPoints[ARMOR_HELMET]
			+ ArmorPoints[ARMOR_AMULET]
			+ AutoArmorSave[PClass];
		if (totalArmor < ArmorMax[PClass] * 5.0)
		{
			ArmorPoints[armortype] += hits;
		}
		else
		{
			return false;
		}
*/
		hits = itof(amount) * 10.0;
	}
	if (ArmorPoints < 200)
	{
		ArmorPoints += (ftoi(hits) < 200 - ArmorPoints ? ftoi(hits) : 200 - ArmorPoints);
		return true;
	}
	return false;
}
//==========================================================================
//
//  GiveKey
//
//==========================================================================

bool GiveKey(int key)
{
	if (Keys & (1 << key))
	{
		return false;
	}
	BonusFlash += BONUSADD;
	Keys |= 1 << key;
	return true;
}

//==========================================================================
//
//  GivePower
//
//  Returns true if power accepted.
//
//==========================================================================

bool GivePower(int power)
{
	if (power == pw_invulnerability)
	{
		if (Powers[power] > BLINKTHRESHOLD)
		{
			// Already have it
			return false;
		}
		Powers[power] = INVULNTIME;
		MO.bInvulnerable = true;
		// [KORAX]
		/*if (PClass == PCLASS_MAGE)
		{
			MO.bReflective = true;
		}*/
		// [KORAX]
		return true;
	}
	if (power == pw_flight)
	{
		if (Powers[power] > BLINKTHRESHOLD)
		{
			// Already have it
			return false;
		}
		Powers[power] = FLIGHTTIME;
		MO.bFly = true;
		MO.bNoGravity = true;
		if (MO.Origin.z <= MO.FloorZ)
		{
			FlyHeight = 10.0;	// thrust the player in the air a bit
		}
		return (true);
	}
	if (power == pw_infrared)
	{
		if (Powers[power] > BLINKTHRESHOLD)
		{
			// Already have it
			return false;
		}
		Powers[power] = INFRATIME;
		return true;
	}
	if (power == pw_speed)
	{
		if (Powers[power] > BLINKTHRESHOLD)
		{
			// Already have it
			return false;
		}
		Powers[power] = SPEEDTIME;
		return true;
	}
	if (power == pw_minotaur)
	{
		// Doesn't matter if already have power, renew ticker
		Powers[power] = MAULATORTIME;
		return true;
	}
	if (power == pw_invisibility)
	{
		if (Powers[power] > BLINKTHRESHOLD)
		{
			// Already have it
			return false;
		}
		Powers[power] = INVISTIME;
		MO.Translucency = 33;
		return true;
	}
	if (Powers[power])
	{
		return false;	// already got it
	}
	Powers[power] = 1.0;
	return true;
}

//==========================================================================
//
//  GiveArtifact
//
//  Returns true if artifact accepted.
//
//==========================================================================

bool GiveArtifact(int arti)
{
//[Korax]
	if (arti == arti_invulnerability)
	{
		return GivePower(pw_invulnerability);
	}
	else if (arti == arti_speed)
	{
		return GivePower(pw_speed);
	}
	else if (arti == arti_boostarmor)
	{
		return GiveArmor(0, 40);
	}
	else if (arti == arti_summon)
	{
//		return GivePower(pw_minotaur);
		UseArtiSummon();
		return true;
	}
	else if (arti == arti_torch)
	{
		return GivePower(pw_infrared);
	}
	else if (arti == arti_invisibility)
	{
		return GivePower(pw_invisibility);
	}
	else
	{
		return false;
	}
	int i;
	int j;
	bool slidePointer;

	slidePointer = false;
	i = 0;
	while (Inventory[i].type != arti && i < InventorySlotNum)
	{
		i++;
	}
	if (i == InventorySlotNum)
	{
		if (arti < arti_firstpuzzitem)
		{
			i = 0;
			while (Inventory[i].type < arti_firstpuzzitem
				&& i < InventorySlotNum)
			{
				i++;
			}
			if (i != InventorySlotNum)
			{
				for (j = InventorySlotNum; j > i; j--)
				{
					Inventory[j].count = Inventory[j - 1].count;
					Inventory[j].type = Inventory[j - 1].type;
					slidePointer = true;
				}
			}
		}
		Inventory[i].count = 1;
		Inventory[i].type = arti;
		InventorySlotNum++;
	}
	else
	{
		if (arti >= arti_firstpuzzitem && netgame && !deathmatch)
		{
			// Can't carry more than 1 puzzle item in coop netplay
			return false;
		}
		if (Inventory[i].count >= 25)
		{
			// Player already has 25 of this item
			return false;
		}
		Inventory[i].count++;
	}
	if (!ArtifactCount)
	{
		ReadyArtifact = arti;
	}
	else if (slidePointer && i <= InvPtr)
	{
		InvPtr++;
		InvCurPos++;
		if (InvCurPos > 6)
		{
			InvCurPos = 6;
		}
	}
	ArtifactCount++;
	return true;
}

//[Korax]
//============================================================================
//
//  GiveExperience
//
//============================================================================

void GiveExperience(int exp)
{
	if (experience >= 13000)
		return;
	if ((experience + exp) >= 13000)
	{
		experience = 13000;
		MO.experience = experience;
		next_level = 19000;
	}
	else
	{
		experience += exp;
		MO.experience = experience;
		while (experience >= next_level/* && (cl < PCLASS_PIG)*/)
		{
			exp_level++;
			old_level = next_level; // [FB] We need to keep this to compare it
			next_level = next_level + (1000 * exp_level);
			ActivateLevel(exp_level);
		}
	}
}

//============================================================================
//
//  GiveLevel
//
//============================================================================

void GiveLevel(int lvl)
{
	int i;
	for (i = 0; i < lvl; i++)
	{
		exp_level++;
		experience = next_level;
		MO.experience = experience;
		next_level = next_level + (1000 * exp_level);
		ActivateLevel(exp_level);
	}
}

//============================================================================
//
//  TakeLevel
//
// [FB] So the player is a loser :(
//
//============================================================================

void TakeLevel(int lvl)
{
	int i;
	for (i = 0; i < lvl - 1; i++)
	{
		exp_level--;
//		experience = old_level; // [FB] Nope!
		MO.experience = experience;
		next_level = old_level + (1000 * exp_level);
		DeactivateLevel(exp_level);
	}
}

//============================================================================
//
//  ActivateLevel
//
//  [FB] Using the new leveling system the maximum level is 5
//
//============================================================================

void ActivateLevel(int lvl)
{
	int old_maxhealth;
	int addhealth;
	int i;

	if(exp_level < 5) // [FB] MAX Level it's 5
	{
		strength += strength * 25 / 100;
		constitution += constitution * 25 / 100;
		dexterity += dexterity * 25 / 100;
		intelligence += intelligence * 25 / 100;
		wisdom += wisdom * 25 / 100;
		old_maxhealth = max_health;
		bak_health = old_maxhealth;
		if (old_maxhealth == 250)
		{
			//	Don't do anything
			addhealth = 0;
		}
		else
		{
			if ((max_health + max_health * 25 / 100) >= 250)
			{
				addhealth = 250 - max_health;
			}
			else
			{
				addhealth = max_health * 25 / 100;
			}
		}
		if (addhealth > 0)
		{
			max_health += addhealth;
			Health = ftoi(itof(Health) / itof(old_maxhealth) * itof(max_health));
			MO.Health = Health;
		}

		centerprint(self, "YOU REACHED LEVEL %d", lvl);
		MO.PlaySound('Chat', CHAN_VOICE);
	}
}

//============================================================================
//
//  DeactivateLevel
//
//  [FB] We lost a level, so we need to update the attributes then!
//
//============================================================================

void DeactivateLevel(int lvl)
{
	int old_maxhealth;
	int addhealth;
	int i;

	strength -= strength * 25 / 100;
	constitution -= constitution * 25 / 100;
	dexterity -= dexterity * 25 / 100;
	intelligence -= intelligence * 25 / 100;
	wisdom -= wisdom * 25 / 100;
	// [FB] We already calculated the bak_health value
	if (bak_health < 90)
	{
		// Don't do anything
		addhealth = 0;
	}
	else
	{
		addhealth = bak_health * 25 / 100;
	}
	if (addhealth > 0)
	{
		max_health = max_health - addhealth;
//		Health = ftoi(itof(Health) / itof(bak_health) * itof(max_health));
		MO.Health = Health;
	}

	centerprint(self, "YOU LOWERED TO LEVEL %d", lvl);
	MO.PlaySound('Chat', CHAN_VOICE);
}

//============================================================================
//
//  InitiateLevel
//
//============================================================================

void InitiateLevel()
{
	max_health = 90;

	exp_level = 1;
	next_level = 1000;
	MO.experience = 0;
	Health = max_health;
	MO.Health = Health;

	strength = PlayerPawn(MO).InitialStrength;
	wisdom = PlayerPawn(MO).InitialWisdom;
	dexterity = PlayerPawn(MO).InitialDexterity;
	constitution = PlayerPawn(MO).InitialConstitution;
	intelligence = PlayerPawn(MO).InitialIntelligence;
}

//==========================================================================
//
//  PlayerCamping
//
//  [FB] If the player camps much time he'll lost experience too! :O
//
//==========================================================================

void PlayerCamping()
{
	// [FB] Let's see, if every a tic is 1/35 of a second, a second should
	//	be multiplied by 35 to have an equality, every 10 secs. the
	//	player stays camping (without even shooting), we'll start
	//	decresing his experience according his level, so...
	int limit;
	PlayerPawn pp;

	limit = 3 * 35; // [FB] 10 seconds

	// [FB] Check for differences on the player's x & y positions, player
	//	pressing buttons, etc.
	if((pcount >= limit) && (pcount % (1 * 35) == 0))
	{
		PlayerPawn(MO).experience = experience - (1 * (exp_level)); // [FB] Depending the player level
		if(pcount == 525)
		{
			pcount = 105; // [FB] To avoid overflows
		}
		if(PlayerPawn(MO).experience < 0)
		{
			PlayerPawn(MO).experience = 0; // [FB] We don't want to have negative experience
		}
		// [FB] But what if the experience we lost has made us lost a level??
		//	Then we use the old_level value to compare our current experience,
		//	if it is lower to it, then we activate a level less than
		//	our current one
		if((PlayerPawn(MO).experience < old_level) && (done == 0) && (exp_level > 1) /* && (cl < PCLASS_PIG)*/)
		{
			next_level = next_level - (1000 * exp_level); // [FB] Decrease the next to the old_level
			exp_level--; // [FB] Decrese experience level
			DeactivateLevel(exp_level); // [FB] Update Stats accordingly
			done = 1; // [FB] Do this only once
		}
	}
}	   

//==========================================================================
//
//  InventoryLeft
//
//==========================================================================

void InventoryLeft()
{
	if (!InventoryTime)
	{
		InventoryTime = 5.0;
		return;
	}
	InventoryTime = 5.0;
	InvPtr--;
	if (InvPtr < 0)
	{
		InvPtr = 0;
	}
	else
	{
		InvCurPos--;
		if (InvCurPos < 0)
		{
			InvCurPos = 0;
		}
	}
}

//==========================================================================
//
//  InventoryRight
//
//==========================================================================

void InventoryRight()
{
	if (!InventoryTime)
	{
		InventoryTime = 5.0;
		return;
	}
	InventoryTime = 5.0;
	InvPtr++;
	if (InvPtr >= InventorySlotNum)
	{
		InvPtr--;
		if (InvPtr < 0)
			InvPtr = 0;
	}
	else
	{
		InvCurPos++;
		if (InvCurPos > 6)
		{
			InvCurPos = 6;
		}
	}
}

//==========================================================================
//
//  InventoryUse
//
//==========================================================================

void InventoryUse()
{
	ReadyArtifact = Inventory[InvPtr].type;
	// flag to denote that it's okay to use an artifact
	if (InventoryTime)
	{
		InventoryTime = 0.0;
	}
	else
	{
		Arti = ReadyArtifact;
	}
}

//==========================================================================
//
//  InventoryTick
//
//==========================================================================

void InventoryTick(float deltaTime)
{
	// turn inventory off after a certain amount of time
	if (InventoryTime)
	{
		InventoryTime -= deltaTime;
		if (InventoryTime <= 0.0)
		{
			InventoryTime = 0.0;
			ReadyArtifact = Inventory[InvPtr].type;
		}
	}
	if (ArtifactFlash)
	{
		ArtifactFlash--;
	}
}

//==========================================================================
//
//  MovePlayer
//
//==========================================================================

void MovePlayer(float deltaTime)
{
	float fly;
	float forward;
	float side;
	TVec vforward;
	TVec vright;
	TVec vup;
	TVec wishvel;

	forward = ForwardMove;
	side = SideMove;

	//  Adjust speed depending on class. Originaly this is done in input
	// code, but to simplify it, we do it here.
	//  Fighter moves faster, cleric at original speed, mage - slower,
	// pig - slower, but faster than mage
	// [FB] Added the missing classes to this part of the code
	switch (PClass)
	{
	case PCLASS_FIGHTER:
		forward *= 1.18 + itof(dexterity) / 100.0;
		side *= 1.3 + itof(dexterity) / 100.0;
		break;

	case PCLASS_CLERIC:
		forward *= 1.0 + itof(dexterity) / 100.0;
		side *= 1.0 + itof(dexterity) / 100.0;
		break;

	case PCLASS_MAGE:
		forward *= 0.9 + itof(dexterity) / 100.0;
		side *= 0.9 + itof(dexterity) / 100.0;
		break;

	case PCLASS_HERETIC:
		forward *= 1.18 + itof(dexterity) / 100.0;
		side *= 1.3 + itof(dexterity) / 100.0;
		break;

	case PCLASS_MARINE:
		forward *= 1.0 + itof(dexterity) / 100.0;
		side *= 1.0 + itof(dexterity) / 100.0;
		break;

	case PCLASS_WITCHAVEN:
		forward *= 1.0 + itof(dexterity) / 100.0;
		side *= 1.0 + itof(dexterity) / 100.0;
		break;

	case PCLASS_PIG:
		forward *= 0.97 + itof(dexterity) / 100.0;
		side *= 0.97 + itof(dexterity) / 100.0;
		break;
	}

	if (Powers[pw_speed] && !MorphTime)
	{
		// Adjust for a player with a speed artifact
		forward *= 1.5 + itof(dexterity) / 100.0;
		side *= 1.5 + itof(dexterity) / 100.0;
	}
	if ((!Powers[pw_flight] || MO.Origin.z <= MO.FloorZ) &&
		(MO.GetFloorType() == FLOOR_ICE ||
		(MO.Sector->special & SECSPEC_BASE_MASK) == SECSPEC_FrictionLow))
	{
		forward *= 0.5 + itof(dexterity) / 100.0;
		side *= 0.5 + itof(dexterity) / 100.0;
	}

	// Do not let the player control movement
	//  if not onground.
	onground = (MO.Origin.z <= MO.FloorZ) || MO.bOnMobj;
	if (!(onground || MO.bFly))
	{
		//  not on ground, so little effect on velocity
		forward *= air_control + itof(dexterity) / 100.0;
		side *= air_control + itof(dexterity) / 100.0;
	}

	AngleVectors(&MO.Angles, &vforward, &vright, &vup);

	wishvel = forward * vforward + side * vright;
	if (onground && !MO.bFly)
	{
		wishvel.z = 0.0;
	}

	MO.Velocity += 5.0 * deltaTime * wishvel;
	if (forward || side)
	{
		SetPlayerRunState();
	}

	fly = FlyMove / 16.0;
	if (fly && Powers[pw_flight])
	{
		if (FlyMove != TOCENTER)
		{
			FlyHeight = fly * 2.0;
			if (!MO.bFly)
			{
				MO.bFly = true;
				MO.bNoGravity = true;
				if (MO.Velocity.z <= -39.0 * 35.0)
				{
					// stop falling scream
					MO.StopSound(CHAN_AUTO);
				}
			}
		}
		else
		{
			MO.bFly = false;
			MO.bNoGravity = false;
		}
	}
	else if (fly > 0.0)
	{
		PlayerUseArtifact(arti_fly);
	}
	if (MO.bFly)
	{
		MO.Velocity.z = FlyHeight * 35.0 + wishvel.z;
		if (FlyHeight)
		{
			FlyHeight /= 2.0;
		}
	}
	if ((Buttons & BT_JUMP) && onground && !JumpTime)
	{
		if (MorphTime)
		{
			MO.Velocity.z = 6.5 * 35.0;
		}
		else
		{
			MO.Velocity.z = 9.5 * 35.0;
		}
		MO.bOnMobj = false;
		JumpTime = 0.5;
	}
}

//==========================================================================
//
//  CheckWaterJump
//
//==========================================================================

void CheckWaterJump()
{
	TVec start;
	TVec end;
	TVec vforward;

	// check for a jump-out-of-water
	AngleVector(&MO.Angles, &vforward);
	start = MO.Origin;
	start.z += MO.Height * 0.5 + 8.0;
	vforward.z = 0.0;
	vforward = Normalise(vforward);
	end = start + vforward * 24.0;
	if (!TraceLine(start, end))
	{
		// solid at waist
		start.z = MO.Origin.z + MO.Height;
		end = start + vforward * 24.0;
		MoveDir = trace_plane_normal * -50.0;
		if (TraceLine(start, end))
		{
			// open at eye level
			MO.bWaterJump = true;
			MO.Velocity.z = 350.0;
			MO.ReactionTime = 2.0;	// safety net
		}
	}
}

//==========================================================================
//
//  WaterMove
//
//==========================================================================

void WaterMove(float deltaTime)
{
	float forward;
	float side;
	TVec vforward;
	TVec vright;
	TVec vup;
	TVec wishvel;

	// Do not let the player control movement
	//  if not onground.
	onground = (MO.Origin.z <= MO.FloorZ) || MO.bOnMobj;

	AngleVectors(&MO.Angles, &vforward, &vright, &vup);

	forward = ForwardMove;
	side = SideMove;

	//  Adjust speed depending on class. Originaly this is done in input
	// code, but to simplify it, we do it here.
	//  Fighter moves faster, cleric at original speed, mage - slower,
	// pig - slower, but faster than mage
	// [FB] Added missing classes
	switch (PClass)
	{
	case PCLASS_FIGHTER:
		forward *= 1.18 + itof(dexterity) / 100.0;
		side *= 1.3 + itof(dexterity) / 100.0;
		break;

	case PCLASS_CLERIC:
		forward *= 1.0 + itof(dexterity) / 100.0;
		side *= 1.0 + itof(dexterity) / 100.0;
		break;

	case PCLASS_MAGE:
		forward *= 0.9 + itof(dexterity) / 100.0;
		side *= 0.9 + itof(dexterity) / 100.0;
		break;

	case PCLASS_HERETIC:
		forward *= 1.18 + itof(dexterity) / 100.0;
		side *= 1.3 + itof(dexterity) / 100.0;
		break;

	case PCLASS_MARINE:
		forward *= 1.0 + itof(dexterity) / 100.0;
		side *= 1.0 + itof(dexterity) / 100.0;
		break;

	case PCLASS_WITCHAVEN:
		forward *= 1.0 + itof(dexterity) / 100.0;
		side *= 1.0 + itof(dexterity) / 100.0;
		break;

	case PCLASS_PIG:
		forward *= 0.97 + itof(dexterity) / 100.0;
		side *= 0.97 + itof(dexterity) / 100.0;
		break;
	}
/*	forward *= 0.9 + itof(dexterity) / 100.0;
	side *= 0.9 + itof(dexterity) / 100.0; */

	if (Powers[pw_speed] && !MorphTime)
	{
		// Adjust for a player with a speed artifact
		forward *= 1.5 + itof(dexterity) / 100.0;
		side *= 1.5 + itof(dexterity) / 100.0;
	}

	wishvel = vforward * forward + vright * side;
	if (!forward && !side /* && !cmd.upmove */ )
		wishvel.z -= 60.0;	// drift towards bottom
//  else
//      wishvel.z += cmd.upmove;

	MO.Velocity += 3.5 * deltaTime * wishvel;

	if (forward || side)
	{
		SetPlayerRunState();
	}

	if (Buttons & BT_JUMP)
	{
		if (MO.WaterType == CONTENTS_WATER)
			MO.Velocity.z = 100.0;
		else if (MO.WaterType == CONTENTS_SLUDGE)
			MO.Velocity.z = 80.0;
		else
			MO.Velocity.z = 50.0;
	}
	CheckWaterJump();
}

//==========================================================================
//
//  WaterJump
//
//==========================================================================

void WaterJump()
{
	if (!MO.ReactionTime || !MO.WaterLevel)
	{
		MO.bWaterJump = false;
		MO.ReactionTime = 0.0;
	}
	MO.Velocity.x = MoveDir.x;
	MO.Velocity.y = MoveDir.y;
}

//==========================================================================
//
//  ThrustPlayer
//
//  Moves the given origin along a given angle.
//
//==========================================================================

void ThrustPlayer(float angle, float move, float deltaTime)
{
	if (!(Powers[pw_flight] && !(MO.Origin.z <= MO.FloorZ)) &&
		(MO.GetFloorType() == FLOOR_ICE ||
		(MO.Sector->special & SECSPEC_BASE_MASK) == SECSPEC_FrictionLow))
	{
		move *= 0.5;
	}
	MO.Velocity.x += move * cos(angle) * deltaTime;
	MO.Velocity.y += move * sin(angle) * deltaTime;
}

//==========================================================================
//
//  CalcHeight
//
//  Calculate the walking / running height adjustment
//
//==========================================================================

void CalcHeight(float deltaTime)
{
	float angle;
	float bob;

	// Regular movement bobbing
	// (needs to be calculated for gun swing
	// even if not on ground)
	// OPTIMIZE: tablify angle
	// Note: a LUT allows for effects
	//  like a ramp with low health.
	Bob = MO.Velocity.x * MO.Velocity.x + MO.Velocity.y * MO.Velocity.y;
	Bob /= 4.0 * 35.0 * 35.0;
	if (Bob > MAXBOB)
		Bob = MAXBOB;

	if (MO.bFly && !onground)
	{
		Bob = 0.5;
	}

	angle = 180.0 * 35.0 / 10.0 * level->time;
	bob = Bob / 2.0 * sin(angle);

	// move viewheight
	if (PlayerState == PST_LIVE)
	{
		ViewHeight += DeltaViewHeight * deltaTime;

		if (ViewHeight > VIEWHEIGHT)
		{
			ViewHeight = VIEWHEIGHT;
			DeltaViewHeight = 0.0;
		}

		if (ViewHeight < VIEWHEIGHT / 2.0)
		{
			ViewHeight = VIEWHEIGHT / 2.0;
			if (DeltaViewHeight <= 0.0)
				DeltaViewHeight = 0.00001;
		}

		if (DeltaViewHeight)
		{
			DeltaViewHeight += 256.0 * deltaTime;
			if (!DeltaViewHeight)
				DeltaViewHeight = 0.00001;
		}
	}
	if (MorphTime)
	{
		ViewOrg.z = MO.Origin.z + ViewHeight - 20.0;
	}
	else
	{
		ViewOrg.z = MO.Origin.z + ViewHeight + bob;
	}
	if (MO.FloorClip && PlayerState != PST_DEAD &&
		MO.Origin.z <= MO.FloorZ)
	{
		ViewOrg.z -= MO.FloorClip;
	}
	if (ViewOrg.z < MO.FloorZ + 4.0)
	{
		ViewOrg.z = MO.FloorZ + 4.0;
	}

	if (ViewOrg.z > MO.CeilingZ - 4.0)
		ViewOrg.z = MO.CeilingZ - 4.0;
}

//==========================================================================
//
//  PlayerInSpecialSector
//
//  Called every tic frame that the player origin is in a special sector.
//
//==========================================================================

void PlayerInSpecialSector(float deltaTime)
{
	float speed;
	float finean;

	if (MO.Origin.z != GetPlanePointZ(&MO.Sector->floor, MO.Origin))
	{
		// Player is not touching the floor
		return;
	}

	if (MO.Sector->special & SECSPEC_SECRET_MASK)
	{
		//	Secret area.
		SecretCount++;
		level->currentsecret++;
		MO.Sector->special &= ~SECSPEC_SECRET_MASK;
		centerprint(self, "You found a secret area");
	}

	if (MO.Sector->special <= SECSPEC_LightFlicker &&
		MO.Sector->special >= 255)
	{
		switch (MO.Sector->special)
		{
		case SECSPEC_DamageHellslime:
			if (level->time - LastSectorDamageTime >= 32.0 / 35.0)
			{
				LastSectorDamageTime = level->time;
				MO.Damage(none, none, 10);
			}
			break;
		case SECSPEC_DamageSludge:
			if (level->time - LastSectorDamageTime >= 32.0 / 35.0)
			{
				LastSectorDamageTime = level->time;
				MO.Damage(none, none, 4);
			}
			break;
		case SECSPEC_DamageNukage:
			if (level->time - LastSectorDamageTime >= 32.0 / 35.0)
			{
				LastSectorDamageTime = level->time;
				MO.Damage(none, none, 5);
			}
			break;
		case SECSPEC_LightStrobeFastDamage:
		case SECSPEC_DamageSuperHellslime:
			if (level->time - LastSectorDamageTime >= 32.0 / 35.0)
			{
				LastSectorDamageTime = level->time;
				MO.Damage(none, none, 20);
			}
			break;
		case SECSPEC_DamageSuperHellslimeExit:
			// EXIT SUPER DAMAGE! (for E1M8 finale)
			Cheats &= ~CF_GODMODE;
	
			if (level->time - LastSectorDamageTime >= 32.0 / 35.0)
			{
				LastSectorDamageTime = level->time;
				MO.Damage(none, none, 20);
			}
	
			if (Health <= 10)
			{
				G_ExitLevel(0);
			}
			break;
		case SECSPEC_DamageLavaWimpy:
			if (level->time - LastSectorDamageTime >= 16.0 / 35.0)
			{
				LastSectorDamageTime = level->time;
				MO.Damage(GLavaInflictor, none, 5);
				//MO.HitFloorEffect();
				MO.PlaySound('LavaSizzle', CHAN_BODY);
			}
			break;
		case SECSPEC_DamageLavaHefty:
			if (level->time - LastSectorDamageTime >= 16.0 / 35.0)
			{
				LastSectorDamageTime = level->time;
				MO.Damage(GLavaInflictor, none, 8);
				//MO.HitFloorEffect();
				MO.PlaySound('LavaSizzle', CHAN_BODY);
			}
			break;
		case SECSPEC_ScrollEastLavaDamage:
			ThrustPlayer(0.0, 1024.0, deltaTime);
			if (level->time - LastSectorDamageTime >= 16.0 / 35.0)
			{
				LastSectorDamageTime = level->time;
				MO.Damage(GLavaInflictor, none, 5);
				//MO.HitFloorEffect();
				MO.PlaySound('LavaSizzle', CHAN_BODY);
			}
			break;
		case SECSPEC_DamageHazard:
			HazardTime += 2.0 * deltaTime;
			break;
		case SECSPEC_DamageInstantDeath:
			MO.Damage(none, none, 999);
			break;
		case SECSPEC_DamageSuperHazard:
			HazardTime += 4.0 * deltaTime;
			break;
		}
	}
	else
	{
		//	Extended sector damage type.
		switch (MO.Sector->special & SECSPEC_DAMAGE_MASK)
		{
		case 0x0100:
			if (level->time - LastSectorDamageTime >= 32.0 / 35.0)
			{
				LastSectorDamageTime = level->time;
				MO.Damage(none, none, 5);
			}
			break;
		case 0x0200:
			if (level->time - LastSectorDamageTime >= 32.0 / 35.0)
			{
				LastSectorDamageTime = level->time;
				MO.Damage(none, none, 10);
			}
			break;
		case 0x0300:
			if (level->time - LastSectorDamageTime >= 32.0 / 35.0)
			{
				LastSectorDamageTime = level->time;
				MO.Damage(none, none, 20);
			}
			break;
		}
	}

	//	Apply any customizable damage
	if (MO.Sector->Damage)
	{
		if (MO.Sector->Damage < 20)
		{
			if (level->time - LastSectorDamageTime >= 32.0 / 35.0)
			{
				LastSectorDamageTime = level->time;
				MO.Damage(none, none, MO.Sector->Damage);
			}
		}
		else if (MO.Sector->Damage < 50)
		{
			if (level->time - LastSectorDamageTime >= 32.0 / 35.0)
			{
				LastSectorDamageTime = level->time;
				MO.Damage(none, none, MO.Sector->Damage);
			}
		}
		else if (level->time - LastSectorDamageTime >= 1.0 / 35.0)
		{
			LastSectorDamageTime = level->time;
			MO.Damage(none, none, MO.Sector->Damage);
		}
	}

	switch (MO.Sector->special)
	{
	case SECSPEC_ScrollCurrent:
		speed = itof((MO.Sector->tag - 100) % 10) / 16.0 * 35.0;
		finean = itof((MO.Sector->tag - 100) / 10) * 45.0;
		MO.Velocity.x += speed * cos(finean);
		MO.Velocity.y += speed * sin(finean);
		break;
	case SECSPEC_ScrollNorthSlow:
	case SECSPEC_ScrollNorthMedium:
	case SECSPEC_ScrollNorthFast:
		ThrustPlayer(90.0, pushTab[(MO.Sector->special &
			SECSPEC_BASE_MASK) - SECSPEC_ScrollNorthSlow], deltaTime);
		break;
	case SECSPEC_ScrollEastSlow:
	case SECSPEC_ScrollEastMedium:
	case SECSPEC_ScrollEastFast:
		ThrustPlayer(0.0, pushTab[(MO.Sector->special &
			SECSPEC_BASE_MASK) - SECSPEC_ScrollEastSlow], deltaTime);
		break;
	case SECSPEC_ScrollSouthSlow:
	case SECSPEC_ScrollSouthMedium:
	case SECSPEC_ScrollSouthFast:
		ThrustPlayer(270.0, pushTab[(MO.Sector->special &
			SECSPEC_BASE_MASK) - SECSPEC_ScrollSouthSlow], deltaTime);
		break;
	case SECSPEC_ScrollWestSlow:
	case SECSPEC_ScrollWestMedium:
	case SECSPEC_ScrollWestFast:
		ThrustPlayer(180.0, pushTab[(MO.Sector->special &
			SECSPEC_BASE_MASK) - SECSPEC_ScrollWestSlow], deltaTime);
		break;
	case SECSPEC_ScrollNorthWestSlow:
	case SECSPEC_ScrollNorthWestMedium:
	case SECSPEC_ScrollNorthWestFast:
		ThrustPlayer(135.0, pushTab[(MO.Sector->special &
			SECSPEC_BASE_MASK) - SECSPEC_ScrollNorthWestSlow], deltaTime);
		break;
	case SECSPEC_ScrollNorthEastSlow:
	case SECSPEC_ScrollNorthEastMedium:
	case SECSPEC_ScrollNorthEastFast:
		ThrustPlayer(45.0, pushTab[(MO.Sector->special &
			SECSPEC_BASE_MASK) - SECSPEC_ScrollNorthEastSlow], deltaTime);
		break;
	case SECSPEC_ScrollSouthEastSlow:
	case SECSPEC_ScrollSouthEastMedium:
	case SECSPEC_ScrollSouthEastFast:
		ThrustPlayer(315.0, pushTab[(MO.Sector->special &
			SECSPEC_BASE_MASK) - SECSPEC_ScrollSouthEastSlow], deltaTime);
		break;
	case SECSPEC_ScrollSouthWestSlow:
	case SECSPEC_ScrollSouthWestMedium:
	case SECSPEC_ScrollSouthWestFast:
		ThrustPlayer(225.0, pushTab[(MO.Sector->special &
			SECSPEC_BASE_MASK) - SECSPEC_ScrollSouthWestSlow], deltaTime);
		break;
	case SECSPEC_ScrollEast5:
	case SECSPEC_ScrollEast10:
	case SECSPEC_ScrollEast25:
	case SECSPEC_ScrollEast30:
	case SECSPEC_ScrollEast35:
		ThrustPlayer(0.0, pushTab[(MO.Sector->special &
			SECSPEC_BASE_MASK) - SECSPEC_ScrollEast5], deltaTime);
		break;
	case SECSPEC_ScrollNorth5:
	case SECSPEC_ScrollNorth10:
	case SECSPEC_ScrollNorth25:
	case SECSPEC_ScrollNorth30:
	case SECSPEC_ScrollNorth35:
		ThrustPlayer(90.0, pushTab[(MO.Sector->special &
			SECSPEC_BASE_MASK) - SECSPEC_ScrollNorth5], deltaTime);
		break;
	case SECSPEC_ScrollSouth5:
	case SECSPEC_ScrollSouth10:
	case SECSPEC_ScrollSouth25:
	case SECSPEC_ScrollSouth30:
	case SECSPEC_ScrollSouth35:
		ThrustPlayer(270.0, pushTab[(MO.Sector->special &
			SECSPEC_BASE_MASK) - SECSPEC_ScrollSouth5], deltaTime);
		break;
	case SECSPEC_ScrollWest5:
	case SECSPEC_ScrollWest10:
	case SECSPEC_ScrollWest25:
	case SECSPEC_ScrollWest30:
	case SECSPEC_ScrollWest35:
		ThrustPlayer(180.0, pushTab[(MO.Sector->special &
			SECSPEC_BASE_MASK) - SECSPEC_ScrollWest5], deltaTime);
		break;
	}
}

//============================================================================
//
//  PlayerOnSpecialFlat
//
//============================================================================

void PlayerOnSpecialFlat(int floorType)
{
	if (MO.Origin.z != MO.FloorZ)
	{
		// Player is not touching the floor
		return;
	}
	switch (floorType)
	{
	case FLOOR_LAVA:
		if (!(level->tictime & 31))
		{
			MO.Damage(GLavaInflictor, none, 10);
			MO.PlaySound('LavaSizzle', CHAN_BODY);
		}
		break;
	default:
		break;
	}
}

//==========================================================================
//
//  PlayerInContents
//
//==========================================================================

void PlayerInContents()
{
	if (!MO.WaterLevel)
	{
		return;
	}
	switch (MO.WaterType)
	{
	case CONTENTS_LAVA:
		if (!(level->tictime & 31))
		{
			MO.Damage(GLavaInflictor, none, 10);
			MO.PlaySound('LavaSizzle', CHAN_BODY);
		}
		break;
	}
}

//==========================================================================
//
//  PlayerImpulse
//
//==========================================================================

void PlayerImpulse()
{
	int impulse;
	int i;

	impulse = Impulse;
	Impulse = 0;
	Arti = 0;

	if (impulse <= NUMWEAPONS)
	{
		// The actual changing of the weapon is done when the weapon
		// psprite can do it (A_WeaponReady), so it doesn't happen in
		// the middle of an attack.
		if (WeaponOwned[impulse - 1] &&
			impulse - 1 != ReadyWeapon && !MorphTime)
		{
			PendingWeapon = impulse - 1;
		}
	}
	else if (impulse == 13 && !MorphTime)
	{
		int newWeapon;
		newWeapon = ReadyWeapon;
		do 
		{
			newWeapon = newWeapon -1;
			if (newWeapon == -1)
				newWeapon = NUMWEAPONS -1;
		}
		while (!WeaponOwned[newWeapon]);
		if (newWeapon != ReadyWeapon)
		{
			PendingWeapon = newWeapon;
		}		
	}
	else if (impulse == 14 && !MorphTime)
	{
		int newWeapon;
		newWeapon = ReadyWeapon;
		do 
		{
			newWeapon = newWeapon + 1;
			if (newWeapon == NUMWEAPONS)
				newWeapon = 0;
		}
		while (!WeaponOwned[newWeapon]);
		if (newWeapon != ReadyWeapon)
		{
			PendingWeapon = newWeapon;
		}		
	}
//[Korax]
/*	else if (impulse == 13)
	{
		InventoryLeft();
	}
	else if (impulse == 14)
	{
		InventoryRight();
	}
	else if (impulse == 15)
	{
		InventoryUse();
	}
*/	else if (impulse == 16)
	{
		MO.Damage(none, none, 10000);
	}
	// Hexen artifact hot keys
	if (!Arti)
	{
//[Korax]
/*		if (impulse == 11)
		{
			Arti = NUMARTIFACTS;
		}
		else if (impulse == 12 && (Health < max_health))
		{
			Arti = arti_health;
		}
		else */if (impulse == 10)
		{
			PlayerUseArtifact(arti_poisonbag);
		}
		else if (impulse == 9)
		{
			PlayerUseArtifact(arti_blastradius);
		}
//[Korax]
/*
		else if (impulse == 8)
		{
			Arti = arti_teleport;
		}
		else if (impulse == 7)
		{
			Arti = arti_teleportother;
		}
		else if (impulse == 6)
		{
			Arti = arti_egg;
		}
		else if (impulse == 5 && !Powers[pw_invulnerability])
		{
			Arti = arti_invulnerability;
		}
*/
//[Korax]
	}
//[Korax]
/*
	if (Arti)
	{
		// Use an artifact
		if (Arti == NUMARTIFACTS)
		{
			// use one of each artifact (except puzzle artifacts)
			for (i = 1; i < arti_firstpuzzitem; i++)
			{
				PlayerUseArtifact(i);
			}
		}
		else
		{
			PlayerUseArtifact(Arti);
		}
	}
*/
}

//==========================================================================
//
//  MorphPlayerThink
//
//==========================================================================

void MorphPlayerThink()
{
	//FIXME this sucks
	if (ftoi(32.0 * MorphTime) & 15)
	{
		return;
	}
	if (!(MO.Velocity.x + MO.Velocity.y) && P_Random() < 64)
	{
		// Snout sniff
		Weapon(ViewEnts[ps_weapon]).SnoutSniff();
		MO.PlaySound('PigActive1', CHAN_VOICE);	// snort
		return;
	}
	if (P_Random() < 48)
	{
		if (P_Random() < 128)
		{
			MO.PlaySound('PigActive1', CHAN_VOICE);
		}
		else
		{
			MO.PlaySound('PigActive2', CHAN_VOICE);
		}
	}
}

//==========================================================================
//
//  UndoPlayerMorph
//
//==========================================================================

bool UndoPlayerMorph()
{
	Actor fog;
	Actor A;

	MO.UnlinkFromWorld();
	switch (BaseClass)
	{
	case PCLASS_FIGHTER:
		A = Spawn(PlayerFighter, MO.Origin);
		break;
	case PCLASS_CLERIC:
		A = Spawn(PlayerCleric, MO.Origin);
		break;
	case PCLASS_MAGE:
		A = Spawn(PlayerMage, MO.Origin);
		break;
	case PCLASS_HERETIC:
		A = Spawn(PlayerHeretic, MO.Origin);
		break;
	case PCLASS_MARINE:
		A = Spawn(PlayerMarine, MO.Origin);
		break;
	case PCLASS_WITCHAVEN:
		A = Spawn(PlayerWitchaven, MO.Origin);
		break;
	default:
		Error("UndoPlayerMorph: Unknown player class %d", BaseClass);
	}
	if (!A.TestLocation())
	{
		// Didn't fit
		A.Remove();
		MO.LinkToWorld();
		MorphTime = 2.0;
		return false;
	}
	MO.LinkToWorld();
	A.Angles = MO.Angles;
	A.Player = self;
	A.bIsPlayer = true;
	A.ReactionTime = 0.5;
	if (MO.bFly)
	{
		A.bFly = true;
		A.bNoGravity = true;
	}
	MorphTime = 0.0;
	A.Health = max_health;
	Health = A.Health;
	PClass = BaseClass;
	SetPlayerColor();
	PostMorphWeapon(MO._Special1);

	fog = Spawn(TeleportFog, MO.Origin + vector(20.0 * cos(MO.Angles.yaw),
		20.0 * sin(MO.Angles.yaw), TELEFOGHEIGHT));
	fog.PlaySound('Teleport', CHAN_VOICE);

	MO.SetState(S_FREETARGMOBJ);
	MO = A;
	return true;
}

//==========================================================================
//
//  SetPlayerRunState
//
//==========================================================================

void SetPlayerRunState()
{
	if (MO.StateNum == MO.IdleState)
	{
		MO.SetState(MO.SeeState);
	}
}

//==========================================================================
//
//  DeathPlayerTick
//
//  Fall on your face when dying. Decrease POV height to floor height.
//
//==========================================================================

void DeathPlayerTick(float deltaTime)
{
	int dir;
	float delta;
	int lookDelta;

	MovePsprites();
	if (MO.WaterLevel > 1)
	{
		MO.Velocity.z -= 60.0;	// drift towards bottom
	}

	onground = (MO.Origin.z <= MO.FloorZ);

	if (MO.Class == BloodySkull || MO.Class == IceChunk)
	{
		// Flying bloody skull or flying ice chunk
		ViewHeight = 6.0;
		DeltaViewHeight = 0.0;
		//player->damagecount = 20;
		if (onground)
		{
#ifdef FIXME
			if (player->lookdir < 60)
			{
				lookDelta = (60 - player->lookdir) / 8;
				if (lookDelta < 1 && (level->tictime & 1))
				{
					lookDelta = 1;
				}
				else if (lookDelta > 6)
				{
					lookDelta = 6;
				}
				player->lookdir += lookDelta;
			}
#endif
		}
	}
	else if (!MO.bIceDamage)
	{
		// Fall to ground (if not frozen)
		DeltaViewHeight = 0.0;
		if (ViewHeight > 6.0)
		{
			ViewHeight -= 35.0 * deltaTime;
		}
		if (ViewHeight < 6.0)
		{
			ViewHeight = 6.0;
		}
#ifdef FIXME
		if (player->lookdir > 0)
		{
			player->lookdir -= 6;
		}
		else if (player->lookdir < 0)
		{
			player->lookdir += 6;
		}
		if (abs(player->lookdir) < 6)
		{
			player->lookdir = 0;
		}
#endif
	}
	CalcHeight(deltaTime);

	if (Attacker && Attacker != MO)
	{
		// Watch killer
		dir = MO.FaceActor(Attacker, &delta);
		if (delta < 10.0)
		{
			// Looking at killer, so fade damage and poison counters
			if (DamageFlash)
			{
				DamageFlash -= deltaTime;
				if (DamageFlash <= 0.0)
					DamageFlash = 0.0;
			}
			if (PoisonCount)
			{
				PoisonCount--;
			}
		}
		delta = delta / 8.0;
		if (delta > 5.0)
		{
			delta = 5.0;
		}
		if (dir)
		{
			// Turn clockwise
			MO.Angles.yaw += delta;
		}
		else
		{	
			// Turn counter clockwise
			MO.Angles.yaw -= delta;
		}
	}
	else if (DamageFlash || PoisonCount)
	{
		if (DamageFlash)
		{
			DamageFlash -= deltaTime;
			if (DamageFlash <= 0.0)
				DamageFlash = 0.0;
		}
		else
		{
			PoisonCount--;
		}
	}

	if (Buttons & BT_USE)
	{
		Palette = 0;
		WeaponPalette = 0;
		InvPtr = 0;
		InvCurPos = 0;
		NewTorch = 0;
		NewTorchDelta = 0;
		PlayerState = PST_REBORN;
		MO._Special1 = PClass;
		if (MO._Special1 > 2)
		{
			MO._Special1 = 0;
		}
		// Let the mobj know the player has entered the reborn state.  Some
		// mobjs need to know when it's ok to remove themselves.
		MO._Special2 = 666;
	}
}

//==========================================================================
//
//  PlayerTick
//
//==========================================================================

void PlayerTick(float deltaTime)
{
	int floorType;
	int newweapon;
	Actor speedA;

	if (bIsBot)
	{
		Bot.BotTick(deltaTime);
	}

//[Korax]
	experience = MO.experience;

	// Copy view angles
	MO.Angles = ViewAngles;

	// fixme: do this in the cheat code
	if (Cheats & CF_NOCLIP)
	{
		MO.bColideWithThings = false;
		MO.bColideWithWorld = false;
	}
	else
	{
		MO.bColideWithThings = true;
		MO.bColideWithWorld = true;
	}

	if (MO.bJustAttacked)
	{
		ForwardMove = 100.0;
		SideMove = 0.0;
		MO.bJustAttacked = false;
	}

	WorldTimer++;
	InventoryTick(deltaTime);

	if (PlayerState == PST_DEAD)
	{
		DeathPlayerTick(deltaTime);
		return;
	}

	if (JumpTime)
	{
		JumpTime -= deltaTime;
		if (JumpTime <= 0.0)
			JumpTime = 0.0;
	}
	if (MorphTime)
	{
		MorphPlayerThink();
	}

	//  Move around.
	//  ReactionTime is used to prevent movement for a bit after a teleport.
	if (MO.ReactionTime)
	{
		MO.ReactionTime -= deltaTime;
		if (MO.ReactionTime <= 0.0)
			MO.ReactionTime = 0.0;
		if (MO.bWaterJump)
			WaterJump();
	}
	else
	{
		if (MO.WaterLevel >= 2)
			WaterMove(deltaTime);
		else
			MovePlayer(deltaTime);
		if (Powers[pw_speed] && !(level->tictime & 1) &&
			Length(MO.Velocity) > 12.0 * 35.0)
		{
			speedA = Spawn(PlayerSpeed, MO.Origin);
			if (speedA)
			{
				speedA.Angles.yaw = MO.Angles.yaw;
				speedA.Translation = MO.Translation;
				speedA.Instigator = MO;
				speedA._Special1 = PClass;
				if (speedA._Special1 > 2)
				{
					speedA._Special1 = 0;
				}
				speedA.SpriteIndex = MO.SpriteIndex;
				speedA.FloorClip = MO.FloorClip;
#ifdef FIXME
				if (self == GPlayers[consoleplayer])
				{
					speedA.bHidden = true;
				}
#endif
			}
		}
	}

	CalcHeight(deltaTime);

	if (MO.Sector->special)
	{
		PlayerInSpecialSector(deltaTime);
	}
	floorType = MO.GetFloorType();
	if (floorType != FLOOR_SOLID)
	{
		PlayerOnSpecialFlat(floorType);
	}
	PlayerInContents();

	switch (PClass)
	{
	case PCLASS_FIGHTER:
		if (MO.Velocity.z <= -35.0 * 35.0 && MO.Velocity.z >= -40.0 * 35.0 &&
			!MorphTime && !GetSoundPlayingInfo(MO,
				GetSoundID('PlayerFighterFallingScream')))
		{
			MO.PlaySound('PlayerFighterFallingScream', CHAN_VOICE);
		}
		break;
	case PCLASS_CLERIC:
		if (MO.Velocity.z <= -35.0 * 35.0 && MO.Velocity.z >= -40.0 * 35.0 &&
			!MorphTime && !GetSoundPlayingInfo(MO,
				GetSoundID('PlayerClericFallingScream')))
		{
			MO.PlaySound('PlayerClericFallingScream', CHAN_VOICE);
		}
		break;
	case PCLASS_MAGE:
		if (MO.Velocity.z <= -35.0 * 35.0 && MO.Velocity.z >= -40.0 * 35.0 &&
			!MorphTime && !GetSoundPlayingInfo(MO,
				GetSoundID('PlayerMageFallingScream')))
		{
			MO.PlaySound('PlayerMageFallingScream', CHAN_VOICE);
		}
		break;
	default:
		break;
	}

	// Check for weapon change.
	if (Impulse)
	{
		PlayerImpulse();
	}

	// check for use
	if (Buttons & BT_USE)
	{
		if (!bUseDown)
		{
			P_UseLines(self);
			bUseDown = true;
		}
	}
	else
	{
		bUseDown = false;
	}

	// Morph counter
	if (MorphTime)
	{
		MorphTime -= deltaTime;
		if (MorphTime <= 0.0)
		{
			// Attempt to undo the pig
			MorphTime = 0.0;
			UndoPlayerMorph();
		}
	}

	// cycle psprites
	MovePsprites();

	// Counters, time dependend power ups.

	if (Powers[pw_invulnerability])
	{
		//[KORAX]
		/*if (PClass == PCLASS_CLERIC)
		{
			if (!(level->tictime & 7) && bShadow && !bDontDraw)
			{
				bShadow = false;
				if (!bAltShadow)
				{
					bDontDraw = true;
 					MO.bNonShootable = true;
				}
			}
			if (!(level->tictime & 31))
			{
				if (bDontDraw)
				{
					if (!bShadow)
					{
						bShadow = true;
 						bAltShadow = true;
					}
					else
					{
						bDontDraw = false;
 						MO.bNonShootable = false;
					}
				}
				else
				{
					bShadow = true;
					bAltShadow = false;
				}
			}
			if (bDontDraw)
			{
				MO.Translucency = 100;
			}
			else if (bShadow)
			{
				MO.Translucency = 66;
			}
			else if (bAltShadow)
			{
				MO.Translucency = 33;
			}
			else
			{
				MO.Translucency = 0;
			}
		}*/
		//[KORAX]
		Powers[pw_invulnerability] -= deltaTime;
		if (Powers[pw_invulnerability] <= 0.0)
		{
			Powers[pw_invulnerability] = 0.0;
			MO.bInvulnerable = false;
			MO.bReflective = false;
			//[KORAX]
			/*if (PClass == PCLASS_CLERIC)
			{
				MO.bNonShootable = false;
				MO.Translucency = 0;
			}*/
			//[KORAX]
		}
	}
	if (Powers[pw_minotaur])
	{
		Powers[pw_minotaur] -= deltaTime;
		if (Powers[pw_minotaur] <= 0.0)
			Powers[pw_minotaur] = 0.0;
	}

	if (Powers[pw_infrared])
	{
		Powers[pw_infrared] -= deltaTime;
		if (Powers[pw_infrared] <= 0.0)
			Powers[pw_infrared] = 0.0;
	}

	if (Powers[pw_speed])
	{
		Powers[pw_speed] -= deltaTime;
		if (Powers[pw_speed] <= 0.0)
			Powers[pw_speed] = 0.0;
	}

	if (Powers[pw_flight] && netgame)
	{
		Powers[pw_flight] -= deltaTime;
		if (Powers[pw_flight] <= 0.0)
		{
			Powers[pw_flight] = 0.0;
			if (MO.Origin.z != MO.FloorZ)
			{
//FIXME             		player->centering = true;
			}
			MO.bFly = false;
			MO.bNoGravity = false;
		}
	}
	if (Powers[pw_invisibility])
	{
		Powers[pw_invisibility] -= deltaTime;
		if (Powers[pw_invisibility] <= 0.0)
		{
			Powers[pw_invisibility] = 0.0;
			MO.Translucency = 0;
		}
	}


	if (PoisonCount && level->time - LastPoisonTime >= 0.5)
	{
		PoisonCount -= 5;
		if (PoisonCount < 0)
		{
			PoisonCount = 0;
		}
		LastPoisonTime = level->time;
		MO.PoisonDamage(Poisoner, 1, true);
	}

	// [FB] Darkness blinding effect
	if (BlindCount && level->time - LastBlindTime >= 0.5)
	{
		BlindCount -= 5;
		count += 1;
		if (BlindCount < 0)
		{
			BlindCount = 0;
		}
		LastBlindTime = level->time;
		if(count % 5 == 0) // [FB] Damage the blinded player after some time
		{
			MO.BlindDamage(Blinder, 1, true);
		}
	}

	if (DamageFlash)
	{
		DamageFlash -= deltaTime;
		if (DamageFlash <= 0.0)
			DamageFlash = 0.0;
	}

	if (BonusFlash)
	{
		BonusFlash -= deltaTime;
		if (BonusFlash <= 0.0)
			BonusFlash = 0.0;
	}

	if (HazardTime)
	{
		HazardTime -= deltaTime;
		if (HazardTime <= 0.0)
			HazardTime = 0.0;
		if (level->time - LastHazardTime >= 32.0 / 35.0 &&
			HazardTime > 16.0)
		{
			LastHazardTime = level->time;
			MO.Damage(none, none, 5);
		}
	}

	// Handling colormaps.
	if (Powers[pw_infrared])
	{
		if (Powers[pw_infrared] <= BLINKTHRESHOLD)
		{
			if (ftoi(Powers[pw_infrared] * 35.0) & 8)
			{
				FixedColormap = 0;
			}
			else
			{
				FixedColormap = 1;
			}
		}
		else if (!(level->tictime & 16))
		{
			if (NewTorch)
			{
				if (FixedColormap + NewTorchDelta > 7 ||
					FixedColormap + NewTorchDelta < 1 ||
					FixedColormap == NewTorch)
				{
					NewTorch = 0;
				}
				else
				{
					FixedColormap += NewTorchDelta;
				}
			}
			else
			{
				NewTorch = (P_Random() & 7) + 1;
				NewTorchDelta = (NewTorch == FixedColormap) ? 0 :
					((NewTorch > FixedColormap) ? 1 : -1);
			}
		}
	}
	else
		FixedColormap = 0;

	if((MO.Velocity.x == 0.0 || MO.Velocity.y == 0.0) && !Buttons & BT_ATTACK) // [FB] Check for the player camping
	{
		pcount++;
		PlayerCamping();
	}
	else if((MO.Velocity.x != 0.0 || MO.Velocity.y != 0.0) || Buttons & BT_ATTACK) // [FB] The player is moving
	{
		pcount = 0;
	}
}

//==========================================================================
//
//  PaletteFlash
//
//  Sets the new palette based upon the current values of
// Player.DamageFlash and Player.BonusFlash.
//
//==========================================================================

void PaletteFlash()
{
	CShifts[CSHIFT_CONTENTS] = 0;
	if (MO.WaterLevel == 3)
	{
		switch (MO.WaterType)
		{
		case CONTENTS_WATER:
			CShifts[CSHIFT_CONTENTS] = CSHIFT(130, 80, 50, 128);
			break;

		case CONTENTS_SLUDGE:
			CShifts[CSHIFT_CONTENTS] = CSHIFT(128, 160, 128, 150);
			break;

		case CONTENTS_LAVA:
			CShifts[CSHIFT_CONTENTS] = CSHIFT(255, 80, 0, 150);
			break;
		}
	}

	if (PoisonCount)
	{
		Palette = (PoisonCount + 7) >> 3;
		if (Palette >= NUMPOISONPALS)
		{
			Palette = NUMPOISONPALS - 1;
		}
		Palette += STARTPOISONPALS;
	}
	else if (BlindCount) // [FB] Black palette for blinding effect
	{
		Palette = (BlindCount + 7) >> 3;
		if (Palette >= (CShifts[CSHIFT_CONTENTS] = CSHIFT(0, 0, 0, 255)))
		{
			Palette = CShifts[CSHIFT_CONTENTS] = CSHIFT(0, 0, 0, BlindCount);
		}
	}
	else if (DamageFlash)
	{
		Palette = (ftoi(32.0 * DamageFlash) + 7) >> 3;
		if (Palette >= NUMREDPALS)
		{
			Palette = NUMREDPALS - 1;
		}
		Palette += STARTREDPALS;
	}
	else if (BonusFlash)
	{
		Palette = (ftoi(32.0 * BonusFlash) + 7) >> 3;
		if (Palette >= NUMBONUSPALS)
		{
			Palette = NUMBONUSPALS - 1;
		}
		Palette += STARTBONUSPALS;
	}
	else if (MO.bIceDamage)
	{
		// Frozen player
		Palette = STARTICEPAL;
	}
	else
	{
		Palette = WeaponPalette;
	}
}

//==========================================================================
//
//  SetViewPos
//
//==========================================================================

void SetViewPos()
{
	ViewOrg.x = MO.Origin.x;
	ViewOrg.y = MO.Origin.y;

	if (LocalQuakeHappening)
	{
		float intensity;

		intensity = itof(LocalQuakeHappening);
		ViewOrg.x += (Random() - 0.5) * (intensity * 4.0);
		ViewOrg.y += (Random() - 0.5) * (intensity * 4.0);
	}

	ViewAngles = MO.Angles;

	PaletteFlash();

	Stats.flags = Keys;
	Stats.flags |= ReadyWeapon << SBF_WPN_SHIFT;
//[Korax]
//	Stats.flags |= Pieces << SBF_PIECES_SHIFT;
	if (Powers[pw_flight])
	{
		if (Powers[pw_flight] > BLINKTHRESHOLD ||
			!(ftoi(Powers[pw_flight] * 35.0) & 16))
		{
			Stats.flags |= SBF_POWER_FLIGHT;
		}
	}
	if (Powers[pw_speed])
	{
		if (Powers[pw_speed] > BLINKTHRESHOLD ||
			!(ftoi(Powers[pw_speed] * 35.0) & 16))
		{
			Stats.flags |= SBF_POWER_SPEED;
		}
	}
	if (Powers[pw_invulnerability])
	{
		if (Powers[pw_invulnerability] > BLINKTHRESHOLD ||
			!(ftoi(Powers[pw_invulnerability] * 35.0) & 16))
		{
			Stats.flags |= SBF_POWER_INVULN;
		}
	}
	if (Powers[pw_minotaur])
	{
		if (Powers[pw_minotaur] > BLINKTHRESHOLD ||
			!(ftoi(Powers[pw_minotaur] * 35.0) & 16))
		{
			Stats.flags |= SBF_POWER_MINOTAUR;
		}
	}
	if (MO.bFly)
	{
		Stats.flags |= SBF_IN_FLIGHT;
	}
}

//==========================================================================
//
//  PlayerUseArtifact
//
//==========================================================================

void PlayerUseArtifact(int arti)
{
//[Korax]
	if (arti == arti_poisonbag)
	{
		int manause = 20;
		manause = manause * 10 / wisdom;
		if (Mana[MANA_5] >= manause)
		{
			UseArtiPoisonBag();
			Mana[MANA_5] -= manause;
		}
		return;
	}
	else if (arti == arti_blastradius)
	{
		int manause = 20;
		manause = manause * 10 / wisdom;
		if (Mana[MANA_4] >= manause)
		{
			UseArtiBlastRadius();
			Mana[MANA_4] -= manause;
		}
		return;
	}
//[Korax]


	int i;

	for (i = 0; i < InventorySlotNum; i++)
	{
		if (Inventory[i].type == arti)
		{
			// Found match - try to use
			if (UseArtifact(arti))
			{
				// Artifact was used - remove it from inventory
				PlayerRemoveArtifact(i);
				if (arti < arti_firstpuzzitem)
				{
					MO.PlaySound('UseArtifact', CHAN_ITEM);
				}
				else
				{
					MO.PlaySound('PuzzleSuccess', CHAN_ITEM);
				}
				ArtifactFlash = 4;
			}
			else if (arti < arti_firstpuzzitem)
			{
				// Unable to use artifact, advance pointer
				PlayerNextArtifact();
			}
			break;
		}
	}

}

//==========================================================================
//
//  PlayerNextArtifact
//
//==========================================================================

void PlayerNextArtifact()
{
	InvPtr--;
	if (InvPtr < 6)
	{
		InvCurPos--;
		if (InvCurPos < 0)
		{
			InvCurPos = 0;
		}
	}
	if (InvPtr < 0)
	{
		InvPtr = InventorySlotNum - 1;
		if (InvPtr < 6)
		{
			InvCurPos = InvPtr;
		}
		else
		{
			InvCurPos = 6;
		}
	}
	ReadyArtifact = Inventory[InvPtr].type;
}

//==========================================================================
//
//  PlayerRemoveArtifact
//
//==========================================================================

void PlayerRemoveArtifact(int slot)
{
	int i;

	ArtifactCount--;
	if (!(--Inventory[slot].count))
	{
		// Used last of a type - compact the artifact list
		ReadyArtifact = arti_none;
		Inventory[slot].type = arti_none;
		for (i = slot + 1; i < InventorySlotNum; i++)
		{
			Inventory[i - 1].type = Inventory[i].type;
			Inventory[i - 1].count = Inventory[i].count;
		}
		InventorySlotNum--;
		// Set position markers and get next ReadyArtifact
		InvPtr--;
		if (InvPtr < 6)
		{
			InvCurPos--;
			if (InvCurPos < 0)
			{
				InvCurPos = 0;
			}
		}
		if (InvPtr >= InventorySlotNum)
		{
			InvPtr = InventorySlotNum - 1;
		}
		if (InvPtr < 0)
		{
			InvPtr = 0;
		}
		ReadyArtifact = Inventory[InvPtr].type;
	}
}

//==========================================================================
//
//  UseArtifact
//
//  Returns true if the artifact was used.
//
//==========================================================================

bool UseArtifact(int arti)
{
	int i;
	int count;

	switch (arti)
	{
	case arti_health:
		if (!GiveBody(25))
		{
			return false;
		}
		break;
	case arti_superhealth:
		if (!GiveBody(100))
		{
			return false;
		}
		break;
	case arti_invulnerability:
		if (!GivePower(pw_invulnerability))
		{
			return false;
		}
		break;
	case arti_torch:
		if (!GivePower(pw_infrared))
		{
			return false;
		}
		break;
	case arti_fly:
		if (!GivePower(pw_flight))
		{
			return false;
		}
		if (MO.Velocity.z <= -35.0 * 35.0)
		{
			// stop falling scream
			MO.StopSound(CHAN_AUTO);
		}
		break;
	case arti_teleport:
		UseArtiTele();
		break;
	case arti_egg:
		UseArtiPig();
		break;
	case arti_healingradius:
		if (!UseArtiHealRadius())
		{
			return false;
		}
		break;
	case arti_summon:
		UseArtiSummon();
		break;
	case arti_blastradius:
		UseArtiBlastRadius();
		break;
	case arti_poisonbag:
		UseArtiPoisonBag();
		break;
	case arti_teleportother:
		UseArtiTeleportOther();
		break;
	case arti_speed:
		if (!GivePower(pw_speed))
		{
			return false;
		}
		break;
	case arti_boostmana:
		if (!GiveMana(MANA_3, MAX_MANA))
		{
			return false;
		}
		break;
	case arti_boostarmor:
		count = 0;

		for (i = 0; i < NUMARMOR; i++)
		{
			count += GiveArmor(i, 1);	// 1 point per armor type
		}
		if (!count)
		{
			return false;
		}
		break;
	case arti_invisibility:
		if (!GivePower(pw_invisibility))
		{
			return false;
		}
		break;


	case arti_puzzskull:
	case arti_puzzgembig:
	case arti_puzzgemred:
	case arti_puzzgemgreen1:
	case arti_puzzgemgreen2:
	case arti_puzzgemblue1:
	case arti_puzzgemblue2:
	case arti_puzzbook1:
	case arti_puzzbook2:
	case arti_puzzskull2:
	case arti_puzzfweapon:
	case arti_puzzcweapon:
	case arti_puzzmweapon:
	case arti_puzzgear1:
	case arti_puzzgear2:
	case arti_puzzgear3:
	case arti_puzzgear4:
		if (P_UsePuzzleItem(self, arti - arti_firstpuzzitem))
		{
			return true;
		}
		else
		{
			centerprint(self, TXT_USEPUZZLEFAILED);
			return false;
		}
		break;
	default:
		return false;
	}
	return true;
}

//==========================================================================
//
//  UseArtiTele
//
//==========================================================================

void UseArtiTele()
{
	int i;
	float destX;
	float destY;
	float destAngle;

	if (deathmatch)
	{
		i = P_Random() % level->numdeathmatchstarts;
		destX = level->deathmatchstarts[i].x;
		destY = level->deathmatchstarts[i].y;
		destAngle = itof(45 * (level->deathmatchstarts[i].angle / 45));
	}
	else
	{
		destX = level->playerstarts[0].x;
		destY = level->playerstarts[0].y;
		destAngle = itof(45 * (level->playerstarts[0].angle / 45));
	}
	MO.Teleport(vector(destX, destY, ONFLOORZ), destAngle, true, true,
		false);
	if (MorphTime)
	{
		// Teleporting away will undo any morph effects (pig)
		UndoPlayerMorph();
	}
}

//==========================================================================
//
//  UseArtiPig
//
//==========================================================================

void UseArtiPig()
{
	SpawnPlayerMissile(EggMissile);
	SpawnPlayerMissileAngle(EggMissile, AngleMod360(MO.Angles.yaw - 7.5));
	SpawnPlayerMissileAngle(EggMissile, AngleMod360(MO.Angles.yaw + 7.5));
	SpawnPlayerMissileAngle(EggMissile, AngleMod360(MO.Angles.yaw - 15.0));
	SpawnPlayerMissileAngle(EggMissile, AngleMod360(MO.Angles.yaw + 15.0));
}

//==========================================================================
//
//  UseArtiHealRadius
//
//  Do class specific effect for everyone in radius
//
//==========================================================================

bool UseArtiHealRadius()
{
	PlayerPawn P;
	float dist;
	int effective = false;
	int amount;

	FOREACH(PlayerPawn, P)
	{
		if (!P.bIsPlayer)
			continue;
		if (P.Health <= 0)
			continue;
		dist = MobjDist(MO, P);
		if (dist > HEAL_RADIUS_DIST)
		{
			// Out of range
			continue;
		}

		switch (PClass)
		{
		case PCLASS_FIGHTER:	// Radius armor boost
			if ((P.Player.GiveArmor(ARMOR_ARMOR, 1)) ||
				(P.Player.GiveArmor(ARMOR_SHIELD, 1)) ||
				(P.Player.GiveArmor(ARMOR_HELMET, 1)) ||
				(P.Player.GiveArmor(ARMOR_AMULET, 1)))
			{
				effective = true;
				P.PlaySound('MysticIncant', CHAN_ITEM);
			}
			break;
		case PCLASS_CLERIC:	// Radius heal
			amount = 50 + (P_Random() % 50);
			if (P.Player.GiveBody(amount))
			{
				effective = true;
				P.PlaySound('MysticIncant', CHAN_ITEM);
			}
			break;
		case PCLASS_MAGE:	// Radius mana boost
			amount = 50 + (P_Random() % 50);
			if ((P.Player.GiveMana(MANA_1, amount)) ||
				(P.Player.GiveMana(MANA_2, amount)) ||
				(P.Player.GiveMana(MANA_3, amount)))
			{
				effective = true;
				P.PlaySound('MysticIncant', CHAN_ITEM);
			}
			break;
		case PCLASS_PIG:
		default:
			break;
		}
	}
	return effective;
}

//==========================================================================
//
//  UseArtiSummon
//
//  [FB] Original function
//
//==========================================================================

void UseArtiSummon()
{
/*	Actor mo;

	mo = SpawnPlayerMissile(SummonMissile);
	if (mo)
	{
		mo.Instigator = MO;
		mo.Velocity.z = 5.0 * 35.0;
	}*/
//                          ^
// [FB] Old behaviour above |
	int i;
	float x;
	float y;
	float z;
	TVec Orig;
	TVec dir;
	Actor fog, newmobj;

	if (!MinotaurSpotCount)
	{
		// No spots
		return;
	}
	i = P_Random();

	i++;
	x = MinotaurSpot[i % MinotaurSpotCount].x;
	y = MinotaurSpot[i % MinotaurSpotCount].y;
	z = MinotaurSpot[i % MinotaurSpotCount].z;
	dir = MinotaurSpot[i % MinotaurSpotCount] /*-Origin*/;
	Orig = vector(x, y, z);

	fog = Spawn(TeleportFog, Orig);
	fog.PlaySound('Teleport', CHAN_VOICE);
	newmobj = Spawn(SummonMissile, Orig);
	newmobj.Origin.x = MinotaurSpot[i % MinotaurSpotCount].x;
	newmobj.Origin.y = MinotaurSpot[i % MinotaurSpotCount].y;
	newmobj.Origin.z = MinotaurSpot[i % MinotaurSpotCount].z;
	newmobj.Angles.yaw = MinotaurSpot_angle[i % MinotaurSpotCount];
	newmobj.Velocity.z = 5.0 * 35.0;
	newmobj.Instigator = MO;
	newmobj.bTelestomp = true;
	used = true;
}

//==========================================================================
//
//  UseArtiBlastRadius
//
//  Blast all mobj things away
//
//==========================================================================

void UseArtiBlastRadius()
{
	Actor mo;
	float dist;

	MO.PlaySound('BlastRadius', CHAN_ITEM);
	NoiseAlert(MO, MO);

	FOREACH(Actor, mo)
	{
		if ((mo == MO) || mo.bBoss)
		{
			// Not a valid monster
			continue;
		}
		if ((mo.Class == PoisonCloud) ||	// poison cloud
			(mo.Class == HolyFX) ||		// holy fx
			mo.bIceCorpse)			// frozen corpse
		{
			// Let these special cases go
		}
		else if (mo.bCountKill && (mo.Health <= 0))
		{
			continue;
		}
		else if (!mo.bCountKill && !mo.bIsPlayer && !mo.bMissile)
		{
			// Must be monster, player, or missile
			continue;
		}
		if (mo.bDormant)
		{
			continue;	// no dormant creatures
		}
		if ((mo.Class == WraithBuried) && mo.bHidden)
		{
			continue;	// no underground wraiths
		}
		if ((mo.Class == SplashBase) || (mo.Class == Splash))
		{
			continue;
		}
		if (mo.Class == Serpent || mo.Class == SerpentLeader)
		{
			continue;
		}
		dist = MobjDist(MO, mo);
		if (dist > BLAST_RADIUS_DIST)
		{
			// Out of range
			continue;
		}
		mo.Blast(MO, BLAST_FULLSTRENGTH);
	}
}

//==========================================================================
//
//  UseArtiPoisonBag
//
//==========================================================================

void UseArtiPoisonBag()
{
	float angle;
	Actor bomb;

	angle = MO.Angles.yaw;
	if (PClass == PCLASS_CLERIC || PClass == PCLASS_WITCHAVEN)
	{
		bomb = Spawn(PoisonBag, MO.Origin +
			vector(16.0 * cos(angle), 24.0 * sin(angle), 8.0 - MO.FloorClip));
		if (bomb)
		{
			bomb.Instigator = MO;
		}
	}
	else if (PClass == PCLASS_MAGE || PClass == PCLASS_HERETIC)
	{
		bomb = Spawn(FireBomb, MO.Origin +
			vector(16.0 * cos(angle), 24.0 * sin(angle), 8.0 - MO.FloorClip));
		if (bomb)
		{
			bomb.Instigator = MO;
		}
	}
	else	// PCLASS_FIGHTER, obviously (also pig, not so obviously)
	{
		bomb = Spawn(ThrowingBomb, MO.Origin +
			vector(0.0, 0.0, 35.0 - MO.FloorClip));
		if (bomb)
		{
			bomb.Angles.yaw = AngleMod360(MO.Angles.yaw +
				(Random() * 2.0 - 1.0) * 45.0 / 8.0);
			bomb.Velocity.z =
				(4.0 + 173.0 * -tan(MO.Angles.pitch) / 16.0) * 35.0;
			bomb.Origin.z += 173.0 * -tan(MO.Angles.pitch) / 16.0;
			bomb.Thrust(bomb.Angles.yaw, bomb.Speed * frametime);
			bomb.Velocity.x += MO.Velocity.x / 2.0;
			bomb.Velocity.y += MO.Velocity.y / 2.0;
			bomb.Instigator = MO;
			bomb.StateTime -= Random() * 0.1;
			bomb.CheckMissileSpawn();
		}
	}
}

//==========================================================================
//
//  UseArtiTeleportOther
//
//==========================================================================

void UseArtiTeleportOther()
{
	Actor mo;

	mo = SpawnPlayerMissile(TeleportOtherFX1);
	if (mo)
	{
		mo.Instigator = MO;
	}
}

//==========================================================================
//
//  SpawnPlayerMissile
//
//  Tries to aim at a nearby monster
//
//==========================================================================

Actor SpawnPlayerMissile(classid type)
{
	return SpawnPlayerMissile2(type, true);
}

//==========================================================================
//
//  SpawnPlayerMissile2
//
//  Tries to aim at a nearby monster
//
//==========================================================================

Actor SpawnPlayerMissile2(classid type, bool explode)
{
	Actor MissileMobj;
	TAVec angles;
	TVec vforward;
	TVec org;

	// Try to find a target
	angles = MO.Angles;
	AimLineAttack(MO, &angles, 16.0 * 64.0);
	if (!linetarget)
	{
		angles.yaw = AngleMod360(angles.yaw + 45.0 / 8.0);
		AimLineAttack(MO, &angles, 16.0 * 64.0);
		if (!linetarget)
		{
			angles.yaw = AngleMod360(angles.yaw - 45.0 / 4.0);
			AimLineAttack(MO, &angles, 16.0 * 64.0);
			if (!linetarget)
			{
				angles.yaw = MO.Angles.yaw;
			}
		}
	}
	org = MO.Origin;
	if (type == LightningFloor)
	{
		org.z = ONFLOORZ;
		angles.pitch = 0.0;
	}
	else if (type == LightningCeiling)
	{
		org.z = ONCEILINGZ;
		angles.pitch = 0.0;
	}
	else
	{
		org.z = MO.Origin.z + 4.0 * 8.0 - tan(MO.Angles.pitch);
		org.z -= MO.FloorClip;
	}
	MissileMobj = Spawn(type, org);
	MissileMobj.Instigator = MO;
	MissileMobj.Angles = angles;
	AngleVector(&angles, &vforward);
	MissileMobj.Velocity = vforward * MissileMobj.Speed;
	if (MissileMobj.Class == MageWandMissile || MissileMobj.Class == MageWandRedMissile ||
		 MissileMobj.Class == MageWandGreyMissile || MissileMobj.Class == ClericFlameMissile)
	{
		// Ultra-fast ripper spawning missile
		MissileMobj.Origin += MissileMobj.Velocity * frametime / 8.0;
	}
	else
	{
		// Normal missile
		MissileMobj.Origin += MissileMobj.Velocity * frametime / 2.0;
	}
	if (explode)
	{
		if (!MissileMobj.TryMove(MissileMobj.Origin))
		{
			// Exploded immediately
			MissileMobj.ExplodeMissile();
			return none;
		}
	}
	return MissileMobj;
}

//===========================================================================
//
//  SpawnPlayerMissileAngle
//
//===========================================================================

Actor SpawnPlayerMissileAngle(classid type, float angle)
{
	TAVec angles;
	TVec vforward;
	Actor th;
	TVec org;

	//
	// see which target is to be aimed at
	//
	angles = MO.Angles;
	angles.yaw = angle;
	AimLineAttack(MO, &angles, 16.0 * 64.0);
	if (!linetarget)
	{
		angles.yaw = AngleMod360(angles.yaw + 45.0 / 8.0);
		AimLineAttack(MO, &angles, 16.0 * 64.0);
		if (!linetarget)
		{
			angles.yaw = AngleMod360(angles.yaw - 45.0 / 4.0);
			AimLineAttack(MO, &angles, 16.0 * 64.0);
			if (!linetarget)
			{
				angles.yaw = angle;
			}
		}
	}
	org = MO.Origin;
	org.z = MO.Origin.z + 4.0 * 8.0 - tan(MO.Angles.pitch);
	org.z -= MO.FloorClip;
	th = Spawn(type, org);
	th.Instigator = MO;
	th.Angles = angles;
	AngleVector(&angles, &vforward);
	th.Velocity = vforward * th.Speed;
	return th.CheckMissileSpawn() ? th : none;
}

//===========================================================================
//
//  SpawnPlayerMissileAngleXYZ
//
//===========================================================================

Actor SpawnPlayerMissileAngleXYZ(TVec org, classid type, float angle)
{
	Actor th;
	TAVec angles;
	TVec vforward;

	//
	// see which target is to be aimed at
	//
	angles = MO.Angles;
	angles.yaw = angle;
	AimLineAttack(MO, &angles, 16.0 * 64.0);
	if (!linetarget)
	{
		angles.yaw = AngleMod360(angles.yaw + 45.0 / 8.0);
		AimLineAttack(MO, &angles, 16.0 * 64.0);
		if (!linetarget)
		{
			angles.yaw = AngleMod360(angles.yaw - 45.0 / 4.0);
			AimLineAttack(MO, &angles, 16.0 * 64.0);
			if (!linetarget)
			{
				angles.yaw = angle;
			}
		}
	}
	org.z += 4.0 * 8.0 - tan(MO.Angles.pitch);
	org.z -= MO.FloorClip;
	th = Spawn(type, org);
	th.Instigator = MO;
	th.Angles = angles;
	AngleVector(&angles, &vforward);
	th.Velocity = vforward * th.Speed;
	return th.CheckMissileSpawn() ? th : none;
}

//============================================================================
//
//  AdjustPlayerAngle
//
//============================================================================

void AdjustPlayerAngle()
{
	float angle;
	float difference;

	angle = atan2(linetarget.Origin.y - MO.Origin.y,
		linetarget.Origin.x - MO.Origin.x);
	difference = AngleMod180(angle - MO.Angles.yaw);
	if (fabs(difference) > 5.0)
	{
		MO.Angles.yaw += difference > 0.0 ? 5.0 : -5.0;
	}
	else
	{
		MO.Angles.yaw = angle;
	}
	bFixAngle = true;
}

//****************************************************************************
//
//  WEAPON UTILITES
//
//****************************************************************************

//==========================================================================
//
//	SetWeapon
//
//==========================================================================

void SetWeapon(int NewWeapon)
{
	ReadyWeapon = NewWeapon;
	PendingWeapon = wp_nochange;

	if (ViewEnts[ps_weapon])
	{
		ViewEnts[ps_weapon].Destroy();
	}
	ViewEnts[ps_weapon] =
		SpawnObject(WeaponClasses[NewWeapon * NUMCLASSES + PClass], none);
	ViewEnts[ps_weapon].Player = self;
	PSpriteSY = Weapon(ViewEnts[ps_weapon]).PSpriteSY;
}

//===========================================================================
//
//  SetPsprite
//
//===========================================================================

void SetPsprite(int position, int stnum)
{
	ViewEnts[position].SetState(stnum);
}

//===========================================================================
//
//  BringUpWeapon
//
//  Starts bringing the pending weapon up from the bottom of the screen.
//
//==========================================================================

void BringUpWeapon()
{
	PendingWeapon = wp_nochange;
	ViewEnts[ps_weapon].SY = WEAPONBOTTOM;
	ViewEnts[ps_weapon].SetState(Weapon(ViewEnts[ps_weapon]).GetUpState());
}

//==========================================================================
//
//  DropWeapon
//
//  The player died, so put the weapon away.
//
//==========================================================================

void DropWeapon()
{
	ViewEnts[ps_weapon].SetState(Weapon(ViewEnts[ps_weapon]).GetDownState());
}

//==========================================================================
//
//  SetupPsprites
//
//  Called at start of level for each player
//
//==========================================================================

void SetupPsprites()
{
	int i;

	// Remove all psprites
	for (i = 0; i < NUMPSPRITES; i++)
	{
		ViewEnts[i].StateNum = 0;
	}
	// Spawn the ready weapon
	BringUpWeapon();
}

//==========================================================================
//
//  MovePsprites
//
//  Called every tic by player thinking routine
//
//==========================================================================

void MovePsprites()
{
	int i;
	ViewEntity e;

	for (i = 0; i < NUMPSPRITES; i++)
	{
		e = ViewEnts[i];
		if (e.StateNum)	// a null state means not active
		{
			// drop tic count and possibly change state
			if (e.StateTime != -1.0)	// a -1 tic count never changes
			{
//[Korax]
				if (Weapon(e).dex_mod)
				{
					if (dexterity < 6)
						e.StateTime -= frametime * 0.8;
					else if (dexterity > 34)
						e.StateTime -= frametime * 3.5;
					else if (dexterity > 24)
						e.StateTime -= frametime * 2.5;
					else if (dexterity > 14)
						e.StateTime -= frametime * 1.5;
					else
						e.StateTime -= frametime;
				}
				else
				{
					e.StateTime -= frametime;
				}
				if (e.StateTime <= 0.0)
				{
					e.StateTime = 0.0;
					e.SetState(e.NextState);
				}
			}
		}
	}
	ViewEnts[ps_flash].SX = ViewEnts[ps_weapon].SX;
	ViewEnts[ps_flash].SY = ViewEnts[ps_weapon].SY;
}

//==========================================================================
//
//  CheckMana
//
//  Returns true if there is enough mana to shoot.  If not, selects the
// next weapon to use.
//
//==========================================================================

bool CheckMana()
{
	/*Weapon cur_weap;

	cur_weap = Weapon(player.ViewEnts[ps_weapon]);
	if (cur_weap.Mana == MANA_NONE || cur_weap.needsnomana 
		|| IsWeaponManaUsable(player, cur_weap))*/
	if (GetWeaponMUse(ReadyWeapon))
	{
		return true;
	}
	centerprint(self, "No mana");
	// out of mana, pick a weapon to change to
	do
	{
		if (WeaponOwned[WP_EIGHTH] && GetWeaponMUse(WP_EIGHTH))
		{
			PendingWeapon = WP_EIGHTH;
		}
		else if (WeaponOwned[WP_SEVENTH] && GetWeaponMUse(WP_SEVENTH))
		{
			PendingWeapon = WP_SEVENTH;
		}
		else if (WeaponOwned[WP_SIXTH] && GetWeaponMUse(WP_SIXTH))
		{
			PendingWeapon = WP_SIXTH;
		}
		else if (WeaponOwned[WP_FIFTH] && GetWeaponMUse(WP_FIFTH))
		{
			PendingWeapon = WP_FIFTH;
		}
		else if (WeaponOwned[WP_FOURTH] && GetWeaponMUse(WP_FOURTH))
		{
			PendingWeapon = WP_FOURTH;
		}
		else if (WeaponOwned[WP_THIRD] && GetWeaponMUse(WP_THIRD))
		{
			PendingWeapon = WP_THIRD;
		}
		else if (WeaponOwned[WP_SECOND] && GetWeaponMUse(WP_SECOND))
		{
			PendingWeapon = WP_SECOND;
		}
		else 
		{
			PendingWeapon = WP_FIRST;
		}
	}
	while (PendingWeapon == wp_nochange);
	SetPsprite(ps_weapon, Weapon(ViewEnts[ps_weapon]).GetDownState());
	return false;
}

//==========================================================================
//
//  FireWeapon
//
//==========================================================================

void FireWeapon()
{
	if (!CheckMana())
	{
		return;
	}
	MO.SetState(MO.MissileState);
	ViewEnts[ps_weapon].SetState(
		Weapon(ViewEnts[ps_weapon]).GetAttackState());
	NoiseAlert(MO, MO);
}

//==========================================================================
//
//  ActivateMorphWeapon
//
//==========================================================================

void ActivateMorphWeapon()
{
	ViewEnts[ps_weapon].SY = WEAPONTOP;
	SetWeapon(WP_FIRST);	// Snout is the first weapon
	SetPsprite(ps_weapon, Weapon(ViewEnts[ps_weapon]).ReadyState);
}

//==========================================================================
//
//  PostMorphWeapon
//
//==========================================================================

void PostMorphWeapon(int weapon)
{
	SetWeapon(weapon);
	ViewEnts[ps_weapon].SY = WEAPONBOTTOM;
	SetPsprite(ps_weapon, Weapon(ViewEnts[ps_weapon]).UpState);
}

//==========================================================================
//
//  GetWeaponManaUse
//
//==========================================================================

int GetWeaponManaUse(Weapon weapon)
{
	int manause = weapon.manause;
	if (weapon.wis_mod)
	{
		manause = manause * 10 / wisdom;
	}
	return manause;
}

//==========================================================================
//
//  GetWeaponMUse
//
//==========================================================================

bool GetWeaponMUse(int weapon)
{
	Weapon w;
	bool manause;

	w = GetWea(weapon);
	manause = w.Mana == MANA_NONE || w.needsnomana || w.IsWeaponManaUsable();
	w.Destroy();
	return manause;
}

//==========================================================================
//
//  GetWea
//
//==========================================================================

Weapon GetWea(int weapon)
{
	Weapon w;

	w = Weapon(SpawnObject(WeaponClasses[weapon * NUMCLASSES + PClass], none));
	w.Player = self;
	return w;
}

//==========================================================================
//
//  GetWeaponPickupText
//
//==========================================================================

string GetWeaponPickupText(int weapon)
{
	Weapon w;
	string pick_m;

	w = GetWea(weapon);
	pick_m = w.PickUpMessage;
	w.Destroy();
	return pick_m;
}

//==========================================================================
//
//  Cheat_God
//
//==========================================================================

void Cheat_God()
{
	Cheats ^= CF_GODMODE;
	if (Cheats & CF_GODMODE)
	{
		cprint(self, "GOD MODE ON");
	}
	else
	{
		cprint(self, "GOD MODE OFF");
	}
}

//==========================================================================
//
//  Cheat_NoClip
//
//==========================================================================

void Cheat_NoClip()
{
	Cheats ^= CF_NOCLIP;
	if (Cheats & CF_NOCLIP)
	{
		cprint(self, "NO CLIPPING ON");
	}
	else
	{
		cprint(self, "NO CLIPPING OFF");
	}
}

//==========================================================================
//
//  Cheat_Gimme
//
//==========================================================================

void Cheat_Gimme()
{
	if (Cmd_CheckParm("weapons"))
	{
		int i;

/*		for (i = 0; i < NUMARMOR; i++)
		{
			ArmorPoints[i] = ArmorIncrement[PClass * NUMARMOR + i];
		}
*/
		ArmorPoints = 200;
		for (i = 0; i < NUMWEAPONS; i++)
		{
			WeaponOwned[i] = true;
		}
		for (i = 0; i < NUMMANA; i++)
		{
			Mana[i] = MAX_MANA;
		}
//		Pieces = 7;
		cprint(self, "ALL WEAPONS");
	}
	if (Cmd_CheckParm("health"))
	{
		if (MorphTime)
		{
			MO.Health = MAXMORPHHEALTH;
			Health = MO.Health;
		}
		else
		{
			MO.Health = max_health;
			Health = MO.Health;
		}
		cprint(self, "FULL HEALTH");
	}
	if (Cmd_CheckParm("keys"))
	{
		Keys = 2047;
		cprint(self, "ALL KEYS");
	}
	if (Cmd_CheckParm("artifacts"))
	{
		int i;
		int j;

		for (i = arti_none + 1; i < arti_firstpuzzitem; i++)
		{
			for (j = 0; j < 25; j++)
			{
				GiveArtifact(i);
			}
		}
		cprint(self, "ALL ARTIFACTS");
	}
	if (Cmd_CheckParm("puzzles"))
	{
		int i;

		for (i = arti_firstpuzzitem; i < NUMARTIFACTS; i++)
		{
			GiveArtifact(i);
		}
		cprint(self, "ALL ARTIFACTS");
	}
	if (Cmd_CheckParm("exp"))
	{
		GiveExperience(10000);
		cprint(self, "LOTS OF EXP");
	}
}

//==========================================================================
//
//  Cheat_KillAll
//
//==========================================================================

void Cheat_KillAll()
{
	cprint(self, "%d MONSTERS KILLED", P_Massacre());
}

//==========================================================================
//
//  Cheat_Morph
//
//==========================================================================

void Cheat_Morph()
{
	if (MorphTime)
	{
		UndoPlayerMorph();
	}
	else
	{
		MO.MorphPlayer();
	}
	cprint(self, "SQUEAL!!");
}

//==========================================================================
//
//  Cheat_NoWeapons
//
//==========================================================================

void Cheat_NoWeapons()
{
	int i;

	if (MorphTime)
	{
		return;
	}
	for (i = 1; i < 4; i++)
	{
		WeaponOwned[i] = false;
	}
	PendingWeapon = WP_FIRST;
//	Pieces = 0;
	cprint(self, "CHEATER - YOU DON'T DESERVE WEAPONS");
}

//==========================================================================
//
//  Cheat_Class
//
//==========================================================================

void Cheat_Class()
{
	int i;
	int pclass;

	if (MorphTime)
	{
		// don't change class if the player is morphed
		return;
	}
	if (Cmd_CheckParm("fighter"))
		pclass = PCLASS_FIGHTER;
	else if (Cmd_CheckParm("cleric"))
		pclass = PCLASS_CLERIC;
	else if (Cmd_CheckParm("mage"))
		pclass = PCLASS_MAGE;
	else if (Cmd_CheckParm("heretic"))
		pclass = PCLASS_HERETIC;
	else if (Cmd_CheckParm("marine"))
		pclass = PCLASS_MARINE;
	else if (Cmd_CheckParm("witchaven"))
		pclass = PCLASS_WITCHAVEN;
	else
	{
		cprint(self, "INVALID PLAYER CLASS");
		return;
	}
	PClass = pclass;
/*	for (i = 0; i < NUMARMOR; i++)
	{
		ArmorPoints[i] = 0.0;
	}
*/
	ArmorPoints = 0;
	BaseClass = pclass;
	PostMorphWeapon(WP_FIRST);
	SetCvar("class", pclass);
	SB_Start();
}

//==========================================================================
//
//  UnarchivePlayer
//
//==========================================================================

void UnarchivePlayer()
{
	Attacker = none;
	Poisoner = none;
	Blinder = none;
}

defaultproperties
{
}

//**************************************************************************
//
//  $Log$
//  Revision 1.16  2005/08/12 16:23:01  firebrand_kh
//  Added new artifacts & made some fixes
//
//  Revision 1.15  2005/08/08 20:07:46  firebrand_kh
//  Fixed Blind count to reset when the player is spawned
//
//  Revision 1.14  2005/08/03 00:56:38  firebrand_kh
//  New leveling system
//
//  Revision 1.13  2005/07/29 13:44:04  firebrand_kh
//  Fixed moving speed to be affected by attributes, level req's for weapons
//
//  Revision 1.12  2005/07/16 10:16:08  dj_jl
//  Increased jump velocity.
//
//  Revision 1.11  2005/05/09 22:49:29  firebrand_kh
//  Fixed Weapon of Darkness to blind the Player
//
//  Revision 1.10  2005/03/28 07:58:56  dj_jl
//  Latest Vavoom updates.
//
//  Revision 1.9  2005/02/11 16:17:01  firebrand_kh
//  Fixed witchavens translations
//
//  Revision 1.8  2005/02/03 01:05:06  firebrand_kh
//  Fixed Doom Guy weapon bug with the new effects
//
//  Revision 1.7  2004/12/30 01:56:48  firebrand_kh
//  Modified for the Witchaven Guy translations
//
//  Revision 1.6  2004/12/27 12:30:01  dj_jl
//  Vavoom version 1.16 changes.
//
//  Revision 1.5  2004/12/09 00:07:08  firebrand_kh
//  Added code for the Witchaven player class
//
//  Revision 1.4  2004/11/25 16:17:16  firebrand_kh
//  Fixed some stuff for the Witchaven class
//
//  Revision 1.3  2004/11/23 12:50:27  dj_jl
//  Added support for many sector specials.
//
//  Revision 1.2  2004/11/17 16:07:53  firebrand_kh
//  *** empty log message ***
//
//  Revision 1.1  2004/11/16 13:33:22  dj_jl
//  Initial import.
//
//  Revision 1.1  2003/11/12 16:50:47  dj_jl
//  Changed player structure into a class
//
//**************************************************************************
