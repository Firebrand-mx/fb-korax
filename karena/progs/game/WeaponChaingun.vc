//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**		##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id$
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class WeaponChaingun : Weapon;

//===========================================================================
//
//  A_FireCGun
//
//===========================================================================

final void A_FireCGun()
{
	TVec dir;
	TAVec angles;

	Owner.PlaySound('PistolFire', CHAN_WEAPON);

/*	if (!Player.Ammo[Ammo])
		return;
*/
	Owner.SetState(Actor(Owner).MissileState);
	UseWeaponMana();

	if (Owner.Player.ViewStates[ps_weapon].State == Weapon(self).AttackState)
		Owner.Player.SetViewState(ps_flash, Weapon(self).FlashState);
	else
		Owner.Player.SetViewState(ps_flash, S_CHAINFLASH2);

	angles = Actor(Owner).Angles;
	dir = Actor(Owner).AimLineAttack(angles, MISSILERANGE);
//	dir = Actor(Owner).Aim(16.0 * 64.0);
	GunShot2(Actor(Owner), !Player(Owner.Player).Refire, dir);
	Owner.Effects |= HexenDefs::EF_DL_MUZZLEFLASH;
}

__states__
{
	S_CHAIN('CHGG', 0, 1.0 / 35.0, S_CHAIN) = A_WeaponReady
	S_CHAINDOWN('CHGG', 0, 1.0 / 35.0, S_CHAINDOWN) = A_Lower
	S_CHAINUP('CHGG', 0, 1.0 / 35.0, S_CHAINUP) = A_Raise
	S_CHAIN1('CHGG', 0, 4.0 / 35.0, S_CHAIN2) = A_FireCGun
	S_CHAIN2('CHGG', 1, 4.0 / 35.0, S_CHAIN3) = A_FireCGun
	S_CHAIN3('CHGG', 1, 0.0 / 35.0, S_CHAIN) = A_ReFire
	S_CHAINFLASH1('CHGF', 0 | FF_FULLBRIGHT, 5.0 / 35.0, S_CHAIN_LIGHTDONE) = A_Light1
	S_CHAINFLASH2('CHGF', 1 | FF_FULLBRIGHT, 5.0 / 35.0, S_CHAIN_LIGHTDONE) = A_Light2
	S_CHAIN_LIGHTDONE('CHGG', 0, 0.0 / 35.0, none) = A_Light0
}

defaultproperties
{
	UpState = S_CHAINUP;
	DownState = S_CHAINDOWN;
	ReadyState = S_CHAIN;
	AttackState = S_CHAIN1;
	FlashState = S_CHAINFLASH1;
	HoldAttackState = S_CHAIN1;
	Mana = HexenDefs::MANA_3;
	manause = 3;
	wis_mod = true;
	int_mod = true;
	dex_mod = false;
	str_mod = false;
	PickUpMessage = "CHAINGUN";

	bInstantRanged = true;
	deathmsgi = 28;
}
