//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**		##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id: InfernalHandFX.vc 522 2006-08-19 16:05:33Z crimsonwizard $
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class InfernalHandFX : Projectile;


int ExplodeDamage;
float ExplodeDistance;
int BlastDamage;

//===========================================================================
//
//  RoughCheckThing
//
//===========================================================================

bool RoughCheckThing(Entity Other)
{
	float angle;
	Actor link = Actor(Other);
	
	if (!(link.bCountKill || link.bIsPlayer) || link == Target ||
		link.bDormant)
	{
		return false;
	}
	if (!link.bShootable)
	{
		return false;
	}
	if (Level.Game.netgame && !Level.Game.deathmatch && link.bIsPlayer)
	{
		return false;
	}
	if (CanSee(link))
	{
		angle = AngleMod360(atan2(
			link.Origin.y - Target.Origin.y,
			link.Origin.x - Target.Origin.x) -
			Target.Angles.yaw);
		if (angle > 226.0 * 360.0 / 256.0 ||
			angle < 30.0 * 360.0 / 256.0)
		{
			return true;
		}
	}
	return false;
}

//==========================================================================
//
//  A_HandExplode
//
//==========================================================================

final void A_HandExplode()
{
	// Spawn 8 random explosion effects in the bounds of explosion radius
	TVec pos;

	int i;
	for (i = 0; i < 8; i++)
	{
		dprint("A_Explode : expl");
		pos = vector(( Random() - 0.5 ) * ExplodeDistance * 2.0,
				( Random() - 0.5 ) * ExplodeDistance * 2.0,
					( Random() - 0.5 ) * 32.0 );
		if (CheckPosition(pos))
		{
			InfernalHandFX2 ihfx2 =
				InfernalHandFX2(HexenLevelInfo(Level).Spawn(InfernalHandFX2, Origin + pos));
			if (ihfx2)
			{
				if (!CanSee(ihfx2))
					ihfx2.Destroy();
				dprint("A_Explode : is at %f, %f, %f", ihfx2.Origin.x, ihfx2.Origin.y, ihfx2.Origin.z);
				ihfx2.Alpha = 1.0 - Length(ihfx2.Origin - Origin) / ExplodeDistance * 0.666;
				dprint("A_Explode : alpha  = %f", ihfx2.Alpha);
			}
		}
	}

	::A_Explode();
}

//==========================================================================
//
//  A_HHandTrack
//
//==========================================================================

final void A_HHandTrack()
{
	if (!Tracer && (P_Random() < 50))
	{
		Tracer = Actor(RoughMonsterSearch(10));
	}
	SeekerMissile(2.0, 10.0);
}

__states__
{
	S_INFERNALHAND_FX_1('SBS1', 0 | FF_FULLBRIGHT, 1.0 / 35.0, S_INFERNALHAND_FX_2) = A_HHandTrack
	S_INFERNALHAND_FX_2('SBS1', 0 | FF_FULLBRIGHT, 1.0 / 35.0, S_INFERNALHAND_FX_3) = A_HHandTrack
	S_INFERNALHAND_FX_3('SBS1', 1 | FF_FULLBRIGHT, 1.0 / 35.0, S_INFERNALHAND_FX_4) = A_HHandTrack
	S_INFERNALHAND_FX_4('SBS1', 1 | FF_FULLBRIGHT, 1.0 / 35.0, S_INFERNALHAND_FX_5) = A_HHandTrack
	S_INFERNALHAND_FX_5('SBS1', 2 | FF_FULLBRIGHT, 1.0 / 35.0, S_INFERNALHAND_FX_6) = A_HHandTrack
	S_INFERNALHAND_FX_6('SBS1', 2 | FF_FULLBRIGHT, 1.0 / 35.0, S_INFERNALHAND_FX_7) = A_HHandTrack
	S_INFERNALHAND_FX_7('SBS1', 3 | FF_FULLBRIGHT, 1.0 / 35.0, S_INFERNALHAND_FX_8) = A_HHandTrack
	S_INFERNALHAND_FX_8('SBS1', 3 | FF_FULLBRIGHT, 1.0 / 35.0, S_INFERNALHAND_FX_1) = A_HHandTrack
	S_INFERNALHAND_FX_X1('MSP1', 6 | FF_FULLBRIGHT, 2.0 / 35.0, S_INFERNALHAND_FX_X2) = none
	S_INFERNALHAND_FX_X2('MSP1', 7 | FF_FULLBRIGHT, 4.0 / 35.0, S_INFERNALHAND_FX_X3) = A_HandExplode
	S_INFERNALHAND_FX_X3('MSP1', 8 | FF_FULLBRIGHT, 4.0 / 35.0, S_INFERNALHAND_FX_X4) = none
	S_INFERNALHAND_FX_X4('MSP1', 9 | FF_FULLBRIGHT, 4.0 / 35.0, S_INFERNALHAND_FX_X5) = none
	S_INFERNALHAND_FX_X5('MSP1', 10 | FF_FULLBRIGHT, 4.0 / 35.0, S_INFERNALHAND_FX_X6) = none
	S_INFERNALHAND_FX_X6('MSP1', 11 | FF_FULLBRIGHT, 4.0 / 35.0, S_INFERNALHAND_FX_X7) = none
	S_INFERNALHAND_FX_X7('MSP1', 12 | FF_FULLBRIGHT, 4.0 / 35.0, S_INFERNALHAND_FX_X8) = none
	S_INFERNALHAND_FX_X8('MSP1', 13 | FF_FULLBRIGHT, 4.0 / 35.0, S_INFERNALHAND_FX_X9) = none
	S_INFERNALHAND_FX_X9('MSP1', 14 | FF_FULLBRIGHT, 4.0 / 35.0, S_INFERNALHAND_FX_X10) = none
	S_INFERNALHAND_FX_X10('MSP1', 15 | FF_FULLBRIGHT, 2.0 / 35.0, none) = none
}

defaultproperties
{
	ExplodeDamage = 125;
	ExplodeDistance = 192.0;
	BlastDamage = 40;

	Radius = 20.0;
	Height = 8.0;
	Speed = 800.0;
	MissileDamage = 8;
	bFireDamage = true;
	bSeekerMissile = true;
	IdleState = S_INFERNALHAND_FX_1;
	DeathState = S_INFERNALHAND_FX_X1;
	DeathSound = 'MageStaffExplode';
	Effects = HexenDefs::EF_DL_RED;

	//[CW]
	//deathmsgi[0] = 59;
	deathmsgi = 40;
}
