//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class LightningZap : Projectile;

LightningMissile LightningOwner;	//	Lightning missile that spawned zap.

//==========================================================================
//
//	Touch
//
//==========================================================================

bool Touch(Entity InOther)
{
	int damage;
	Actor Other;

	Other = Actor(InOther);
	if (!Other.bSolid && !Other.bSpecial && !Other.bShootable)
		return true;

	// Check for missile
	if (bMissile)
	{
		// Check for a non-shootable mobj
		if (Other.bNonShootable)
		{
			return true;
		}
		if (Other.bShootable && Other != Instigator)
		{
			if (LightningOwner)
			{
				if (LightningOwner.Class == LightningFloor)
				{
					if (LightningOwner.LightningLink &&
						!LightningOwner.LightningLink.Enemy)
					{
						LightningOwner.LightningLink.Enemy = Other;
					}
				}
				else if (!LightningOwner.Enemy)
				{
					LightningOwner.Enemy = Other;
				}
				if (!(Level.Game.level->tictime & 3))
				{
					LightningOwner.Health--;
				}
			}
		}
		if (Instigator && Instigator.Class == Other.Class)
		{
			// Don't hit same species as originator
			if (Other == Instigator)
			{
				// Don't missile self
				return true;
			}
			if (!Other.bIsPlayer)
			{
				// Hit same species as originator, explode, no damage
				return false;
			}
		}
		if (!Other.bShootable)
		{
			// Didn't do any damage
			return !Other.bSolid;
		}
		// Do damage
		damage = ((P_Random() % 8) + 1) * MissileDamage;
		if (damage)
		{
			if (!Other.bNoBlood && !Other.bReflective &&
				!Other.bInvulnerable && (P_Random() < 192))
			{
				Other.SpawnBloodSplatter(Origin);
			}
			Other.Damage(self, Instigator, damage);
		}
		return false;
	}
	return !Other.bSolid;
}

//==========================================================================
//
//  A_ZapMimic
//
//==========================================================================

void A_ZapMimic()
{
	if (LightningOwner)
	{
		if (!LightningOwner.bMissile ||
			LightningOwner.State == S_FREETARGMOBJ)
		{
			ExplodeMissile();
		}
		else
		{
			Velocity.x = LightningOwner.Velocity.x;
			Velocity.y = LightningOwner.Velocity.y;
		}
	}
}

__states__
{
	S_LIGHTNING_ZAP1('MLFX', 8 | FF_FULLBRIGHT, 2.0 / 35.0, S_LIGHTNING_ZAP2) { A_ZapMimic(); }
	S_LIGHTNING_ZAP2('MLFX', 9 | FF_FULLBRIGHT, 2.0 / 35.0, S_LIGHTNING_ZAP3) { A_ZapMimic(); }
	S_LIGHTNING_ZAP3('MLFX', 10 | FF_FULLBRIGHT, 2.0 / 35.0, S_LIGHTNING_ZAP4) { A_ZapMimic(); }
	S_LIGHTNING_ZAP4('MLFX', 11 | FF_FULLBRIGHT, 2.0 / 35.0, S_LIGHTNING_ZAP5) { A_ZapMimic(); }
	S_LIGHTNING_ZAP5('MLFX', 12 | FF_FULLBRIGHT, 2.0 / 35.0, S_LIGHTNING_ZAP1) { A_ZapMimic(); }
	S_LIGHTNING_ZAP_X1('MLFX', 13 | FF_FULLBRIGHT, 2.0 / 35.0, S_LIGHTNING_ZAP_X2) { }
	S_LIGHTNING_ZAP_X2('MLFX', 14 | FF_FULLBRIGHT, 2.0 / 35.0, S_LIGHTNING_ZAP_X3) { }
	S_LIGHTNING_ZAP_X3('MLFX', 15 | FF_FULLBRIGHT, 2.0 / 35.0, S_LIGHTNING_ZAP_X4) { }
	S_LIGHTNING_ZAP_X4('MLFX', 16 | FF_FULLBRIGHT, 2.0 / 35.0, S_LIGHTNING_ZAP_X5) { }
	S_LIGHTNING_ZAP_X5('MLFX', 17 | FF_FULLBRIGHT, 2.0 / 35.0, S_LIGHTNING_ZAP_X6) { }
	S_LIGHTNING_ZAP_X6('MLFX', 18 | FF_FULLBRIGHT, 2.0 / 35.0, S_LIGHTNING_ZAP_X7) { }
	S_LIGHTNING_ZAP_X7('MLFX', 19 | FF_FULLBRIGHT, 2.0 / 35.0, S_LIGHTNING_ZAP_X8) { }
	S_LIGHTNING_ZAP_X8('MLFX', 20 | FF_FULLBRIGHT, 2.0 / 35.0, none) { }
}

defaultproperties
{
	Radius = 15.0;
	Height = 35.0;
	MissileDamage = 2;
	bNoTeleport = false;
	bActivateImpact = false;
	bActivatePCross = false;
	IdleState = S_LIGHTNING_ZAP1;
	DeathState = S_LIGHTNING_ZAP_X8;
	Effects = HexenDefs::EF_DL_BLUE;
}

//**************************************************************************
//
//  $Log$
//  Revision 1.4  2006/03/12 19:37:09  dj_jl
//  States as objects, added state variable type.
//
//  Revision 1.3  2006/02/17 19:17:51  dj_jl
//  Moved common defs to classes.
//
//  Revision 1.2  2006/02/15 23:37:45  dj_jl
//  Moved all server progs global variables to classes.
//
//  Revision 1.1  2004/11/16 13:33:21  dj_jl
//  Initial import.
//
//  Revision 1.2  2003/03/08 12:41:43  dj_jl
//  Removing class pointers.
//
//  Revision 1.1  2002/10/26 16:32:26  dj_jl
//  New style of defining classes.
//
//**************************************************************************
