//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class ThrustFloorDown : Decoration
	__mobjinfo__(10090)
	__scriptid__(105);

//
// Thrust Spike Variables
//

state UpState;
state BloodyUpState;
state DownState;
state BloodyDownState;

Actor SpawnedDirt;	//	pointer to dirt clump mobj
float RaiseSpeed;	//	speed of raise
bool bRaised;		//	Lowered or raised state
bool bBloody;		//	Bloody spike.

//==========================================================================
//
//  A_ThrustInitUp
//
//==========================================================================

void A_ThrustInitUp()
{
	RaiseSpeed = 5.0;	// Raise speed
	bRaised = true;		// Mark as up
	FloorClip = 0.0;
	bSolid = true;
	SpawnedDirt = none;
}

//==========================================================================
//
//  A_ThrustInitDn
//
//==========================================================================

void A_ThrustInitDn()
{
	RaiseSpeed = 5.0;	// Raise speed
	bRaised = false;	// Mark as down
	FloorClip = Height;
	bSolid = false;
	bHidden = true;
	SpawnedDirt = Spawn(DirtClump, Origin);
}

//==========================================================================
//
//  A_ThrustRaise
//
//  Raise incrementally from the floor
// 
//==========================================================================

void A_ThrustRaise()
{
	// Raise spike from the ground
	FloorClip -= RaiseSpeed;
	if (FloorClip <= 0.0)
	{
		// Reached it's target height
		FloorClip = 0.0;
		bRaised = true;
		if (bBloody)
			SetState(BloodyUpState);
		else
			SetState(UpState);
	}

	// Lose the dirt clump
	if ((FloorClip < Height) && SpawnedDirt)
	{
		SpawnedDirt.Remove();
		SpawnedDirt = none;
	}

	// Spawn some dirt
	if (P_Random() < 40)
		SpawnDirt(Radius);
	RaiseSpeed += 1.0;	// Increase raise speed
}

//==========================================================================
//
//  A_ThrustLower
//
//  Sink incrementally into the floor
//
//==========================================================================

void A_ThrustLower()
{
	if (FloorClip < Height)
	{
		FloorClip += 6.0;
	}
	else
	{
		bRaised = false;
		if (bBloody)
			SetState(BloodyDownState);
		else
			SetState(DownState);
	}
}

//==========================================================================
//
//  A_ThrustBlock
//
//==========================================================================

void A_ThrustBlock()
{
	bSolid = true;
}

//==========================================================================
//
//  PIT_ThrustStompThing
//
//==========================================================================

bool PIT_ThrustStompThing(Entity Other)
{
	float blockdist;

	if (!Actor(Other).bShootable)
		return true;

	blockdist = Other.Radius + Radius;
	if (fabs(Other.Origin.x - Origin.x) >= blockdist ||
		fabs(Other.Origin.y - Origin.y) >= blockdist ||
		(Other.Origin.z > Origin.z + Height))
	{
		return true;	// didn't hit it
	}

	if (Other == self)
		return true;	// don't clip against self

	Actor(Other).Damage(self, self, 10001);
	bBloody = true;	// Mark thrust thing as bloody

	return true;
}

//==========================================================================
//
//  A_ThrustImpale
//
//==========================================================================

void A_ThrustImpale()
{
	int xl, xh, yl, yh, bx, by;
	float x0, x2, y0, y2;

	// Impale all shootables in radius
	x0 = Origin.x - Radius;
	x2 = Origin.x + Radius;
	y0 = Origin.y - Radius;
	y2 = Origin.y + Radius;

	xl = MapBlock(x0 - XLevel.BlockMapOrgX - MAXRADIUS);
	xh = MapBlock(x2 - XLevel.BlockMapOrgX + MAXRADIUS);
	yl = MapBlock(y0 - XLevel.BlockMapOrgY - MAXRADIUS);
	yh = MapBlock(y2 - XLevel.BlockMapOrgY + MAXRADIUS);

	// stomp on any things contacted
	for (bx = xl; bx <= xh; bx++)
		for (by = yl; by <= yh; by++)
			P_BlockThingsIterator(bx, by, self, 'PIT_ThrustStompThing');
}

__states__
{
	S_THRUSTINIT2_1('TSPK', 0, 3.0 / 35.0, S_THRUSTINIT2_2) { }
	S_THRUSTINIT2_2('TSPK', 0, 4.0 / 35.0, S_THRUSTBLOCK) { A_ThrustInitUp(); }
	S_BTHRUSTINIT2_1('TSPK', 1, 3.0 / 35.0, S_BTHRUSTINIT2_2) { }
	S_BTHRUSTINIT2_2('TSPK', 1, 4.0 / 35.0, S_BTHRUSTBLOCK) { A_ThrustInitUp(); }
	S_THRUSTINIT1_1('TSPK', 0, 3.0 / 35.0, S_THRUSTINIT1_2) { }
	S_THRUSTINIT1_2('TSPK', 0, 4.0 / 35.0, S_THRUSTSTAY) { A_ThrustInitDn(); }
	S_BTHRUSTINIT1_1('TSPK', 1, 3.0 / 35.0, S_BTHRUSTINIT1_2) { }
	S_BTHRUSTINIT1_2('TSPK', 1, 4.0 / 35.0, S_BTHRUSTSTAY) { A_ThrustInitDn(); }
	S_THRUSTRAISE1('TSPK', 0, 8.0 / 35.0, S_THRUSTRAISE2) { A_ThrustRaise(); }
	S_THRUSTRAISE2('TSPK', 0, 6.0 / 35.0, S_THRUSTRAISE3) { A_ThrustRaise(); }
	S_THRUSTRAISE3('TSPK', 0, 4.0 / 35.0, S_THRUSTRAISE4) { A_ThrustRaise(); }
	S_THRUSTRAISE4('TSPK', 0, 3.0 / 35.0, S_THRUSTIMPALE) { A_ThrustBlock(); }
	S_BTHRUSTRAISE1('TSPK', 1, 8.0 / 35.0, S_BTHRUSTRAISE2) { A_ThrustRaise(); }
	S_BTHRUSTRAISE2('TSPK', 1, 6.0 / 35.0, S_BTHRUSTRAISE3) { A_ThrustRaise(); }
	S_BTHRUSTRAISE3('TSPK', 1, 4.0 / 35.0, S_BTHRUSTRAISE4) { A_ThrustRaise(); }
	S_BTHRUSTRAISE4('TSPK', 1, 3.0 / 35.0, S_BTHRUSTIMPALE) { A_ThrustBlock(); }
	S_THRUSTIMPALE('TSPK', 0, 2.0 / 35.0, S_THRUSTRAISE) { A_ThrustImpale(); }
	S_BTHRUSTIMPALE('TSPK', 1, 2.0 / 35.0, S_BTHRUSTRAISE) { A_ThrustImpale(); }
	S_THRUSTRAISE('TSPK', 0, 2.0 / 35.0, S_THRUSTRAISE) { A_ThrustRaise(); }
	S_BTHRUSTRAISE('TSPK', 1, 2.0 / 35.0, S_BTHRUSTRAISE) { A_ThrustRaise(); }
	S_THRUSTBLOCK('TSPK', 0, 10.0 / 35.0, S_THRUSTBLOCK) { }
	S_BTHRUSTBLOCK('TSPK', 1, 10.0 / 35.0, S_BTHRUSTBLOCK) { }
	S_THRUSTLOWER('TSPK', 0, 2.0 / 35.0, S_THRUSTLOWER) { A_ThrustLower(); }
	S_BTHRUSTLOWER('TSPK', 1, 2.0 / 35.0, S_BTHRUSTLOWER) { A_ThrustLower(); }
	S_THRUSTSTAY('TSPK', 0, -1.0, S_THRUSTSTAY) { }
	S_BTHRUSTSTAY('TSPK', 1, -1.0, S_BTHRUSTSTAY) { }
}

//==========================================================================
//
//	Activate
//
//==========================================================================

bool Activate()
{
	if (!bRaised)
	{
		PlaySound('ThrustSpikeLower', CHAN_VOICE);
		bHidden = false;
		if (bBloody)
			SetState(S_BTHRUSTRAISE1);
		else
			SetState(S_THRUSTRAISE1);
	}
	return true;
}

//==========================================================================
//
//	Deactivate
//
//==========================================================================

bool Deactivate()
{
	if (bRaised)
	{
		PlaySound('ThrustSpikeRaise', CHAN_VOICE);
		if (bBloody)
			SetState(S_BTHRUSTLOWER);
		else
			SetState(S_THRUSTLOWER);
	}
	return true;
}

defaultproperties
{
	Radius = 20.0;
	Height = 128.0;
	bFloorClip = true;
	bNoTeleport = true;
	bHidden = true;
	IdleState = S_THRUSTINIT1_1;
	UpState = S_THRUSTINIT2_1;
	BloodyUpState = S_BTHRUSTINIT2_1;
	DownState = S_THRUSTINIT1_1;
	BloodyDownState = S_BTHRUSTINIT1_1;
}
