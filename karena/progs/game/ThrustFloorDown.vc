//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class ThrustFloorDown : Decoration
	__mobjinfo__(10090)
	__scriptid__(105);

//
// Thrust Spike Variables
//

Actor SpawnedDirt;	//	pointer to dirt clump mobj
float RaiseSpeed;	//	speed of raise
bool bRaised;		//	Lowered or raised state
bool bBloody;		//	Bloody spike.

//==========================================================================
//
//  A_ThrustInitUp
//
//==========================================================================

final void A_ThrustInitUp()
{
	RaiseSpeed = 5.0;	// Raise speed
	bRaised = true;		// Mark as up
	FloorClip = 0.0;
	bSolid = true;
	SpawnedDirt = none;
}

//==========================================================================
//
//  A_ThrustInitDn
//
//==========================================================================

final void A_ThrustInitDn()
{
	RaiseSpeed = 5.0;	// Raise speed
	bRaised = false;	// Mark as down
	FloorClip = Height;
	bSolid = false;
	bHidden = true;
	SpawnedDirt = Spawn(DirtClump, Origin);
}

//==========================================================================
//
//  A_ThrustRaise
//
//  Raise incrementally from the floor
// 
//==========================================================================

final void A_ThrustRaise()
{
	// Raise spike from the ground
	FloorClip -= RaiseSpeed;
	if (FloorClip <= 0.0)
	{
		// Reached it's target height
		FloorClip = 0.0;
		bRaised = true;
		if (bBloody)
			SetState(FindState('BloodyUp'));
		else
			SetState(FindState('Up'));
	}

	// Lose the dirt clump
	if ((FloorClip < Height) && SpawnedDirt)
	{
		SpawnedDirt.Destroy();
		SpawnedDirt = none;
	}

	// Spawn some dirt
	if (P_Random() < 40)
		SpawnDirt(Radius);
	RaiseSpeed += 1.0;	// Increase raise speed
}

//==========================================================================
//
//  A_ThrustLower
//
//  Sink incrementally into the floor
//
//==========================================================================

final void A_ThrustLower()
{
	if (FloorClip < Height)
	{
		FloorClip += 6.0;
	}
	else
	{
		bRaised = false;
		if (bBloody)
			SetState(FindState('BloodyDown'));
		else
			SetState(FindState('Down'));
	}
}

//==========================================================================
//
//  A_ThrustBlock
//
//==========================================================================

final void A_ThrustBlock()
{
	bSolid = true;
}

//==========================================================================
//
//  A_ThrustImpale
//
//==========================================================================

final void A_ThrustImpale()
{
	Entity Other;

	// Impale all shootables in radius
	// stomp on any things contacted
	foreach RadiusThings(Other, Origin, Radius)
	{
		float blockdist;
	
		if (!Actor(Other).bShootable)
			continue;
	
		blockdist = Other.Radius + Radius;
		if (fabs(Other.Origin.x - Origin.x) >= blockdist ||
			fabs(Other.Origin.y - Origin.y) >= blockdist ||
			(Other.Origin.z > Origin.z + Height))
		{
			continue;	// didn't hit it
		}
	
		if (Other == self)
			continue;	// don't clip against self
	
		Actor(Other).Damage(self, self, 10001);
		bBloody = true;	// Mark thrust thing as bloody
	}
}

states
{
Up:
	TSPK A 3
	TSPK A 4 A_ThrustInitUp
	TSPK A 10
	Wait
BloodyUp:
	TSPK B 3
	TSPK B 4 A_ThrustInitUp
	TSPK B 10
	Wait
Spawn:
Down:
	TSPK A 3
	TSPK A 4 A_ThrustInitDn
	TSPK A -1
	Wait
BloodyDown:
	TSPK B 3
	TSPK B 4 A_ThrustInitDn
	TSPK B -1
	Wait
Raise:
	TSPK A 8 A_ThrustRaise
	TSPK A 6 A_ThrustRaise
	TSPK A 4 A_ThrustRaise
	TSPK A 3 A_ThrustBlock
	TSPK A 2 A_ThrustImpale
	TSPK A 2 A_ThrustRaise
	Wait
BloodyRaise:
	TSPK B 8 A_ThrustRaise
	TSPK B 6 A_ThrustRaise
	TSPK B 4 A_ThrustRaise
	TSPK B 3 A_ThrustBlock
	TSPK B 2 A_ThrustImpale
	TSPK B 2 A_ThrustRaise
	Wait
Lower:
	TSPK A 2 A_ThrustLower
	Loop
BloodyLower:
	TSPK B 2 A_ThrustLower
	Loop
}

//==========================================================================
//
//	Activate
//
//==========================================================================

bool Activate()
{
	if (!bRaised)
	{
		PlaySound('ThrustSpikeLower', CHAN_VOICE);
		bHidden = false;
		if (bBloody)
			SetState(FindState('BloodyRaise'));
		else
			SetState(FindState('Raise'));
	}
	return true;
}

//==========================================================================
//
//	Deactivate
//
//==========================================================================

bool Deactivate()
{
	if (bRaised)
	{
		PlaySound('ThrustSpikeRaise', CHAN_VOICE);
		if (bBloody)
			SetState(FindState('BloodyLower'));
		else
			SetState(FindState('Lower'));
	}
	return true;
}

defaultproperties
{
	Radius = 20.0;
	Height = 128.0;
	bFloorClip = true;
	bNoTeleport = true;
	bHidden = true;
}
