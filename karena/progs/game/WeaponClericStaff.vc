//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**		##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id$
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class WeaponClericStaff : WeaponEx;

int BlinkCount;
state BlinkState;
state Attack2State;

//============================================================================
//
//  A_CStaffInitBlink
//
//============================================================================

final void A_CStaffInitBlink()
{
	BlinkCount = (P_Random() >> 1) + 20;
}

//============================================================================
//
//  A_CStaffCheckBlink
//
//============================================================================

final void A_CStaffCheckBlink()
{
	if (!--BlinkCount)
	{
		Owner.Player.SetViewState(ps_weapon, BlinkState);
		BlinkCount = (P_Random() + 50) >> 2;
	}
}

//============================================================================
//
//  A_CStaffCheck
//
//============================================================================

final void A_CStaffCheck()
{
	Actor		pmo;
	int			damage;
	int			newLife;
	TVec		vforward;
	EntityEx	AimTarget;

	pmo = Actor(Owner);
	damage = 27; //20 + (P_Random() & 15);

	if (int_mod)
	{
		if(!active_damage)
		{
			damage = damage * Player(Owner.Player).intelligence / 10;
		}
		else // [FB] PI Damage
		{
			damage = (damage * Player(Owner.Player).intelligence / 10) * ftoi(3.1415);
		}
	}
	AimTarget = pmo.AimEx(vforward, 3.0 * MELEERANGE / 2.0, 45.0 / 16.0, 3);
	if (AimTarget)
	{
		pmo.LineAttack(vforward, 1.5 * MELEERANGE, damage, ClericStaffPuff);
		pmo.Angles.yaw = atan2(AimTarget.Origin.y - pmo.Origin.y,
			AimTarget.Origin.x - pmo.Origin.x);
		if ((AimTarget.bIsPlayer || AimTarget.bMonster) &&
			!AimTarget.bDormant && !AimTarget.bInvulnerable)
		{
			newLife = Owner.Player.Health + (damage >> 3);
			newLife = newLife > 100 ? 100 : newLife;
			pmo.Health = newLife;
			Owner.Player.Health = newLife;
			Owner.Player.SetViewState(ps_weapon, Attack2State);
		}
		UseWeaponMana();
	}
}

//============================================================================
//
//  A_CStaffAttack
//
//============================================================================

final void A_CStaffAttack()
{
	EntityEx mo;
	PlayerPawn playPawn;


	UseWeaponMana();
	playPawn = PlayerPawn(Owner);
	mo = Actor(Owner).SpawnPlayerMissileAngle(ClericStaffMissile,
		playPawn.Angles.yaw - (45.0 / 15.0));
	if (mo)
	{
		ClericStaffMissile(mo).WeaveXY = 32;
	}
	mo = Actor(Owner).SpawnPlayerMissileAngle(ClericStaffMissile,
		playPawn.Angles.yaw + (45.0 / 15.0));
	if (mo)
	{
		ClericStaffMissile(mo).WeaveXY = 0;
		if (int_mod)
		{
			if(!active_damage)
			{
				mo.MissileDamage = mo.MissileDamage * Player(Owner.Player).intelligence / 10;
			}
			else // [FB] PI Damage
			{
				mo.MissileDamage = (mo.MissileDamage * Player(Owner.Player).intelligence / 10) * ftoi(3.1415);
			}
		}
	}
	playPawn.PlaySound('ClericCStaffFire', CHAN_WEAPON);
}

__states__
{
	S_CSTAFFREADY('CSSF', 2, 4.0 / 35.0, S_CSTAFFREADY1) = none
	S_CSTAFFREADY1('CSSF', 1, 3.0 / 35.0, S_CSTAFFREADY2) = A_CStaffInitBlink
	S_CSTAFFREADY2('CSSF', 0, 1.0 / 35.0, S_CSTAFFREADY3) = A_WeaponReady
	S_CSTAFFREADY3('CSSF', 0, 1.0 / 35.0, S_CSTAFFREADY4) = A_WeaponReady
	S_CSTAFFREADY4('CSSF', 0, 1.0 / 35.0, S_CSTAFFREADY5) = A_WeaponReady
	S_CSTAFFREADY5('CSSF', 0, 1.0 / 35.0, S_CSTAFFREADY6) = A_WeaponReady
	S_CSTAFFREADY6('CSSF', 0, 1.0 / 35.0, S_CSTAFFREADY7) = A_WeaponReady
	S_CSTAFFREADY7('CSSF', 0, 1.0 / 35.0, S_CSTAFFREADY8) = A_WeaponReady
	S_CSTAFFREADY8('CSSF', 0, 1.0 / 35.0, S_CSTAFFREADY9) = A_WeaponReady
	S_CSTAFFREADY9('CSSF', 0, 1.0 / 35.0, S_CSTAFFREADY2) = A_CStaffCheckBlink
	S_CSTAFFBLINK1('CSSF', 1, 1.0 / 35.0, S_CSTAFFBLINK2) = A_WeaponReady
	S_CSTAFFBLINK2('CSSF', 1, 1.0 / 35.0, S_CSTAFFBLINK3) = A_WeaponReady
	S_CSTAFFBLINK3('CSSF', 1, 1.0 / 35.0, S_CSTAFFBLINK4) = A_WeaponReady
	S_CSTAFFBLINK4('CSSF', 2, 1.0 / 35.0, S_CSTAFFBLINK5) = A_WeaponReady
	S_CSTAFFBLINK5('CSSF', 2, 1.0 / 35.0, S_CSTAFFBLINK6) = A_WeaponReady
	S_CSTAFFBLINK6('CSSF', 2, 1.0 / 35.0, S_CSTAFFBLINK7) = A_WeaponReady
	S_CSTAFFBLINK7('CSSF', 2, 1.0 / 35.0, S_CSTAFFBLINK8) = A_WeaponReady
	S_CSTAFFBLINK8('CSSF', 2, 1.0 / 35.0, S_CSTAFFBLINK9) = A_WeaponReady
	S_CSTAFFBLINK9('CSSF', 1, 1.0 / 35.0, S_CSTAFFBLINK10) = A_WeaponReady
	S_CSTAFFBLINK10('CSSF', 1, 1.0 / 35.0, S_CSTAFFBLINK11) = A_WeaponReady
	S_CSTAFFBLINK11('CSSF', 1, 1.0 / 35.0, S_CSTAFFREADY2) = A_WeaponReady
	S_CSTAFFDOWN('CSSF', 1, 3.0 / 35.0, S_CSTAFFDOWN2) = none
	S_CSTAFFDOWN2('CSSF', 2, 4.0 / 35.0, S_CSTAFFDOWN3) = none
	S_CSTAFFDOWN3('CSSF', 2, 1.0 / 35.0, S_CSTAFFDOWN3) = A_Lower
	S_CSTAFFUP('CSSF', 2, 1.0 / 35.0, S_CSTAFFUP) = A_Raise
	S_CSTAFFATK_1('CSSF', 0, 1.0 / 35.0, S_CSTAFFATK_2, 0, 45) = A_CStaffCheck
	S_CSTAFFATK_2('CSSF', 9, 1.0 / 35.0, S_CSTAFFATK_3, 0, 50) = A_CStaffAttack
	S_CSTAFFATK_3('CSSF', 9, 2.0 / 35.0, S_CSTAFFATK_4, 0, 50) = none
	S_CSTAFFATK_4('CSSF', 9, 2.0 / 35.0, S_CSTAFFATK_5, 0, 45) = none
	S_CSTAFFATK_5('CSSF', 0, 2.0 / 35.0, S_CSTAFFATK_6, 0, 40) = none
	S_CSTAFFATK_6('CSSF', 0, 2.0 / 35.0, S_CSTAFFREADY2, 0, 36) = none
	S_CSTAFFATK2_1('CSSF', 10, 10.0 / 35.0, S_CSTAFFREADY2, 0, 36) = none
}

/*SECOND*/
defaultproperties
{
	WeaponType = HexenDefs::WP_SECOND;
	Slot = 2;
	SelectionOrder = 6200;
	ManaType1 = ItemManaBlue;
	manause = 2;
	UpState = S_CSTAFFUP;
	DownState = S_CSTAFFDOWN;
	ReadyState = S_CSTAFFREADY;
	BlinkState = S_CSTAFFBLINK1;
	AttackState = S_CSTAFFATK_1;
	HoldAttackState = S_CSTAFFATK_1;
	Attack2State = S_CSTAFFATK2_1;
	PSpriteSY = 10.0;
	wis_mod = true;
	int_mod = true;
	dex_mod = false;
	str_mod = false;
	PickUpMessage = "SERPENT STAFF";
	Obituary = "$ob_cstaff";
}
