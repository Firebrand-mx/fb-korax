//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**		##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id$
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class WeaponClericStaff : KArenaWeapon;

int BlinkCount;

//==========================================================================
//
//  A_CStaffInitBlink
//
//==========================================================================

final void A_CStaffInitBlink() self(KArenaPlayerPawn)
{
	if (!bIsPlayer)
	{
		return;
	}
	KArenaWeapon Wpn = KArenaWeapon(PlayerEx(Player).ReadyWeapon);

	WeaponClericStaff(Wpn).BlinkCount = (P_Random() >> 1) + 20;
}

//==========================================================================
//
//  A_CStaffCheckBlink
//
//==========================================================================

final void A_CStaffCheckBlink() self(KArenaPlayerPawn)
{
	if (!bIsPlayer)
	{
		return;
	}
	KArenaWeapon Wpn = KArenaWeapon(PlayerEx(Player).ReadyWeapon);

	if (!--WeaponClericStaff(Wpn).BlinkCount)
	{
		Player.SetViewState(ps_weapon, Wpn.FindState('Blink'));
		WeaponClericStaff(Wpn).BlinkCount = (P_Random() + 50) >> 2;
	}
}

//============================================================================
//
//  A_CStaffCheck
//
//============================================================================

final void A_CStaffCheck() self(KArenaPlayerPawn)
{
	int			damage;
	int			newLife;
	TVec		vforward;
	EntityEx	AimTarget;

	if (!bIsPlayer)
	{
		return;
	}
	KArenaWeapon Wpn = KArenaWeapon(PlayerEx(Player).ReadyWeapon);

	damage = 27; //20 + (P_Random() & 15);

	Wpn.ApplyDamageModifiers(damage);
	AimTarget = AimEx(vforward, 3.0 * MELEERANGE / 2.0, 45.0 / 16.0, 3);
	if (AimTarget)
	{
		LineAttack(vforward, 1.5 * MELEERANGE, damage, ClericStaffPuff);
		Angles.yaw = atan2(AimTarget.Origin.y - Origin.y,
			AimTarget.Origin.x - Origin.x);
		if ((AimTarget.bIsPlayer || AimTarget.bMonster) &&
			!AimTarget.bDormant && !AimTarget.bInvulnerable)
		{
			newLife = Player.Health + (damage >> 3);
			newLife = newLife > 100 ? 100 : newLife;
			Health = newLife;
			Player.Health = newLife;
			Player.SetViewState(ps_weapon,
				GetStatePlus(Wpn.GetAttackState(false), 6, true));
		}
		Wpn.UseWeaponMana();
	}
}

//============================================================================
//
//  A_CStaffAttack
//
//============================================================================

final void A_CStaffAttack() self(KArenaPlayerPawn)
{
	EntityEx mo;

	if (!bIsPlayer)
	{
		return;
	}
	KArenaWeapon Wpn = KArenaWeapon(PlayerEx(Player).ReadyWeapon);

	Wpn.UseWeaponMana();
	mo = KArenaPlayerPawn(self).SpawnPlayerMissileAngle_2(Wpn, ClericStaffMissile,
		Angles.yaw - (45.0 / 15.0));
	if (mo)
	{
		mo.Special2 = 32;
		Wpn.ApplyDamageModifiers(mo.MissileDamage);
	}
	mo = KArenaPlayerPawn(self).SpawnPlayerMissileAngle_2(Wpn, ClericStaffMissile,
		Angles.yaw + (45.0 / 15.0));
	if (mo)
	{
		mo.Special2 = 0;
		Wpn.ApplyDamageModifiers(mo.MissileDamage);
	}
	PlaySound('ClericCStaffFire', CHAN_WEAPON);
}

states
{
Ready:
	CSSF C 4
	CSSF B 3 A_CStaffInitBlink
	CSSF AAAAAAA 1 A_WeaponReady
	CSSF A 1 A_CStaffCheckBlink
	Goto Ready+2
Blink:
	CSSF BBBCCCCCBBB 1 A_WeaponReady
	Goto Ready+2
Deselect:
	CSSF B 3
	CSSF C 4
	CSSF C 1 A_Lower
	Wait
Select:
	CSSF C 1 A_Raise
	Loop
Fire:
	CSSF A 1 Offset(0, 45) A_CStaffCheck
	CSSF J 1 Offset(0, 50) A_CStaffAttack
	CSSF J 2 Offset(0, 50)
	CSSF J 2 Offset(0, 45)
	CSSF A 2 Offset(0, 40)
	CSSF A 2 Offset(0, 36)
	Goto Ready+2
	CSSF K 10 Offset(0, 36)
	Goto Ready+2
}

/*SECOND*/
defaultproperties
{
	Slot = 2;
	SelectionOrder = 6200;
	AmmoType1 = Mana1;
	AmmoUse1 = 2;
	PSpriteSY = 10.0;
	BotCombatDist = 192.0 + MISSILERANGE;
	wis_mod = true;
	int_mod = true;
	dex_mod = false;
	str_mod = false;
	bBotChooseMelee = true;
	bBotChooseMedium = true;
	bBotChooseRanged = true;
	bBotProjectile = true;
	PickupMessage = "SERPENT STAFF";
	refire_tics = 10.0;
	fire_tics = 2.0;
	MeleeObituary = "$ob_cstaff";
	RangedObituary = "$ob_cstaff";
}
