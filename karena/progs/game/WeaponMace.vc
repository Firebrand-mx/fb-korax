//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**		##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id$
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class WeaponMace : KArenaWeapon;

//===========================================================================
//
//	A_FireMacePL1B
//
//===========================================================================

final void A_FireMacePL1B()
{
	Actor ball;
	float angle;

	UseWeaponMana();
	ball = HexenLevelInfo(Level).Spawn(MaceFX2, Owner.Origin +
		vector(0.0, 0.0, 28.0 - Owner.FloorClip));
	ball.Velocity.z =
		(2.0 + 173.0 * -tan(Owner.Angles.pitch) / 32.0) * 35.0;
	angle = Owner.Angles.yaw;
	if (int_mod)
	{
		if(!active_damage)
		{
			ball.MissileDamage = ball.MissileDamage * Player(Owner.Player).intelligence / 10;
		}
		else // [FB] PI Damage
		{
			ball.MissileDamage = (ball.MissileDamage * Player(Owner.Player).intelligence / 10) * ftoi(3.1415);
		}
	}
	ball.Target = Actor(Owner);
	ball.Angles.yaw = angle;
	ball.Origin.z += 173.0 * -tan(Owner.Angles.pitch) / 16.0;
	ball.Velocity.x = Owner.Velocity.x / 2.0 + ball.Speed * cos(angle);
	ball.Velocity.y = Owner.Velocity.y / 2.0 + ball.Speed * sin(angle);
	ball.PlaySound('MaceFire', CHAN_WEAPON);
	ball.CheckMissileSpawn();
}

//===========================================================================
//
//  A_FireMacePL1
//
//===========================================================================

final void A_FireMacePL1()
{
	EntityEx ball;

	if (P_Random() < 28)
	{
		A_FireMacePL1B();
		return;
	}
	UseWeaponMana();
	Owner.Player.ViewStates[ps_weapon].SX = Random() * 4.0 - 2.0;
	Owner.Player.ViewStates[ps_weapon].SY = WEAPONTOP + Random() * 4.0;
	ball = Actor(Owner).SpawnPlayerMissileAngle(MaceFX1,
		AngleMod360(Owner.Angles.yaw + (Random() - 0.5) * 45.0 / 4.0));
	if (ball)
	{
		if (int_mod)
		{
			if(!active_damage)
			{
				ball.MissileDamage = ball.MissileDamage * Player(Owner.Player).intelligence / 10;
			}
			else // [FB] PI Damage
			{
				ball.MissileDamage = (ball.MissileDamage * Player(Owner.Player).intelligence / 10) * ftoi(3.1415);
			}
		}
		ball.Target = Actor(Owner);
		Actor(ball)._Special1 = 16;	// tics till dropoff
	}
}

//===========================================================================
//
//  A_FireMacePL2
//
//===========================================================================

final void A_FireMacePL2()
{
	EntityEx	A;
	EntityEx	AimTarget;

	UseWeaponMana();
	A = Actor(Owner).SpawnPlayerMissileEx(MaceFX4, false, AimTarget);
	if (A)
	{
		A.Target = Actor(Owner);
		if (int_mod)
		{
			if(!active_damage)
			{
				A.MissileDamage = A.MissileDamage * Player(Owner.Player).intelligence / 10;
			}
			else // [FB] PI Damage
			{
				A.MissileDamage = (A.MissileDamage * Player(Owner.Player).intelligence / 10) * ftoi(3.1415);
			}
		}
		A.Velocity.x += Owner.Velocity.x;
		A.Velocity.y += Owner.Velocity.y;
		A.Velocity.z =
			(2.0 + 173.0 * -tan(Owner.Angles.pitch) / 32.0) * 35.0;
		if (AimTarget)
		{
			A.Tracer = AimTarget;
		}
	}
	Owner.PlaySound('MaceFire', CHAN_WEAPON);
}

__states__
{
	S_MACEREADY('MACE', 0, 1.0 / 35.0, S_MACEREADY) = A_WeaponReady
	S_MACEDOWN('MACE', 0, 1.0 / 35.0, S_MACEDOWN) = A_Lower
	S_MACEUP('MACE', 0, 1.0 / 35.0, S_MACEUP) = A_Raise
	S_MACEATK1_1('MACE', 1, 4.0 / 35.0, S_MACEATK1_2) = none
	S_MACEATK1_2('MACE', 2, 3.0 / 35.0, S_MACEATK1_3) = A_FireMacePL1
	S_MACEATK1_3('MACE', 3, 3.0 / 35.0, S_MACEATK1_4) = A_FireMacePL1
	S_MACEATK1_4('MACE', 4, 3.0 / 35.0, S_MACEATK1_5) = A_FireMacePL1
	S_MACEATK1_5('MACE', 5, 3.0 / 35.0, S_MACEATK1_6) = A_FireMacePL1
	S_MACEATK1_6('MACE', 2, 4.0 / 35.0, S_MACEATK1_7) = A_ReFire
	S_MACEATK1_7('MACE', 3, 4.0 / 35.0, S_MACEATK1_8) = none
	S_MACEATK1_8('MACE', 4, 4.0 / 35.0, S_MACEATK1_9) = none
	S_MACEATK1_9('MACE', 5, 4.0 / 35.0, S_MACEATK1_10) = none
	S_MACEATK1_10('MACE', 1, 4.0 / 35.0, S_MACEREADY) = none
	S_MACEATK2_1('MACE', 1, 4.0 / 35.0, S_MACEATK2_2) = none
	S_MACEATK2_2('MACE', 3, 4.0 / 35.0, S_MACEATK2_3) = A_FireMacePL2
	S_MACEATK2_3('MACE', 1, 4.0 / 35.0, S_MACEATK2_4) = none
	S_MACEATK2_4('MACE', 0, 8.0 / 35.0, S_MACEREADY) = A_ReFire
}

/* FIFTH */
defaultproperties
{
	AmmoType1 = ItemManaBlue;
	AmmoUse1 = 7;
	wis_mod = true;
	int_mod = true;
	dex_mod = false;
	str_mod = false;
	bBotChooseMelee = false;
	bBotChooseMedium = false;
	bBotChooseRanged = false;

	UpState = S_MACEUP;
	DownState = S_MACEDOWN;
	ReadyState = S_MACEREADY;
	AttackState = S_MACEATK1_1;
	HoldAttackState = S_MACEATK1_2;
	PSpriteSY = 15.0;
}
