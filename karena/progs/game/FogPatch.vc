//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class FogPatch : Actor
	abstract;

//==========================================================================
//
// Fog Variables:
//
//      args[0]     Speed (0..10) of fog
//      args[3]     Lifetime countdown
//      args[4]     Boolean: fog moving?
//
//==========================================================================

int WeaveIndex;		// Index into floatbob table

//==========================================================================
//
//	A_FogMove
//
//==========================================================================

final void A_FogMove()
{
	float speed;
	float angle;
	int weaveindex;

	if (!Args[4])
		return;

	if (Args[3]-- <= 0)
	{
		SetState(FindState('Death'));
		return;
	}

	if ((Args[3] % 4) == 0)
	{
		Origin.z += Level.Game.FloatBobOffsets[WeaveIndex] / 2.0;
		WeaveIndex = (WeaveIndex + 1) & 63;
	}

	speed = itof(Args[0]);
	angle = Angles.yaw;
	Velocity.x = speed * cos(angle) * 35.0;
	Velocity.y = speed * sin(angle) * 35.0;
}

defaultproperties
{
	Speed = 35.0;
	RenderStyle = STYLE_Translucent;
	Alpha = 0.333;
	bNoBlockmap = true;
	bNoGravity = true;
	bColideWithWorld = false;
	bColideWithThings = false;
	bFloat = true;
	bNoTeleport = true;
}
