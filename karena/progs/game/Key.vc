//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Key : Pickup
	abstract;

int KeyType;

//==========================================================================
//
//  TouchSpecial
//
//==========================================================================

void TouchSpecial(Actor Toucher)
{
	PlayerPawn P;

	if (!Toucher.bPickUp)
	{
		// Can't be picked up by toucher
		return;
	}
	if (Toucher.Health <= 0)
	{
		// Toucher is dead
		return;
	}
	P = PlayerPawn(Toucher);
	if (!P)
	{
		//	Shouldn't happen
		return;
	}
	if (!Player(P.Player).GiveKey(KeyType))
	{
		return;
	}
	cprint(P.Player, MainGameInfo(Level.Game).TextKeyMessages[KeyType]);
	if (Special)
	{
		Level.ExecuteActionSpecial(Special, Args[0], Args[1], Args[2],
			Args[3], Args[4], NULL, 0, P);
		Special = 0;
	}
	if (!Level.Game.netgame)
	{
		// Only remove keys in single player game
		if (Level.Game.deathmatch && !bDropped)
		{
			HideSpecial();
		}
		else
		{
			Remove();
		}
	}
	Player(P.Player).BonusFlash += BONUSADD;
	P.PlaySound('PickupKey', CHAN_ITEM);
}

defaultproperties
{
	Radius = 8.0;
}

//**************************************************************************
//
//  $Log$
//  Revision 1.4  2006/03/02 18:40:23  dj_jl
//  Don't use game specific classes in common.
//
//  Revision 1.3  2006/02/15 23:37:45  dj_jl
//  Moved all server progs global variables to classes.
//
//  Revision 1.2  2005/12/29 17:32:12  dj_jl
//  Created level info class, moved action special handling to it.
//
//  Revision 1.1  2004/11/16 13:33:21  dj_jl
//  Initial import.
//
//  Revision 1.2  2003/11/12 16:50:47  dj_jl
//  Changed player structure into a class
//
//  Revision 1.1  2002/10/26 16:32:26  dj_jl
//  New style of defining classes.
//
//**************************************************************************
