//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class VerticalDoor : SectorMover;

int type;
float topheight;
float speed;
int direction;	// 1 = up, 0 = waiting at top, -1 = down
float topwait;	// tics to wait at the top (keep in case a door going down is reset)
float toptime;	// when it reaches 0, start going down

//==========================================================================
//
//	Tick
//
//==========================================================================

void Tick(float deltaTime)
{
	int res;

	switch (direction)
	{
	case 0:	// WAITING
		toptime -= deltaTime;
		if (toptime <= 0.0)
			switch (type)
			{
			case DREV_NORMAL:
				direction = -1;	// time to go back down
				SectorStartSequence(sector,
					seq_name[SEQ_DOOR_STONE + sector->seqType]);
				break;
			default:
				break;
			}
		break;
	case -1:	// DOWN
		res = T_MovePlane(sector, speed * deltaTime,
			sector->floorheight, false, 1, direction);
		if (res == RES_PASTDEST)
		{
			SectorStopSequence(sector);
			switch (type)
			{
			case DREV_NORMAL:
			case DREV_CLOSE:
				sector->SpecialData = none;
				TagFinished(sector->tag);
				RemoveSpecialThinker(self);	// unlink and free
				break;
			default:
				break;
			}
		}
		else if (res == RES_CRUSHED)
		{
			switch (type)
			{
			case DREV_CLOSE:	// DON'T GO BACK UP!
				break;
			default:
				direction = 1;
				break;
			}
		}
		break;
	case 1:	// UP
		res = T_MovePlane(sector, speed * deltaTime,
			topheight, false, 1, direction);
		if (res == RES_PASTDEST)
		{
			SectorStopSequence(sector);
			switch (type)
			{
			case DREV_NORMAL:
				direction = 0;	// wait at top
				toptime = topwait;
				break;
			case DREV_OPEN:
				sector->SpecialData = none;
				TagFinished(sector->tag);
				RemoveSpecialThinker(self);	// unlink and free
				break;
			default:
				break;
			}
		}
		break;
	case 2:
		//  INITIAL WAIT
		toptime -= deltaTime;
		if (toptime <= 0.0)
		{
			toptime = 0.0;
			switch (type)
			{
			case raiseIn5Mins:
				direction = 1;
				type = DREV_NORMAL;
				SectorStartSequence(sector,
					seq_name[SEQ_DOOR_STONE + sector->seqType]);
				break;
			}
		}
		break;
	}
}

defaultproperties
{
}

//**************************************************************************
//
//  $Log$
//  Revision 1.3  2004/11/25 16:15:34  firebrand_kh
//  Fixed compiling error
//
//  Revision 1.2  2004/11/23 12:50:27  dj_jl
//  Added support for many sector specials.
//
//  Revision 1.1  2004/11/16 13:33:22  dj_jl
//  Initial import.
//
//  Revision 1.1  2002/10/26 16:32:27  dj_jl
//  New style of defining classes.
//
//**************************************************************************
