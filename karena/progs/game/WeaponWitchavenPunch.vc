//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**		##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id$
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class WeaponWitchavenPunch : KArenaWeapon;

int PunchCount;

//==========================================================================
//
//  A_WPunchAttack
//
//==========================================================================

final void A_WPunchAttack() self(KArenaPlayerPawn)
{
	int				damage;
	float			power;
	TAVec			angles;
	TVec			vforward;
	class<Actor>	PuffType;
	EntityEx		AimTarget;

	if (!bIsPlayer)
	{
		return;
	}
	KArenaWeapon Wpn = KArenaWeapon(PlayerEx(Player).ReadyWeapon);

	damage = 9; //5 + (P_Random() & 15);
	Wpn.ApplyDamageModifiers(damage);
	power = 2.0;
	PuffType = PunchPuff;
	AimTarget = AimEx(vforward, MELEERANGE, 45.0 / 16.0, 16, MELEERANGE);
	if (AimTarget)
	{
		VectorAngles(&vforward, &angles);
		WeaponWitchavenPunch(Wpn).PunchCount++;
		if (WeaponWitchavenPunch(Wpn).PunchCount == 3)
		{
			damage <<= 1;
			power = 6.0;
			PuffType = HammerPuff;
		}
		if (LineAttack(vforward, MELEERANGE, damage, PuffType))
		{
			if (PuffType == HammerPuff)
			{
				PlaySound('FighterHammerMiss', CHAN_WEAPON);
			}
			else
			{
				PlaySound('FighterPunchMiss', CHAN_WEAPON);
			}
		}
		if (AimTarget.bMonster || AimTarget.bIsPlayer)
		{
			AimTarget.Thrust(angles.yaw, power);
		}
		Player(Player).AdjustPlayerAngle(AimTarget);
	}
	else
	{
		// didn't find any creatures, so try to strike any walls
		WeaponWitchavenPunch(Wpn).PunchCount = 0;

		if (LineAttack(vforward, MELEERANGE, damage, PuffType))
		{
			PlaySound('FighterPunchMiss', CHAN_WEAPON);
		}
	}

	if (WeaponWitchavenPunch(Wpn).PunchCount == 3)
	{
		WeaponWitchavenPunch(Wpn).PunchCount = 0;
		Player.SetViewState(ps_weapon,
			GetStatePlus(Wpn.GetAttackState(false), 7, true));
		//PlaySound('FighterGrunt', CHAN_VOICE);
	}
}

states
{
Ready:
	WPCH A 1 A_WeaponReady
	Loop
Deselect:
	WPCH A 1 A_Lower
	Loop
Select:
	WPCH A 1 A_Raise
	Loop
Fire:
	WPCH B 5
	WPCH CD 4
	WPCH E 4 A_WPunchAttack
	WPCH F 4
	WPCH B 5 A_ReFire
	Goto Ready
	WPCH G 5
	WPCH HI 4
	WPCH J 4 A_WPunchAttack
	WPCH K 5
	Goto Ready
}

/* FIRST */
defaultproperties
{
	Slot = 1;
	SelectionOrder = 7600;
	PSpriteSY = 0.0;
	BotCombatDist = MELEERANGE;
	wis_mod = false;
	int_mod = false;
	dex_mod = true;
	str_mod = true;
	bBotChooseMelee = true;
	bBotChooseMedium = false;
	bBotChooseRanged = false;
	bWimpyWeapon = true;
	bFireDamage = false;
	HitObituary = "$ob_wpunch";
	refire_tics = 22.0;
	fire_tics = 9.0;
}
