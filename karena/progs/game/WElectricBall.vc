//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class WElectricBall : Effect;

int time;
int BobIndex;

//============================================================================
//
//	InitME
//
//============================================================================

void InitMe(Actor InstigatedBy)
{
	time = 24 + (P_Random() & 7);
	BobIndex = 0;
	Instigator = InstigatedBy;
	Radius = 30.0;
	Height = 30.0;
	bColideWithThings = true;
	bColideWithWorld = true;
}

//============================================================================
//
//	Init
//
//============================================================================

void Init(Actor InstigatedBy)
{
	InitMe(InstigatedBy);
	Velocity.x = 0.00001;	// missile objects must move to impact other objects
}

//============================================================================
//
//  A_Damage
//
//============================================================================

void A_Damage()
{
	P_RadiusAttack(4, 40.0, false);
	Origin.z += Level.Game.FloatBobOffsets[BobIndex] / 16.0;
	BobIndex = (BobIndex + 1) & 63;
}

//============================================================================
//
//  A_Ticker
//
//============================================================================

void A_Ticker()
{
	if (!--time)
	{
		SetState(DeathState);
	}
}

__states__
{
	S_ELECTRIC_BALL_FX1_1('WELH', 0 | FF_FULLBRIGHT, 4.0 / 35.0, S_ELECTRIC_BALL_FX1_2) { A_Damage(); }
	S_ELECTRIC_BALL_FX1_2('WELH', 1 | FF_FULLBRIGHT, 4.0 / 35.0, S_ELECTRIC_BALL_FX1_3) { A_Damage(); }
	S_ELECTRIC_BALL_FX1_3('WELH', 2 | FF_FULLBRIGHT, 4.0 / 35.0, S_ELECTRIC_BALL_FX1_4) { A_Damage(); }
	S_ELECTRIC_BALL_FX1_4('WELH', 3 | FF_FULLBRIGHT, 4.0 / 35.0, S_ELECTRIC_BALL_FX1_5) { A_Damage(); }
	S_ELECTRIC_BALL_FX1_5('WELH', 4 | FF_FULLBRIGHT, 4.0 / 35.0, S_ELECTRIC_BALL_FX1_6) { A_Damage(); }
	S_ELECTRIC_BALL_FX1_6('WELH', 5 | FF_FULLBRIGHT, 4.0 / 35.0, S_ELECTRIC_BALL_FX1_1) { A_Ticker(); }
	S_ELECTRIC_BALL_FX1_X1('WELH', 6 | FF_FULLBRIGHT, 4.0 / 35.0, S_ELECTRIC_BALL_FX1_X2) { }
	S_ELECTRIC_BALL_FX1_X2('WELH', 7 | FF_FULLBRIGHT, 4.0 / 35.0, S_ELECTRIC_BALL_FX1_X3) { }
	S_ELECTRIC_BALL_FX1_X3('WELH', 8 | FF_FULLBRIGHT, 4.0 / 35.0, S_ELECTRIC_BALL_FX1_X4) { A_Explode(); }
	S_ELECTRIC_BALL_FX1_X4('WELH', 9 | FF_FULLBRIGHT, 3.0 / 35.0, none) { }
}

defaultproperties
{
	Radius = 30.0;
	Height = 30.0;
	Health = 200;
	PainChance = 0.234375;
	Mass = 99999.0;
	bDropOff = true;
	bColideWithWorld = false;
	bColideWithThings = false;
	//bNoDamageThrust = true;
	bShootable = true;
	bReflective = true;
	IdleState = S_ELECTRIC_BALL_FX1_1;
	DeathState = S_ELECTRIC_BALL_FX1_X1;
	DeathSound = 'DragonFireballExplode';
	Effects = HexenDefs::EF_DL_BLUE;
}

//**************************************************************************
//
//  $Log$
//  Revision 1.6  2006/03/12 19:37:09  dj_jl
//  States as objects, added state variable type.
//
//  Revision 1.5  2006/02/17 19:17:52  dj_jl
//  Moved common defs to classes.
//
//  Revision 1.4  2006/02/15 23:37:46  dj_jl
//  Moved all server progs global variables to classes.
//
//  Revision 1.3  2005/12/11 21:37:29  dj_jl
//  Made path traversal callbacks class members.
//
//  Revision 1.2  2005/08/08 18:22:13  firebrand_kh
//  Added log revisions for CVS
//
//  Revision 1.1  2004/11/16 13:33:22  dj_jl
//  Initial import.
//
//  Revision 1.1  2002/10/26 16:32:26  dj_jl
//  New style of defining classes.
//
//**************************************************************************
