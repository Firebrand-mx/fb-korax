//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Pickup : Inventory
	abstract;

string PickupMessage;

const float BONUSADD		= 0.2;

//==========================================================================
//
//  AngleIncrements
//
//==========================================================================

int AngleIncrements()
{
	return bMonster ? 45 : 1;
}

//==========================================================================
//
//	Tick
//
//==========================================================================

void Tick(float deltaTime)
{
	if (!Physics(deltaTime))
	{
		return;
	}
	// Cycle through states, calling action functions at transitions
	if (!AdvanceState(deltaTime))
	{
		// mobj was removed
		return;
	}
}

//==========================================================================
//
//	SetDormant
//
//==========================================================================

void SetDormant()
{
	bDormant = true;
	StateTime = -1.0;
}

//==========================================================================
//
//	SectorChanged
//
//==========================================================================

bool SectorChanged(int CrushChange)
{
	Actor B;

	if (HeightClip())
	{
		return true;
	}

	//	Crunch dropped items
	if (bDropped)
	{
		Destroy();
		return true;
	}

	if (!bShootable)
	{
		//	Assume it is bloody gibs or something
		return true;
	}

	if (CrushChange && !(XLevel.TicTime & 3))
	{
		Damage(none, none, CrushChange);

		// spray blood in a random direction
		if (!bNoBlood && !bInvulnerable)
		{
			B = Spawn(Blood, Origin + vector(0.0, 0.0, Height / 2.0));
			B.Velocity.x = (Random() - Random()) * 16.0 * 35.0;
			B.Velocity.y = (Random() - Random()) * 16.0 * 35.0;
		}
	}
	return false;	//don't fit
}

//==========================================================================
//
//  Blast
//
//==========================================================================

void Blast(Actor source, float strength)
{
	float angle;
	float ang;
	Actor A;
	float x;
	float y;
	float z;

	angle = atan2(Origin.y - source.Origin.y, Origin.x - source.Origin.x);
	if (strength < Player::BLAST_FULLSTRENGTH)
	{
		Velocity.x = strength * cos(angle) * 35.0;
		Velocity.y = strength * sin(angle) * 35.0;
		if (bIsPlayer)
		{
			// Players handled automatically
		}
		else
		{
			bSlide = true;
			bBlasted = true;
		}
	}
	else	// full strength blast from artifact
	{
		if (bMissile)
		{
			if (SorcererBall(self))
			{
				// don't blast sorcerer balls
				return;
			}
			else if (MageStaffFX2(self) || InfernalHandFX(self))
			{
				// Reflect to originator
				Tracer = Target;
				Target = source;
			}
		}
		if (Class == HolyFX)
		{
			if (Tracer == source)
			{
				Tracer = Target;
				Target = source;
			}
		}
		Velocity.x = Player::BLAST_SPEED * cos(angle) * 35.0;
		Velocity.y = Player::BLAST_SPEED * sin(angle) * 35.0;

		// Spawn blast puff
		ang = atan2(source.Origin.y - Origin.y, source.Origin.x - Origin.x);
		x = Origin.x + (Radius + 1.0) * cos(ang);
		y = Origin.y + (Radius + 1.0) * sin(ang);
		z = Origin.z - FloorClip + Height / 2.0;
		A = Spawn(BlastEffect, vector(x, y, z));
		if (A)
		{
			A.Velocity.x = Velocity.x;
			A.Velocity.y = Velocity.y;
		}

		if (bMissile)
		{
			Velocity.z = 8.0 * 35.0;
			A.Velocity.z = Velocity.z;
		}
		else
		{
			Velocity.z = 1000.0 / Mass * 35.0;
		}
		if (bIsPlayer)
		{
			// Players handled automatically
		}
		else
		{
			bSlide = true;
			bBlasted = true;
		}
	}
}

//==========================================================================
//
//	ClientTick
//
//==========================================================================

void ClientTick(float DeltaTime)
{
	dlight_t *dl;
	TVec fv;
	int i, c, count;
	particle_t *p;

	switch (Effects & EF_DLIGHT_MASK)
	{
	case EF_DL_NONE:
		break;

	case EF_DL_WHITE:
		dl = AllocDlight(self);
		dl->origin = Origin;
		dl->radius = 200.0;
		dl->colour = RGB(255, 255, 255);
		dl->die = XLevel.Time + 0.1;
		break;

	case EF_DL_RED:
		dl = AllocDlight(self);
		dl->origin = Origin;
		dl->radius = 200.0;
		dl->colour = RGB(255, 0, 0);
		dl->die = XLevel.Time + 0.1;
		break;

	case EF_DL_GREEN:
		dl = AllocDlight(self);
		dl->origin = Origin;
		dl->radius = 200.0;
		dl->colour = RGB(0, 255, 0);
		dl->die = XLevel.Time + 0.1;
		break;

	case EF_DL_BLUE:
		dl = AllocDlight(self);
		dl->origin = Origin;
		dl->radius = 200.0;
		dl->colour = RGB(0, 0, 255);
		dl->die = XLevel.Time + 0.1;
		break;

	case EF_DL_DARK:
		dl = AllocDlight(self);
		dl->origin = Origin;
		dl->radius = 200.0;
		dl->colour = RGB(1, 1, 1);
		dl->die = XLevel.Time + 0.1;
		break;

	case EF_DL_MUZZLEFLASH:
		dl = AllocDlight(self);
		dl->origin = Origin;
		dl->origin.z += 48.0;
		AngleVector(&Angles, &fv);

		dl->origin = dl->origin + 18.0 * fv;
		dl->radius = 200.0 + Random() * 31.0;
		dl->colour = 0xffffffff;
		dl->minlight = 32.0;
		dl->die = XLevel.Time + 0.1;
	}

	if (Effects & EF_ROCKET)
	{
		count = ftoi(DeltaTime * 256.0);
		for (i = 0; i < count; i++)
		{
			p = NewParticle();
			if (!p)
				return;

			p->org = Origin;
			c = P_Random() >> 1;
			p->colour = RGB(c, c, c);
			p->die = XLevel.Time + 0.5 * Random();
			p->type = HexenDefs::pt_static;
			p->vel.x = 16.0 * (Random() - 0.5);
			p->vel.y = 16.0 * (Random() - 0.5);
			p->vel.z = 16.0 * (Random() - 0.5);
		}
	}
}

//==========================================================================
//
//  TouchSpecial
//
//==========================================================================

void TouchSpecial(EntityEx Toucher)
{
}

//==========================================================================
//
//  A_RestoreSpecialThing1
//
//  Make a special thing visible again.
//
//==========================================================================

final void A_RestoreSpecialThing1()
{
	bHidden = false;
	PlaySound('Respawn', CHAN_VOICE);
}

//==========================================================================
//
//  A_RestoreSpecialThing2
//
//==========================================================================

final void A_RestoreSpecialThing2()
{
	bSpecial = true;
	SetState(IdleState);
}

__states__
{
	//	Hide for 40 secs
	S_HIDESPECIAL1('ACLO', 4, 1400.0 / 35.0, S_HIDESPECIAL2) = none
	S_HIDESPECIAL2('ACLO', 0, 4.0 / 35.0, S_HIDESPECIAL3) = A_RestoreSpecialThing1
	S_HIDESPECIAL3('ACLO', 1, 4.0 / 35.0, S_HIDESPECIAL4) = none
	S_HIDESPECIAL4('ACLO', 0, 4.0 / 35.0, S_HIDESPECIAL5) = none
	S_HIDESPECIAL5('ACLO', 1, 4.0 / 35.0, S_HIDESPECIAL6) = none
	S_HIDESPECIAL6('ACLO', 2, 4.0 / 35.0, S_HIDESPECIAL7) = none
	S_HIDESPECIAL7('ACLO', 1, 4.0 / 35.0, S_HIDESPECIAL8) = none
	S_HIDESPECIAL8('ACLO', 2, 4.0 / 35.0, S_HIDESPECIAL9) = none
	S_HIDESPECIAL9('ACLO', 3, 4.0 / 35.0, S_HIDESPECIAL10) = none
	S_HIDESPECIAL10('ACLO', 2, 4.0 / 35.0, S_HIDESPECIAL11) = none
	S_HIDESPECIAL11('ACLO', 3, 4.0 / 35.0, none) = A_RestoreSpecialThing2
}

//==========================================================================
//
//  HideSpecial
//
//==========================================================================

void HideSpecial()
{
	bSpecial = false;
	bHidden = true;
	SetState(S_HIDESPECIAL1);
}

//==========================================================================
//
//  A_HideThing
//
//==========================================================================

final void A_HideThing()
{
	bHidden = true;
}

//==========================================================================
//
//  A_UnHideThing
//
//==========================================================================

final void A_UnHideThing()
{
	bHidden = false;
}

defaultproperties
{
	Height = 32.0;
	bSpecial = true;
	bNoPassMobj = true;
}
