//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Pickup : Inventory
	abstract;

string			PickupMessage;
name			PickupSound;

bool			bFullVolPickupSound;

const float BONUSADD		= 0.2;

//==========================================================================
//
//  AngleIncrements
//
//==========================================================================

int AngleIncrements()
{
	return bMonster ? 45 : 1;
}

//==========================================================================
//
//  TouchSpecial
//
//==========================================================================

final void TouchSpecial(EntityEx Toucher)
{
	if (!Toucher.bPickUp)
	{
		// Can't be picked up by toucher
		return;
	}
	if (Toucher.Health <= 0)
	{
		// Toucher is dead
		return;
	}

	if (!TryPickup(Toucher))
	{
		return;
	}

	Toucher.Player.cprint(GetPickupMessage(Toucher));
	if (Special)
	{
		Level.ExecuteActionSpecial(Special, Args[0], Args[1], Args[2], Args[3],
			Args[4], NULL, 0, Toucher);
		Special = 0;
	}
	if (bDropped || !ShouldStay())
	{
		HidePickup();
	}
	Player(Toucher.Player).BonusFlash += BONUSADD;
	PlayPickupSound(Toucher);
}

//==========================================================================
//
//	TryPickup
//
//==========================================================================

bool TryPickup(EntityEx Toucher)
{
	return false;
}

//==========================================================================
//
//	GetPickupMessage
//
//==========================================================================

string GetPickupMessage(EntityEx Toucher)
{
	return PickupMessage;
}

//==========================================================================
//
//	HidePickup
//
//==========================================================================

void HidePickup()
{
	if (bPickupFlash)
	{
		//  Initiate the artifact pickup animation.
		Spawn(PickupFlash, Origin);
	}
	if (ShouldRespawn() && !bDropped)
	{
		Hide();
	}
	else
	{
		// Don't respawn
		Destroy();
	}
}

//==========================================================================
//
//	PlayPickupSound
//
//==========================================================================

void PlayPickupSound(EntityEx Toucher)
{
	if (PickupSound)
	{
		Toucher.PlaySound(PickupSound, CHAN_ITEM, 1.0,
			bFullVolPickupSound ? ATTN_NONE : ATTN_NORMAL);
	}
}

defaultproperties
{
	Height = 32.0;
	bSpecial = true;
	bNoPassMobj = true;
	PickupSound = 'PickupItem';
}
