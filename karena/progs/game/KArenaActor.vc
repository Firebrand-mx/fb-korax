//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**	        ##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id$
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class KArenaActor : Actor
	abstract;

const float
	BLAST_RADIUS_DIST		= 255.0,
	BLAST_FULLSTRENGTH		= 0.0038909912,
	BLAST_SPEED				= 20.0;

int experience;

// [CW] Since there are sometimes references to pawn stored for future use,
// it is important to store reference to player as well (in case it is player pawn)
// so that if that pawn die, player reference will be still accessible.
Player		PInstigator;

//==========================================================================
//
//	OnMapSpawn
//
//==========================================================================

void OnMapSpawn(mthing_t* mthing)
{
	//[Korax]
	if (!bMissile && !bPickUp && Class != PlayerPig)
	{
		experience = default.Health;
	}
	::OnMapSpawn(mthing);
}

//==========================================================================
//
//  Died
//
//==========================================================================

void Died(EntityEx source, EntityEx inflictor)
{
	::Died(source, inflictor);

	if (inflictor && ClassIsChildOf(inflictor.Class, Actor) && !bMonster)
		KArenaActor(inflictor).IsDeathInflictor(self);

//[Korax]
	if (source && !bIsPlayer)
	{
		if (!source.bIsPlayer)
		{
			KArenaActor(source).experience += ftoi(itof(experience) * ((90.0 + 
				itof(P_Random()) / 255.0 * 21.0) / 100.0));  //RPG
		}
		else
		{
			Player(source.Player).GiveExperience(ftoi(itof(experience) * ((90.0 + 
				itof(P_Random()) / 255.0 * 21.0) / 100.0) * (Level.Game.gameskill < 2 ? 
				125.0 : (Level.Game.gameskill < 3 ? 100.0 : 80.0)) / 100.0));
		}
	}
}

//==========================================================================
//
//  IsDeathInflictor
//
//	[CW]
//
//==========================================================================

void IsDeathInflictor(EntityEx victim)
{
}

//==========================================================================
//
//	KilledByPlayer
//
//==========================================================================

void KilledByPlayer(KArenaPlayerPawn source)
{
}

//==========================================================================
//
//  SpawnCombatAttributes
//
//==========================================================================

void SpawnCombatAttributes(Actor master, Thinker shooter)
{
	if (master)
	{
		if (KArenaPlayerPawn(master))
		{
			Target = master;
			PInstigator = Player(Target.Player);
		}
		else
		{
			Target = master.Target;
			PInstigator = KArenaActor(master) ? KArenaActor(master).PInstigator : none;
		}

		if (!Target)
			Error("Actor::SpawnCombatAttributes : Target reference is not set to an object; bad algorythm?");
	}
	
	if (shooter)
	{
		if (shooter.IsA('KArenaWeapon'))
			Obituary = KArenaWeapon(shooter).RangedObituary;
		else if (shooter.IsA('Pawn'))
			Obituary = Pawn(shooter).RangedObituary;
		else if (shooter.IsA('Actor'))
			Obituary = Actor(shooter).Obituary;
	}
}

//==========================================================================
//
//  Blast
//
//==========================================================================

final void Blast(Actor victim, Actor source, float strength)
{
	float angle;
	float ang;
	Actor A;
	float x;
	float y;
	float z;

	angle = atan2(victim.Origin.y - source.Origin.y,
		victim.Origin.x - source.Origin.x);
	if (strength < BLAST_FULLSTRENGTH)
	{
		victim.Velocity.x = strength * cos(angle) * 35.0;
		victim.Velocity.y = strength * sin(angle) * 35.0;
		if (victim.bIsPlayer)
		{
			// Players handled automatically
		}
		else
		{
			victim.bSlide = true;
			victim.bBlasted = true;
		}
	}
	else	// full strength blast from artifact
	{
		if (victim.bMissile)
		{
			if (SorcererBall(victim))
			{
				// don't blast sorcerer balls
				return;
			}
			else if (MageStaffFX2(victim) || InfernalHandFX(victim))
			{
				// Reflect to originator
				victim.Tracer = victim.Target;
				victim.Target = source;
			}
		}
		if (victim.Class == HolyFX)
		{
			if (victim.Tracer == source)
			{
				victim.Tracer = victim.Target;
				victim.Target = source;
			}
		}
		victim.Velocity.x = BLAST_SPEED * cos(angle) * 35.0;
		victim.Velocity.y = BLAST_SPEED * sin(angle) * 35.0;

		// Spawn blast puff
		ang = atan2(source.Origin.y - victim.Origin.y,
			source.Origin.x - victim.Origin.x);
		x = victim.Origin.x + (victim.Radius + 1.0) * cos(ang);
		y = victim.Origin.y + (victim.Radius + 1.0) * sin(ang);
		z = victim.Origin.z - victim.FloorClip + victim.Height / 2.0;
		A = Level.Spawn(BlastEffect, vector(x, y, z));
		if (A)
		{
			A.Velocity.x = victim.Velocity.x;
			A.Velocity.y = victim.Velocity.y;
		}

		if (victim.bMissile)
		{
			victim.Velocity.z = 8.0 * 35.0;
			A.Velocity.z = victim.Velocity.z;
		}
		else
		{
			victim.Velocity.z = 1000.0 / victim.Mass * 35.0;
		}
		if (victim.bIsPlayer)
		{
			// Players handled automatically
		}
		else
		{
			victim.bSlide = true;
			victim.bBlasted = true;
		}
	}
}

//==========================================================================
//
//  BlastRadius
//
//==========================================================================

final void BlastRadius(optional int Limit)
{
	Actor mo;
	float dist;
	int blasts = 0;

	PlaySound('BlastRadius', CHAN_ITEM);
	HexenLevelInfo(Level).NoiseAlert(self, self);

	foreach AllThinkers(Actor, mo)
	{
		if ((mo == self) || mo.bBoss)
		{
			// Not a valid monster
			continue;
		}
		if (mo.Class == BlastRadiusBomb ||
			mo.Class == BlastRadiusMissile)
		{
			continue;
		}
		if ((mo.Class == PoisonCloud) ||	// poison cloud
			(mo.Class == HolyFX) ||		// holy fx
			mo.bIceCorpse)			// frozen corpse
		{
			// Let these special cases go
		}
		else if (mo.bMonster && (mo.Health <= 0))
		{
			continue;
		}
		else if (!mo.bMonster && !mo.bIsPlayer && !mo.bMissile)
		{
			// Must be monster, player, or missile
			continue;
		}
		if (mo.bDormant)
		{
			continue;	// no dormant creatures
		}
		if (mo.bDontBlast)
		{
			continue;
		}
		dist = DistTo(mo);
		if (dist > BLAST_RADIUS_DIST)
		{
			// Out of range
			continue;
		}
		Blast(mo, self, BLAST_FULLSTRENGTH);

		blasts++;
		if (specified_Limit && blasts >= Limit)
			break;
	}
}

defaultproperties
{
}
