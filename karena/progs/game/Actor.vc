//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**	        ##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id$
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Actor : EntityEx
	abstract;

const float MORPHTIME 		= 40.0;
const float MAULATORTIME 	= 25.0;

const float TELEFOGHEIGHT	= 32.0;

const float BONUSADD		= 0.2;

bool bSpawnFloat;		// spawn random float z
bool bNoMorph;			// Won't morph into a pig.

int experience;

int _Special1;	// Special info
int _Special2;	// Special info
float Special2f;
class<Actor> SpecialCID;

// [CW] Death messages; used by those who can damage directly
//		(anything from enviroment to pawns with melee attacks)
string		Obituary;
string		HitObituary;

//==========================================================================
//
//	MoveToFreePosition
//
//	[CW]
//
//==========================================================================

bool MoveToFreePosition()
{
	TVec bak_org;
	float test_ang;
	TVec test_dir;
	float test_dist;

	bak_org = Origin;
	test_dir = vector(1.0, 0.0, 0.0);

	for (test_dist = 0.0; test_dist <= 512.0; test_dist += 64.0)
	{
		for (test_ang = 0.0; test_ang < 360.0; test_ang += 45.0)
		{
			VectorRotateAroundZ(&test_dir, test_ang);
			UnlinkFromWorld();
			Origin = bak_org + test_dir * test_dist;
			LinkToWorld();
			// [FB] We must check if the move is being done inside the map
			if (!CheckSides(bak_org + vector((test_dist + Radius) * cos(test_ang), (test_dist + Radius) * sin(test_ang), 0.0)))
			{
				// [FB] OK, we are inside the map
				// LinkToWorld();

				if (TestLocation()/*TeleportMove(bak_org + test_dir * test_dist)*/)
				{
					return true;
				}
			}

			if (test_dist == 0.0)
				break;
		}
	};

	UnlinkFromWorld();
	Origin = bak_org;
	LinkToWorld();
	return false;
}

//===========================================================================
//
//  IsTeleportSpot
//
//===========================================================================

bool IsTeleportSpot()
{
	return !!TeleportSpot(self);
}

//===========================================================================
//
//  IsTeleportSpot2
//
//===========================================================================

bool IsTeleportSpot2()
{
	return !!TeleportSpot2(self);
}

//===========================================================================
//
//  IsPointPusher
//
//===========================================================================

bool IsPointPusher()
{
	return !!PointPusher(self);
}

//===========================================================================
//
//  IsPointPuller
//
//===========================================================================

bool IsPointPuller()
{
	return !!PointPuller(self);
}

//==========================================================================
//
//  HITDICE
//
//  Most damage in HERETIC and HEXEN defined using HITDICE
//
//==========================================================================

int HITDICE(int a)
{
	return (1 + (P_Random() & 7)) * a;
}

//==========================================================================
//
//	OnMapSpawn
//
//==========================================================================

void OnMapSpawn(mthing_t* mthing)
{
	if (Level.Game.gameskill == sk_nightmare)
	{
		ReactionCount = 0;
	}

	LastLook = P_Random() % MAXPLAYERS;

	bCheckLineBlocking = false;
	bCheckLineBlockMonsters = false;
	if (!bMissile)
	{
		bCheckLineBlocking = true;
		if (Class != PlayerFighter && Class != PlayerCleric &&
		    Class != PlayerMage && Class != PlayerHeretic &&
		    Class != PlayerMarine && Class != PlayerWitchaven &&
		    Class != PlayerHeresiarch && Class != PlayerPig)
		{
			bCheckLineBlockMonsters = true;
		}
		//[Korax]
		if (!bPickUp && Class != PlayerPig)
		{
		        experience = default.Health;
		}
	}
	else
	{
		MaxStepHeight = 4.0;
	}

	// Set the state, but do not use P_SetMobjState, because action
	// routines can't be called yet.  If the spawnstate has an action
	// routine, it will not be called.
	SetInitialState(IdleState);

	if (mthing)
	{
		float x, y, z;

		x = mthing->x;
		y = mthing->y;
		if (Class == ZCorpseLynchedNoHeart)
		{
			// Special stuff
			Spawn(BloodPool, vector(x, y, ONFLOORZ));
		}

		if (bSpawnCeiling)
		{
			z = ONCEILINGZ;
		}
		else if (bSpawnFloat)
		{
			z = FLOATRANDZ;
		}
		else if (bFloatBob)
		{
			z = mthing->height;
		}
		else
		{
			z = ONFLOORZ;
		}
		SetOrigin2(vector(x, y, z));
		if (z == ONFLOORZ)
		{
			Origin.z += mthing->height;
		}
		else if (z == ONCEILINGZ)
		{
			Origin.z -= mthing->height;
		}
		LinkToWorld();
		TID = mthing->tid;
		Special = mthing->special;
		Args[0] = mthing->arg1;
		Args[1] = mthing->arg2;
		Args[2] = mthing->arg3;
		Args[3] = mthing->arg4;
		Args[4] = mthing->arg5;
		if (bFloatBob)
		{
			// Seed random starting index for bobbing motion
			Health = P_Random();
			Special1f = mthing->height;
		}
		if (StateTime > 0.0)
		{
			StateTime = 0.1 + Random() * StateTime;
		}
		if (bMonster)
		{
			// Quantize angle to 45 degree increments
			Angles.yaw = itof(45 * (mthing->angle / 45));
			// [FB] Count for the total kills in the map
			Level.TotalKills++;
		}
		else
		{
			// Scale angle correctly (source is 0..359)
			Angles.yaw = itof(mthing->angle);
		}
		if (mthing->options & HexenLevelInfo::MTF_AMBUSH)
		{
			bAmbush = true;
		}
		if (mthing->options & HexenLevelInfo::MTF_DORMANT)
		{
			SetDormant();
		}
	}
	else
	{
		SetOrigin2(Origin);
	}

	if (bStaticLight && mthing && !TID)
	{
		if (LightColour == 0xffffffff)
		{
			Level.AddStaticLight(Origin + LightOffset, mthing->arg1 ?
				itof(mthing->arg1) * 8.0 : LightRadius);
		}
		else
		{
			Level.AddStaticLightRGB(Origin + LightOffset, mthing->arg1 ?
				itof(mthing->arg1) * 8.0 : LightRadius, LightColour);
		}
	}
}

//==========================================================================
//
//	Destroyed
//
//==========================================================================

void Destroyed()
{
	// Remove from creature queue
	if (bMonster && bCorpse)
	{
		A_DeQueueCorpse();
	}

	::Destroyed();
}

//==========================================================================
//
//  FloorBounceActor
//
//  [FB] New variant for soccer ball
//
//==========================================================================

void FloorBounceActor()
{
	Velocity.z = Velocity.z * -0.7;
	Velocity.x = 2.0 * Velocity.x / 3.0;
	Velocity.y = 2.0 * Velocity.y / 3.0;
	if (SightSound)
	{
		PlaySound(SightSound, CHAN_VOICE);
	}
}


//==========================================================================
//
//  Thrust3d
//
//	[CW] A three-dimensional vector variant of Thrust, that
//		 uses vector angles and single vector length.
//
//==========================================================================

void Thrust3d(float angle2d, float angle3, float move)
{
	Thrust(angle2d, move * cos(angle3));
	Velocity.z += move * sin(angle3) * 35.0;
}

//==========================================================================
//
//  Thrust3d2
//
//	[CW] Variant of Thrust3d, that allows implicit definition
//	     of horizontal and vertical velocities.
//
//==========================================================================

void Thrust3d2(float angle2d, float move2d, float move3)
{
	Thrust(angle2d, move2d);
	Velocity.z += move3 * 35.0;
}

//==========================================================================
//
//  ActiveMinotaur
//
//  Search thinker list for minotaur
//
//==========================================================================

Actor ActiveMinotaur()
{
	Minotaur mo;

	foreach AllThinkers(Minotaur, mo)
	{
		if (mo.Health <= 0)
			continue;
		if (!mo.bMonster)
			continue;	// for morphed minotaurs
		if (mo.bCorpse)
			continue;
		if ((XLevel.TicTime - mo.Args[0]) >= ftoi(MAULATORTIME * 35.0))
			continue;
		if (mo.Tracer == self)
			return mo;
	}
	return none;
}

//==========================================================================
//
//  Died
//
//==========================================================================

void Died(EntityEx source, EntityEx inflictor)
{
	::Died(source, inflictor);

//[Korax]
	if (source && !bIsPlayer)
	{
		if (!source.bIsPlayer)
		{
			Actor(source).experience += ftoi(itof(experience) * ((90.0 + 
				itof(P_Random()) / 255.0 * 21.0) / 100.0));  //RPG
		}
		else
		{
			Player(source.Player).GiveExperience(ftoi(itof(experience) * ((90.0 + 
				itof(P_Random()) / 255.0 * 21.0) / 100.0) * (Level.Game.gameskill < 2 ? 
				125.0 : (Level.Game.gameskill < 3 ? 100.0 : 80.0)) / 100.0));
		}
	}
//[Korax]
	// [FB] Remove muzzle flash
	if ((Effects & HexenDefs::EF_DLIGHT_MASK) == HexenDefs::EF_DL_MUZZLEFLASH)
	{
		Effects &= ~HexenDefs::EF_DLIGHT_MASK;
	}
}

//==========================================================================
//
//	KilledByPlayer
//
//==========================================================================

void KilledByPlayer(EntityEx source)
{
	bool bKilledByAlly = false;
	if (bIsPlayer)
	{
		if (MainGameInfo(Level.Game).GameModel &&
				MainGameInfo(Level.Game).GameModel.TeamFactor(self, source)
					== GameModel::teamfactor_coop)
			bKilledByAlly = true;
		else if ((MainGameInfo(Level.Game).GameType >= HexenDefs::NUMGAMESNOTEAM ||
				MainGameInfo(Level.Game).bIsCoopGame[MainGameInfo(Level.Game).GameType]) &&
				Player(Player).Team == Player(source.Player).Team)
			bKilledByAlly = true;
	}

	// [CW] check for "accuracy" trophy
	if (bMonster || (source.Player != Player) && !bKilledByAlly)
	{
		if (Length(Player(source.Player).Trophies.shot_position - GetCentre()) >=
				HexenDefs::ACCURATE_SHOT_DISTANCE)
			Player(source.Player).ConfirmTrophy(HexenDefs::trophycl_accuracy);
	}

	// [FB] Increase the player's KillCount
	if (bMonster)
	{
		//[CW] update player's score
		Player(source.Player).UpdateScore(HexenDefs::scoreevent_Kill);

		//[CW] update kill trophies
		Player(source.Player).UpdateQueuedTrophy(HexenDefs::trophycl_killsatonce, 1);
		Player(source.Player).UpdateQueuedTrophy(HexenDefs::trophycl_killsrow, 1);
	}

	// Check for frag changes
	if (bIsPlayer)
	{
		if (source.Player.bIsBot)
		{
			Player(source.Player).Bot.Killed(self);
		}

		if (Player.bIsBot)
		{
			Player(Player).Bot.Died(Actor(source));
		}

		if (self == source)
		{
			// Self-frag
			Player.FragsStats[Player.GetPlayerNum()]--;
			Player.Frags--;

			Player(Player).UpdateScore(HexenDefs::scoreevent_SelfFrag);
		}
		else
		{
			int se = bKilledByAlly ? HexenDefs::scoreevent_TeamFrag : HexenDefs::scoreevent_Frag;

			if (bKilledByAlly)
			{
				source.Player.FragsStats[Player.GetPlayerNum()]--;
				source.Player.Frags--;
			}
			else
			{
				source.Player.FragsStats[Player.GetPlayerNum()]++;
				source.Player.Frags++;
				//Player(source.Player).GiveExperience(500 + ((500 * (Player(Player).exp_level - 1) / 10) * (500 * (Player(source.Player).exp_level - 1) / 10)));
				Player(source.Player).GiveExperience(500 * Player(Player).exp_level / Player(source.Player).exp_level);
			}

			if (MainGameInfo(Level.Game).GameModel)
				se = MainGameInfo(Level.Game).GameModel.GetFragScoreEvent(Player(source.Player), Player(self.Player));

			Player(source.Player).UpdateScore(se);

			//[CW] update frag trophies
			if (!bKilledByAlly)
			{
				Player(source.Player).UpdateQueuedTrophy(HexenDefs::trophycl_fragsatonce, 1);
				Player(source.Player).UpdateQueuedTrophy(HexenDefs::trophycl_fragsrow, 1);
			}
		}
	}
}

//==========================================================================
//
//	PlayerKilled
//
//==========================================================================

void PlayerKilled(EntityEx source, EntityEx inflictor)
{
	//[CW] process deathmessage
	Player(Player).DisplayDeathMessage(inflictor, source, DamageType);
	Player(Player).Deaths++;

	//[CW] Show scoreboard for died player
	Player(Player).Scoreboard(true);

	if (Player(Player).Morph.bMorphed)
		Player(Player).bRecalculateLevelOnRespawn = true;

	// Player death
	if (!source)
	{
		// Fragged by enviroment
		// [CW] I don't get the idea of the following piece of code...
		// perhaps it is wrong, i'll comment it for a while
		/*if (MainGameInfo(Level.Game).GameType == HexenDefs::game_dmteam)
		{
			Player.FragsStats[Player.Colour]--;
		}
		else
		{*/
			Player.FragsStats[Player.GetPlayerNum()]--;
		//}
		Player.Frags--;
	}

	//[CW] notify advanced game mode
	if (MainGameInfo(Level.Game).GameModel)
		MainGameInfo(Level.Game).GameModel.NotifyPlayerDeath(Player(Player), source);

	Player(Player).Powers[pw_flight] = 0.0;
	Player(Player).SetFOV(HexenDefs::DEFAULT_FOV);
}

//==========================================================================
//
//  MinotaurSlam
//
//==========================================================================

void MinotaurSlam(Actor source)
{
	float angle;
	float thrust;

	angle = atan2(Origin.y - source.Origin.y, Origin.x - source.Origin.x);
	thrust = 16.0 + Random() * 4.0;
	Velocity.x += thrust * cos(angle) * 35.0;
	Velocity.y += thrust * sin(angle) * 35.0;
	Damage(none, source, HITDICE(4));
	if (bIsPlayer)
	{
		ReactionTime = 0.4 + Random() * 0.2;
	}
	source.Args[4] = 0;	// Stop charging
}

//==========================================================================
//
//  TouchWhirlwind
//
//==========================================================================

void TouchWhirlwind(Actor Other)
{
	float randVal;

	Other.Angles.yaw = AngleMod360(Other.Angles.yaw +
		(Random() - Random()) * 45.0 / 2.0);
	Other.Velocity.x += (Random() - Random()) * 4.0 * 35.0;
	Other.Velocity.y += (Random() - Random()) * 4.0 * 35.0;
	if (XLevel.TicTime & 16 && !Other.bBoss)
	{
		randVal = Random() * 4.0;
		if (randVal > 2.5)
		{
			randVal = 2.5;
		}
		Other.Velocity.z += randVal * 35.0;
		if (Other.Velocity.z > 12.0 * 35.0)
		{
			Other.Velocity.z = 12.0 * 35.0;
		}
	}
	if (!(XLevel.TicTime & 7))
	{
		Other.Damage(none, Target, 6);
	}
}

//==========================================================================
//
//  MorphPlayer
//
//  [CW] Morph player into... err... something
//
//==========================================================================

bool MorphPlayer(int pclass, class<Actor> moclass, bool timed, bool until_death)
{
	Actor fog;
	Actor beastMo;
	int i;
	int bak_level;

	if (Player(Player).Powers[pw_invulnerability])
	{
		// Immune when invulnerable
		return (false);
	}
	if (Player(Player).Morph.bMorphed/*MorphTime*/)
	{
		// Player is already a beast
		return false;
	}

	fog = Spawn(TeleportFog, Origin + vector(0.0, 0.0, TELEFOGHEIGHT));
	fog.PlaySound('Teleport', CHAN_VOICE);

	beastMo = Spawn(/*PlayerPig*/moclass, Origin);
	beastMo._Special1 = Player(Player).ReadyWeapon;
	beastMo.Angles = Angles;
	beastMo.Player = Player;
	beastMo.bIsPlayer = true;
	//beastMo.Health = beastMo.SpawnHealth;	////Player::MAXMORPHHEALTH;
	Player.Health = beastMo.Health;
	Player.MO = beastMo;
/*	for (i = 0; i < NUMARMOR; i++)
	{
		Player.ArmorPoints[i] = 0.0;
	}
*/
	Player(Player).ArmorPoints = 0;
	Player.PClass = pclass/*HexenDefs::PCLASS_PIG*/;
	beastMo.bFly = bFly;
	Player(Player).Morph.bMorphed = true;
	Player(Player).Morph.bTimer = timed;
	Player(Player).Morph.bUntilDeath = until_death;
	if (timed)
		Player(Player).Morph.MorphTime = Player::MORPHTIME;
	Player(Player).ActivateMorphWeapon();

	// [CW] If morphed player cannot move from current position try to find more appropriate position or him
	if (!Actor(Player.MO).TryMove(Origin))
	{
		Actor(Player.MO).MoveToFreePosition();
	}
	else
	{
		fog = Spawn(TeleportFog, Origin + vector(0.0, 0.0, TELEFOGHEIGHT));
		fog.PlaySound('Teleport', CHAN_VOICE);
	}

	// [CW] Recalc attributes based on the new player's body
	bak_level = Player(Player).exp_level;
	Player(Player).InitiateLevel();
	Player(Player).ActivateLevel(bak_level, false);

	SetState(S_FREETARGMOBJ);

	return true;
}

//==========================================================================
//
//  MorphMonster
//
//==========================================================================

bool MorphMonster()
{
	Actor monster;
	Actor fog;
	int i;

	if (bIsPlayer)
		return false;
	if (!bMonster)
		return false;
	if (bBoss)
		return false;
	if (bNoMorph)
		return false;

	fog = Spawn(TeleportFog, Origin + vector(0.0, 0.0, TELEFOGHEIGHT));
	fog.PlaySound('Teleport', CHAN_VOICE);

	monster = Spawn(Pig, Origin);
	monster.SpecialCID = class<Actor>(Class);
	monster._Special1 = ftoi(MORPHTIME * 35.0) + P_Random();
	monster.Alpha = Alpha;
	monster.Target = Target;
	monster.Angles.yaw = Angles.yaw;
	monster.TID = TID;
	monster.Special = Special;
	monster.InsertIntoTIDList(TID);
	for (i = 0; i < 5; i++)
	{
		monster.Args[i] = Args[i];
	}

	RemoveFromTIDList();

	SetState(S_FREETARGMOBJ);

	return true;
}

//==========================================================================
//
//  AutoUseHealth
//
//==========================================================================

void AutoUseHealth(int saveHealth)
{
	int i;
	int count;
	int normalCount;
	int normalSlot = 0;
	int superCount;
	int superSlot = 0;

	normalCount = 0;
	superCount = 0;
	for (i = 0; i < Player(Player).InventorySlotNum; i++)
	{
		if (Player(Player).Inventory[i].type == HexenDefs::arti_health)
		{
			normalSlot = i;
			normalCount = Player(Player).Inventory[i].count;
		}
		else if (Player(Player).Inventory[i].type == HexenDefs::arti_superhealth)
		{
			superSlot = i;
			superCount = Player(Player).Inventory[i].count;
		}
	}
	if ((Level.Game.gameskill == sk_baby) && (normalCount * 25 >= saveHealth))
	{
		// Use quartz flasks
		count = (saveHealth + 24) / 25;
		for (i = 0; i < count; i++)
		{
			Health += 25;
			Player(Player).PlayerRemoveArtifact(normalSlot);
		}
	}
	else if (superCount * 100 >= saveHealth)
	{
		// Use mystic urns
		count = (saveHealth + 99) / 100;
		for (i = 0; i < count; i++)
		{
			Health += 100;
			Player(Player).PlayerRemoveArtifact(superSlot);
		}
	}
	else if ((Level.Game.gameskill == sk_baby)
		&& (superCount * 100 + normalCount * 25 >= saveHealth))
	{
		// Use mystic urns and quartz flasks
		count = (saveHealth + 24) / 25;
		saveHealth -= count * 25;
		for (i = 0; i < count; i++)
		{
			Health += 25;
			Player(Player).PlayerRemoveArtifact(normalSlot);
		}
		count = (saveHealth + 99) / 100;
		for (i = 0; i < count; i++)
		{
			Health += 100;
			// The same as in HERETIC
			Player(Player).PlayerRemoveArtifact(normalSlot);
		}
	}
	Player.Health = Health;
}

//==========================================================================
//
//  PoisonPlayer - Sets up all data concerning poisoning
//
//==========================================================================

void PoisonPlayer(Actor poisoner, int poison)
{
	if ((Player(Player).Cheats & Player::CF_GODMODE) || Player(Player).Powers[pw_invulnerability])
	{
		return;
	}
	Player(Player).PoisonCount += poison;
	Player(Player).Poisoner = poisoner;
	if (Player(Player).PoisonCount > 100)
	{
		Player(Player).PoisonCount = 100;
	}
	Player(Player).LastPoisonTime = XLevel.Time;
}

//==========================================================================
//
//  PoisonDamage
//
//  Similar to Actor::Damage
//
//==========================================================================

void PoisonDamage(Actor source, int damage, bool playPainSound)
{
	Actor inflictor;

	inflictor = source;
	if (Health <= 0)
	{
		return;
	}
	if (bInvulnerable && damage < 10000)
	{	// mobj is invulnerable
		return;
	}
	if (bIsPlayer && Level.Game.gameskill == sk_baby)
	{
		// Take half damage in trainer mode
		damage >>= 1;
	}
	if (damage < 1000 && ((Player(Player).Cheats & Player::CF_GODMODE)
			|| Player(Player).Powers[pw_invulnerability]))
	{
		return;
	}
/*	if (damage >= Player(Player).HealthBig && ((Level.Game.gameskill == sk_baby) || Level.Game.deathmatch) &&
		/!Player(Player).MorphTime/ Player(Player).PClass != HexenDefs::PCLASS_PIG)
	{
		// Try to use some inventory health
		AutoUseHealth(damage - Player(Player).HealthBig + 1);
	}*/
	Player.Health -= damage;	// mirror mobj health here for Dave
	if (Player.Health < 0)
	{
		Player.Health = 0;
	}
	Player(Player).Attacker = source;

	//
	// do the damage
	//
	Health -= damage;
	if (Health <= 0)
	{
		// Death
		_Special1 = damage;
		if (bIsPlayer && inflictor && /*!Player(Player).MorphTime*/Player(Player).PClass != HexenDefs::PCLASS_PIG)
		{
			// Check for flame death
			if (inflictor.DamageType == 'Fire' && (Health > -50) && (damage > 25))
			{
				DamageType = 'Fire';
			}
			else
			{
				DamageType = inflictor.DamageType;
			}
		}
		DamageType = 'Poison';
		Died(source, inflictor);
		return;
	}
	if (!(XLevel.TicTime & 63) && playPainSound)
	{
		SetState(PainState);
	}
}

//==========================================================================
//
//  BlindPlayer
//
//  [FB] Similar to Actor::Damage
//
//==========================================================================

void BlindPlayer(Actor blinder, int blind)
{
	if ((Player(Player).Cheats & Player::CF_GODMODE) || Player(Player).Powers[pw_invulnerability])
	{
		return;
	}
	Player(Player).BlindCount += blind;
	Player(Player).Blinder = blinder;
	if (Player(Player).BlindCount > 220)
	{
		Player(Player).BlindCount = 220;
	}
	Player(Player).LastBlindTime = XLevel.Time;
}

//==========================================================================
//
//  BlindDamage
//
//==========================================================================

void BlindDamage(Actor source, int damage, bool playPainSound)
{
	Actor inflictor;

	inflictor = source;
	if (Health <= 0)
	{
		return;
	}
	if (bInvulnerable && damage < 10000)
	{	// mobj is invulnerable
		return;
	}
	if (bIsPlayer && Level.Game.gameskill == sk_baby)
	{
		// Take half damage in trainer mode
		damage >>= 1;
	}
	if (damage < 1000 && ((Player(Player).Cheats & Player::CF_GODMODE)
			|| Player(Player).Powers[pw_invulnerability]))
	{
		return;
	}
/*	if (damage >= Player(Player).HealthBig && ((Level.Game.gameskill == sk_baby) || Level.Game.deathmatch) &&
		/!Player(Player).MorphTime/ Player(Player).PClass != HexenDefs::PCLASS_PIG)
	{
		// Try to use some inventory health
		AutoUseHealth(damage - Player(Player).HealthBig + 1);
	}*/
	Player.Health -= damage;	// mirror mobj health here for Dave
	if (Player.Health < 0)
	{
		Player.Health = 0;
	}
	Player(Player).Attacker = source;

	//
	// do the damage
	//
	Health -= damage;
	if (Health <= 0)
	{
		// Death
		_Special1 = damage;
		if (bIsPlayer && inflictor && /*!Player(Player).MorphTime*/Player(Player).PClass != HexenDefs::PCLASS_PIG)
		{
			// Check for flame death
			if (inflictor.DamageType == 'Fire' && (Health > -50) && (damage > 25))
			{
				DamageType = 'Fire';
			}
			else
			{
				DamageType = inflictor.DamageType;
			}
		}
		DamageType = 'Blind';
		Died(source, inflictor);
		return;
	}
	if (playPainSound)
	{
		SetState(PainState);
	}
}

//==========================================================================
//
//  SpawnBloodSplatter
//
//==========================================================================

void SpawnBloodSplatter(TVec org, int damage)
{
	Actor mo;
	int i;

	for (i = 0; i < MAXPLAYERS; i++)
	{
		if (!Level.Game.Players[i])
			continue;
		if (!Level.Game.Players[i].bSpawned)
			continue;
		Player(Level.Game.Players[i]).ClientBlood(org, damage > 255 ? 255 : damage);
	}

	mo = Spawn(BloodSplatter, org);
	mo.Target = self;
	mo.Velocity.x = (Random() - Random()) * 4.0 * 35.0;
	mo.Velocity.y = (Random() - Random()) * 4.0 * 35.0;
	mo.Velocity.z = 3.0 * 35.0 / 20.0;
}

//===========================================================================
//
//  SpawnBloodSplatter2
//
//===========================================================================

void SpawnBloodSplatter2(TVec org)
{
	Actor mo;

	org.x += (Random() - 0.5) * 8.0;
	org.y += (Random() - 0.5) * 8.0;
	mo = Spawn(AxeBlood, org);
	mo.Target = self;
}

//==========================================================================
//
//  SpawnRipperBlood
//
//==========================================================================

void SpawnRipperBlood()
{
	Actor th;
	TVec org;

	org.x = Origin.x + (Random() - Random()) * 16.0;
	org.y = Origin.y + (Random() - Random()) * 16.0;
	org.z = Origin.z + (Random() - Random()) * 16.0;
	th = Spawn(Blood, org);
	th.Velocity.x = Velocity.x / 2.0;
	th.Velocity.y = Velocity.y / 2.0;
	th.StateTime += Random() * 0.1;
}

//============================================================================
//
//  SpawnDirt
//
//  Dirt stuff
//
//============================================================================

void SpawnDirt(float radius)
{
	float angle;
	TVec org;
	class<Actor> dtype;
	Actor dirt;

	angle = 360.0 * Random();
	org.x = Origin.x + radius * cos(angle);
	org.y = Origin.y + radius * sin(angle);
	org.z = Origin.z + Random() * 2.0 + 1.0;
	switch (P_Random() % 6)
	{
	case 0:
		dtype = Dirt1;
		break;
	case 1:
		dtype = Dirt2;
		break;
	case 2:
		dtype = Dirt3;
		break;
	case 3:
		dtype = Dirt4;
		break;
	case 4:
		dtype = Dirt5;
		break;
	case 5:
		dtype = Dirt6;
		break;
	}
	dirt = Spawn(dtype, org);
	if (dirt)
	{
		dirt.Velocity.z = Random() * 4.0 * 35.0;
	}
}

//==========================================================================
//
//  TeleportToPlayerStarts
//
//==========================================================================

void TeleportToPlayerStarts()
{
	int i;
	int selections = 0;
	float destX;
	float destY;
	float destAngle;

	for (i = 0; i < MAXPLAYERS; i++)
	{
		if (!Level.Game.Players[i])
			continue;
		selections++;
	}
	i = P_Random() % selections;
	destX = Level.PlayerStarts[i].x;
	destY = Level.PlayerStarts[i].y;
	destAngle = itof(45 * (Level.PlayerStarts[i].angle / 45));
	Teleport(vector(destX, destY, ONFLOORZ), destAngle, true, true, false);
}

//==========================================================================
//
//  TeleportToDeathmatchStarts
//
//==========================================================================

void TeleportToDeathmatchStarts()
{
	int i;
	float destX;
	float destY;
	float destAngle;

	if (Level.NumDeathmatchStarts)
	{
		i = P_Random() % Level.NumDeathmatchStarts;
		destX = Level.DeathmatchStarts[i].x;
		destY = Level.DeathmatchStarts[i].y;
		destAngle = itof(45 * (Level.DeathmatchStarts[i].angle / 45));
		Teleport(vector(destX, destY, ONFLOORZ), destAngle, true, true,
			false);
	}
	else
	{
		TeleportToPlayerStarts();
	}
}

//==========================================================================
//
//  TeleportOther
//
//==========================================================================

void TeleportOther()
{
	if (bIsPlayer)
	{
		if (Level.Game.deathmatch)
			TeleportToDeathmatchStarts();
		else
			TeleportToPlayerStarts();
	}
	else
	{
		// If death action, run it upon teleport
		if (bMonster && Special)
		{
			RemoveFromTIDList();
			Level.ExecuteActionSpecial(Special, Args[0], Args[1], Args[2],
				Args[3], Args[4], NULL, 0, self);
			Special = 0;
		}

		// Send all monsters to deathmatch spots
		TeleportToDeathmatchStarts();
	}
}

//**************************************************************************
//
//  OBJECT MOVEMENT
//
//**************************************************************************

//==========================================================================
//
//  ClipVelocity
//
//  Slide off of the impacting object
//
//==========================================================================

TVec ClipVelocity(TVec in, TVec normal, float overbounce)
{
	return in - normal * (DotProduct(in, normal) * overbounce);
}

//===========================================================================
//
//	PlayerIsMorphed
//
//===========================================================================

bool PlayerIsMorphed()
{
	return /*Player(Player).MorphTime*/Player(Player).PClass == HexenDefs::PCLASS_PIG;
}

//===========================================================================
//
//	SpawnBlasterEffects
//
//===========================================================================

void SpawnBlasterEffects()
{
	float z;
	Actor A;

	if (Class == MageWandMissile || Class == MageWandRedMissile || Class == MageWandGreyMissile)
	{
		if (P_Random() < 128)
		{
			z = Origin.z - 8.0;
			if (z < FloorZ)
			{
				z = FloorZ;
			}
			if (Class == MageWandMissile)
			{
				Spawn(MageWandSmoke, vector(Origin.x, Origin.y, z));
			}
			else if (Class == MageWandGreyMissile)
			{
				Spawn(MageWandGreySmoke, vector(Origin.x, Origin.y, z));
			}
			else
			{
				Spawn(MageWandRedSmoke, vector(Origin.x, Origin.y, z));
			}
		}
	}
	else
	{
		if (!--_Special1)
		{
			_Special1 = 4;
			z = Origin.z - 12.0;
			if (z < FloorZ)
			{
				z = FloorZ;
			}
			A = Spawn(ClericFlameFloor, vector(Origin.x, Origin.y, z));
			if (A)
			{
				A.Angles.yaw = Angles.yaw;
			}
		}
	}
}

//==========================================================================
//
//	GetBaseViewHeight
//
//==========================================================================

float GetBaseViewHeight()
{
	return PlayerPawn(self).ViewHeight/*Player::VIEWHEIGHT*/;
}

//==========================================================================
//
//	Tick
//
//==========================================================================

void Tick(float deltaTime)
{
	if (!Physics(deltaTime))
	{
		return;
	}
	// Cycle through states, calling action functions at transitions
	if (!AdvanceState(deltaTime))
	{
		// mobj was removed
		return;
	}
}

//==========================================================================
//
//	SetDormant
//
//==========================================================================

void SetDormant()
{
	bDormant = true;
	StateTime = -1.0;
}

//==========================================================================
//
//	SectorChanged
//
//==========================================================================

bool SectorChanged(int CrushChange)
{
	Actor B;

	if (HeightClip())
	{
		return true;
	}

	//	Crunch bodies to giblets
	if (bCorpse && (Health <= 0))
	{
		if (bNoBlood)
		{
			Destroy();
		}
		else
		{
			if (State != S_GIBS1)
			{
				SetState(S_GIBS1);
				Height = 0.0;
				Radius = 0.0;
				PlaySound('*splat', CHAN_VOICE);
			}
		}
		return true;
	}

	//	Crunch dropped items
	if (bDropped)
	{
		Destroy();
		return true;
	}

	if (!bShootable)
	{
		//	Assume it is bloody gibs or something
		return true;
	}

	if (CrushChange && !(XLevel.TicTime & 3))
	{
		Damage(none, none, CrushChange);

		// spray blood in a random direction
		if (!bNoBlood && !bInvulnerable)
		{
			B = Spawn(Blood, Origin + vector(0.0, 0.0, Height / 2.0));
			B.Velocity.x = (Random() - Random()) * 16.0 * 35.0;
			B.Velocity.y = (Random() - Random()) * 16.0 * 35.0;
		}
	}
	return false;	//don't fit
}

//==========================================================================
//
//  HaveFlightPower
//
//==========================================================================

bool HaveFlightPower()
{
	return !!Player(Player).Powers[pw_flight];
}

//==========================================================================
//
//  HaveFlightPower
//
//==========================================================================

bool HaveSpeedPower()
{
	return !!Player(Player).Powers[pw_speed];
}

//==========================================================================
//
//  SpawnMissileAngle
//
//  Returns NULL if the missile exploded immediately, otherwise returns
// a Actor reference to the missile.
//
//==========================================================================

Actor SpawnMissileAngle(class<Actor> type, float angle, float momz)
{
	TVec org;
	Actor mo;

	org = Origin;
	if (type == MinotaurMissile)
	{
		// Minotaur swing attack missile
		org.z = Origin.z + 40.0;
	}
	else if (type == MinotaurFloorFire1)
	{
		// Minotaur floor fire missile
		org.z = ONFLOORZ + FloorClip;
	}
	else if (type == IceGuyMissile2)
	{
		// Secondary Projectiles of the Ice Guy
		org.z = Origin.z + 3.0;
	}
	else if (type == MageStaffFX2 || type == InfernalHandFX)
	{
		org.z = Origin.z + 40.0;
	}
	else if (IsA('PlayerHeresiarch'))
	{
		org.z = Origin.z + (Height / 2.0);
	}
	else
	{
		org.z = Origin.z + 32.0;
	}
	org.z -= FloorClip;
	mo = Spawn(type, org);
	if (mo.SightSound)
	{
		mo.PlaySound(mo.SightSound, CHAN_VOICE);
	}
	mo.Target = self;	// Originator
	mo.Angles.yaw = angle;
	mo.Velocity.x = mo.Speed * cos(angle);
	mo.Velocity.y = mo.Speed * sin(angle);
	mo.Velocity.z = momz;
	return mo.CheckMissileSpawn() ? mo : none;
}

//==========================================================================
//
//  SpawnMissileAngleSpeed
//
//  Returns NULL if the missile exploded immediately, otherwise returns
// a Actor reference to the missile.
//
//==========================================================================

Actor SpawnMissileAngleSpeed(class<Actor> type, float angle,
	float momz, float speed)
{
	TVec org;
	Actor mo;

	org = Origin;
	org.z -= FloorClip;
	mo = Spawn(type, org);
	mo.Target = self;	// Originator
	mo.Angles.yaw = angle;
	mo.Velocity.x = speed * cos(angle);
	mo.Velocity.y = speed * sin(angle);
	mo.Velocity.z = momz;
	return mo.CheckMissileSpawn() ? mo : none;
}

//==========================================================================
//
//  SeekerMissile
//
//  Returns true if target was tracked, false if not.
//
//==========================================================================

bool SeekerMissile(float thresh, float turnMax)
{
	int dir;
	float dist;
	float delta;
	float angle;

	if (!Tracer)
	{
		return false;
	}
	if (!Tracer.bShootable)
	{
		// Target died
		Tracer = none;
		return false;
	}
	dir = FaceActor(Actor(Tracer), delta);
	if (delta > thresh)
	{
		delta /= 2.0;
		if (delta > turnMax)
		{
			delta = turnMax;
		}
	}
	if (dir)
	{
		// Turn clockwise
		Angles.yaw += delta;
	}
	else
	{
		// Turn counter clockwise
		Angles.yaw -= delta;
	}
	Angles.yaw = AngleMod360(Angles.yaw);
	angle = Angles.yaw;
	Velocity.x = Speed * cos(angle);
	Velocity.y = Speed * sin(angle);
	if (Origin.z + Height < Tracer.Origin.z ||
		Tracer.Origin.z + Tracer.Height < Origin.z)
	{
		// Need to seek vertically
		dist = DistTo2(Tracer);
		dist = dist / Speed;
		if (dist < 1.0)
		{
			dist = 1.0;
		}
		Velocity.z = (Tracer.Origin.z + Tracer.Height / 2.0 -
			Origin.z - Height / 2.0) / dist;
	}
	return true;
}

//==========================================================================
//
//  DoMissileExplosionEffects
//
//==========================================================================

void DoMissileExplosionEffects()
{
	if (!(Effects & HexenDefs::EF_DL_ROCKET) && (Effects & HexenDefs::EF_DLIGHT_MASK))
	{
		SendExplosion2(Effects & HexenDefs::EF_DLIGHT_MASK, Origin);
		Effects &= ~HexenDefs::EF_DLIGHT_MASK;
	}
	if (Effects & HexenDefs::EF_DL_ROCKET)
		Effects &= ~HexenDefs::EF_DL_ROCKET;
}

//==========================================================================
//
//  SendExplosion2
//
//==========================================================================

void SendExplosion2(int etype, TVec org)
{
	int i;

	for (i = 0; i < MAXPLAYERS; i++)
	{
		if (!Level.Game.Players[i])
			continue;
		if (!Level.Game.Players[i].bSpawned)
			continue;
		Player(Level.Game.Players[i]).ClientExplosion2(etype, org);
	}
}

//==========================================================================
//
//  Blast
//
//==========================================================================

void Blast(Actor source, float strength)
{
	float angle;
	float ang;
	Actor A;
	float x;
	float y;
	float z;

	angle = atan2(Origin.y - source.Origin.y, Origin.x - source.Origin.x);
	if (strength < Player::BLAST_FULLSTRENGTH)
	{
		Velocity.x = strength * cos(angle) * 35.0;
		Velocity.y = strength * sin(angle) * 35.0;
		if (bIsPlayer)
		{
			// Players handled automatically
		}
		else
		{
			bSlide = true;
			bBlasted = true;
		}
	}
	else	// full strength blast from artifact
	{
		if (bMissile)
		{
			if (SorcererBall(self))
			{
				// don't blast sorcerer balls
				return;
			}
			else if (MageStaffFX2(self) || InfernalHandFX(self))
			{
				// Reflect to originator
				Tracer = Target;
				Target = source;
			}
		}
		if (Class == HolyFX)
		{
			if (Tracer == source)
			{
				Tracer = Target;
				Target = source;
			}
		}
		Velocity.x = Player::BLAST_SPEED * cos(angle) * 35.0;
		Velocity.y = Player::BLAST_SPEED * sin(angle) * 35.0;

		// Spawn blast puff
		ang = atan2(source.Origin.y - Origin.y, source.Origin.x - Origin.x);
		x = Origin.x + (Radius + 1.0) * cos(ang);
		y = Origin.y + (Radius + 1.0) * sin(ang);
		z = Origin.z - FloorClip + Height / 2.0;
		A = Spawn(BlastEffect, vector(x, y, z));
		if (A)
		{
			A.Velocity.x = Velocity.x;
			A.Velocity.y = Velocity.y;
		}

		if (bMissile)
		{
			Velocity.z = 8.0 * 35.0;
			A.Velocity.z = Velocity.z;
		}
		else
		{
			Velocity.z = 1000.0 / Mass * 35.0;
		}
		if (bIsPlayer)
		{
			// Players handled automatically
		}
		else
		{
			bSlide = true;
			bBlasted = true;
		}
	}
}

//==========================================================================
//
//  SpawnPuff
//
//==========================================================================

void SpawnPuff(TVec org, float Range, class<EntityEx> PuffType, bool HitThing)
{
	int i;
	EntityEx puff;

	org.z += (Random() - Random()) * 4.0;

	//[FB] Check if we really want to spawn a puff
	if(PuffType)
		puff = Spawn(PuffType, org);
	else
		return;

	if (HitThing && puff.SightSound)
	{
		// Hit thing sound
		puff.PlaySound(puff.SightSound, CHAN_VOICE);
	}
	else if (puff.AttackSound)
	{
		puff.PlaySound(puff.AttackSound, CHAN_VOICE);
	}
	if (PuffType == PunchPuff)
	{
		puff.Velocity.z = 1.0 * 35.0;
	}
	else if (PuffType == HammerPuff)
	{
		puff.Velocity.z = 8.0 / 10.0 * 35.0;
	}

	if (PuffType == GoldWandPuff1)
	{
		SendExplosion2(HexenDefs::EF_DL_WHITE, org);
	}
	if (PuffType == BlasterPuff1)
	{
		SendExplosion2(HexenDefs::EF_DL_BLUE, org);
	}
	if (PuffType == DoomPuff)
	{
		for (i = 0; i < MAXPLAYERS; i++)
		{
			if (!Level.Game.Players[i])
				continue;
			if (!Level.Game.Players[i].bSpawned)
				continue;
			Player(Level.Game.Players[i]).ClientGunShot(org);
		}
	}

	MainGameInfo(Level.Game).PuffSpawned = Actor(puff);
}

//===========================================================================
//
//  A_NoGravity
//
//===========================================================================

final void A_NoGravity()
{
	bNoGravity = true;
}

//============================================================================
//
//  A_SetInvulnerable
//
//============================================================================

final void A_SetInvulnerable()
{
	bInvulnerable = true;
}

//============================================================================
//
//  A_UnSetInvulnerable
//
//============================================================================

final void A_UnSetInvulnerable()
{
	bInvulnerable = false;
}

//==========================================================================
//
//  A_HideThing
//
//==========================================================================

final void A_HideThing()
{
	bHidden = true;
}

//==========================================================================
//
//  A_UnHideThing
//
//==========================================================================

final void A_UnHideThing()
{
	bHidden = false;
}

//==========================================================================
//
//  A_Pain
//
//==========================================================================

final void A_Pain()
{
	if (bIsPlayer && /*!Player(Player).MorphTime*/Player(Player).PClass != HexenDefs::PCLASS_PIG)
	{
		if (Health < 25)
		{
			PlaySound('*pain25', CHAN_VOICE);
		}
		else if (Health < 50)
		{
			PlaySound('*pain50', CHAN_VOICE);
		}
		else if (Health < 75)
		{
			PlaySound('*pain75', CHAN_VOICE);
		}
		else
		{
			PlaySound('*pain100', CHAN_VOICE);
		}
	}
	else if (PainSound)
	{
		PlaySound(PainSound, CHAN_VOICE);
	}
}

//============================================================================
//
//  A_FreeTargMobj
//
//============================================================================

final void A_FreeTargMobj()
{
	Velocity = vector(0.0, 0.0, 0.0);
	Origin.z = CeilingZ + 4.0;
	Gravity = 1.0;
	bSolid = false;
	bShootable = false;
	bFloat = false;
	bCountKill = false;
	bMonster = false;
	bSkullFly = false;
	bDropOff = true;
	bNoGravity = true;
	bCorpse = true;
	bNoPassMobj = true;
	Alpha = 0.0;
	Player = none;
	bIsPlayer = false;
	Health = -1000;	// Don't resurrect
}

//============================================================================
//
//  A_Scream
//
//============================================================================

final void A_Scream()
{
	StopSound(CHAN_AUTO);
	if (bIsPlayer)
	{
		if (/*Player(Player).MorphTime*/Player(Player).PClass != HexenDefs::PCLASS_PIG)
		{
			PlaySound(DeathSound, CHAN_VOICE);
		}
		else
		{
			// Handle the different player death screams
			if (Velocity.z <= -39.0 * 35.0)
			{
				// Falling splat
				PlaySound('*splat', CHAN_VOICE);
			}
			else if (Health > -50)
			{
				// Normal death sound
				PlaySound('*death', CHAN_VOICE);
			}
			else if (Health > -100)
			{
				// Crazy death sound
				PlaySound('*crazydeath', CHAN_VOICE);
			}
			else
			{
				// Extreme death sound
				PlaySound('*xdeath', CHAN_VOICE);
			}
		}
	}
	else
	{
		PlaySound(DeathSound, CHAN_VOICE);
	}
}

//============================================================================
//
//  A_Explode
//
//  Handles a bunch of exploding things.
//
//============================================================================

final void A_Explode()
{
	int damage;
	float distance;
	int damageSelf;
	int i;

	damage = 128;
	distance = 128.0;
	damageSelf = true;
	if (Class == FireBomb)
	{
		// Time Bombs
		Origin.z += 32.0;
		Alpha = 1.0;
	}
	else if (Class == MinotaurFloorFire1)
	{
		// Minotaur floor fire
		damage = 24;
	}
	else if (Class == Bishop)
	{
		// Bishop radius death
		damage = 25 + (P_Random() & 15);
	}
	else if (Class == HammerMissile)
	{
		// Fighter Hammer
		damage = 128;
		damageSelf = false;
		if (Target && Target.bIsPlayer)
		{
			damage = damage * Player(Target.Player).intelligence / 10;
		}
	}
	else if (Class == FighterSwordMissile)
	{
		// Fighter Runesword
		damage = 64;
		damageSelf = false;
		if (Target && Target.bIsPlayer)
		{
			damage = damage * Player(Target.Player).intelligence / 10;
		}
	}
	else if (Class == CircleFlame)
	{
		// Cleric Flame secondary flames
		damage = 20;
		damageSelf = false;
		if (Target && Target.bIsPlayer)
		{
			damage = damage * Player(Target.Player).intelligence / 10;
		}
	}
	else if (SorcererBall(self))
	{
		// Sorcerer balls
		distance = 255.0;
		damage = 255;
		Args[0] = 1;	// don't play bounce
	}
	else if (Class == SorcererFX1)
	{
		// Sorcerer spell 1
		damage = 30;
	}
	else if (Class == SorcererFX4)
	{
		// PlayerHeresiarch'es fire
		if (Target && Target.bIsPlayer)
		{
			damage = SorcererFX4(self).ExplodeDamage;
			damageSelf = false;
		}
		else
		{
			// Sorcerer spell 4
			damage = 20;
		}
	}
	else if (Class == TreeDestructible)
	{
		damage = 10;
	}
	else if (Class == DragonFX2)
	{
		damage = 80;
		damageSelf = false;
	}
	else if (Class == MageStaffFX)
	{
		damage = 64;
		distance = 192.0;
		damageSelf = false;
		if (Target && Target.bIsPlayer)
		{
			damage = damage * Player(Target.Player).intelligence / 10;
		}
	}
	else if (Class == MageStaffFX2)
	{
		damage = 80;
		distance = 192.0;
		damageSelf = false;
		if (Target && Target.bIsPlayer)
		{
			damage = damage * Player(Target.Player).intelligence / 10;
		}
	}
	else if (Class == ZXmasTree || Class == ZShrub2)
	{
		damage = 30;
		distance = 64.0;
	}
	else if (Class == MorningStarMissile)
	{
		damage = 80;		
		if (Target && Target.bIsPlayer)
		{
			damage = damage * Player(Target.Player).intelligence / 10;
		}
	}
	else if (Class == WElectricBall)
	{
		damage = 120;
		distance = 192.0;
		damageSelf = false;
		if (Target && Target.bIsPlayer)
		{
			damage = damage * Player(Target.Player).intelligence / 10;
		}
	}
	else if (Class == InfernalHandFX)
	{
		damageSelf = false;
		damage = InfernalHandFX(self).ExplodeDamage;
		distance = InfernalHandFX(self).ExplodeDistance;
	}
	else if (Class == PoisonCloud)
	{
		damage = 4;
		distance = 40.0;
	}
	RadiusAttack(Target, damage, distance, damageSelf);
	if (Class != PoisonCloud && Origin.z <= FloorZ + distance)
	{
		HitFloorType();
	}

	if ((Effects & HexenDefs::EF_DL_ROCKET) && (Effects & HexenDefs::EF_DLIGHT_MASK))
	{
		//  Spawn explosion effects - dynamic light and particles
		for (i = 0; i < MAXPLAYERS; i++)
		{
			if (!Level.Game.Players[i])
				continue;
			if (!Level.Game.Players[i].bSpawned)
				continue;
			Player(Level.Game.Players[i]).ClientExplosion(
				Origin + vector(0.0, 0.0, Height * 0.5));
		}

		//  Clear old dynamic light effect
		Effects &= ~HexenDefs::EF_DLIGHT_MASK;
	}
	else if (ExplodeEffect)
	{
		SendExplosion2(ExplodeEffect, Origin);
	}
}

//============================================================================
//
//  A_NoBlocking
//
//============================================================================

final void A_NoBlocking()
{
	bSolid = false;
}

//============================================================================
//
//  A_AddPlayerCorpse
//
//============================================================================

final void A_AddPlayerCorpse()
{
	if (HexenLevelInfo(Level).bodyqueslot >= /*HexenLevelInfo::BODYQUESIZE*/HexenLevelInfo(Level).BodyQueSize)
	{
		// Too many player corpses - remove an old one
		HexenLevelInfo(Level).bodyque[HexenLevelInfo(Level).bodyqueslot % /*HexenLevelInfo::BODYQUESIZE*/HexenLevelInfo(Level).BodyQueSize].Destroy();
	}
	HexenLevelInfo(Level).bodyque[HexenLevelInfo(Level).bodyqueslot % /*HexenLevelInfo::BODYQUESIZE*/HexenLevelInfo(Level).BodyQueSize] = self;
	HexenLevelInfo(Level).bodyqueslot++;
}

//============================================================================
//
//  A_CheckBurnGone
//
//============================================================================

final void A_CheckBurnGone()
{
	if (_Special2 == 666)
	{
		SetState(S_PLAY_FDTH20);
	}
}

//============================================================================
//
//  A_QueueCorpse
//
//  Throw another corpse on the queue.
//
//============================================================================

final void A_QueueCorpse()
{
	Actor corpse;

	if (HexenLevelInfo(Level).corpseQueueSlot >= /*HexenLevelInfo::CORPSEQUEUESIZE*/HexenLevelInfo(Level).CorpseQueSize)
	{
		// Too many corpses - remove an old one
		corpse = HexenLevelInfo(Level).corpseQueue[HexenLevelInfo(Level).corpseQueueSlot % /*HexenLevelInfo::CORPSEQUEUESIZE*/HexenLevelInfo(Level).CorpseQueSize];
		if (corpse)
			corpse.Destroy();
	}
	HexenLevelInfo(Level).corpseQueue[HexenLevelInfo(Level).corpseQueueSlot % /*HexenLevelInfo::CORPSEQUEUESIZE*/HexenLevelInfo(Level).CorpseQueSize] = self;
	HexenLevelInfo(Level).corpseQueueSlot++;
}

//============================================================================
//
//  A_DeQueueCorpse
//
//  Remove a mobj from the queue (for resurrection)
//
//============================================================================

final void A_DeQueueCorpse()
{
	int slot;

	for (slot = 0; slot < /*HexenLevelInfo::CORPSEQUEUESIZE*/HexenLevelInfo(Level).CorpseQueSize; slot++)
	{
		if (HexenLevelInfo(Level).corpseQueue[slot] == self)
		{
			HexenLevelInfo(Level).corpseQueue[slot] = none;
			break;
		}
	}
}

//============================================================================
//
//  A_PigPain
//
//============================================================================

final void A_PigPain()
{
	A_Pain();
	if (Origin.z <= FloorZ)
	{
		Velocity.z = 3.5 * 35.0;
	}
}

//==========================================================================
//
//	ClientTick
//
//==========================================================================

void ClientTick(float DeltaTime)
{
	dlight_t *dl;
	TVec fv;
	int i, c, count;
	particle_t *p;

	switch (Effects & HexenDefs::EF_DLIGHT_MASK)
	{
	case HexenDefs::EF_DL_NONE:
		break;

	case HexenDefs::EF_DL_WHITE:
		dl = AllocDlight(self);
		dl->origin = Origin;
		dl->radius = 200.0;
		dl->colour = RGB(255, 255, 255);
		dl->die = XLevel.Time + 0.1;
		break;

	case HexenDefs::EF_DL_RED:
		dl = AllocDlight(self);
		dl->origin = Origin;
		dl->radius = 200.0;
		dl->colour = RGB(255, 0, 0);
		dl->die = XLevel.Time + 0.1;
		break;

	case HexenDefs::EF_DL_GREEN:
		dl = AllocDlight(self);
		dl->origin = Origin;
		dl->radius = 200.0;
		dl->colour = RGB(0, 255, 0);
		dl->die = XLevel.Time + 0.1;
		break;

	case HexenDefs::EF_DL_BLUE:
		dl = AllocDlight(self);
		dl->origin = Origin;
		dl->radius = 200.0;
		dl->colour = RGB(0, 0, 255);
		dl->die = XLevel.Time + 0.1;
		break;

	case HexenDefs::EF_DL_DARK:
		dl = AllocDlight(self);
		dl->origin = Origin;
		dl->radius = 200.0;
		dl->colour = RGB(1, 1, 1);
		dl->die = XLevel.Time + 0.1;
		break;

	case HexenDefs::EF_DL_ROCKET:
		dl = AllocDlight(self);
		dl->origin = Origin;
		dl->radius = 200.0;
		dl->colour = RGB(255, 255, 255);
		dl->die = XLevel.Time + 0.1;

		count = ftoi(DeltaTime * 256.0);
		for (i = 0; i < count; i++)
		{
			p = NewParticle();
			if (!p)
				return;

			p->org = Origin;
			c = P_Random() >> 1;
			p->colour = RGB(c, c, c);
			p->die = XLevel.Time + 0.5 * Random();
			p->type = HexenDefs::pt_static;
			p->vel.x = 16.0 * (Random() - 0.5);
			p->vel.y = 16.0 * (Random() - 0.5);
			p->vel.z = 16.0 * (Random() - 0.5);
		}
		break;

	case HexenDefs::EF_DL_MUZZLEFLASH:
		dl = AllocDlight(self);
		dl->origin = Origin;
		dl->origin.z += 48.0;
		AngleVector(&Angles, &fv);

		dl->origin = dl->origin + 18.0 * fv;
		dl->radius = 200.0 + Random() * 31.0;
		dl->colour = 0xffffffff;
		dl->minlight = 32.0;
		dl->die = XLevel.Time + 0.1;
	}
}

__states__
{
	S_FREETARGMOBJ('ACLO', 4, 1050.0 / 35.0, none) = A_FreeTargMobj
	S_GIBS1('GIBS', 0, -1.0, none) = none
	S_PLAY_FDTH20('ACLO', 4, 8.0 / 35.0, none) = none
}

defaultproperties
{
	Health = 1000;
	GibsHealth = -1000;
	ReactionCount = 8;
	Radius = 20.0;
	Height = 16.0;
	Mass = 100.0;
	MaxStepHeight = 24.0;
	SoundClass = 'fighter';
	LightOffset = vector(0.0, 0.0, 0.0);
	LightColour = 0xffffffff;
	LightRadius = 128.0;
}
