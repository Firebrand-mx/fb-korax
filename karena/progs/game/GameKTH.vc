//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**		##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id: GameKTH.vc 508 2006-07-10 19:02:43Z firebrand_kh $
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class GameKTH : GameModel;

enum
{
	state_preparegame,
	state_freeramble,
	state_heresiarch,
	state_finished,
	state_birthsequence,
	state_deathsequence,
	state_rebornsequence
};

enum
{
	event_heresiarchspawn	= GameModel::event_custom,
	event_heresiarchdead,
	event_playdeathsequence,
	event_playbirthsequence,
	event_allowfreeramble
};


Player				plHeresiarch;
EntityEx			DeathSpot;
string				oldHeresiarchName;

GameSequencer		deathSequencer;
GameSequencer		birthSequencer;

int		deathsequence_state;
int		birthsequence_state;

////////name	originalMusic;

// Animated sequences stuff
int				dlDelay1, dlDelay2;	// dynamic lighting delays
int				dmDelay;			// darkness missiles' delay
TVec			CircularPosition;	// used to form a revolving vector
SorcererBall	srcballs[3];



//==========================================================================
//
//	AllowedTeams
//
//==========================================================================

int AllowedTeams()
{
	return 1;
}

//==========================================================================
//
//	BeginState
//
//	ACS callable
//
//==========================================================================

void BeginState(int newstate)
{
	switch(newstate)
	{
	case state_preparegame:
		EndCurrentState(state_freeramble);
		return;
	case state_freeramble:
		// awaiting sound here
		Game.BroadcastLocalSound(HexenDefs::lsid_kth_an_awaiting, false, 0.0);
		Game.bcentreprint("first fragger shall become heresiarch");
		break;
	case state_heresiarch:
	case state_finished:
		break;
	case state_birthsequence:
		Game.bcentreprint("first fragger is determined");
	case state_deathsequence:
	case state_rebornsequence:
		////////originalMusic = Game.level->SongLump;
		deathsequence_state = 0;
		birthsequence_state = 0;
		break;
	};

	State = newstate;
}

//==========================================================================
//
//	TeamFactor
//
//==========================================================================

int TeamFactor(EntityEx a1, EntityEx a2)
{
	if ( ( State == state_heresiarch || State == state_birthsequence ||
				State == state_deathsequence || State == state_rebornsequence )	&&
				a1.bIsPlayer && a2.bIsPlayer &&
				( plHeresiarch == none || (a1 != plHeresiarch.MO && a2 != plHeresiarch.MO) ) )
		return teamfactor_coop;
	return teamfactor_any;
}

//==========================================================================
//
//	NotifySpawnPlayer
//
//==========================================================================

void NotifyPlayerSpawn(Player pl)
{
	// If the game hasn't been started yet and
	// if there're at least 2 players in game, begin free ramble mode
	if (State < 0 && pl.GetPlayerNum() > 0)
		BeginState(state_preparegame);
}

//==========================================================================
//
//	NotifyPlayerDeath
//
//==========================================================================

void NotifyPlayerDeath(Player pl, EntityEx source)
{
	// For missiles: switch to missile's instigator
	if (source && !source.IsA('Pawn') && source.Target)
	{
		source = source.Target;
	}

	switch (State)
	{
	case state_freeramble:
		// First fragger becomes Heresiarch
		if (source && source.bIsPlayer && Player(source.Player) != pl && source.Health > 0)
		{
			plHeresiarch = Player(source.Player);
			plHeresiarch.SetControllable(false);
			EndCurrentState(state_birthsequence);

			birthSequencer = Level.Spawn(GameSequencer);
			if (birthSequencer)
				birthSequencer.event_id = event_playbirthsequence;
		}
		break;
	case state_heresiarch:
		// Handle Heresiarch death
		if (pl == plHeresiarch)
		{
			DeathSpot = EntityEx(plHeresiarch.MO);
			oldHeresiarchName = plHeresiarch.PlayerName;
			if (source && source.bIsPlayer && Player(source.Player) != pl && source.Health > 0)
			{
				plHeresiarch = Player(source.Player);
				plHeresiarch.SetControllable(false);
				EndCurrentState(state_rebornsequence);

				deathSequencer = Level.Spawn(GameSequencer);
				if (deathSequencer)
					deathSequencer.event_id = event_playdeathsequence;
				birthSequencer = Level.Spawn(GameSequencer);
				if (birthSequencer)
					birthSequencer.event_id = event_playbirthsequence;
			}
			else
			{
				plHeresiarch = none;
				EndCurrentState(state_deathsequence);
				
				deathSequencer = Level.Spawn(GameSequencer);
				if (deathSequencer)
					deathSequencer.event_id = event_playdeathsequence;
			}
		}
		break;
	}
}

//==========================================================================
//
//	GetFragScoreEvent
//
//	[CW] This function considers only normal frags (no self-fragging)
//
//==========================================================================

int GetFragScoreEvent(Player plFragger, Player plFragged)
{
	switch (State)
	{
	case state_deathsequence:
		return HexenDefs::scoreevent_NoScore;	// [CW] It is an interesting precedent;
							//		Heresiarch is dying, however there's no
							//		new Heresiarch (old one probably killed himself).
							//		In this case, I assume, we should make a
							//		score-less period in the game for awhile.
	case state_birthsequence:
	case state_rebornsequence:
	case state_heresiarch:

		// [CW] H. is fragged
		if (plFragged == plHeresiarch)
			return HexenDefs::scoreevent_KthHeresiarchDeath;
		else
			return HexenDefs::scoreevent_KthHeresiarchFrag;	// [CW] We assume that any player frag
									// (except for H.'es death) occured when
									// a H. is alive or even while he's rising
									// (birth / reborn sequence) should add a score to H.
	default:
		return HexenDefs::scoreevent_Frag;
	}

}

//==========================================================================
//
//	HandleEvent
//
//	ACS callable
//
//==========================================================================

void HandleEvent(int Event, EntityEx A, int arg1, int arg2, int arg3, int arg4)
{
	switch (Event)
	{
	case event_heresiarchspawn:
		if (plHeresiarch)
			Game.bcentreprint(va("%s is now the heresiarch", plHeresiarch.PlayerName));
		Game.BroadcastLocalSound((State == state_rebornsequence ?
					(P_Random() > 127 ? HexenDefs::lsid_kth_an_hasreborn : HexenDefs::lsid_kth_an_ishere) : HexenDefs::lsid_kth_an_ishere),
					true, 2.0);
		EndCurrentState(state_heresiarch);
		break;
	case event_heresiarchdead:
		Game.bcentreprint(va("%s the heresiarch is dead", oldHeresiarchName));
		Game.BroadcastLocalSound((State == state_rebornsequence ?
					(P_Random() > 127 ? HexenDefs::lsid_kth_an_isdefeated : HexenDefs::lsid_kth_an_isdown) : HexenDefs::lsid_kth_an_isdown),
					true, 2.0);
		break;
	case event_playdeathsequence:
		PlayDeathSequence();
		break;
	case event_playbirthsequence:
		PlayBirthSequence();
		break;
	case event_allowfreeramble:
		if (!plHeresiarch)
			EndCurrentState(state_freeramble);
		break;
	}
}

//==========================================================================
//
//	End
//
//==========================================================================

void End()
{
	EndCurrentState(state_finished);
	::End();
}

//==========================================================================
//
//	PlayDeathSequence
//
//==========================================================================

void PlayDeathSequence()
{
	switch(deathsequence_state)
	{
	case 0:
		dlDelay1 = 2;
		CircularPosition.x = 64.0;
		CircularPosition.y = 64.0;
		CircularPosition.z = 0.0;
		////////ChangeMusic(va("%n", 'kth_mus1'));
		break;
	case 13:
		{
			FlameLargeTemp flame;
			flame = FlameLargeTemp(Level.Spawn(FlameLargeTemp, DeathSpot.Origin));
			if (flame) flame.Args[0] = 8;
		}
		break;
	case 30:
		HandleEvent(event_heresiarchdead, none, 0,0,0,0);
		break;
	case 38:
		HandleEvent(event_allowfreeramble, none, 0,0,0,0);
		break;
	default:

		if (dlDelay1)
			dlDelay1--;
		else
		{
			TVec vec;
			dlDelay1 = 7;

			vec.x = (Random() - 0.5) * 128.0;
			vec.y = (Random() - 0.5) * 128.0;
			vec.z = (Random() - 0.25) * 32.0;

			Game.SpawnDynamicLight(RGB(255, 32, 32), DeathSpot.GetCentre() + vec, 512, 200, 5000);
		}

		if (deathsequence_state > 0 && deathsequence_state < 13)
		{
			int i;
			FlameSmallTemp flame;
			for (i = 0; i < 3; i++)
			{
				flame = FlameSmallTemp(Level.Spawn(FlameSmallTemp, DeathSpot.Origin + CircularPosition));
				if (flame)
				{
					flame.Origin.z = flame.FloorZ;
					flame.Args[0] = 12;
				}
				VectorRotateAroundZ(&CircularPosition, 10.0);
			}
		}
		if (deathsequence_state > 8)
		{
			TVec vec;
			AxePuffGlow	ax;
			vec.x = (Random() - 0.5) * 16.0;
			vec.y = (Random() - 0.5) * 16.0;
			vec.z = (Random()) * 16.0;
			ax = AxePuffGlow(Level.Spawn(AxePuffGlow, DeathSpot.Origin + vec));
			if (ax)
			{
				ax.bMissile = true;
				ax.bRip = true;
				ax.Velocity.z = (Random() - 0.5) * 5.0;
				ax.Velocity.z = (Random() - 0.5) * 5.0;
				ax.Velocity.z = Random() * 15.0;
			}
		}
		if (deathsequence_state > 38)
		{
			if (deathSequencer)
			{
				deathSequencer.Destroy();
			}
			/*if (State != state_rebornsequence)
				ChangeMusic(va("%n", originalMusic));*/
			break;
		}
	}
	deathsequence_state++;
}

//==========================================================================
//
//	PlayBirthSequence
//
//==========================================================================

void PlayBirthSequence()
{
	plHeresiarch.MO.Velocity = vector(0.0,0.0,plHeresiarch.MO.Velocity.z);

	switch(birthsequence_state)
	{
	case 0:
		// Make heresiarch-morphing player invulnerable & immobile for the period
		// of birth sequence
		dlDelay2 = 0;
		dmDelay = 0;
		EntityEx(plHeresiarch.MO).SetState(EntityEx(plHeresiarch.MO).PainState);
		if (State != state_rebornsequence)
			birthsequence_state = 39;	// skip waiting for death sequence completion
		break;
	case 40:
		// Spawn Sorcerer's balls
		{
			EntityEx ball;
			TVec org;
			plHeresiarch.MO.Args[0] = 0;	// Currently no defense
			plHeresiarch.MO.Args[2] = Sorcerer::SORCBALL_INITIAL_SPEED;	// target speed
			plHeresiarch.MO.Args[3] = Sorcerer::SORC_NORMAL;
			plHeresiarch.MO.Args[4] = Sorcerer::SORCBALL_INITIAL_SPEED;	// Initial orbit speed
			EntityEx(plHeresiarch.MO).Special1f = 1.0;
			org = plHeresiarch.MO.Origin;
			org.z = plHeresiarch.MO.Origin.z - plHeresiarch.MO.FloorClip + plHeresiarch.MO.Height;
			srcballs[0] = SorcererBall(Level.Spawn(SorcererBall1, org));
			if (srcballs[0])
			{
				srcballs[0].Target = EntityEx(plHeresiarch.MO);
				srcballs[0]._Special2 = Sorcerer::SORCFX4_RAPIDFIRE_TIME;
			}
			srcballs[1] = SorcererBall(Level.Spawn(SorcererBall2, org));
			if (srcballs[1])
				srcballs[1].Target = EntityEx(plHeresiarch.MO);
			srcballs[2] = SorcererBall(Level.Spawn(SorcererBall3, org));
			if (srcballs[2])
				srcballs[2].Target = EntityEx(plHeresiarch.MO);

			plHeresiarch.MO.bNoGravity = true;
			plHeresiarch.MO.Velocity.z = 8.0;
			////////ChangeMusic(va("%n", 'kth_mus2'));
		}
		break;
	case 44:
		plHeresiarch.MO.Args[2] = Sorcerer::SORCBALL_TERMINAL_SPEED;	// target speed
		plHeresiarch.MO.Args[3] = Sorcerer::SORC_ACCELERATE;	// speed mode
		break;
	case 70:
		plHeresiarch.MO.Velocity.z = 0.0;
		if (srcballs[0]) { srcballs[0].Args[4] = 0; srcballs[0].Args[3] = 0; srcballs[0].A_BounceCheck(); }
		if (srcballs[1]) { srcballs[1].Args[4] = 0; srcballs[1].Args[3] = 0; srcballs[1].A_BounceCheck(); }
		if (srcballs[2]) { srcballs[2].Args[4] = 0; srcballs[2].Args[3] = 0; srcballs[2].A_BounceCheck(); }
		srcballs[0] = none;
		srcballs[1] = none;
		srcballs[2] = none;
		CircularPosition.x = 128.0;
		CircularPosition.y = 128.0;
		HandleEvent(event_heresiarchspawn, none, 0,0,0,0);
		break;
	default:
		if (birthsequence_state > 12)
		{
			if (dlDelay2)
				dlDelay2--;
			else
			{
				TVec vec;
				dlDelay2 = 7;

				vec.x = (Random() - 0.5) * 128.0;
				vec.y = (Random() - 0.5) * 128.0;
				vec.z = (Random() - 0.25) * 32.0;

				Game.SpawnDynamicLight(RGB(255, 32, 32), plHeresiarch.MO.GetCentre() + vec, 512, 500, 5000);
			}
		}
		if (birthsequence_state > 0 && birthsequence_state < 13)
		{
			int i;
			FlameSmallTemp flame;
			VectorRotateAroundZ(&CircularPosition, -30.0);
			for (i = 0; i < 3; i++)
			{
				flame = FlameSmallTemp(Level.Spawn(FlameSmallTemp, plHeresiarch.MO.Origin + CircularPosition));
				if (flame)
				{
					flame.Origin.z = flame.FloorZ;
					flame.Args[0] = 12;
				}
				VectorRotateAroundZ(&CircularPosition, 10.0);
			}
		}
		if (birthsequence_state > 12 && birthsequence_state < 39)
		{
			DarknessMissile dm;

			if (dmDelay)
				dmDelay--;
			else
			{
				dmDelay = 2;

				dm = DarknessMissile(Level.Spawn(DarknessMissile, DeathSpot.GetCentre()));
				if (dm)
				{
					TVec dist;
					dist = plHeresiarch.MO.GetCentre() - DeathSpot.GetCentre();
					dm.bColideWithWorld = false;
					dm.bMissile = true;
					dm.bRip = true;
					dm.Velocity = Normalise(dist) * 128.0;
					dm.LifeCount = ftoi((Length(dist) / Length(dm.Velocity)) / (12.0 / 35.0)) - 1;
				}
			}
		}
		if (birthsequence_state > 70 && birthsequence_state < 78)
		{
			int i;
			DarknessMissile dm;
			for (i = 0; i < 3; i++)
			{
				CircularPosition.z = (Random() - 0.25) * 32.0;
				dm = DarknessMissile(Level.Spawn(DarknessMissile, plHeresiarch.MO.GetCentre()));
				if (dm)
				{
					dm.bMissile = true;
					dm.bRip = true;
					dm.Velocity = CircularPosition;
					dm.InitMe(Actor(plHeresiarch.MO));
				}
				VectorRotateAroundZ(&CircularPosition, Random() * 360.0);
			}
		}
		if (birthsequence_state >= 78)
		{
			if (birthSequencer)
			{
				birthSequencer.Destroy();
			}
			Actor(plHeresiarch.MO).MorphPlayer(HexenDefs::PCLASS_HERESIARCH, PlayerHeresiarch, false, true);
			plHeresiarch.GivePower(pw_invulnerability2);
			plHeresiarch.SetControllable(true);
			////////ChangeMusic(va("%n", originalMusic));
			break;
		}
	}
	birthsequence_state++;
}

defaultproperties
{
}
