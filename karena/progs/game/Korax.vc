//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**		##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id$
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************
//
//	Korax
//
// Korax Scripts (reserved)
//  249     Tell scripts that we are below half health
//  250-254 Control scripts
//  255     Death script
//
// Korax TIDs (reserved)
//  245     Reserved for Korax himself
//  248     Initial teleport destination
//  249     Teleport destination
//  250-254 For use in respective control scripts
//  255     For use in death script (spawn spots)
//
// Arm projectiles
//      arm positions numbered:
//          1   top left
//          2   middle left
//          3   lower left
//          4   top right
//          5   middle right
//          6   lower right
//
//**************************************************************************

class Korax : Actor
	__mobjinfo__(10200);

//
// Korax Variables
//
int FirstTeleportTID;
int TeleportTID;

float MissileDeltaAngle;
float ArmExtensionShort;
float ArmExtensionLong;

float Arm1Height;
float Arm2Height;
float Arm3Height;
float Arm4Height;
float Arm5Height;
float Arm6Height;

float CommandHeight;
float CommandOffset;

//  Special1    last teleport destination
bool bDidBelowHalfHealth;	//  set if "below half" script not yet run

Entity LastSpot;

//==========================================================================
//
//  A_KoraxStep
//
//==========================================================================

final void A_KoraxStep()
{
	A_Chase();
}

//==========================================================================
//
//  A_KoraxStep2
//
//==========================================================================

final void A_KoraxStep2()
{
	PlaySound('KoraxStep', CHAN_BODY, 1.0, ATTN_NONE);
	A_Chase();
}

//==========================================================================
//
//  A_KoraxChase
//
//==========================================================================

final void A_KoraxChase()
{
	Actor spot;

	if (!bDidBelowHalfHealth && (Health <= (default.Health / 2)))
	{
		spot = Actor(Level.FindMobjFromTID(FirstTeleportTID, none));
		if (spot)
		{
			Teleport(spot.Origin, spot.Angles.yaw, true, true, false);
		}

		XLevel.StartACS(249, 0, 0, 0, 0, self, NULL, 0, false, false);
		bDidBelowHalfHealth = true;	// Don't run again

		return;
	}

	if (!Target)
		return;
	if (Random() < 0.1171875)
	{
		SetState(MissileState);
	}
	else if (Random() < 0.1171875)
	{
		PlaySound('KoraxActive', CHAN_VOICE, 1.0, ATTN_NONE);
	}

	// Teleport away
	if (Health < (default.Health >> 1))
	{
		if (Random() < 0.0390625)
		{
			spot = Actor(Level.FindMobjFromTID(TeleportTID, LastSpot));
			LastSpot = spot;
			if (spot)
			{
				Teleport(spot.Origin, spot.Angles.yaw, true, true, false);
			}
		}
	}
}

//==========================================================================
//
//  A_KoraxDecide
//
//==========================================================================

final void A_KoraxDecide()
{
	if (Random() < 0.859375)
	{
		SetState(FindState('MissileAttack'));
	}
	else
	{
		SetState(FindState('Command'));
	}
}

//==========================================================================
//
//  SpawnKoraxMissile
//
//==========================================================================

final Actor SpawnKoraxMissile(TVec org, EntityEx dest, class<Actor> type)
{
	TVec dir;
	Actor th;

	org.z -= FloorClip;
	th = Spawn(type, org);
	if (th.SightSound)
	{
		th.PlaySound(th.SightSound, CHAN_VOICE);
	}
	th.Target = self;	// Originator
	dir = dest.Origin - org;
	if (dest.bShadow)
	{
		// Invisible target
		VectorRotateAroundZ(&dir, (Random() - Random()) * 45.0);
	}
	dir = Normalise(dir);
	th.Velocity = dir * th.Speed;
	VectorAngles(&dir, &th.Angles);
	return th.CheckMissileSpawn() ? th : none;
}

//==========================================================================
// Arm 1 projectile
//==========================================================================

final void KoraxFire1(class<Actor> type)
{
	float ang;
	float x, y, z;

	ang = AngleMod360(Angles.yaw - MissileDeltaAngle);
	x = Origin.x + ArmExtensionShort * cos(ang);
	y = Origin.y + ArmExtensionShort * sin(ang);
	z = Origin.z - FloorClip + Arm1Height;
	SpawnKoraxMissile(vector(x, y, z), Target, type);
}

//============================================================================
// Arm 2 projectile
//============================================================================

final void KoraxFire2(class<Actor> type)
{
	float ang;
	float x, y, z;

	ang = AngleMod360(Angles.yaw - MissileDeltaAngle);
	x = Origin.x + ArmExtensionLong * cos(ang);
	y = Origin.y + ArmExtensionLong * sin(ang);
	z = Origin.z - FloorClip + Arm2Height;
	SpawnKoraxMissile(vector(x, y, z), Target, type);
}

//============================================================================
// Arm 3 projectile
//============================================================================

final void KoraxFire3(class<Actor> type)
{
	float ang;
	float x, y, z;

	ang = AngleMod360(Angles.yaw - MissileDeltaAngle);
	x = Origin.x + ArmExtensionLong * cos(ang);
	y = Origin.y + ArmExtensionLong * sin(ang);
	z = Origin.z - FloorClip + Arm3Height;
	SpawnKoraxMissile(vector(x, y, z), Target, type);
}

//============================================================================
// Arm 4 projectile
//============================================================================

final void KoraxFire4(class<Actor> type)
{
	float ang;
	float x, y, z;

	ang = AngleMod360(Angles.yaw + MissileDeltaAngle);
	x = Origin.x + ArmExtensionShort * cos(ang);
	y = Origin.y + ArmExtensionShort * sin(ang);
	z = Origin.z - FloorClip + Arm4Height;
	SpawnKoraxMissile(vector(x, y, z), Target, type);
}

//============================================================================
// Arm 5 projectile
//============================================================================

final void KoraxFire5(class<Actor> type)
{
	float ang;
	float x, y, z;

	ang = AngleMod360(Angles.yaw + MissileDeltaAngle);
	x = Origin.x + ArmExtensionLong * cos(ang);
	y = Origin.y + ArmExtensionLong * sin(ang);
	z = Origin.z - FloorClip + Arm5Height;
	SpawnKoraxMissile(vector(x, y, z), Target, type);
}

//============================================================================
// Arm 6 projectile
//============================================================================

final void KoraxFire6(class<Actor> type)
{
	float ang;
	float x, y, z;

	ang = AngleMod360(Angles.yaw + MissileDeltaAngle);
	x = Origin.x + ArmExtensionLong * cos(ang);
	y = Origin.y + ArmExtensionLong * sin(ang);
	z = Origin.z - FloorClip + Arm6Height;
	SpawnKoraxMissile(vector(x, y, z), Target, type);
}

//============================================================================
//
//  A_KoraxMissile
//
//============================================================================

final void A_KoraxMissile()
{
	class<Actor> mtype;
	name sound;

	PlaySound('KoraxAttack', CHAN_VOICE);

	switch (P_Random() % 6)
	{
	case 0:
		mtype = WraithFX1;
		sound = 'WraithMissileFire';
		break;
	case 1:
		mtype = Demon1FX1;
		sound = 'DemonMissileFire';
		break;
	case 2:
		mtype = Demon2FX1;
		sound = 'DemonMissileFire';
		break;
	case 3:
		mtype = FireDemonMissile;
		sound = 'FireDemonAttack';
		break;
	case 4:
		mtype = CentaurFX;
		sound = 'CentaurLeaderAttack';
		break;
	case 5:
		mtype = SerpentFX;
		sound = 'CentaurLeaderAttack';
		break;
	}

	// Fire all 6 missiles at once
	PlaySound(sound, CHAN_VOICE, 1.0, ATTN_NONE);
	KoraxFire1(mtype);
	KoraxFire2(mtype);
	KoraxFire3(mtype);
	KoraxFire4(mtype);
	KoraxFire5(mtype);
	KoraxFire6(mtype);
}

//============================================================================
// Call action code scripts (250-254)
//============================================================================

final void A_KoraxCommand()
{
	float x, y, z;
	float ang;
	int numcommands;

	PlaySound('KoraxCommand', CHAN_VOICE);

	// Shoot stream of lightning to ceiling
	ang = AngleMod360(Angles.yaw - 90.0);
	x = Origin.x + CommandOffset * cos(ang);
	y = Origin.y + CommandOffset * sin(ang);
	z = Origin.z + CommandHeight;
	Spawn(KoraxBolt, vector(x, y, z));

	if (Health <= (default.Health >> 1))
	{
		numcommands = 5;
	}
	else
	{
		numcommands = 4;
	}

	switch (P_Random() % numcommands)
	{
	case 0:
		XLevel.StartACS(250, 0, 0, 0, 0, self, NULL, 0, false, false);
		break;
	case 1:
		XLevel.StartACS(251, 0, 0, 0, 0, self, NULL, 0, false, false);
		break;
	case 2:
		XLevel.StartACS(252, 0, 0, 0, 0, self, NULL, 0, false, false);
		break;
	case 3:
		XLevel.StartACS(253, 0, 0, 0, 0, self, NULL, 0, false, false);
		break;
	case 4:
		XLevel.StartACS(254, 0, 0, 0, 0, self, NULL, 0, false, false);
		break;
	}
}

//============================================================================
//
//  A_KoraxBonePop
//
//============================================================================

final void A_KoraxBonePop()
{
	EntityEx mo;

	// Spawn 6 spirits equalangularly
	mo = SpawnMissileAngle(KoraxSpirit, 60.0 * 0.0, 5.0 * 35.0);
	if (mo)
	{
		KSpiritInit(mo);
	}
	mo = SpawnMissileAngle(KoraxSpirit, 60.0 * 1.0, 5.0 * 35.0);
	if (mo)
	{
		KSpiritInit(mo);
	}
	mo = SpawnMissileAngle(KoraxSpirit, 60.0 * 2.0, 5.0 * 35.0);
	if (mo)
	{
		KSpiritInit(mo);
	}
	mo = SpawnMissileAngle(KoraxSpirit, 60.0 * 3.0, 5.0 * 35.0);
	if (mo)
	{
		KSpiritInit(mo);
	}
	mo = SpawnMissileAngle(KoraxSpirit, 60.0 * 4.0, 5.0 * 35.0);
	if (mo)
	{
		KSpiritInit(mo);
	}
	mo = SpawnMissileAngle(KoraxSpirit, 60.0 * 5.0, 5.0 * 35.0);
	if (mo)
	{
		KSpiritInit(mo);
	}

	XLevel.StartACS(255, 0, 0, 0, 0, self, NULL, 0, false, false);	// Death script
}

//==========================================================================
//
//  KSpiritInit
//
//==========================================================================

final void KSpiritInit(EntityEx Spirit)
{
	int i;
	HolyTail tail;
	HolyTail next;

	Spirit.Tracer = self;	// Swarm around korax
	Spirit.Special1 = 5 * 35 / 5;	// 5 seconds
	Spirit.Special2 = 32 + (P_Random() & 7);	// Float bob index

	// Spawn a tail for spirit
	tail = Spawn(HolyTail, Spirit.Origin);
	tail.ParentSpirit = Actor(Spirit);	// parent
	for (i = 1; i < 3; i++)
	{
		next = Spawn(HolyTail, Spirit.Origin);
		next.SetState(GetStatePlus(next.IdleState, 1, true));
		tail.NextTail = next;
		tail = next;
	}
}

states
{
Spawn:
	KORX A 5 A_Look
	Loop
See:
	KORX A 3 A_KoraxStep2
	KORX AAA 3 A_KoraxChase
	KORX B 3 A_KoraxStep
	KORX BBB 3 A_KoraxChase
	KORX C 3 A_KoraxStep2
	KORX CCC 3 A_KoraxChase
	KORX D 3 A_KoraxStep
	KORX DDD 3 A_KoraxChase
	Loop
Pain:
	KORX H 5 A_Pain
	KORX H 5
	Goto See+1
Missile:
	KORX E 2 Bright A_FaceTarget
	KORX E 5 Bright A_KoraxDecide
	Wait
MissileAttack:
	KORX E 4 Bright A_FaceTarget
	KORX F 8 Bright A_KoraxMissile
	KORX E 8 Bright
	Goto See+1
Command:
	KORX E 5 Bright A_FaceTarget
	KORX W 10 Bright A_FaceTarget
	KORX G 15 Bright A_KoraxCommand
	KORX W 10 Bright
	KORX E 5 Bright
	Goto See+1
Death:
	KORX I 5
	KORX J 5 A_FaceTarget
	KORX K 5 A_Scream
	KORX LMNOP 5
	KORX Q 10
	KORX R 5 A_KoraxBonePop
	KORX S 5 A_NoBlocking
	KORX TU 5
	KORX V -1
	Stop
}

defaultproperties
{
	bSolid = true;
	bShootable = true;
	bCountKill = true;
	bMonster = true;
	bActivatePushWall = true;
	bActivateMCross = true;
	bPassMobj = true;
	bCanUseWalls = true;

	bFloorClip = true;
	bTelestomp = true;

	Health = 5000;
	Radius = 65.0;
	Height = 115.0;
	Mass = 2000.0;
	Speed = 10.0 * 35.0;
	PainChance = 0.078125;
	MissileDamage = 15;
	FirstTeleportTID = 248;
	TeleportTID = 249;
	MissileDeltaAngle = 85.0;
	ArmExtensionShort = 40.0;
	ArmExtensionLong = 55.0;
	Arm1Height = 108.0;
	Arm2Height = 82.0;
	Arm3Height = 54.0;
	Arm4Height = 104.0;
	Arm5Height = 86.0;
	Arm6Height = 53.0;
	CommandHeight = 120.0;
	CommandOffset = 27.0;
	bPassMobj = false;
	bBoss = true;
	bNeverTarget = true;
	bFullVolActive = true;
	bNoIceDeath = true;
	SightSound = 'KoraxSight';
	ActiveSound = 'KoraxActive';
	AttackSound = 'KoraxAttack';
	PainSound = 'KoraxPain';
	DeathSound = 'KoraxDeath';
	Obituary = "$ob_korax";
}
