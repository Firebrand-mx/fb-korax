//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**		##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id$
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Sorcerer : Pawn
	__mobjinfo__(10080);

const int SORCBALL_INITIAL_SPEED 		= 7;
const int SORCBALL_TERMINAL_SPEED		= 25;
const int SORCBALL_SPEED_ROTATIONS 		= 5;
const int SORCFX4_RAPIDFIRE_TIME		= (6*3);	// 3 seconds
const float SORCFX4_SPREAD_ANGLE		= 20.0;
const int SORC_DEFENSE_TIME				= 255;
const float SORC_DEFENSE_HEIGHT			= 45.0;
const int BOUNCE_TIME_UNIT				= (35/2);

enum
{
	SORC_DECELERATE,
	SORC_ACCELERATE,
	SORC_STOPPING,
	SORC_FIRESPELL,
	SORC_STOPPED,
	SORC_NORMAL,
	SORC_FIRING_SPELL
};

bool bBallsSpawned;

//
// Sorcerer Variables
//

//      Special1f       Angle of ball 1 (all others relative to that)
//      SpecialCID      which ball to stop at in stop mode (MT_???)
//      Args[0]         Defense time
//      Args[1]         Number of full rotations since stopping mode
//      Args[2]         Target orbit speed for acceleration/deceleration
//      Args[3]         Movement mode (see SORC_ macros)
//      Args[4]         Current ball orbit speed

//==========================================================================
//
//	GetReflectedAngle
//
//==========================================================================

final float GetReflectedAngle(EntityEx Other)
{
	float angle = atan2(Other.Origin.y - Origin.y,
		Other.Origin.x - Origin.x);
	// Change angle for delflection
	if (Random() < 0.5)
		angle = AngleMod360(angle + 45.0);
	else
		angle = AngleMod360(angle - 45.0);
	return angle;
}

//==========================================================================
//
//  Died
//
//==========================================================================

void Died(EntityEx source, EntityEx inflictor)
{
	//	For Heresiarch special is actually the script to be executed.
	int Script = Special;
	Special = 0;

	::Died(source, inflictor);

	if (Script)
	{
		XLevel.StartACS(Script, 0, 0, 0, 0, self, NULL, 0, false, false);
	}
}

//============================================================================
//
// Set balls to slow mode - actor is sorcerer
//
//============================================================================

final void A_SlowBalls()
{
	Args[3] = SORC_DECELERATE;	// slow mode
	Args[2] = SORCBALL_INITIAL_SPEED;	// target speed
}

//============================================================================
//
//  A_SorcSpinBalls
//
//  Spawn spinning balls above head - actor is sorcerer.
//
//============================================================================

final void A_SorcSpinBalls()
{
	Actor ball;
	TVec org;

	//	To prevent spawning balls more than once.
	if (bBallsSpawned)
	{
		return;
	}
	bBallsSpawned = true;

	A_SlowBalls();
	Args[0] = 0;	// Currently no defense
	Args[3] = SORC_NORMAL;
	Args[4] = SORCBALL_INITIAL_SPEED;	// Initial orbit speed
	Special1f = 1.0;
	org = Origin;
	org.z = Origin.z - FloorClip + Height;

	ball = Spawn(SorcererBall1, org);
	if (ball)
	{
		ball.Target = self;
		ball.Special2 = SORCFX4_RAPIDFIRE_TIME;
	}
	ball = Spawn(SorcererBall2, org);
	if (ball)
		ball.Target = self;
	ball = Spawn(SorcererBall3, org);
	if (ball)
		ball.Target = self;
}

//============================================================================
//
//	Set balls to speed mode - actor is sorcerer
//
//============================================================================

final void A_SpeedBalls()
{
	Args[3] = SORC_ACCELERATE;	// speed mode
	Args[2] = SORCBALL_TERMINAL_SPEED;	// target speed
}

//============================================================================
//
//  A_SpawnFizzle
//
//  Spell cast magic fizzle
//
//============================================================================

final void A_SpawnFizzle()
{
	TVec org;
	float dist = 5.0;
	float angle = Angles.yaw;
	float rangle;
	Actor A;
	int ix;

	org.x = Origin.x + dist * cos(angle);
	org.y = Origin.y + dist * sin(angle);
	org.z = Origin.z - FloorClip + Height / 2.0;
	for (ix = 0; ix < 5; ix++)
	{
		A = Spawn(SorcererSpark, org);
		if (A)
		{
			rangle = angle + Random() * 5.0 * 90.0 / 1024.0;
			A.Velocity.x = Random() * Speed * cos(rangle);
			A.Velocity.y = Random() * Speed * sin(rangle);
			A.Velocity.z = 2.0 * 35.0;
		}
	}
}

//============================================================================
//
//  A_SorcBossAttack
//
//  Resume ball spinning
//
//============================================================================

final void A_SorcBossAttack()
{
	Args[3] = SORC_ACCELERATE;
	Args[2] = SORCBALL_INITIAL_SPEED;
}

//============================================================================
//
//  A_StopBalls
//
//  Instant stop when rotation gets to ball in _Special2
// actor is sorcerer
//
//============================================================================

final void A_StopBalls()
{
	int chance = P_Random();

	Args[3] = SORC_STOPPING;	// stopping mode
	Args[1] = 0;	// Reset rotation counter

	if ((Args[0] <= 0) && (chance < 200))
	{
		SpecialCID = SorcererBall2;	// Blue
	}
	else if ((Health < (default.Health >> 1)) && (chance < 200))
	{
		SpecialCID = SorcererBall3;	// Green
	}
	else
	{
		SpecialCID = SorcererBall1;	// Yellow
	}
}

//==========================================================================
//
//  A_Lights
//
//  Just spawn some dynamic light
//
//==========================================================================

final void A_Lights()
{
	SendExplosion(DLightColour, DLightRadius, Origin);
	bDynamicLight = false;
}

states
{
Spawn:
	SORC A 3
	SORC A 2 A_SorcSpinBalls
	SORC A 10 A_Look
	Wait
See:
	SORC ABCD 5 A_Chase
	Loop
Pain:
	SORC G 8
	SORC G 8 A_Pain
	Goto See
Missile:
	SORC F 6 Bright { bMuzzleFlash = true; A_FaceTarget(); }
	SORC F 6 Bright A_SpeedBalls
	SORC F 6 Bright A_FaceTarget
	Wait
Attack1:
	SORC E 6 Bright { bMuzzleFlash = true; }
	SORC E 6 Bright A_SpawnFizzle
	SORC E 5 Bright A_FaceTarget
	Goto Attack1+1
Attack2:
	SORC E 2 Bright { bMuzzleFlash = true; }
	SORC E 2 Bright A_SorcBossAttack
	Goto See
Death:
	SORC H 5 Bright
	SORC I 5 Bright A_FaceTarget
	SORC J 5 Bright { A_Scream(); A_Lights(); }
	SORC KLMNOPQRST 5 Bright
	SORC U 5 Bright A_NoBlocking
	SORC VWXY 5 Bright
	SORC Z -1 Bright
	Stop
}

defaultproperties
{
	Health = 5000;
	Radius = 40.0;
	Height = 110.0;
	Mass = 500.0;
	StepSpeed = 16.0;
	PainChance = 0.0390625;
	MissileDamage = 9;
	bNoBlood = true;
	bBoss = true;
	bNeverTarget = true;
	bTelestomp = false;
	bFullVolActive = true;
	SightSound = 'SorcererSight';
	ActiveSound = 'SorcererActive';
	PainSound = 'SorcererPain';
	DeathSound = 'SorcererDeathScream';
	DLightColour = RGB(149, 16, 189);
	DLightRadius = 128.0;
	Obituary = "$ob_heresiarch";
}
