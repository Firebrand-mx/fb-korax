//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Sorcerer : Pawn
	__mobjinfo__(10080);

bool bBallsSpawned;

//
// Sorcerer Variables
//

//      Special1f       Angle of ball 1 (all others relative to that)
//      SpecialCID      which ball to stop at in stop mode (MT_???)
//      Args[0]         Defense time
//      Args[1]         Number of full rotations since stopping mode
//      Args[2]         Target orbit speed for acceleration/deceleration
//      Args[3]         Movement mode (see SORC_ macros)
//      Args[4]         Current ball orbit speed

//==========================================================================
//
//	GetReflectedAngle
//
//==========================================================================

float GetReflectedAngle(Actor Other)
{
	float angle = atan2(Other.Origin.y - Origin.y,
		Other.Origin.x - Origin.x);
	// Change angle for delflection
	if (Random() < 0.5)
		angle = AngleMod360(angle + 45.0);
	else
		angle = AngleMod360(angle - 45.0);
	return angle;
}

//============================================================================
//
// Set balls to slow mode - actor is sorcerer
//
//============================================================================

void A_SlowBalls()
{
	Args[3] = SORC_DECELERATE;	// slow mode
	Args[2] = SORCBALL_INITIAL_SPEED;	// target speed
}

//============================================================================
//
//  A_SorcSpinBalls
//
//  Spawn spinning balls above head - actor is sorcerer.
//
//============================================================================

void A_SorcSpinBalls()
{
	Actor ball;
	TVec org;

	//	To prevent spawning balls more than once.
	if (bBallsSpawned)
	{
		return;
	}
	bBallsSpawned = true;

	A_SlowBalls();
	Args[0] = 0;	// Currently no defense
	Args[3] = SORC_NORMAL;
	Args[4] = SORCBALL_INITIAL_SPEED;	// Initial orbit speed
	Special1f = 1.0;
	org = Origin;
	org.z = Origin.z - FloorClip + Height;

	ball = Spawn(SorcererBall1, org);
	if (ball)
	{
		ball.Instigator = self;
		ball._Special2 = SORCFX4_RAPIDFIRE_TIME;
	}
	ball = Spawn(SorcererBall2, org);
	if (ball)
		ball.Instigator = self;
	ball = Spawn(SorcererBall3, org);
	if (ball)
		ball.Instigator = self;
}

//============================================================================
//
//	Set balls to speed mode - actor is sorcerer
//
//============================================================================

void A_SpeedBalls()
{
	Args[3] = SORC_ACCELERATE;	// speed mode
	Args[2] = SORCBALL_TERMINAL_SPEED;	// target speed
}

//============================================================================
//
//  A_SpawnFizzle
//
//  Spell cast magic fizzle
//
//============================================================================

void A_SpawnFizzle()
{
	TVec org;
	float dist = 5.0;
	float angle = Angles.yaw;
	float rangle;
	Actor A;
	int ix;

	org.x = Origin.x + dist * cos(angle);
	org.y = Origin.y + dist * sin(angle);
	org.z = Origin.z - FloorClip + Height / 2.0;
	for (ix = 0; ix < 5; ix++)
	{
		A = Spawn(SorcererSpark, org);
		if (A)
		{
			rangle = angle + Random() * 5.0 * 90.0 / 1024.0;
			A.Velocity.x = Random() * Speed * cos(rangle);
			A.Velocity.y = Random() * Speed * sin(rangle);
			A.Velocity.z = 2.0 * 35.0;
		}
	}
}

//============================================================================
//
//  A_SorcBossAttack
//
//  Resume ball spinning
//
//============================================================================

void A_SorcBossAttack()
{
	Args[3] = SORC_ACCELERATE;
	Args[2] = SORCBALL_INITIAL_SPEED;
}

//============================================================================
//
//  A_StopBalls
//
//  Instant stop when rotation gets to ball in _Special2
// actor is sorcerer
//
//============================================================================

void A_StopBalls()
{
	int chance = P_Random();

	Args[3] = SORC_STOPPING;	// stopping mode
	Args[1] = 0;	// Reset rotation counter

	if ((Args[0] <= 0) && (chance < 200))
	{
		SpecialCID = SorcererBall2;	// Blue
	}
	else if ((Health < (SpawnHealth >> 1)) && (chance < 200))
	{
		SpecialCID = SorcererBall3;	// Green
	}
	else
	{
		SpecialCID = SorcererBall1;	// Yellow
	}
}

__states__
{
	S_SORC_SPAWN1('SORC', 0, 3.0 / 35.0, S_SORC_SPAWN2) { }
	S_SORC_SPAWN2('SORC', 0, 2.0 / 35.0, S_SORC_LOOK1) { A_SorcSpinBalls(); }
	S_SORC_LOOK1('SORC', 0, 10.0 / 35.0, S_SORC_LOOK1) { A_Look(); }
	S_SORC_WALK1('SORC', 0, 5.0 / 35.0, S_SORC_WALK2) { A_Chase(); }
	S_SORC_WALK2('SORC', 1, 5.0 / 35.0, S_SORC_WALK3) { A_Chase(); }
	S_SORC_WALK3('SORC', 2, 5.0 / 35.0, S_SORC_WALK4) { A_Chase(); }
	S_SORC_WALK4('SORC', 3, 5.0 / 35.0, S_SORC_WALK1) { A_Chase(); }
	S_SORC_PAIN1('SORC', 6, 8.0 / 35.0, S_SORC_PAIN2) { }
	S_SORC_PAIN2('SORC', 6, 8.0 / 35.0, S_SORC_WALK1) { A_Pain(); }
	S_SORC_ATK2_1('SORC', 5 | FF_FULLBRIGHT, 6.0 / 35.0, S_SORC_ATK2_2) { A_FaceTarget(); }
	S_SORC_ATK2_2('SORC', 5 | FF_FULLBRIGHT, 6.0 / 35.0, S_SORC_ATK2_3) { A_SpeedBalls(); }
	S_SORC_ATK2_3('SORC', 5 | FF_FULLBRIGHT, 6.0 / 35.0, S_SORC_ATK2_3) { A_FaceTarget(); }
	S_SORC_ATTACK1('SORC', 4 | FF_FULLBRIGHT, 6.0 / 35.0, S_SORC_ATTACK2) { }
	S_SORC_ATTACK2('SORC', 4 | FF_FULLBRIGHT, 6.0 / 35.0, S_SORC_ATTACK3) { A_SpawnFizzle(); }
	S_SORC_ATTACK3('SORC', 4 | FF_FULLBRIGHT, 5.0 / 35.0, S_SORC_ATTACK2) { A_FaceTarget(); }
	S_SORC_ATTACK4('SORC', 4 | FF_FULLBRIGHT, 2.0 / 35.0, S_SORC_ATTACK5) { }
	S_SORC_ATTACK5('SORC', 4 | FF_FULLBRIGHT, 2.0 / 35.0, S_SORC_WALK1) { A_SorcBossAttack(); }
	S_SORC_DIE1('SORC', 7 | FF_FULLBRIGHT, 5.0 / 35.0, S_SORC_DIE2) { }
	S_SORC_DIE2('SORC', 8 | FF_FULLBRIGHT, 5.0 / 35.0, S_SORC_DIE3) { A_FaceTarget(); }
	S_SORC_DIE3('SORC', 9 | FF_FULLBRIGHT, 5.0 / 35.0, S_SORC_DIE4) { A_Scream(); }
	S_SORC_DIE4('SORC', 10 | FF_FULLBRIGHT, 5.0 / 35.0, S_SORC_DIE5) { }
	S_SORC_DIE5('SORC', 11 | FF_FULLBRIGHT, 5.0 / 35.0, S_SORC_DIE6) { }
	S_SORC_DIE6('SORC', 12 | FF_FULLBRIGHT, 5.0 / 35.0, S_SORC_DIE7) { }
	S_SORC_DIE7('SORC', 13 | FF_FULLBRIGHT, 5.0 / 35.0, S_SORC_DIE8) { }
	S_SORC_DIE8('SORC', 14 | FF_FULLBRIGHT, 5.0 / 35.0, S_SORC_DIE9) { }
	S_SORC_DIE9('SORC', 15 | FF_FULLBRIGHT, 5.0 / 35.0, S_SORC_DIE0) { }
	S_SORC_DIE0('SORC', 16 | FF_FULLBRIGHT, 5.0 / 35.0, S_SORC_DIEA) { }
	S_SORC_DIEA('SORC', 17 | FF_FULLBRIGHT, 5.0 / 35.0, S_SORC_DIEB) { }
	S_SORC_DIEB('SORC', 18 | FF_FULLBRIGHT, 5.0 / 35.0, S_SORC_DIEC) { }
	S_SORC_DIEC('SORC', 19 | FF_FULLBRIGHT, 5.0 / 35.0, S_SORC_DIED) { }
	S_SORC_DIED('SORC', 20 | FF_FULLBRIGHT, 5.0 / 35.0, S_SORC_DIEE) { A_NoBlocking(); }
	S_SORC_DIEE('SORC', 21 | FF_FULLBRIGHT, 5.0 / 35.0, S_SORC_DIEF) { }
	S_SORC_DIEF('SORC', 22 | FF_FULLBRIGHT, 5.0 / 35.0, S_SORC_DIEG) { }
	S_SORC_DIEG('SORC', 23 | FF_FULLBRIGHT, 5.0 / 35.0, S_SORC_DIEH) { }
	S_SORC_DIEH('SORC', 24 | FF_FULLBRIGHT, 5.0 / 35.0, S_SORC_DIEI) { }
	S_SORC_DIEI('SORC', 25 | FF_FULLBRIGHT, -1.0, S_NULL) { }
}

defaultproperties
{
	Health = 5000;
	Radius = 40.0;
	Height = 110.0;
	Mass = 500.0;
	StepSpeed = 16.0;
	PainChance = 0.0390625;
	MissileDamage = 9;
	bNoBlood = true;
	bBoss = true;
	bTelestomp = false;
	bEnemy = true;
	IdleState = S_SORC_SPAWN1;
	SeeState = S_SORC_WALK1;
	MissileState = S_SORC_ATK2_1;
	PainState = S_SORC_PAIN1;
	DeathState = S_SORC_DIE1;
	SightSound = 'SorcererSight';
	ActiveSound = 'SorcererActive';
	PainSound = 'SorcererPain';
	DeathSound = 'SorcererDeathScream';
}

//**************************************************************************
//
//  $Log$
//  Revision 1.3  2005/11/30 23:53:37  dj_jl
//  Switch statement requires integer.
//
//  Revision 1.2  2005/09/15 16:22:08  firebrand_kh
//  Added flag to recognize monster enemies for bots
//
//  Revision 1.1  2004/11/16 13:33:22  dj_jl
//  Initial import.
//
//  Revision 1.1  2002/10/26 16:32:27  dj_jl
//  New style of defining classes.
//
//**************************************************************************
