//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**		##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id: template.vc 508 2006-07-10 19:02:43Z firebrand_kh $
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************
//
// Class Game, parent class for advanced game modes
//

class Game : Object;

MainGameInfo	Game;
HexenLevelInfo	Level;

int		State;		// current game state


void Init(MainGameInfo game)
{
	dprint("Game::Init : ");
	Game = game;
}

void BeginState(int newstate)
{
	dprint("Game::BeginState : possibly unknown state is set");
}

void EndCurrentState(int nextstate)
{
	BeginState(nextstate);
}

bool ConfirmAddTeam()	//????????
{
}

bool ConfirmAddPlayer()	//????????
{
}

void NotifyUpdateTeams()
{
}

void NotifySpawnPlayer(Player pl)
{
}

void HandleGameEvent(Actor A, int Event, int arg1, int arg2, int arg3, int arg4)
{
}

void SetGameObject(Actor A, int object, int arg1, int arg2, int arg3)
{
}

void SetGameObjective(int objective, int arg2, int arg3, int arg4, int arg5)
{
}

void End()
{
	dprint("Game::End : ");
	Destroy();
}

defaultproperties
{
	State = -1;
}
