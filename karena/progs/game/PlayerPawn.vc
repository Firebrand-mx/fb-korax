//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**		##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id$
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class PlayerPawn : Pawn
	abstract;

float ViewHeight;

state AttackEndState;

int InitialStrength;
int InitialWisdom;
int InitialDexterity;
int InitialConstitution;
int InitialIntelligence;

//==========================================================================
//
//  IsDeathInflictor
//
//	[CW]
//
//==========================================================================

void IsDeathInflictor(EntityEx victim)
{
	// Currently only Pawn's death has a meaning here
	if (ClassIsChildOf(victim.Class, Pawn))
	{
		if (Weapon(Player.ViewEnt).bInstantRanged &&
			Length(Weapon(Player.ViewEnt).ShotPosition - victim.GetCentre()) >= HexenDefs::ACCURATE_SHOT_DISTANCE)
				Player(Player).ConfirmTrophy(HexenDefs::trophycl_accuracy);
	}
}

//===========================================================================
//
//  RoughCheckThing
//
//	Minotaur looking around player
//
//===========================================================================

bool RoughCheckThing(Entity Other)
{
	Actor link = Actor(Other);
	
	if (!bIsPlayer)
	{
		return false;
	}
	if (!link.bMonster && (!link.bIsPlayer || link == self))
	{
		return false;
	}
	if (!link.bShootable)
	{
		return false;
	}
	if (link.bDormant)
	{
		return false;
	}
	if (link.IsA('Minotaur') && link.Tracer == self)
	{
		return false;
	}
	if (Level.Game.netgame && !Level.Game.deathmatch && link.bIsPlayer)
	{
		return false;
	}
	if (CanSee(link))
	{
		return true;
	}
	return false;
}

defaultproperties
{
	ReactionCount = 0;
	bCountKill = false;
	bMonster = false;
	bActivateMCross = false;
	bDropOff = true;
	bWindThrust = true;
	bSlide = true;
	ViewHeight = 48.0;
	RDFactor = 0.25;
}
