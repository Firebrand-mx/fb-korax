//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**	        ##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id$
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class WeaponWitchavenLSword : KArenaWeapon;

bool			bShieldActive;
float			LongSwordRange;

//==========================================================================
//
//	AbsorbDamage
//
//  [FB] This is protective shield effect
//
//==========================================================================

void AbsorbDamage(int damage, name DmgType, out int NewDamage)
{
	if (bShieldActive && (Owner.Player.Buttons & BT_ATTACK))
	{
		int hits = (damage * (60 + Player(Owner.Player).constitution) / 15);
		if (hits > 0)
		{
			NewDamage -= hits;
			damage = NewDamage;
			UseWeaponMana();
		}
	}
	if (Inventory)
	{
		Inventory.AbsorbDamage(damage, DmgType, NewDamage);
	}
}

//==========================================================================
//
//  A_WLShieldProtect
//
//==========================================================================

final void A_WLShieldProtect()
{
	bShieldActive = true;
}

//==========================================================================
//
//  A_WLDeactivateShield
//
//==========================================================================

final void A_WLDeactivateShield()
{
	bShieldActive = false;
}

//==========================================================================
//
//  A_WLSwordAttack
//
//  [FB] This is the attack itself
//
//==========================================================================

final void A_WLSwordAttack() 
{
	Actor		pmo = Actor(Owner);
	float		power;
	int			damage;
	int			useMana;
	TAVec		angles;
	TVec		vforward;
	EntityEx	AimTarget;

	damage = 50; //40 + (P_Random() & 15) + (P_Random() & 7);
	if (str_mod)
	{
		if(!active_damage)
		{
			damage = damage * Player(Owner.Player).strength / 10;
		}
		else // [FB] PI Damage
		{
			damage = (damage * Player(Owner.Player).strength / 10) * ftoi(3.1415);
		}
	}
	power = 0.0;
	damage <<= 1;
	power = 6.0;
	useMana = 1;

	AimTarget = pmo.AimEx(vforward, LongSwordRange, 45.0 / 16.0, 16, MELEERANGE);
	if (AimTarget)
	{
		VectorAngles(&vforward, &angles);
		if (pmo.LineAttack(vforward, LongSwordRange, damage, AxePuff))
		{
			pmo.PlaySound('FighterHammerMiss', CHAN_WEAPON);
		}
		if (AimTarget.bMonster || AimTarget.bIsPlayer)
		{
			AimTarget.Thrust(angles.yaw, power);
		}
		Player(Owner.Player).AdjustPlayerAngle(AimTarget);
		useMana++;
	}
	else
	{
		// didn't find any creatures, so try to strike any walls
		if (pmo.LineAttack(vforward, MELEERANGE, damage, HammerPuff))
		{
			pmo.PlaySound('FighterHammerMiss', CHAN_WEAPON);
		}
	}

	if (useMana == 2)
	{
		// [FB] Since we are tweaking the mana use here, make sure it's the default!
		AmmoUse1 = 15;
		UseWeaponMana();
	}
}

states
{
Deselect:
	WDHP A 0 A_WLDeactivateShield
	WDHP A 1 A_Lower
	Wait
Select:
	WDHP A 0 A_WLDeactivateShield
	WDHP A 1 A_Raise
	Wait

// 	** FIRST SHIELD STATE **

Ready:
	WDHP A 0 A_WLDeactivateShield
	WDHP AAAABBCCDDEE 2 A_WeaponReady
	Loop

// 	** SECOND SHIELD STATE **
/*
	S_WLSWORDREADY1_G('WDH1', 0, 2.0 / 35.0, S_WLSWORDREADY1_G1) = A_WeaponReady
	S_WLSWORDREADY1_G1('WDH1', 0, 2.0 / 35.0, S_WLSWORDREADY1_G2) = A_WeaponReady
	S_WLSWORDREADY1_G2('WDH1', 0, 2.0 / 35.0, S_WLSWORDREADY1_G3) = A_WeaponReady
	S_WLSWORDREADY1_G3('WDH1', 0, 2.0 / 35.0, S_WLSWORDREADY1_G4) = A_WeaponReady
	S_WLSWORDREADY1_G4('WDH1', 1, 2.0 / 35.0, S_WLSWORDREADY1_G5) = A_WeaponReady
	S_WLSWORDREADY1_G5('WDH1', 1, 2.0 / 35.0, S_WLSWORDREADY1_G6) = A_WeaponReady
	S_WLSWORDREADY1_G6('WDH1', 2, 2.0 / 35.0, S_WLSWORDREADY1_G7) = A_WeaponReady
	S_WLSWORDREADY1_G7('WDH1', 2, 2.0 / 35.0, S_WLSWORDREADY1_G8) = A_WeaponReady
	S_WLSWORDREADY1_G8('WDH1', 3, 2.0 / 35.0, S_WLSWORDREADY1_G9) = A_WeaponReady
	S_WLSWORDREADY1_G9('WDH1', 3, 2.0 / 35.0, S_WLSWORDREADY1_G10) = A_WeaponReady
	S_WLSWORDREADY1_G10('WDH1', 4, 2.0 / 35.0, S_WLSWORDREADY1_G11) = A_WeaponReady
	S_WLSWORDREADY1_G11('WDH1', 4, 2.0 / 35.0, S_WLSWORDREADY1_G) = A_WeaponReady

// 	** THIRD SHIELD STATE **

	S_WLSWORDREADY2_G('WDH2', 0, 2.0 / 35.0, S_WLSWORDREADY2_G1) = A_WeaponReady
	S_WLSWORDREADY2_G1('WDH2', 0, 2.0 / 35.0, S_WLSWORDREADY2_G2) = A_WeaponReady
	S_WLSWORDREADY2_G2('WDH2', 0, 2.0 / 35.0, S_WLSWORDREADY2_G3) = A_WeaponReady
	S_WLSWORDREADY2_G3('WDH2', 0, 2.0 / 35.0, S_WLSWORDREADY2_G4) = A_WeaponReady
	S_WLSWORDREADY2_G4('WDH2', 1, 2.0 / 35.0, S_WLSWORDREADY2_G5) = A_WeaponReady
	S_WLSWORDREADY2_G5('WDH2', 1, 2.0 / 35.0, S_WLSWORDREADY2_G6) = A_WeaponReady
	S_WLSWORDREADY2_G6('WDH2', 2, 2.0 / 35.0, S_WLSWORDREADY2_G7) = A_WeaponReady
	S_WLSWORDREADY2_G7('WDH2', 2, 2.0 / 35.0, S_WLSWORDREADY2_G8) = A_WeaponReady
	S_WLSWORDREADY2_G8('WDH2', 3, 2.0 / 35.0, S_WLSWORDREADY2_G9) = A_WeaponReady
	S_WLSWORDREADY2_G9('WDH2', 3, 2.0 / 35.0, S_WLSWORDREADY2_G10) = A_WeaponReady
	S_WLSWORDREADY2_G10('WDH2', 4, 2.0 / 35.0, S_WLSWORDREADY2_G11) = A_WeaponReady
	S_WLSWORDREADY2_G11('WDH2', 4, 2.0 / 35.0, S_WLSWORDREADY2_G) = A_WeaponReady

// 	** FOURTH SHIELD STATE**

	S_WLSWORDREADY3_G('WDH3', 0, 2.0 / 35.0, S_WLSWORDREADY3_G1) = A_WeaponReady
	S_WLSWORDREADY3_G1('WDH3', 0, 2.0 / 35.0, S_WLSWORDREADY3_G2) = A_WeaponReady
	S_WLSWORDREADY3_G2('WDH3', 0, 2.0 / 35.0, S_WLSWORDREADY3_G3) = A_WeaponReady
	S_WLSWORDREADY3_G3('WDH3', 0, 2.0 / 35.0, S_WLSWORDREADY3_G4) = A_WeaponReady
	S_WLSWORDREADY3_G4('WDH3', 1, 2.0 / 35.0, S_WLSWORDREADY3_G5) = A_WeaponReady
	S_WLSWORDREADY3_G5('WDH3', 1, 2.0 / 35.0, S_WLSWORDREADY3_G6) = A_WeaponReady
	S_WLSWORDREADY3_G6('WDH3', 2, 2.0 / 35.0, S_WLSWORDREADY3_G7) = A_WeaponReady
	S_WLSWORDREADY3_G7('WDH3', 2, 2.0 / 35.0, S_WLSWORDREADY3_G8) = A_WeaponReady
	S_WLSWORDREADY3_G8('WDH3', 3, 2.0 / 35.0, S_WLSWORDREADY3_G9) = A_WeaponReady
	S_WLSWORDREADY3_G9('WDH3', 3, 2.0 / 35.0, S_WLSWORDREADY3_G10) = A_WeaponReady
	S_WLSWORDREADY3_G10('WDH3', 4, 2.0 / 35.0, S_WLSWORDREADY3_G11) = A_WeaponReady
	S_WLSWORDREADY3_G11('WDH3', 4, 2.0 / 35.0, S_WLSWORDREADY3_G) = A_WeaponReady
*/
// [FB] From here down come the shield action states
//	--- Shield Action States --- 
Fire:
	SHDS A 2 A_WLShieldProtect
	SHDS A 2 A_ReFire
	SHDS A 2 A_WLDeactivateShield
	/*S_WSHIELD2_G1('SHDS', 1, 2.0 / 35.0, S_WSHIELD2_G2) = A_WLShieldProtect
	S_WSHIELD2_G2('SHDS', 1, 2.0 / 35.0, S_WSHIELD2_G3) = A_ReFire
	S_WSHIELD2_G3('SHDS', 1, 2.0 / 35.0, S_WSHIELDX_G) = A_WLDeactivateShield
	S_WSHIELD3_G1('SHDS', 2, 2.0 / 35.0, S_WSHIELD3_G2) = A_WLShieldProtect
	S_WSHIELD3_G2('SHDS', 2, 2.0 / 35.0, S_WSHIELD3_G3) = A_ReFire
	S_WSHIELD3_G3('SHDS', 2, 2.0 / 35.0, S_WSHIELDX_G) = A_WLDeactivateShield
	S_WSHIELD4_G1('SHDS', 3, 2.0 / 35.0, S_WSHIELD4_G2) = A_WLShieldProtect
	S_WSHIELD4_G2('SHDS', 3, 2.0 / 35.0, S_WSHIELD4_G3) = A_ReFire
	S_WSHIELD4_G3('SHDS', 3, 2.0 / 35.0, S_WSHIELDX_G) = A_WLDeactivateShield*/
	WDHP A 2

// 	ATTACK FRAMES
//	FIRST STRIKE

	WDHP FF 3
	WDHP GG 2
	WDHP HH 1
	WDHP I 1 A_WLSwordAttack
	WDHP IJJKK 1
	WDHP L 1 Offset(0, -2)
	WDHP L 1 Offset(-5, 0)
	WDHP M 1 Offset(0, 39)
	WDHP M 1 Offset(-10, 0)
	WDHP N 1
	WDHP N 2 Offset(-15, 0)
	WDHP N 2 Offset(-20, 0)

// 	SECOND STRIKE

	WDHP O 3
	WDHP O 3 Offset(-35, 0)
	WDHP P 2
	WDHP P 2 Offset(-30, 0)
	WDHP Q 1
	WDHP Q 1 Offset(-25, 0)
	WDHP R 1 Offset(0, -2) A_WLSwordAttack
	WDHP R 1 Offset(-20, -2)
	WDHP S 1
	WDHP S 1 Offset(-15, 0)
	WDHP T 1 Offset(0, 39)
	WDHP T 1 Offset(-10, 0)
	WDHP U 1
	WDHP U 1 Offset(-5, 0)
	WDHP V 2 A_ReFire
	WDHP V 2 Offset(-10, 0)
	WDHP A 1 Offset(0, 60)
	WDHP B 1 Offset(0, 52)
	WDHP C 1 Offset(0, 44)
	WDHP D 1 Offset(0, 36)
	WDHP E 1
	Goto Ready
}

/*FIFTH*/
defaultproperties
{
	Slot = 5;
	SelectionOrder = 3600;
	AmmoType1 = ItemManaBlue;
	AmmoUse1 = 15;
	LongSwordRange = 4.0 * MELEERANGE;
	BotCombatDist = 4.0 * MELEERANGE;
	wis_mod = true;
	int_mod = false;
	dex_mod = true;
	str_mod = true;
	bBotChooseMelee = true;
	bBotChooseMedium = false;
	bBotChooseRanged = false;
	PickupMessage = "LONG SWORD";
	Obituary = "$ob_longsword";
}
