//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class WeaponWitchavenLSword : Weapon;

// [FB] This weapon also has a shield for it, the shield can cover hits coming from the
//      front only, it works with a counter  that is decreased every hit it gets,
//      if the counter reaches zero the shield is over, another counter (activated when
//      the shield isn't being used) will begin increasing the shield's power by using
//      a small amount of mana (every second or so), if the player is attacking the shield
//      won't work at all, and for the shield to recharge the player must be standing still.

int ReadyState2;
int ReadyState3;
int ReadyState4;
int ShieldState1;
int ShieldState2;
int ShieldState3;
int ShieldState4;
float LongSwordRange;
float Shieldcharge;
int timer;

// [FB] I need to give a general check to this weapon in a whole, it's a mess now!

//==========================================================================
//
//  A_WLShieldProtect
//
//  [FB] This is protective shield effect
//
//==========================================================================

int A_WLShieldProtect()
{
	Actor Owner = Player.MO;
	int ManaUse;
	int hits;

	if ((Shieldcharge > 0.0) && (Player.Buttons & BT_ATTACK)) // Do we still have enough charge?
	{
		A_ShieldCheck();
		hits = (Player.dam_am * (60 + Player.constitution) / 15);

		if(hits > 0)
		{
			if(Player.GiveBody(hits))
			{
				print("Health: %d", hits);
				print("Shieldcharge a: %f", Shieldcharge);
				Shieldcharge -= (itof(hits) / 2.0);
				if(Shieldcharge < 0.0)
					Shieldcharge = 0.0;
				print("Shieldcharge b: %f", Shieldcharge);
			}
		}
	}
	else
		Owner.bInvulnerable = false;
}

//==========================================================================
//
//  A_WLSwordAttack
//
//  [FB] This is the attack itself
//
//==========================================================================

void A_WLSwordAttack() 
{
	Actor Owner = Player.MO;
	float power;
	int damage;
	int i;
	int useMana;
	TAVec angles;
	TVec vforward;
	classid PuffType;

	damage = 50; //40 + (P_Random() & 15) + (P_Random() & 7);
	if (str_mod)
	{
		if(!active_damage)
		{
			damage = damage * Player.strength / 10;
		}
		else // [FB] PI Damage
		{
			damage = (damage * Player.intelligence / 10) * ftoi(3.1415);
		}
	}
	power = 0.0;
	damage <<= 1;
	power = 6.0;
	PuffType = AxePuff;
	useMana = 1;

	for (i = 0; i < 16; i++)
	{
		angles = Owner.Angles;
		angles.yaw = AngleMod360(angles.yaw + itof(i) * (45.0 / 16.0));
		Owner.AimLineAttack(&angles, LongSwordRange);
		if (Owner.linetarget)
		{
			AngleVector(&angles, &vforward);
			if (Owner.LineAttack(vforward, LongSwordRange, damage, PuffType))
			{
				Owner.PlaySound('FighterHammerMiss', CHAN_WEAPON);
			}
			if (Owner.linetarget.bCountKill || Owner.linetarget.bIsPlayer)
			{
				Owner.linetarget.Thrust(angles.yaw, power);
			}
			Player.AdjustPlayerAngle();
			useMana++;
			break;
		}
		angles = Owner.Angles;
		angles.yaw = AngleMod360(angles.yaw - itof(i) * (45.0 / 16.0));
		Owner.AimLineAttack(&angles, LongSwordRange);
		if (Owner.linetarget)
		{
			AngleVector(&angles, &vforward);
			if (Owner.LineAttack(vforward, LongSwordRange, damage, PuffType))
			{
				Owner.PlaySound('FighterHammerMiss', CHAN_WEAPON);
			}
			if (Owner.linetarget.bCountKill || Owner.linetarget.bIsPlayer)
			{
				Owner.linetarget.Thrust(angles.yaw, power);
			}
			Player.AdjustPlayerAngle();
			useMana++;
			break;
		}
	}
	if (i == 16)
	{
		// didn't find any creatures, so try to strike any walls
		angles = Owner.Angles;
		Owner.AimLineAttack(&angles, MELEERANGE);
		AngleVector(&angles, &vforward);
		PuffType = HammerPuff;
		if (Owner.LineAttack(vforward, MELEERANGE, damage, PuffType))
		{
			Owner.PlaySound('FighterHammerMiss', CHAN_WEAPON);
		}
	}

	if (useMana == 2)
	{
		// [FB] Since we are tweaking the mana use here, make sure it's the default!
		manause = 15;
		UseWeaponMana();
	}
}

//============================================================================
//
//  A_ShieldCheck
//
//  [FB] CHECK!
//
//============================================================================

int A_ShieldCheck()
{
	// [FB] How much hits we got left??
	if (Shieldcharge > 30.0)
		return ShieldState1;

	if (Shieldcharge <= 22.5)
		return ShieldState2;

	if (Shieldcharge <= 15.0)
		return ShieldState3;

	if (Shieldcharge <= 7.5)
		return ShieldState4;
}

//============================================================================
//
//  A_Unprotect
//
//  [FB] Wear the shield out!
//
//============================================================================

void A_Unprotect()
{
	// [FB] Restart timer
	timer = 0;
}

//============================================================================
//
//  A_ChargeShield
//
//  [FB] Not working anymore, charge up!
//
//============================================================================

void A_ChargeShield()
{
	if(timer % (3 * 35) == 0 && Shieldcharge < (15.0 * (itof(Player.exp_level) / 0.5)))
	{
		// [FB] Temporarily change the amount of mana used by the weapon
		manause = 5;
		UseWeaponMana();
		// [FB] Return the default mana use
		manause = 15;
		Shieldcharge += ((1.5 * itof(Player.exp_level) / 0.5));
	}
	A_WeaponReady();
	timer += 1;
}


//==========================================================================
//
//	UpdateState
//
//==========================================================================

int UpdateState()
{
	A_WeaponReady();

	// [FB] How much hits we got left??
	if (Shieldcharge > 30.0)
		return ReadyState;

	if (Shieldcharge <= 22.5)
		return ReadyState2;

	if (Shieldcharge <= 15.0)
		return ReadyState3;

	if (Shieldcharge <= 7.5)
		return ReadyState4;
}

// [FB] FIX THIS, IT'S A MESS NOW!!
__states__
{
	S_WLSWORDDOWN_G('WDHP', 0, 1.0 / 35.0, S_WLSWORDDOWN_G) { A_Lower(); }
	S_WLSWORDUP_G('WDHP', 0, 1.0 / 35.0, S_WLSWORDUP_G) { A_Raise(); }

// 	** FIRST SHIELD STATE **

	S_WLSWORDREADY_G('WDHP', 0, 2.0 / 35.0, S_WLSWORDREADY_G1) { SX = 0.0; A_WeaponReady(); }
	S_WLSWORDREADY_G1('WDHP', 0, 2.0 / 35.0, S_WLSWORDREADY_G2) { UpdateState(); }
	S_WLSWORDREADY_G2('WDHP', 0, 2.0 / 35.0, S_WLSWORDREADY_G3) { A_WeaponReady(); }
	S_WLSWORDREADY_G3('WDHP', 0, 2.0 / 35.0, S_WLSWORDREADY_G4) { A_WeaponReady(); }
	S_WLSWORDREADY_G4('WDHP', 1, 2.0 / 35.0, S_WLSWORDREADY_G5) { A_WeaponReady(); }
	S_WLSWORDREADY_G5('WDHP', 1, 2.0 / 35.0, S_WLSWORDREADY_G6) { UpdateState(); }
	S_WLSWORDREADY_G6('WDHP', 2, 2.0 / 35.0, S_WLSWORDREADY_G7) { A_WeaponReady(); }
	S_WLSWORDREADY_G7('WDHP', 2, 2.0 / 35.0, S_WLSWORDREADY_G8) { A_WeaponReady(); }
	S_WLSWORDREADY_G8('WDHP', 3, 2.0 / 35.0, S_WLSWORDREADY_G9) { A_WeaponReady(); }
	S_WLSWORDREADY_G9('WDHP', 3, 2.0 / 35.0, S_WLSWORDREADY_G10) { A_WeaponReady(); }
	S_WLSWORDREADY_G10('WDHP', 4, 2.0 / 35.0, S_WLSWORDREADY_G11) { A_ChargeShield(); }
	S_WLSWORDREADY_G11('WDHP', 4, 2.0 / 35.0, S_WLSWORDREADY_G) { A_WeaponReady(); }

// 	** SECOND SHIELD STATE **

	S_WLSWORDREADY1_G('WDH1', 0, 2.0 / 35.0, S_WLSWORDREADY1_G1) { SX = 0.0; A_WeaponReady(); }
	S_WLSWORDREADY1_G1('WDH1', 0, 2.0 / 35.0, S_WLSWORDREADY1_G2) { UpdateState(); }
	S_WLSWORDREADY1_G2('WDH1', 0, 2.0 / 35.0, S_WLSWORDREADY1_G3) { A_WeaponReady(); }
	S_WLSWORDREADY1_G3('WDH1', 0, 2.0 / 35.0, S_WLSWORDREADY1_G4) { A_WeaponReady(); }
	S_WLSWORDREADY1_G4('WDH1', 1, 2.0 / 35.0, S_WLSWORDREADY1_G5) { A_WeaponReady(); }
	S_WLSWORDREADY1_G5('WDH1', 1, 2.0 / 35.0, S_WLSWORDREADY1_G6) { UpdateState(); }
	S_WLSWORDREADY1_G6('WDH1', 2, 2.0 / 35.0, S_WLSWORDREADY1_G7) { A_WeaponReady(); }
	S_WLSWORDREADY1_G7('WDH1', 2, 2.0 / 35.0, S_WLSWORDREADY1_G8) { A_WeaponReady(); }
	S_WLSWORDREADY1_G8('WDH1', 3, 2.0 / 35.0, S_WLSWORDREADY1_G9) { A_WeaponReady(); }
	S_WLSWORDREADY1_G9('WDH1', 3, 2.0 / 35.0, S_WLSWORDREADY1_G10) { A_WeaponReady(); }
	S_WLSWORDREADY1_G10('WDH1', 4, 2.0 / 35.0, S_WLSWORDREADY1_G11) { A_ChargeShield(); }
	S_WLSWORDREADY1_G11('WDH1', 4, 2.0 / 35.0, S_WLSWORDREADY1_G) { A_WeaponReady(); }

// 	** THIRD SHIELD STATE **

	S_WLSWORDREADY2_G('WDH2', 0, 2.0 / 35.0, S_WLSWORDREADY2_G1) { SX = 0.0; A_WeaponReady(); }
	S_WLSWORDREADY2_G1('WDH2', 0, 2.0 / 35.0, S_WLSWORDREADY2_G2) { UpdateState(); }
	S_WLSWORDREADY2_G2('WDH2', 0, 2.0 / 35.0, S_WLSWORDREADY2_G3) { A_WeaponReady(); }
	S_WLSWORDREADY2_G3('WDH2', 0, 2.0 / 35.0, S_WLSWORDREADY2_G4) { A_WeaponReady(); }
	S_WLSWORDREADY2_G4('WDH2', 1, 2.0 / 35.0, S_WLSWORDREADY2_G5) { A_WeaponReady(); }
	S_WLSWORDREADY2_G5('WDH2', 1, 2.0 / 35.0, S_WLSWORDREADY2_G6) { UpdateState(); }
	S_WLSWORDREADY2_G6('WDH2', 2, 2.0 / 35.0, S_WLSWORDREADY2_G7) { A_WeaponReady(); }
	S_WLSWORDREADY2_G7('WDH2', 2, 2.0 / 35.0, S_WLSWORDREADY2_G8) { A_WeaponReady(); }
	S_WLSWORDREADY2_G8('WDH2', 3, 2.0 / 35.0, S_WLSWORDREADY2_G9) { A_WeaponReady(); }
	S_WLSWORDREADY2_G9('WDH2', 3, 2.0 / 35.0, S_WLSWORDREADY2_G10) { A_WeaponReady(); }
	S_WLSWORDREADY2_G10('WDH2', 4, 2.0 / 35.0, S_WLSWORDREADY2_G11) { A_ChargeShield(); }
	S_WLSWORDREADY2_G11('WDH2', 4, 2.0 / 35.0, S_WLSWORDREADY2_G) { A_WeaponReady(); }

// 	** FOURTH SHIELD STATE**

	S_WLSWORDREADY3_G('WDH3', 0, 2.0 / 35.0, S_WLSWORDREADY3_G1) { SX = 0.0; A_WeaponReady();  }
	S_WLSWORDREADY3_G1('WDH3', 0, 2.0 / 35.0, S_WLSWORDREADY3_G2) { UpdateState(); }
	S_WLSWORDREADY3_G2('WDH3', 0, 2.0 / 35.0, S_WLSWORDREADY3_G3) { A_WeaponReady(); }
	S_WLSWORDREADY3_G3('WDH3', 0, 2.0 / 35.0, S_WLSWORDREADY3_G4) { A_WeaponReady(); }
	S_WLSWORDREADY3_G4('WDH3', 1, 2.0 / 35.0, S_WLSWORDREADY3_G5) { A_WeaponReady(); }
	S_WLSWORDREADY3_G5('WDH3', 1, 2.0 / 35.0, S_WLSWORDREADY3_G6) { UpdateState(); }
	S_WLSWORDREADY3_G6('WDH3', 2, 2.0 / 35.0, S_WLSWORDREADY3_G7) { A_WeaponReady(); }
	S_WLSWORDREADY3_G7('WDH3', 2, 2.0 / 35.0, S_WLSWORDREADY3_G8) { A_WeaponReady(); }
	S_WLSWORDREADY3_G8('WDH3', 3, 2.0 / 35.0, S_WLSWORDREADY3_G9) { A_WeaponReady(); }
	S_WLSWORDREADY3_G9('WDH3', 3, 2.0 / 35.0, S_WLSWORDREADY3_G10) { A_WeaponReady(); }
	S_WLSWORDREADY3_G10('WDH3', 4, 2.0 / 35.0, S_WLSWORDREADY3_G11) { A_ChargeShield(); }
	S_WLSWORDREADY3_G11('WDH3', 4, 2.0 / 35.0, S_WLSWORDREADY3_G) { A_WeaponReady(); }

// 	ATTACK FRAMES
//	FIRST STRIKE

	S_WLSWORDATK_G1('WDHP', 5, 3.0 / 35.0, S_WLSWORDATK_G2) { SX = 0.0; }
	S_WLSWORDATK_G2('WDHP', 5, 3.0 / 35.0, S_WLSWORDATK_G3) { }
	S_WLSWORDATK_G3('WDHP', 6, 2.0 / 35.0, S_WLSWORDATK_G4) { }
	S_WLSWORDATK_G4('WDHP', 6, 2.0 / 35.0, S_WLSWORDATK_G5) { }
	S_WLSWORDATK_G5('WDHP', 7, 1.0 / 35.0, S_WLSWORDATK_G6) { }
	S_WLSWORDATK_G6('WDHP', 7, 1.0 / 35.0, S_WLSWORDATK_G7) { }
	S_WLSWORDATK_G7('WDHP', 8, 1.0 / 35.0, S_WLSWORDATK_G8) { A_WLSwordAttack(); }
	S_WLSWORDATK_G8('WDHP', 8, 1.0 / 35.0, S_WLSWORDATK_G9) { }
	S_WLSWORDATK_G9('WDHP', 9, 1.0 / 35.0, S_WLSWORDATK_G10) { }
	S_WLSWORDATK_G10('WDHP', 9, 1.0 / 35.0, S_WLSWORDATK_G11) { }
	S_WLSWORDATK_G11('WDHP', 10, 1.0 / 35.0, S_WLSWORDATK_G12) { }
	S_WLSWORDATK_G12('WDHP', 10, 1.0 / 35.0, S_WLSWORDATK_G13) { }
	S_WLSWORDATK_G13('WDHP', 11, 1.0 / 35.0, S_WLSWORDATK_G14) { SY = -2.0; }
	S_WLSWORDATK_G14('WDHP', 11, 1.0 / 35.0, S_WLSWORDATK_G15) { SX = -5.0; }
	S_WLSWORDATK_G15('WDHP', 12, 1.0 / 35.0, S_WLSWORDATK_G16) { SY = 39.0; }
	S_WLSWORDATK_G16('WDHP', 12, 1.0 / 35.0, S_WLSWORDATK_G17) { SX = -10.0; }
	S_WLSWORDATK_G17('WDHP', 13, 1.0 / 35.0, S_WLSWORDATK_G18) { }
	S_WLSWORDATK_G18('WDHP', 13, 2.0 / 35.0, S_WLSWORDATK_G19) { SX = -15.0; }
	S_WLSWORDATK_G19('WDHP', 13, 2.0 / 35.0, S_WLSWORDATK2_G1) { SX = -20.0; }

// 	SECOND STRIKE

	S_WLSWORDATK2_G1('WDHP', 14, 3.0 / 35.0, S_WLSWORDATK2_G2) { }
	S_WLSWORDATK2_G2('WDHP', 14, 3.0 / 35.0, S_WLSWORDATK2_G3) { SX = -35.0; }
	S_WLSWORDATK2_G3('WDHP', 15, 2.0 / 35.0, S_WLSWORDATK2_G4) { }
	S_WLSWORDATK2_G4('WDHP', 15, 2.0 / 35.0, S_WLSWORDATK2_G5) { SX = -30.0; }
	S_WLSWORDATK2_G5('WDHP', 16, 1.0 / 35.0, S_WLSWORDATK2_G6) { }
	S_WLSWORDATK2_G6('WDHP', 16, 1.0 / 35.0, S_WLSWORDATK2_G7) { SX = -25.0; }
	S_WLSWORDATK2_G7('WDHP', 17, 1.0 / 35.0, S_WLSWORDATK2_G8) { SY = -2.0; A_WLSwordAttack(); }
	S_WLSWORDATK2_G8('WDHP', 17, 1.0 / 35.0, S_WLSWORDATK2_G9) { SX = -20.0; SY = -2.0; }
	S_WLSWORDATK2_G9('WDHP', 18, 1.0 / 35.0, S_WLSWORDATK2_G10) { }
	S_WLSWORDATK2_G10('WDHP', 18, 1.0 / 35.0, S_WLSWORDATK2_G11) { SX = -15.0; }
	S_WLSWORDATK2_G11('WDHP', 19, 1.0 / 35.0, S_WLSWORDATK2_G12) { SY = 39.0; }
	S_WLSWORDATK2_G12('WDHP', 19, 1.0 / 35.0, S_WLSWORDATK2_G13) { SX = -10.0; }
	S_WLSWORDATK2_G13('WDHP', 20, 1.0 / 35.0, S_WLSWORDATK2_G14) { }
	S_WLSWORDATK2_G14('WDHP', 20, 1.0 / 35.0, S_WLSWORDATK2_G15) { SX = -5.0; }
	S_WLSWORDATK2_G15('WDHP', 21, 2.0 / 35.0, S_WLSWORDATK2_G16) { A_ReFire(); }
	S_WLSWORDATK2_G16('WDHP', 21, 2.0 / 35.0, S_WLSWORDATK2_G17) { SX = -10.0; }
	S_WLSWORDATK2_G17('WDHP', 0, 1.0 / 35.0, S_WLSWORDATK2_G18) { SY = 60.0; }
	S_WLSWORDATK2_G18('WDHP', 1, 1.0 / 35.0, S_WLSWORDATK2_G19) { SY = 52.0; }
	S_WLSWORDATK2_G19('WDHP', 2, 1.0 / 35.0, S_WLSWORDATK2_G20) { SY = 44.0; }
	S_WLSWORDATK2_G20('WDHP', 3, 1.0 / 35.0, S_WLSWORDATK2_G21) { SY = 36.0; }
	S_WLSWORDATK2_G21('WDHP', 4, 1.0 / 35.0, S_WLSWORDREADY_G) { }

// [FB] From here down come the shield action states
//	--- Shield Action States --- 
	S_WSHIELD1_G1('SHDS', 0, 2.0 / 35.0, S_WSHIELD1_G2) { A_WLShieldProtect(); }
	S_WSHIELD1_G2('SHDS', 0, 2.0 / 35.0, S_WSHIELD1_G3) { A_ReFire(); }
	S_WSHIELD1_G3('SHDS', 0, 2.0 / 35.0, S_WSHIELDX_G) { }
	S_WSHIELD2_G1('SHDS', 1, 2.0 / 35.0, S_WSHIELD2_G2) { A_WLShieldProtect(); }
	S_WSHIELD2_G2('SHDS', 1, 2.0 / 35.0, S_WSHIELD2_G3) { A_ReFire(); }
	S_WSHIELD2_G3('SHDS', 1, 2.0 / 35.0, S_WSHIELDX_G) { }
	S_WSHIELD3_G1('SHDS', 2, 2.0 / 35.0, S_WSHIELD3_G2) { A_WLShieldProtect(); }
	S_WSHIELD3_G2('SHDS', 2, 2.0 / 35.0, S_WSHIELD3_G3) { A_ReFire(); }
	S_WSHIELD3_G3('SHDS', 2, 2.0 / 35.0, S_WSHIELDX_G) { }
	S_WSHIELD4_G1('SHDS', 3, 2.0 / 35.0, S_WSHIELD4_G2) { A_WLShieldProtect(); }
	S_WSHIELD4_G2('SHDS', 3, 2.0 / 35.0, S_WSHIELD4_G3) { A_ReFire(); }
	S_WSHIELD4_G3('SHDS', 3, 2.0 / 35.0, S_WSHIELDX_G) { }
	S_WSHIELDX_G('WDHP', 0, 2.0 / 35.0, S_WLSWORDATK_G1) { A_Unprotect(); }
}

/*FIFTH*/
defaultproperties
{
	Mana = HexenDefs::MANA_1;
	manause = 15;
	UpState = S_WLSWORDUP_G;
	DownState = S_WLSWORDDOWN_G;
	ReadyState = S_WLSWORDREADY_G;
	ReadyState2 = S_WLSWORDREADY1_G;
	ReadyState3 = S_WLSWORDREADY2_G;
	ReadyState4 = S_WLSWORDREADY3_G;
	AttackState = S_WSHIELD1_G1;
	HoldAttackState = S_WSHIELD1_G1;
	ShieldState1 = S_WSHIELD1_G1;
	ShieldState2 = S_WSHIELD2_G1;
	ShieldState3 = S_WSHIELD3_G1;
	ShieldState4 = S_WSHIELD4_G1;
	LongSwordRange = 4.0 * MELEERANGE;
	Shieldcharge = 30.0;
	wis_mod = true;
	int_mod = false;
	dex_mod = true;
	str_mod = true;
	PickUpMessage = "LONG SWORD";
}

//**************************************************************************
//
//  $Log$
//  Revision 1.13  2006/02/17 19:17:49  dj_jl
//  Moved common defs to classes.
//
//  Revision 1.12  2006/02/16 17:32:23  firebrand_kh
//  Removed the mana states checkings
//
//  Revision 1.11  2006/02/15 23:37:46  dj_jl
//  Moved all server progs global variables to classes.
//
//  Revision 1.10  2006/02/13 18:44:39  dj_jl
//  Moved all server progs global functions to classes.
//
//  Revision 1.9  2005/12/11 21:37:29  dj_jl
//  Made path traversal callbacks class members.
//
//  Revision 1.8  2005/08/12 23:04:25  firebrand_kh
//  Fixed weapons to work with the PI Damage artifact
//
//  Revision 1.7  2005/08/08 18:22:13  firebrand_kh
//  Added log revisions for CVS
//
//  Revision 1.1  2004/11/16 13:33:22  dj_jl
//  Initial import.
//
//  Revision 1.2  2003/11/12 16:50:47  dj_jl
//  Changed player structure into a class
//
//  Revision 1.1  2002/10/26 16:32:27  dj_jl
//  New style of defining classes.
//
//**************************************************************************
