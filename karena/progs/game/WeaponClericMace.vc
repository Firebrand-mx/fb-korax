//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class WeaponClericMace : Weapon;

//===========================================================================
//
//  A_CMaceAttack
//
//===========================================================================

void A_CMaceAttack()
{
	int damage;
	int i;
	TAVec angles;
	TVec vforward;

	damage = 32; //25 + (P_Random() & 15);
	if (str_mod)
	{
		if(!active_damage)
		{
			damage = damage * Player(Player).strength / 10;
		}
		else // [FB] PI Damage
		{
			damage = (damage * Player(Player).intelligence / 10) * ftoi(3.1415);
		}
	}
	for (i = 0; i < 16; i++)
	{
		angles = Player.MO.Angles;
		angles.yaw = AngleMod360(angles.yaw + itof(i) * (45.0 / 16.0));
		Actor(Player.MO).AimLineAttack(&angles, 2.0 * MELEERANGE);
		if (Actor(Player.MO).linetarget)
		{
			AngleVector(&angles, &vforward);
			if (Actor(Player.MO).LineAttack(vforward, 2.0 * MELEERANGE, damage, HammerPuff))
			{
				Player.MO.PlaySound('FighterHammerMiss', CHAN_WEAPON);
			}
			Player(Player).AdjustPlayerAngle();
			return;
		}
		angles = Player.MO.Angles;
		angles.yaw = AngleMod360(angles.yaw - itof(i) * (45.0 / 16.0));
		Actor(Player.MO).AimLineAttack(&angles, 1.5 * MELEERANGE);
		if (Actor(Player.MO).linetarget)
		{
			AngleVector(&angles, &vforward);
			if (Actor(Player.MO).LineAttack(vforward, 2.0 * MELEERANGE, damage, HammerPuff))
			{
				Player.MO.PlaySound('FighterHammerMiss', CHAN_WEAPON);
			}
			Player(Player).AdjustPlayerAngle();
			return;
		}
	}
	// didn't find any creatures, so try to strike any walls
	angles = Player.MO.Angles;
	Actor(Player.MO).AimLineAttack(&angles, MELEERANGE);
	AngleVector(&angles, &vforward);
	if (Actor(Player.MO).LineAttack(vforward, MELEERANGE, damage, HammerPuff))
	{
		Player.MO.PlaySound('FighterHammerMiss', CHAN_WEAPON);
	}
}

__states__
{
	S_CMACEREADY('CMCE', 0, 1.0 / 35.0, S_CMACEREADY) { A_WeaponReady(); }
	S_CMACEDOWN('CMCE', 0, 1.0 / 35.0, S_CMACEDOWN) { A_Lower(); }
	S_CMACEUP('CMCE', 0, 1.0 / 35.0, S_CMACEUP) { A_Raise(); }
	S_CMACEATK_1('CMCE', 1, 2.0 / 35.0, S_CMACEATK_2) { SX = 60.0; SY = 20.0; }
	S_CMACEATK_2('CMCE', 1, 1.0 / 35.0, S_CMACEATK_3) { SX = 30.0; SY = 33.0; }
	S_CMACEATK_3('CMCE', 1, 2.0 / 35.0, S_CMACEATK_4) { SX = 8.0; SY = 45.0; }
	S_CMACEATK_4('CMCE', 2, 1.0 / 35.0, S_CMACEATK_5) { SX = 8.0; SY = 45.0; }
	S_CMACEATK_5('CMCE', 3, 1.0 / 35.0, S_CMACEATK_6) { SX = 8.0; SY = 45.0; }
	S_CMACEATK_6('CMCE', 4, 1.0 / 35.0, S_CMACEATK_7) { SX = 8.0; SY = 45.0; }
	S_CMACEATK_7('CMCE', 4, 1.0 / 35.0, S_CMACEATK_8) { SX = -11.0; SY = 58.0; A_CMaceAttack(); }
	S_CMACEATK_8('CMCE', 5, 1.0 / 35.0, S_CMACEATK_9) { SX = 8.0; SY = 45.0; }
	S_CMACEATK_9('CMCE', 5, 2.0 / 35.0, S_CMACEATK_10) { SX = -8.0; SY = 74.0; }
	S_CMACEATK_10('CMCE', 5, 1.0 / 35.0, S_CMACEATK_11) { SX = -20.0; SY = 96.0; }
	S_CMACEATK_11('CMCE', 5, 8.0 / 35.0, S_CMACEATK_12) { SX = -33.0; SY = 160.0; }
	S_CMACEATK_12('CMCE', 0, 2.0 / 35.0, S_CMACEATK_13) { SX = 8.0; SY = 75.0; A_ReFire(); }
	S_CMACEATK_13('CMCE', 0, 1.0 / 35.0, S_CMACEATK_14) { SX = 8.0; SY = 65.0; }
	S_CMACEATK_14('CMCE', 0, 2.0 / 35.0, S_CMACEATK_15) { SX = 8.0; SY = 60.0; }
	S_CMACEATK_15('CMCE', 0, 1.0 / 35.0, S_CMACEATK_16) { SX = 8.0; SY = 55.0; }
	S_CMACEATK_16('CMCE', 0, 2.0 / 35.0, S_CMACEATK_17) { SX = 8.0; SY = 50.0; }
	S_CMACEATK_17('CMCE', 0, 1.0 / 35.0, S_CMACEREADY) { SX = 8.0; SY = 45.0; }
}

defaultproperties
{
	Mana = HexenDefs::MANA_NONE;
	UpState = S_CMACEUP;
	DownState = S_CMACEDOWN;
	ReadyState = S_CMACEREADY;
	AttackState = S_CMACEATK_1;
	HoldAttackState = S_CMACEATK_1;
	PSpriteSY = -8.0;
	wis_mod = false;
	int_mod = false;
	dex_mod = true;
	str_mod = true;
}

//**************************************************************************
//
//  $Log$
//  Revision 1.7  2006/03/02 18:40:23  dj_jl
//  Don't use game specific classes in common.
//
//  Revision 1.6  2006/02/17 19:17:51  dj_jl
//  Moved common defs to classes.
//
//  Revision 1.5  2006/02/15 23:37:46  dj_jl
//  Moved all server progs global variables to classes.
//
//  Revision 1.4  2005/12/11 21:37:29  dj_jl
//  Made path traversal callbacks class members.
//
//  Revision 1.3  2005/08/12 23:04:25  firebrand_kh
//  Fixed weapons to work with the PI Damage artifact
//
//  Revision 1.2  2005/07/27 21:00:06  firebrand_kh
//  Balanced weapon damage rates & mana usage
//
//  Revision 1.1  2004/11/16 13:33:22  dj_jl
//  Initial import.
//
//  Revision 1.3  2003/11/12 16:50:47  dj_jl
//  Changed player structure into a class
//
//  Revision 1.2  2003/03/08 12:42:31  dj_jl
//  Removed old macro.
//
//  Revision 1.1  2002/10/26 16:32:27  dj_jl
//  New style of defining classes.
//
//**************************************************************************
