//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class WeaponWitchavenSSword : Weapon;

//int NoMoreManaState;
float SwordRange;

//==========================================================================
//
//  A_WSSwordAttack
//
//==========================================================================

void A_WSSwordAttack()
{
	Actor Owner = Actor(Player.MO);
	float power;
	int damage;
	int i;
	int useMana;
	TAVec angles;
	TVec vforward;
	classid PuffType;

	damage = 25; //15 + (P_Random() & 15) + (P_Random() & 7);
	if (str_mod)
	{
		if(!active_damage)
		{
			damage = damage * Player(Player).strength / 10;
		}
		else // [FB] PI Damage
		{
			damage = (damage * Player(Player).intelligence / 10) * ftoi(3.1415);
		}
	}
	power = 0.0;
// [KORAX]
/*	if (IsWeaponManaUsable())
	{*/
		damage <<= 1;
		power = 6.0;
		PuffType = AxePuff;
		useMana = 1;
/*	}
	else
	{
		PuffType = AxePuff;
		useMana = 0;
	}*/

	for (i = 0; i < 16; i++)
	{
		angles = Owner.Angles;
		angles.yaw = AngleMod360(angles.yaw + itof(i) * (45.0 / 16.0));
		Owner.AimLineAttack(&angles, SwordRange);
		if (Owner.linetarget)
		{
			AngleVector(&angles, &vforward);
			if (Owner.LineAttack(vforward, SwordRange, damage, PuffType))
			{
				Owner.PlaySound('FighterHammerMiss', CHAN_WEAPON);
			}
			if (Owner.linetarget.bCountKill || Owner.linetarget.bIsPlayer)
			{
				Owner.linetarget.Thrust(angles.yaw, power);
			}
			Player(Player).AdjustPlayerAngle();
			useMana++;
			break;
		}
		angles = Owner.Angles;
		angles.yaw = AngleMod360(angles.yaw - itof(i) * (45.0 / 16.0));
		Owner.AimLineAttack(&angles, SwordRange);
		if (Owner.linetarget)
		{
			AngleVector(&angles, &vforward);
			if (Owner.LineAttack(vforward, SwordRange, damage, PuffType))
			{
				Owner.PlaySound('FighterHammerMiss', CHAN_WEAPON);
			}
			if (Owner.linetarget.bCountKill || Owner.linetarget.bIsPlayer)
			{
				Owner.linetarget.Thrust(angles.yaw, power);
			}
			Player(Player).AdjustPlayerAngle();
			useMana++;
			break;
		}
	}
	if (i == 16)
	{
		// didn't find any creatures, so try to strike any walls
		angles = Owner.Angles;
		Owner.AimLineAttack(&angles, MELEERANGE);
		AngleVector(&angles, &vforward);
		PuffType = HammerPuff;
		if (Owner.LineAttack(vforward, MELEERANGE, damage, PuffType))
		{
			Owner.PlaySound('FighterHammerMiss', CHAN_WEAPON);
		}
	}

//[KORAX]
	if (useMana == 2)
	{
		UseWeaponMana();
/*		if (!IsWeaponManaUsable())
		{
			SetState(NoMoreManaState);
		}*/
	}
}

__states__
{
//[KORAX]
/*
	S_WSSWORDREADY('WSSW', 0, 1.0 / 35.0, S_WSSWORDREADY) { A_WeaponReady(); }
	S_WSSWORDDOWN('WSSW', 0, 1.0 / 35.0, S_WSSWORDDOWN) { A_Lower(); }
	S_WSSWORDUP('WSSW', 0, 1.0 / 35.0, S_WSSWORDUP) { A_Raise(); }
	S_WSSWORDATK_1('WSSW', 1, 4.0 / 35.0, S_WSSWORDATK_2) { }
	S_WSSWORDATK_2('WSSW', 2, 3.0 / 35.0, S_WSSWORDATK_3) { }
	S_WSSWORDATK_3('WSSW', 3, 2.0 / 35.0, S_WSSWORDATK_4) { }
	S_WSSWORDATK_4('WSSW', 4, 1.0 / 35.0, S_WSSWORDATK_5) { A_WSSwordAttack(); }
	S_WSSWORDATK_5('WSSW', 5, 2.0 / 35.0, S_WSSWORDATK_6) { }
	S_WSSWORDATK_6('WSSW', 5, 1.0 / 35.0, S_WSSWORDATK_7) { }
	S_WSSWORDATK_7('WSSW', 6, 2.0 / 35.0, S_WSSWORDATK_8) { }
	S_WSSWORDATK_8('WSSW', 4, 7.0 / 35.0, S_WSSWORDATK_9) { }
	S_WSSWORDATK_9('WSSW', 0, 1.0 / 35.0, S_WSSWORDATK_10) { }
	S_WSSWORDATK_10('WSSW', 0, 1.0 / 35.0, S_WSSWORDATK_11) { SY = 52.0; }
	S_WSSWORDATK_11('WSSW', 0, 1.0 / 35.0, S_WSSWORDATK_12) { SY = 44.0; }
	S_WSSWORDATK_12('WSSW', 0, 1.0 / 35.0, S_WSSWORDATK_13) { SY = 36.0; }
	S_WSSWORDATK_13('WSSW', 0, 1.0 / 35.0, S_WSSWORDREADY) { }
	// SECOND STRIKE (NO MANA)
	S_WSSWORDATK2_1('WSSW', 8, 4.0 / 35.0, S_WSSWORDATK2_2) { SX = 0.0; }
	S_WSSWORDATK2_2('WSSW', 8, 4.0 / 35.0, S_WSSWORDATK2_3) { SX = 0.0; }
	S_WSSWORDATK2_3('WSSW', 9, 3.0 / 35.0, S_WSSWORDATK2_4) { SX = 0.0; }
	S_WSSWORDATK2_4('WSSW', 9, 3.0 / 35.0, S_WSSWORDATK2_5) { SX = 0.0; }
	S_WSSWORDATK2_5('WSSW', 10, 2.0 / 35.0, S_WSSWORDATK2_6) { SX = 0.0; }
	S_WSSWORDATK2_6('WSSW', 10, 2.0 / 35.0, S_WSSWORDATK2_7) { SX = 0.0; }
	S_WSSWORDATK2_7('WSSW', 11, 1.0 / 35.0, S_WSSWORDATK2_8) { A_WSSwordAttack(); }
	S_WSSWORDATK2_8('WSSW', 11, 1.0 / 35.0, S_WSSWORDATK2_9) { }
	S_WSSWORDATK2_9('WSSW', 12, 2.0 / 35.0, S_WSSWORDATK2_10) { }
	S_WSSWORDATK2_10('WSSW', 12, 2.0 / 35.0, S_WSSWORDATK2_11) { }
	S_WSSWORDATK2_11('WSSW', 13, 1.0 / 35.0, S_WSSWORDATK2_12) { }
	S_WSSWORDATK2_12('WSSW', 13, 2.0 / 35.0, S_WSSWORDATK2_13) { }
	S_WSSWORDATK2_13('WSSW', 14, 1.0 / 35.0, S_WSSWORDATK2_14) { }
	S_WSSWORDATK2_14('WSSW', 14, 2.0 / 35.0, S_WSSWORDATK_1) { A_ReFire(); }
*/
//[KORAX]
	// MANA STATES
	S_WSSWORDREADY_G('WSWF', 0 | FF_FULLBRIGHT, 2.0 / 35.0, S_WSSWORDREADY_G1) { A_WeaponReady(); }
	S_WSSWORDREADY_G1('WSWF', 0 | FF_FULLBRIGHT, 2.0 / 35.0, S_WSSWORDREADY_G2) { A_WeaponReady(); }
	S_WSSWORDREADY_G2('WSWF', 1 | FF_FULLBRIGHT, 2.0 / 35.0, S_WSSWORDREADY_G3) { A_WeaponReady(); }
	S_WSSWORDREADY_G3('WSWF', 1 | FF_FULLBRIGHT, 2.0 / 35.0, S_WSSWORDREADY_G4) { A_WeaponReady(); }
	S_WSSWORDREADY_G4('WSWF', 2 | FF_FULLBRIGHT, 2.0 / 35.0, S_WSSWORDREADY_G5) { A_WeaponReady(); }
	S_WSSWORDREADY_G5('WSWF', 2 | FF_FULLBRIGHT, 2.0 / 35.0, S_WSSWORDREADY_G6) { A_WeaponReady(); }
	S_WSSWORDREADY_G6('WSWF', 3 | FF_FULLBRIGHT, 2.0 / 35.0, S_WSSWORDREADY_G7) { A_WeaponReady(); }
	S_WSSWORDREADY_G7('WSWF', 3 | FF_FULLBRIGHT, 2.0 / 35.0, S_WSSWORDREADY_G) { A_WeaponReady(); }
	S_WSSWORDDOWN_G('WSWF', 0 | FF_FULLBRIGHT, 1.0 / 35.0, S_WSSWORDDOWN_G) { A_Lower(); }
	S_WSSWORDUP_G('WSWF', 0 | FF_FULLBRIGHT, 1.0 / 35.0, S_WSSWORDUP_G) { A_Raise(); }
	S_WSSWORDATK_G1('WSWF', 4 | FF_FULLBRIGHT, 3.0 / 35.0, S_WSSWORDATK_G2) { SX = 0.0; SY = 31.0; }
	S_WSSWORDATK_G2('WSWF', 4 | FF_FULLBRIGHT, 3.0 / 35.0, S_WSSWORDATK_G3) { SX = 0.0; }
	S_WSSWORDATK_G3('WSWF', 5 | FF_FULLBRIGHT, 2.0 / 35.0, S_WSSWORDATK_G4) { SX = 0.0; }
	S_WSSWORDATK_G4('WSWF', 5 | FF_FULLBRIGHT, 2.0 / 35.0, S_WSSWORDATK_G5) { SX = 0.0; }
	S_WSSWORDATK_G5('WSWF', 6 | FF_FULLBRIGHT, 1.0 / 35.0, S_WSSWORDATK_G6) { SX = 0.0; }
	S_WSSWORDATK_G6('WSWF', 6 | FF_FULLBRIGHT, 1.0 / 35.0, S_WSSWORDATK_G7) { SX = 0.0; }
	S_WSSWORDATK_G7('WSWF', 7| FF_FULLBRIGHT, 1.0 / 35.0, S_WSSWORDATK_G8) { A_WSSwordAttack(); }
	S_WSSWORDATK_G8('WSWF', 7 | FF_FULLBRIGHT, 1.0 / 35.0, S_WSSWORDATK_G9) { SX = -5.0; }
	S_WSSWORDATK_G9('WSWF', 8 | FF_FULLBRIGHT, 1.0 / 35.0, S_WSSWORDATK_G10) { }
	S_WSSWORDATK_G10('WSWF', 8 | FF_FULLBRIGHT, 1.0 / 35.0, S_WSSWORDATK_G11) { SX = -10.0; }
	S_WSSWORDATK_G11('WSWF', 9 | FF_FULLBRIGHT, 1.0 / 35.0, S_WSSWORDATK_G12) { }
	S_WSSWORDATK_G12('WSWF', 9 | FF_FULLBRIGHT, 1.0 / 35.0, S_WSSWORDATK_G13) { SX = -15.0; }
	S_WSSWORDATK_G13('WSWF', 9 | FF_FULLBRIGHT, 2.0 / 35.0, S_WSSWORDATK_G14) { SX = -20.0; A_ReFire(); }
	S_WSSWORDATK_G14('WSWF', 0 | FF_FULLBRIGHT, 1.0 / 35.0, S_WSSWORDATK_G15) { SY = 52.0;}
	S_WSSWORDATK_G15('WSWF', 1 | FF_FULLBRIGHT, 1.0 / 35.0, S_WSSWORDATK_G16) { SY = 44.0;}
	S_WSSWORDATK_G16('WSWF', 2 | FF_FULLBRIGHT, 1.0 / 35.0, S_WSSWORDATK_G17) { SY = 36.0;}
	S_WSSWORDATK_G17('WSWF', 3 | FF_FULLBRIGHT, 1.0 / 35.0, S_WSSWORDREADY_G) { }
	// SECOND STRIKE (MANA CHARGED)
	S_WSSWORDATK2_G1('WSWF', 10 | FF_FULLBRIGHT, 3.0 / 35.0, S_WSSWORDATK2_G2) { SX = 0.0; }
	S_WSSWORDATK2_G2('WSWF', 10 | FF_FULLBRIGHT, 3.0 / 35.0, S_WSSWORDATK2_G3) { SX = 0.0; }
	S_WSSWORDATK2_G3('WSWF', 11 | FF_FULLBRIGHT, 2.0 / 35.0, S_WSSWORDATK2_G4) { SX = 0.0; }
	S_WSSWORDATK2_G4('WSWF', 11 | FF_FULLBRIGHT, 2.0 / 35.0, S_WSSWORDATK2_G5) { SX = 0.0; }
	S_WSSWORDATK2_G5('WSWF', 12 | FF_FULLBRIGHT, 2.0 / 35.0, S_WSSWORDATK2_G6) { SX = 0.0; SY = -2.0; }
	S_WSSWORDATK2_G6('WSWF', 12 | FF_FULLBRIGHT, 2.0 / 35.0, S_WSSWORDATK2_G7) { SX = 0.0; SY = -2.0; }
	S_WSSWORDATK2_G7('WSWF', 13 | FF_FULLBRIGHT, 1.0 / 35.0, S_WSSWORDATK2_G8) { SY = 10.0; A_WSSwordAttack(); }
	S_WSSWORDATK2_G8('WSWF', 13 | FF_FULLBRIGHT, 1.0 / 35.0, S_WSSWORDATK2_G9) { SX = -20.0; SY = 10.0; }
	S_WSSWORDATK2_G9('WSWF', 14 | FF_FULLBRIGHT, 2.0 / 35.0, S_WSSWORDATK2_G10) { SY = 89.0; }
	S_WSSWORDATK2_G10('WSWF', 14 | FF_FULLBRIGHT, 2.0 / 35.0, S_WSSWORDATK2_G11) { SX = -15.0; SY = 89.0; }
	S_WSSWORDATK2_G11('WSWF', 15 | FF_FULLBRIGHT, 1.0 / 35.0, S_WSSWORDATK2_G12) { }
	S_WSSWORDATK2_G12('WSWF', 15 | FF_FULLBRIGHT, 1.0 / 35.0, S_WSSWORDATK2_G13) { SX = -10.0; }
	S_WSSWORDATK2_G13('WSWF', 16 | FF_FULLBRIGHT, 2.0 / 35.0, S_WSSWORDATK2_G14) { SX = -5.0; }
	S_WSSWORDATK2_G14('WSWF', 16 | FF_FULLBRIGHT, 2.0 / 35.0, S_WSSWORDATK_G1) { SX = 0.0; }
}

//[KORAX]
/*
//==========================================================================
//
//	GetUpState
//
//==========================================================================

int GetUpState()
{
	if (IsWeaponManaUsable())
	{
		return S_WSSWORDUP_G;
	}
	else
	{
		return UpState;
	}
}

//==========================================================================
//
//	GetDownState
//
//==========================================================================

int GetDownState()
{
	if (IsWeaponManaUsable())
	{
		return S_WSSWORDDOWN_G;
	}
	else
	{
		return DownState;
	}
}

//==========================================================================
//
//	GetReadyState
//
//==========================================================================

int GetReadyState()
{
	if (IsWeaponManaUsable())
	{
		return S_WSSWORDREADY_G;
	}
	else
	{
		return ReadyState;
	}
}

//==========================================================================
//
//	GetAttackState
//
//==========================================================================

int GetAttackState()
{
	if (IsWeaponManaUsable())
	{
		// Fire Sword
		return S_WSSWORDATK2_G1;
	}
	else
	{
		return Player.Refire ? HoldAttackState : AttackState;
	}
}

//==========================================================================
//
//	GotMana
//
//==========================================================================

void GotMana(int InMana)
{
	if (InMana == HexenDefs::MANA_1 && IsWeaponManaUsable())
	{
		SetState(S_WSSWORDREADY_G);
	}
}
*/
//[KORAX]

/*SECOND*/
defaultproperties
{
	Mana = HexenDefs::MANA_1;
	manause = 5;
	//needsnomana = true;
	UpState = S_WSSWORDUP_G;
	DownState = S_WSSWORDDOWN_G;
	ReadyState = S_WSSWORDREADY_G;
	AttackState = S_WSSWORDATK2_G1;
	HoldAttackState = S_WSSWORDATK_G1;
//	NoMoreManaState = S_WSSWORDATK_5;
	SwordRange = 3.0 * MELEERANGE / 2.0;
	wis_mod = true;
	int_mod = false;
	dex_mod = true;
	str_mod = true;
	PickUpMessage = "SHORT SWORD";
}

//**************************************************************************
//
//  $Log$
//  Revision 1.13  2006/03/19 20:50:08  dj_jl
//  Added missing type casts.
//
//  Revision 1.12  2006/03/02 18:40:23  dj_jl
//  Don't use game specific classes in common.
//
//  Revision 1.11  2006/02/17 19:17:52  dj_jl
//  Moved common defs to classes.
//
//  Revision 1.10  2006/02/16 17:32:23  firebrand_kh
//  Removed the mana states checkings
//
//  Revision 1.9  2006/02/15 23:37:46  dj_jl
//  Moved all server progs global variables to classes.
//
//  Revision 1.8  2005/12/11 21:37:29  dj_jl
//  Made path traversal callbacks class members.
//
//  Revision 1.7  2005/08/12 23:04:25  firebrand_kh
//  Fixed weapons to work with the PI Damage artifact
//
//  Revision 1.6  2005/08/08 18:22:13  firebrand_kh
//  Added log revisions for CVS
//
//  Revision 1.1  2004/11/16 13:33:22  dj_jl
//  Initial import.
//
//  Revision 1.2  2003/11/12 16:50:47  dj_jl
//  Changed player structure into a class
//
//  Revision 1.1  2002/10/26 16:32:27  dj_jl
//  New style of defining classes.
//
//**************************************************************************
