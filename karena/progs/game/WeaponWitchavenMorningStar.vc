//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class WeaponWitchavenMorningStar : Weapon;

bool bThrowFireball;
float MorningSRange;

//============================================================================
//
//  A_WMorningSAttack
//
//============================================================================

void A_WMorningSAttack()
{
	Actor Owner = Player.MO;
	int damage;
	float power;
	int i;
	TAVec angles;
	TVec vforward;

	damage = 50; //25 + (P_Random() & 63);
	if (str_mod)
	{
		if(!active_damage)
		{
			damage = damage * Player.strength / 10;
		}
		else // [FB] PI Damage
		{
			damage = (damage * Player.intelligence / 10) * ftoi(3.1415);
		}
	}
	power = 3.5;
	for (i = 0; i < 16; i++)
	{
		angles = Owner.Angles;
		angles.yaw = AngleMod360(angles.yaw + itof(i) * (45.0 / 32.0));
		Owner.AimLineAttack(&angles, MorningSRange);
		if (Owner.linetarget)
		{
			AngleVector(&angles, &vforward);
			if (Owner.LineAttack(vforward, MorningSRange, damage, HammerPuff))
			{
				Owner.PlaySound('FighterHammerMiss', CHAN_WEAPON);
			}
			Player.AdjustPlayerAngle();
			if (Owner.linetarget.bCountKill || Owner.linetarget.bIsPlayer)
			{
				Owner.linetarget.Thrust(angles.yaw, power);
			}
			break;
		}
		angles = Owner.Angles;
		angles.yaw = AngleMod360(angles.yaw - itof(i) * (45.0 / 32.0));
		Owner.AimLineAttack(&angles, MorningSRange);
		if (Owner.linetarget)
		{
			AngleVector(&angles, &vforward);
			if (Owner.LineAttack(vforward, MorningSRange, damage, HammerPuff))
			{
				Owner.PlaySound('FighterHammerMiss', CHAN_WEAPON);
			}
			Player.AdjustPlayerAngle();
			if (Owner.linetarget.bCountKill || Owner.linetarget.bIsPlayer)
			{
				Owner.linetarget.Thrust(angles.yaw, power);
			}
			break;
		}
	}
	if (i == 16)
	{
		// didn't find any targets in meleerange, so set to throw out a fireball
		angles = Owner.Angles;
		Owner.AimLineAttack(&angles, MorningSRange);
		AngleVector(&angles, &vforward);
		if (Owner.LineAttack(vforward, MorningSRange, damage, HammerPuff))
		{
			Owner.PlaySound('FighterHammerMiss', CHAN_WEAPON);
		}
	}
	bThrowFireball = true;
}

//============================================================================
//
//  A_WFireballThrow
//
//============================================================================

void A_WFireballThrow()
{
	Actor mo;
	PlayerPawn playPawn;

	if (!bThrowFireball)
	{
		return;
	}
	UseWeaponMana();
	Player.SpawnPlayerMissile(MorningStarMissile);
}

__states__
{
	S_WMORNINGREADY1('WMSR', 0, 1.0 / 35.0, S_WMORNINGREADY2) { A_WeaponReady(); }
	S_WMORNINGREADY2('WMSR', 2, 1.0 / 35.0, S_WMORNINGREADY3) { A_WeaponReady(); }
	S_WMORNINGREADY3('WMSR', 1, 1.0 / 35.0, S_WMORNINGREADY4) { A_WeaponReady(); }
	S_WMORNINGREADY4('WMSR', 2, 1.0 / 35.0, S_WMORNINGREADY1) { A_WeaponReady(); }
	S_WMORNINGDOWN('WMSR', 0, 1.0 / 35.0, S_WMORNINGDOWN) { A_Lower(); }
	S_WMORNINGUP('WMSR', 0, 1.0 / 35.0, S_WMORNINGUP) { A_Raise(); }
	S_WMORNINGATK_1('WMSR', 3, 6.0 / 35.0, S_WMORNINGATK_2) { }
	S_WMORNINGATK_2('WMSR', 4, 3.0 / 35.0, S_WMORNINGATK_3) { }
	S_WMORNINGATK_3('WMSR', 5, 3.0 / 35.0, S_WMORNINGATK_4) { }
	S_WMORNINGATK_4('WMSR', 6, 2.0 / 35.0, S_WMORNINGATK_5) { }
	S_WMORNINGATK_5('WMSR', 7, 3.0 / 35.0, S_WMORNINGATK_6) { A_WMorningSAttack(); }
	S_WMORNINGATK_6('WMSR', 8, 2.0 / 35.0, S_WMORNINGATK_7) { A_WFireballThrow(); }
	S_WMORNINGATK_7('WMSR', 9, 3.0 / 35.0, S_WMORNINGATK_8) { }
	S_WMORNINGATK_8('WMSR', 10, 3.0 / 35.0, S_WMORNINGATK_9) { }
	S_WMORNINGATK_9('WMSR', 11, 3.0 / 35.0, S_WMORNINGATK_10) { }
	S_WMORNINGATK_10('WMSR', 12, 3.0 / 35.0, S_WMORNINGATK_11) { }
	S_WMORNINGATK_11('WMSR', 12, 3.0 / 35.0, S_WMORNINGATK_12) { SX = 25.0; A_WMorningSAttack(); }
	S_WMORNINGATK_12('WMSR', 13, 2.0 / 35.0, S_WMORNINGATK_13) { }
	S_WMORNINGATK_13('WMSR', 13, 3.0 / 35.0, S_WMORNINGREADY1) { SX = 35.0; }
}

/*THIRD*/
defaultproperties
{
	Mana = MANA_2;
	manause = 20;
	//needsnomana = true;
	UpState = S_WMORNINGUP;
	DownState = S_WMORNINGDOWN;
	ReadyState = S_WMORNINGREADY1;
	AttackState = S_WMORNINGATK_1;
	HoldAttackState = S_WMORNINGATK_1;
	PSpriteSY = 0.0;
	MorningSRange = MELEERANGE * 3.0;
	wis_mod = true;
	int_mod = true;
	dex_mod = true;
	str_mod = true;
	PickUpMessage = "MORNING STAR";
}

//**************************************************************************
//
//  $Log$
//  Revision 1.8  2006/02/15 23:37:46  dj_jl
//  Moved all server progs global variables to classes.
//
//  Revision 1.7  2005/12/11 21:37:29  dj_jl
//  Made path traversal callbacks class members.
//
//  Revision 1.6  2005/08/12 23:04:25  firebrand_kh
//  Fixed weapons to work with the PI Damage artifact
//
//  Revision 1.5  2005/08/08 18:22:13  firebrand_kh
//  Added log revisions for CVS
//
//  Revision 1.1  2004/11/16 13:33:22  dj_jl
//  Initial import.
//
//  Revision 1.2  2003/11/12 16:50:47  dj_jl
//  Changed player structure into a class
//
//  Revision 1.1  2002/10/26 16:32:27  dj_jl
//  New style of defining classes.
//
//**************************************************************************
