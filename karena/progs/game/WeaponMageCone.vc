//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**		##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id$
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class WeaponMageCone : KArenaWeapon;

//==========================================================================
//
//  A_FireConePL1
//
//==========================================================================

final void A_FireConePL1()
{
	TAVec			ang;
	int				damage;
	int				i;
	ShardMissile	mo;
	int				conedone = false;
	TVec			Dir;
	EntityEx		AimTarget;

	if (!bIsPlayer)
	{
		return;
	}
	KArenaWeapon Wpn = KArenaWeapon(PlayerEx(Player).ReadyWeapon);

	Wpn.UseWeaponMana();
	PlaySound('MageShardsFire', CHAN_WEAPON);

	damage = 97; //90 + (P_Random() & 15);
	Wpn.ApplyDamageModifiers(damage);
	for (i = 0; i < 16; i++)
	{
		ang = Angles;
		ang.yaw = AngleMod360(ang.yaw + itof(i) * (45.0 / 16.0));
		AimTarget = AimLineAttack(Dir, ang, MELEERANGE);
		if (AimTarget)
		{
			AimTarget.Damage(self, self, damage, 'Ice');
			conedone = true;
			break;
		}
	}

	// didn't find any creatures, so fire projectiles
	if (!conedone)
	{
		mo = ShardMissile(PlayerPawn(self).SpawnPlayerMissile_2(Wpn, ShardMissile));
		if (mo)
		{
			Wpn.ApplyDamageModifiers(mo.MissileDamage);
			mo.bShardSpawnLeft = true;
			mo.bShardSpawnRight = true;
			mo.bShardSpawnUp = true;
			mo.bShardSpawnDown = true;
			mo.Special2 = 3;	// Set sperm count (levels of reproductivity)
			mo.Target = self;
			mo.Args[0] = 3;	// Mark Initial shard as super damage
		}
	}
}

states
{
Ready:
	CONE A 1 A_WeaponReady
	Loop
Deselect:
	CONE A 1 A_Lower
	Loop
Select:
	CONE A 1 A_Raise
	Loop
Fire:
	CONE B 3
	CONE C 4
Hold:
	CONE D 3
	CONE E 5
	CONE F 3 A_FireConePL1
	CONE G 3
	CONE A 9
	CONE A 10 A_ReFire
	Goto Ready
}

/*FOURTH*/
defaultproperties
{
	Slot = 4;
	SelectionOrder = 4300;
	AmmoType1 = ItemManaRed;
	AmmoUse1 = 7;
	PSpriteSY = 20.0;
	BotCombatDist = 256.0 + MISSILERANGE;
	wis_mod = true;
	int_mod = true;
	dex_mod = false;
	str_mod = false;
	bBotChooseMelee = false;
	bBotChooseMedium = true;
	bBotChooseRanged = true;
	bBotProjectile = true;
	PickupMessage = "FROST SHARDS";
	refire_tics = 33.0;
	fire_tics = 11.0;
	MeleeObituary = "$ob_frost";
	RangedObituary = "$ob_frost";
}
