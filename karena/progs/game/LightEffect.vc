//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class LightEffect:SectorThinker;

int type;
int value1;
int value2;
float time1;
float time2;
int direction;
float time;
float delta;

//============================================================================
//
//	Tick
//
//============================================================================

void Tick(float deltaTime)
{
	int d;

	if (time)
	{
		time -= deltaTime;
		if (time <= 0.0)
		{
			time = 0.0;
		}
		return;
	}
	switch (type)
	{
	case LITE_FADE:
		d = ftoi(delta * deltaTime);
		if (!d)
			d = direction;
		Sector->params.lightlevel += d;
		if (direction == 1)
		{
			if (Sector->params.lightlevel >= value1)
			{
				Sector->params.lightlevel = value1;
				RemoveSpecialThinker(self);
			}
		}
		else if (Sector->params.lightlevel <= value1)
		{
			Sector->params.lightlevel = value1;
			RemoveSpecialThinker(self);
		}
		break;

	case LITE_GLOW:
		Sector->params.lightlevel += ftoi(delta * deltaTime);
		if (direction == 1)
		{
			if (Sector->params.lightlevel >= value1)
			{
				Sector->params.lightlevel = value1;
				delta = -delta;
				direction = -1;	// reverse direction
			}
		}
		else if (Sector->params.lightlevel <= value2)
		{
			Sector->params.lightlevel = value2;
			delta = -delta;
			direction = 1;	// reverse direction
		}
		break;

	case LITE_FLICKER:
		if (Sector->params.lightlevel == value1)
		{
			Sector->params.lightlevel = value2;
			time = itof((P_Random() & 7) + 1) / 32.0;
		}
		else
		{
			Sector->params.lightlevel = value1;
			time = itof((P_Random() & 31) + 1) / 32.0;
		}
		break;

	case LITE_STROBE:
		if (Sector->params.lightlevel == value1)
		{
			Sector->params.lightlevel = value2;
			time = time2;
		}
		else
		{
			Sector->params.lightlevel = value1;
			time = time1;
		}
		break;

	default:
		break;
	}
}

defaultproperties
{
}

//**************************************************************************
//
//  $Log$
//  Revision 1.2  2005/03/01 15:33:57  dj_jl
//  Big update of line specials.
//
//  Revision 1.1  2004/11/16 13:33:21  dj_jl
//  Initial import.
//
//  Revision 1.1  2002/10/26 16:32:26  dj_jl
//  New style of defining classes.
//
//**************************************************************************
