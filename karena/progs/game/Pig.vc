//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**		##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id$
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Pig : Pawn;

//==========================================================================
//
//  UpdateMorphedMonster
//
//  Returns true if the pig morphs.
//
//==========================================================================

int UpdateMorphedMonster(int tics)
{
	Actor fog;
	TVec oldOrigin;
	class<EntityEx> originalClass;
	float oldAngle;
	EntityEx oldTarget;
	int oldSpecial;
	int oldTID;
	int oldArgs[5];
	EntityEx mo;

	Special1 -= tics;
	if (Special1 > 0)
	{
		return false;
	}
	originalClass = SpecialCID;
	if (originalClass == WraithBuried ||
		originalClass == Serpent ||
		originalClass == SerpentLeader ||
		originalClass == Minotaur)
	{
		// These must remain morphed
		return false;
	}
	oldOrigin = Origin;
	oldAngle = Angles.yaw;
	oldTarget = Target;
	oldSpecial = Special;
	oldTID = TID;
	oldArgs[0] = Args[0];
	oldArgs[1] = Args[1];
	oldArgs[2] = Args[2];
	oldArgs[3] = Args[3];
	oldArgs[4] = Args[4];

	UnlinkFromWorld();
	mo = Spawn(originalClass, oldOrigin);

	if (!mo.TestLocation())
	{
		// Didn't fit
		mo.Destroy();
		LinkToWorld();
		mo.Special1 = 5 * 35;	// Next try in 5 seconds
		return false;
	}
	LinkToWorld();
	RemoveFromTIDList();
	SetState(FindState('FreeTargMobj'));
	mo.Angles.yaw = oldAngle;
	mo.Target = oldTarget;
	mo.TID = oldTID;
	mo.Special = oldSpecial;
	mo.Args[0] = oldArgs[0];
	mo.Args[1] = oldArgs[1];
	mo.Args[2] = oldArgs[2];
	mo.Args[3] = oldArgs[3];
	mo.Args[4] = oldArgs[4];
	mo.InsertIntoTIDList(oldTID);
	mo.bNoSightCheck = bNoSightCheck;
	mo.bHuntPlayers = bHuntPlayers;
	mo.bNoHatePlayers = bNoHatePlayers;
	fog = Spawn(TeleportFog, oldOrigin + vector(0.0, 0.0, TELEFOGHEIGHT));
	fog.PlaySound('Teleport', CHAN_VOICE);
	return true;
}

//============================================================================
//
//  A_PigLook
//
//============================================================================

final void A_PigLook()
{
	if (UpdateMorphedMonster(10))
	{
		return;
	}
	A_Look();
}

//============================================================================
//
//  A_PigChase
//
//============================================================================

final void A_PigChase()
{
	if (UpdateMorphedMonster(3))
	{
		return;
	}
	A_Chase();
}

//============================================================================
//
//	A_PigAttack
//
//============================================================================

final void A_PigAttack()
{
	if (UpdateMorphedMonster(18))
	{
		return;
	}
	if (!Target)
	{
		return;
	}
	if (CheckMeleeRange())
	{
		Target.Damage(self, self, 2 + (P_Random() & 1));
		PlaySound('PigAttack', CHAN_VOICE);
	}
}

states
{
Spawn:
	PIGY B 10 A_PigLook
	Loop
See:
	PIGY ABCD 3 A_PigChase
	Loop
Pain:
	PIGY D 4 A_PigPain
	Goto See
Melee:
	PIGY A 5 A_FaceTarget
	PIGY A 10 A_PigAttack
	Goto See
Death:
	PIGY E 4 A_Scream
	PIGY F 3 A_NoBlocking
	PIGY G 4 A_QueueCorpse
	PIGY H 3
	PIGY IJK 4
	PIGY L -1
	Stop
Ice:
	PIGY M 5 A_FreezeDeath
	PIGY M 1 A_FreezeDeathChunks
	Wait
}

defaultproperties
{
	Health = 25;
	Radius = 12.0;
	Height = 22.0;
	Mass = 60.0;
	StepSpeed = 10.0;
	PainChance = 0.5;
	bWindThrust = true;
	bActivateMCross = false;
	bNoMorph = true;
	SightSound = 'PigActive1';
	ActiveSound = 'PigActive';
	PainSound = 'PigPain';
	DeathSound = 'PigDeath';
	Obituary = "$ob_pig";
}
