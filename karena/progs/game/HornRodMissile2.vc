//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class HornRodMissile2 : Projectile;

int RainColor;

//===========================================================================
//
//  A_SkullRodPL2Seek
//
//===========================================================================

void A_SkullRodPL2Seek()
{
	SeekerMissile(10.0, 30.0);
}

//===========================================================================
//
//  A_AddPlayerRain
//
//===========================================================================

void A_AddPlayerRain()
{
	Player player;

	player = Player(Instigator.Player);
	if (!player || !player.bActive)
	{
		// Player left the game
		return;
	}
	if (player.Health <= 0)
	{
		// Player is dead
		return;
	}
	if (player.Rain1 && player.Rain2)
	{
		// Terminate an active rain
		if (player.Rain1.Health < player.Rain2.Health)
		{
			if (player.Rain1.Health > 16)
			{
				player.Rain1.Health = 16;
			}
			player.Rain1 = none;
		}
		else
		{
			if (player.Rain2.Health > 16)
			{
				player.Rain2.Health = 16;
			}
			player.Rain2 = none;
		}
	}
	// Add rain mobj to list
	if (player.Rain1)
	{
		player.Rain2 = self;
	}
	else
	{
		player.Rain1 = self;
	}
}

//===========================================================================
//
//  A_HideInCeiling
//
//===========================================================================

void A_HideInCeiling()
{
	Origin.z = CeilingZ + 4.0;
}

//===========================================================================
//
//  A_SkullRodStorm
//
//===========================================================================

void A_SkullRodStorm()
{
	float x;
	float y;
	Actor A;
	Player player;
	classid rain_type;

	if (Health-- == 0)
	{
		SetState(none);
		player = Player(Instigator.Player);
		if (!player || !player.bActive)
		{
			// Player left the game
			return;
		}
		if (player.Health <= 0)
		{
			// Player is dead
			return;
		}
		if (player.Rain1 == self)
		{
			player.Rain1 = none;
		}
		else if (player.Rain2 == self)
		{
			player.Rain2 = none;
		}
		return;
	}
	if (Random() < 0.1)
	{
		// Fudge rain frequency
		return;
	}
	x = Origin.x + Random() * 128.0 - 64.0;
	y = Origin.y + Random() * 128.0 - 64.0;
	if(Sector->bHasExtrafloors && Origin.z <= CeilingZ)
		A = Spawn(RainPlayer1, vector(x, y, CeilingZ - Height));
	else
		A = Spawn(RainPlayer1, vector(x, y, ONCEILINGZ));
	A.Instigator = Instigator;
	A.Velocity.x = 0.00001;	// Force collision detection
	A.Velocity.z = -A.Speed;
	A.CheckMissileSpawn();
	if (!(_Special1 & 31))
	{
		PlaySound('SkullRodRain', CHAN_VOICE);
	}
	_Special1++;
}

__states__
{
	S_HRODFX2_1('FX00', 2 | FF_FULLBRIGHT, 3.0 / 35.0, S_HRODFX2_2) { }
	S_HRODFX2_2('FX00', 3 | FF_FULLBRIGHT, 3.0 / 35.0, S_HRODFX2_3) { A_SkullRodPL2Seek(); }
	S_HRODFX2_3('FX00', 4 | FF_FULLBRIGHT, 3.0 / 35.0, S_HRODFX2_4) { }
	S_HRODFX2_4('FX00', 5 | FF_FULLBRIGHT, 3.0 / 35.0, S_HRODFX2_1) { A_SkullRodPL2Seek(); }
	S_HRODFXI2_1('FX00', 7 | FF_FULLBRIGHT, 5.0 / 35.0, S_HRODFXI2_2) { A_AddPlayerRain(); }
	S_HRODFXI2_2('FX00', 8 | FF_FULLBRIGHT, 5.0 / 35.0, S_HRODFXI2_3) { }
	S_HRODFXI2_3('FX00', 9 | FF_FULLBRIGHT, 4.0 / 35.0, S_HRODFXI2_4) { }
	S_HRODFXI2_4('FX00', 10 | FF_FULLBRIGHT, 3.0 / 35.0, S_HRODFXI2_5) { }
	S_HRODFXI2_5('FX00', 11 | FF_FULLBRIGHT, 3.0 / 35.0, S_HRODFXI2_6) { }
	S_HRODFXI2_6('FX00', 12 | FF_FULLBRIGHT, 3.0 / 35.0, S_HRODFXI2_7) { }
	S_HRODFXI2_7('FX00', 6, 1.0 / 35.0, S_HRODFXI2_8) { A_HideInCeiling(); }
	S_HRODFXI2_8('FX00', 6, 1.0 / 35.0, S_HRODFXI2_8) { A_SkullRodStorm(); }
}

defaultproperties
{
	Health = 140;
	Radius = 12.0;
	Height = 8.0;
	Speed = 770.0;
	MissileDamage = 20;
	bFireDamage = true;
	IdleState = S_HRODFX2_1;
	DeathState = S_HRODFXI2_1;
	SightSound = 'SkullRodFire';
	DeathSound = 'SkullRodHit';
	Effects = HexenDefs::EF_DL_RED;
}

//**************************************************************************
//
//  $Log$
//  Revision 1.8  2006/03/19 03:45:21  firebrand_kh
//  Fixed 3d floor check
//
//  Revision 1.7  2006/03/12 19:37:08  dj_jl
//  States as objects, added state variable type.
//
//  Revision 1.6  2006/03/11 19:00:47  firebrand_kh
//  Added 3d floor checks
//
//  Revision 1.5  2006/03/02 18:40:23  dj_jl
//  Don't use game specific classes in common.
//
//  Revision 1.4  2006/02/17 19:17:50  dj_jl
//  Moved common defs to classes.
//
//  Revision 1.3  2006/02/15 23:37:45  dj_jl
//  Moved all server progs global variables to classes.
//
//  Revision 1.2  2005/07/27 21:00:06  firebrand_kh
//  Balanced weapon damage rates & mana usage
//
//  Revision 1.1  2004/11/16 13:33:21  dj_jl
//  Initial import.
//
//  Revision 1.3  2003/11/12 16:49:44  dj_jl
//  Changed player structure into a class
//
//  Revision 1.2  2003/03/08 12:34:45  dj_jl
//  Removing class pointers.
//
//  Revision 1.1  2002/10/26 16:32:22  dj_jl
//  New style of defining classes.
//
//**************************************************************************
