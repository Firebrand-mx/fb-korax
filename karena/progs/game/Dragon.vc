//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Dragon:Pawn
	__mobjinfo__(254);

int CrashedState;		//	Maybe it's safe to use CrashState?
Actor FlightTarget;

//============================================================================
//
//	A_DragonInitFlight
//
//============================================================================

void A_DragonInitFlight(void)
{
	int search;

	search = -1;
	do
	{
		// find the first tid identical to the dragon's tid
		FlightTarget = Actor(FindMobjFromTID(TID, &search));
		if (search == -1)
		{
			SetState(IdleState);
			return;
		}
	}
	while (FlightTarget == self);
	RemoveFromTIDList();
}

//============================================================================
//
//	DragonSeek
//
//============================================================================

void DragonSeek(float thresh, float turnMax)
{
	int dir;
	float dist;
	float delta;
	Actor tempTarget;
	int search;
	int i;
	int bestArg;
	float bestAngle;
	float angleToSpot, angleToTarget;
	Actor A;
	Actor oldTarget;

	tempTarget = FlightTarget;
	if (!tempTarget)
	{
		return;
	}
	dir = FaceActor(tempTarget, &delta);
	if (delta > thresh)
	{
		delta /= 2.0;
		if (delta > turnMax)
		{
			delta = turnMax;
		}
	}
	if (dir)
	{
		// Turn clockwise
		Angles.yaw = AngleMod360(Angles.yaw + delta);
	}
	else
	{
		// Turn counter clockwise
		Angles.yaw = AngleMod360(Angles.yaw - delta);
	}
	Velocity.x = Speed * cos(Angles.yaw);
	Velocity.y = Speed * sin(Angles.yaw);
	if (Origin.z + Height < tempTarget.Origin.z ||
		tempTarget.Origin.z + tempTarget.Height < Origin.z)
	{
		dist = MobjDist2(tempTarget, self);
		dist = dist / Speed;
		if (dist < 1.0)
		{
			dist = 1.0;
		}
		Velocity.z = (tempTarget.Origin.z - Origin.z) / dist;
	}
	else
	{
		dist = MobjDist2(tempTarget, self);
		dist = dist / Speed;
	}
	if (tempTarget.bShootable && P_Random() < 64)
	{
		// attack the destination mobj if it's attackable
		if (fabs(AngleMod180(Angles.yaw -
			atan2(tempTarget.Origin.y - Origin.y,
			tempTarget.Origin.x - Origin.x))) < 45.0 / 2.0)
		{
			oldTarget = Enemy;
			Enemy = tempTarget;
			if (CheckMeleeRange())
			{
				Enemy.Damage(self, self, HITDICE(10));
				PlaySound('DragonAttack', CHAN_WEAPON);
			}
			else if (P_Random() < 128 && CheckMissileRange())
			{
				SpawnMissile(tempTarget, DragonMissile);
				PlaySound('DragonAttack', CHAN_WEAPON);
			}
			Enemy = oldTarget;
		}
	}
	if (dist * 35.0 < 4.0)
	{
		// Hit the target thing
		if (Enemy && P_Random() < 200)
		{
			bestArg = -1;
			bestAngle = 360.0;
			angleToTarget = atan2(Enemy.Origin.y - Origin.y,
				Enemy.Origin.x - Origin.x);
			for (i = 0; i < 5; i++)
			{
				if (!tempTarget.Args[i])
				{
					continue;
				}
				search = -1;
				A = Actor(FindMobjFromTID(tempTarget.Args[i], &search));
				angleToSpot = atan2(A.Origin.y - Origin.y,
					A.Origin.x - Origin.x);
				delta = fabs(AngleMod180(angleToSpot - angleToTarget));
				if (delta < bestAngle)
				{
					bestAngle = delta;
					bestArg = i;
				}
			}
			if (bestArg != -1)
			{
				search = -1;
				FlightTarget = Actor(FindMobjFromTID(tempTarget.Args[bestArg],
					&search));
			}
		}
		else
		{
			do
			{
				i = (P_Random() >> 2) % 5;
			}
			while (!tempTarget.Args[i]);
			search = -1;
			FlightTarget = Actor(FindMobjFromTID(tempTarget.Args[i], &search));
		}
	}
}

//============================================================================
//
//	A_DragonFlight
//
//============================================================================

void A_DragonFlight(void)
{
	float angle;

	DragonSeek(4.0, 8.0);
	if (Enemy)
	{
		if (!Enemy.bShootable)
		{
			// enemy died
			Enemy = none;
			return;
		}
		angle = atan2(Enemy.Origin.y - Origin.y, Enemy.Origin.x - Origin.x);
		if (fabs(AngleMod180(Angles.yaw - angle)) < 45.0 / 2.0
			&& CheckMeleeRange())
		{
			Enemy.Damage(self, self, HITDICE(8));
			PlaySound('DragonAttack', CHAN_WEAPON);
		}
		else if (fabs(AngleMod180(Angles.yaw - angle)) <= 20.0)
		{
			SetState(MissileState);
			PlaySound('DragonAttack', CHAN_WEAPON);
		}
	}
	else
	{
		LookForPlayers(true);
	}
}

//============================================================================
//
//	A_DragonFlap
//
//============================================================================

void A_DragonFlap(void)
{
	A_DragonFlight();
	if (P_Random() < 240)
	{
		PlaySound('DragonWingflap', CHAN_BODY);
	}
	else
	{
		PlaySound(ActiveSound, CHAN_VOICE);
	}
}

//============================================================================
//
//	A_DragonAttack
//
//============================================================================

void A_DragonAttack(void)
{
	SpawnMissile(Enemy, DragonMissile);
}

//============================================================================
//
//  A_DragonPain
//
//============================================================================

void A_DragonPain(void)
{
	A_Pain();
	if (!FlightTarget)
	{
		// no destination spot yet
		SetState(SeeState);
	}
}

//============================================================================
//
//	A_DragonCheckCrash
//
//============================================================================

void A_DragonCheckCrash(void)
{
	if (Origin.z <= FloorZ)
	{
		SetState(CrashedState);
	}
}

__states__
{
	S_DRAGON_LOOK1('DRAG', 3, 10.0 / 35.0, S_DRAGON_LOOK1) { A_Look(); }
	S_DRAGON_INIT('DRAG', 2, 5.0 / 35.0, S_DRAGON_INIT2) { }
	S_DRAGON_INIT2('DRAG', 1, 5.0 / 35.0, S_DRAGON_INIT3) { }
	S_DRAGON_INIT3('DRAG', 0, 5.0 / 35.0, S_DRAGON_WALK1) { A_DragonInitFlight(); }
	S_DRAGON_WALK1('DRAG', 1, 3.0 / 35.0, S_DRAGON_WALK2) { A_DragonFlap(); }
	S_DRAGON_WALK2('DRAG', 1, 3.0 / 35.0, S_DRAGON_WALK3) { A_DragonFlight(); }
	S_DRAGON_WALK3('DRAG', 2, 3.0 / 35.0, S_DRAGON_WALK4) { A_DragonFlight(); }
	S_DRAGON_WALK4('DRAG', 2, 3.0 / 35.0, S_DRAGON_WALK5) { A_DragonFlight(); }
	S_DRAGON_WALK5('DRAG', 3, 3.0 / 35.0, S_DRAGON_WALK6) { A_DragonFlight(); }
	S_DRAGON_WALK6('DRAG', 3, 3.0 / 35.0, S_DRAGON_WALK7) { A_DragonFlight(); }
	S_DRAGON_WALK7('DRAG', 2, 3.0 / 35.0, S_DRAGON_WALK8) { A_DragonFlight(); }
	S_DRAGON_WALK8('DRAG', 2, 3.0 / 35.0, S_DRAGON_WALK9) { A_DragonFlight(); }
	S_DRAGON_WALK9('DRAG', 1, 3.0 / 35.0, S_DRAGON_WALK10) { A_DragonFlight(); }
	S_DRAGON_WALK10('DRAG', 1, 3.0 / 35.0, S_DRAGON_WALK11) { A_DragonFlight(); }
	S_DRAGON_WALK11('DRAG', 0, 3.0 / 35.0, S_DRAGON_WALK12) { A_DragonFlight(); }
	S_DRAGON_WALK12('DRAG', 0, 3.0 / 35.0, S_DRAGON_WALK1) { A_DragonFlight(); }
	S_DRAGON_ATK1('DRAG', 4, 8.0 / 35.0, S_DRAGON_WALK1) { A_DragonAttack(); }
	S_DRAGON_PAIN1('DRAG', 5, 10.0 / 35.0, S_DRAGON_WALK1) { A_DragonPain(); }
	S_DRAGON_DEATH1('DRAG', 6, 5.0 / 35.0, S_DRAGON_DEATH2) { A_Scream(); }
	S_DRAGON_DEATH2('DRAG', 7, 4.0 / 35.0, S_DRAGON_DEATH3) { A_NoBlocking(); }
	S_DRAGON_DEATH3('DRAG', 8, 4.0 / 35.0, S_DRAGON_DEATH4) { }
	S_DRAGON_DEATH4('DRAG', 9, 4.0 / 35.0, S_DRAGON_DEATH4) { A_DragonCheckCrash(); }
	S_DRAGON_CRASH1('DRAG', 10, 5.0 / 35.0, S_DRAGON_CRASH2) { }
	S_DRAGON_CRASH2('DRAG', 11, 5.0 / 35.0, S_DRAGON_CRASH3) { }
	S_DRAGON_CRASH3('DRAG', 12, -1.0, S_NULL) { }
}

defaultproperties
{
	Health = 640;
	Radius = 20.0;
	Height = 65.0;
	Mass = 99999.0;
	Speed = 350.0;
	PainChance = 0.5;
	bNoGravity = true;
	bFloat = true;
	bNoBlood = true;
	bBoss = true;
	bFloorClip = false;
	bTelestomp = false;
	bActivatePushWall = false;
	bActivateMCross = false;
	IdleState = S_DRAGON_LOOK1;
	SeeState = S_DRAGON_INIT;
	MissileState = S_DRAGON_ATK1;
	PainState = S_DRAGON_PAIN1;
	DeathState = S_DRAGON_DEATH1;
	CrashedState = S_DRAGON_CRASH1;
	SightSound = 'DragonSight';
	ActiveSound = 'DragonActive';
	AttackSound = 'DragonAttack';
	PainSound = 'DragonPain';
	DeathSound = 'DragonDeath';
}

//**************************************************************************
//
//  $Log$
//  Revision 1.1  2004/11/16 13:33:21  dj_jl
//  Initial import.
//
//  Revision 1.1  2002/10/26 16:32:26  dj_jl
//  New style of defining classes.
//
//**************************************************************************
