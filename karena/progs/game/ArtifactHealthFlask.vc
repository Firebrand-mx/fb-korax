//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class ArtifactHealthFlask : Pickup
	__mobjinfo__(82);

//==========================================================================
//
//  TouchSpecial
//
//==========================================================================

void TouchSpecial(Actor Toucher)
{
	PlayerPawn P;

	if (!Toucher.bPickUp)
	{
		// Can't be picked up by toucher
		return;
	}
	if (Toucher.Health <= 0)
	{
		// Toucher is dead
		return;
	}
	P = PlayerPawn(Toucher);
	if (!P)
	{
		//	Shouldn't happen
		return;
	}
	if (!P.Player.GiveBody(25))
	{
		return;
	}
	cprint(P.Player, TXT_ARTIHEALTH);
	if (Special)
	{
		ExecuteLineSpecial(Special, &Args[0], NULL, 0, P);
		Special = 0;
	}
	if (deathmatch && !bDropped)
	{
		HideSpecial();
	}
	else
	{
		// [FB] KA always wants to make items respawn
		if(!bDropped)
			HideSpecial();
		//Remove();
	}
	P.Player.BonusFlash += BONUSADD;
	P.PlaySound('PickupItem', CHAN_ITEM);
}

__states__
{
	S_ARTI_PTN2_1('PTN2', 0, 4.0 / 35.0, S_ARTI_PTN2_2) { }
	S_ARTI_PTN2_2('PTN2', 1, 4.0 / 35.0, S_ARTI_PTN2_3) { }
	S_ARTI_PTN2_3('PTN2', 2, 4.0 / 35.0, S_ARTI_PTN2_1) { }
}

defaultproperties
{
	//ArtifactType = arti_health;
	bFloatBob = true;
	IdleState = S_ARTI_PTN2_1;
}

//**************************************************************************
//
//  $Log$
//  Revision 1.3  2005/11/30 23:53:37  dj_jl
//  Switch statement requires integer.
//
//  Revision 1.2  2005/08/08 18:16:51  firebrand_kh
//  Took out model definitions
//
//  Revision 1.1  2004/11/16 13:33:20  dj_jl
//  Initial import.
//
//  Revision 1.1  2002/10/26 16:32:26  dj_jl
//  New style of defining classes.
//
//**************************************************************************
