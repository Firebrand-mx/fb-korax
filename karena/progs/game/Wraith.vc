//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Wraith : Actor
	__mobjinfo__(34)
	__scriptid__(8);

//
// Wraith Variables
//

int WeaveIndex;		//	Internal index into floatbob

//==========================================================================
//
//  A_WraithInit
//
//==========================================================================

final void A_WraithInit()
{
	Origin.z += 48.0;
	WeaveIndex = 0;	// index into floatbob
}

//==========================================================================
//
//  A_WraithFX3
//
//  Spawn an FX3 around the actor during attacks.
//
//==========================================================================

final void A_WraithFX3()
{
	Actor A;
	int numdropped = P_Random() % 15;
	int i;

	for (i = 0; i < numdropped; i++)
	{
		A = Spawn(WraithFX3, Origin);
		if (A)
		{
			A.Origin.x += (Random() - 0.5) * 8.0;
			A.Origin.y += (Random() - 0.5) * 8.0;
			A.Origin.z += Random() * 4.0;
			A.Target = self;
		}
	}
}

//==========================================================================
//
//  A_WraithFX4
//
//  Spawn an FX4 during movement.
//
//==========================================================================

final void A_WraithFX4()
{
	Actor mo;
	int chance = P_Random();
	int spawn4, spawn5;

	if (chance < 10)
	{
		spawn4 = true;
		spawn5 = false;
	}
	else if (chance < 20)
	{
		spawn4 = false;
		spawn5 = true;
	}
	else if (chance < 25)
	{
		spawn4 = true;
		spawn5 = true;
	}
	else
	{
		spawn4 = false;
		spawn5 = false;
	}

	if (spawn4)
	{
		mo = Spawn(WraithFX4, Origin);
		if (mo)
		{
			mo.Origin.x += (Random() - 0.5) * 16.0;
			mo.Origin.y += (Random() - 0.5) * 16.0;
			mo.Origin.z += Random() * 4.0;
			mo.Target = self;
		}
	}
	if (spawn5)
	{
		mo = Spawn(WraithFX5, Origin);
		if (mo)
		{
			mo.Origin.x += (Random() - 0.5) * 8.0;
			mo.Origin.y += (Random() - 0.5) * 8.0;
			mo.Origin.z += Random() * 4.0;
			mo.Target = self;
		}
	}
}

//==========================================================================
//
//  A_WraithLook
//
//==========================================================================

final void A_WraithLook()
{
//	A_WraithFX4();             // too expensive
	A_Look();
}

//==========================================================================
//
//  A_WraithChase
//
//==========================================================================

final void A_WraithChase()
{
	Origin.z += Level.Game.FloatBobOffsets[WeaveIndex];
	WeaveIndex = (WeaveIndex + 2) & 63;
//  if (actor->FloorClip > 0)
//  {
//      SetState(S_WRAITH_RAISE2);
//      return;
//  }
	A_Chase();
	A_WraithFX4();
}

//==========================================================================
//
//  A_WraithMelee
//
//==========================================================================

final void A_WraithMelee()
{
	int amount;

	// Steal health from enemy and give to player
	if (CheckMeleeRange() && (P_Random() < 220))
	{
		amount = HITDICE(2);
		Target.Damage(self, self, amount);
		Health += amount;
	}
}

//==========================================================================
//
//  A_WraithMissile
//
//==========================================================================

final void A_WraithMissile()
{
	SpawnMissile(Target, WraithFX1);
}

states
{
Spawn:
	WRTH A 10
	WRTH B 5 A_WraithInit
	WRTH AB 15 A_WraithLook
	Goto Spawn+2
See:
	WRTH ABCD 4 A_WraithChase
	Loop
Melee:
	WRTH E 6 A_FaceTarget
	WRTH F 6 A_WraithFX3
	WRTH G 6 A_WraithMelee
	Goto See
Missile:
	WRTH E 6 A_FaceTarget
	WRTH F 6
	WRTH G 6 A_WraithMissile
	Goto See
Pain:
	WRTH A 2
	WRTH H 6 A_Pain
	Goto See
Death:
	WRTH I 4
	WRTH J 4 A_Scream
	WRTH KL 4
	WRTH M 4 A_NoBlocking
	WRTH N 4 A_QueueCorpse
	WRTH O 4
	WRTH PQ 5
	WRTH R -1
	Stop
XDeath:
	WRT2 A 5
	WRT2 B 5 A_Scream
	WRT2 CD 5
	WRT2 E 5 A_NoBlocking
	WRT2 F 5 A_QueueCorpse
	WRT2 G 5
	WRT2 H -1
	Stop
Ice:
	WRT2 I 5 A_FreezeDeath
	WRT2 I 1 A_FreezeDeathChunks
	Wait
}

defaultproperties
{
	bSolid = true;
	bShootable = true;
	bCountKill = true;
	bMonster = true;
	bActivatePushWall = true;
	bActivateMCross = true;
	bPassMobj = true;
	bCanUseWalls = true;

	bFloorClip = true;
	bTelestomp = true;

	Health = 150;
	GibsHealth = -75;
	Radius = 20.0;
	Height = 55.0;
	Mass = 75.0;
	Speed = 11.0 * 35.0;
	PainChance = 0.09765625;
	MissileDamage = 10;
	bNoGravity = true;
	bDropOff = true;
	bFloat = true;
	bActivateMCross = false;
	SightSound = 'WraithSight';
	ActiveSound = 'WraithActive';
	AttackSound = 'WraithAttack';
	PainSound = 'WraithPain';
	DeathSound = 'WraithDeath';
	HitObituary = "%s's life was drained by a reiver";
	Obituary = "%s was fragged by a reiver's magic bolt";
}
