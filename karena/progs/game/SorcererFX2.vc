//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class SorcererFX2 : Effect;

//==========================================================================
// Blue spell - defense
//==========================================================================
//
// FX2 Variables
//      Special1f       current angle
//      Args[0]     0 = CW,  1 = CCW
//==========================================================================

state OrbitState;

//==========================================================================
//
//  A_SorcFX2Split
//
//  Split ball in two
//
//==========================================================================

final void A_SorcFX2Split()
{
	Actor A;

	A = Spawn(SorcererFX2, Origin);
	if (A)
	{
		A.Instigator = Instigator;
		A.Args[0] = 0;	// CW
		A.Special1f = Angles.yaw;	// Set angle
		A.SetState(SorcererFX2(A).OrbitState);
	}
	A = Spawn(SorcererFX2, Origin);
	if (A)
	{
		A.Instigator = Instigator;
		A.Args[0] = 1;	// CCW
		A.Special1f = Angles.yaw;	// Set angle
		A.SetState(SorcererFX2(A).OrbitState);
	}
	SetState(none);
}

//==========================================================================
//
//  A_SorcFX2Orbit
//
//  Orbit FX2 about sorcerer
//
//==========================================================================

final void A_SorcFX2Orbit()
{
	float angle;
	float x, y, z;
	float dist = Instigator.Radius;

	if ((Instigator.Health <= 0) ||	// Sorcerer is dead
		(!Instigator.Args[0]))	// Time expired
	{
		SetState(DeathState);
		Instigator.Args[0] = 0;
		Instigator.bReflective = false;
		Instigator.bInvulnerable = false;
	}

	if (Args[0] && (Instigator.Args[0]-- <= 0))	// Time expired
	{
		SetState(DeathState);
		Instigator.Args[0] = 0;
		Instigator.bReflective = false;
	}

	// Move to new position based on angle
	if (Args[0])	// Counter clock-wise
	{
		Special1f = AngleMod360(Special1f + 10.0);
		angle = Special1f;
		x = Instigator.Origin.x + dist * cos(angle);
		y = Instigator.Origin.y + dist * sin(angle);
		z = Instigator.Origin.z - Instigator.FloorClip + Sorcerer::SORC_DEFENSE_HEIGHT;
		z += 15.0 * cos(angle);
		// Spawn trailer
		Spawn(SorcererFX2_T1, vector(x, y, z));
	}
	else	// Clock wise
	{
		Special1f = AngleMod360(Special1f - 10.0);
		angle = Special1f;
		x = Instigator.Origin.x + dist * cos(angle);
		y = Instigator.Origin.y + dist * sin(angle);
		z = Instigator.Origin.z - Instigator.FloorClip + Sorcerer::SORC_DEFENSE_HEIGHT;
		z += 20.0 * sin(angle);
		// Spawn trailer
		Spawn(SorcererFX2_T1, vector(x, y, z));
	}

	Origin.x = x;
	Origin.y = y;
	Origin.z = z;
}

__states__
{
	S_SORCFX2_SPLIT1('SBS2', 0 | FF_FULLBRIGHT, 3.0 / 35.0, S_SORCFX2_SPLIT1) = A_SorcFX2Split
	S_SORCFX2_ORBIT1_NF('SBS2', 0 | FF_FULLBRIGHT, 2.0 / 35.0, S_SORCFX2_ORBIT2) = none
	S_SORCFX2_ORBIT1('SBS2', 0 | FF_FULLBRIGHT, 2.0 / 35.0, S_SORCFX2_ORBIT2) = A_SorcFX2Orbit
	S_SORCFX2_ORBIT2('SBS2', 1 | FF_FULLBRIGHT, 2.0 / 35.0, S_SORCFX2_ORBIT3) = A_SorcFX2Orbit
	S_SORCFX2_ORBIT3('SBS2', 2 | FF_FULLBRIGHT, 2.0 / 35.0, S_SORCFX2_ORBIT4) = A_SorcFX2Orbit
	S_SORCFX2_ORBIT4('SBS2', 3 | FF_FULLBRIGHT, 2.0 / 35.0, S_SORCFX2_ORBIT5) = A_SorcFX2Orbit
	S_SORCFX2_ORBIT5('SBS2', 4 | FF_FULLBRIGHT, 2.0 / 35.0, S_SORCFX2_ORBIT6) = A_SorcFX2Orbit
	S_SORCFX2_ORBIT6('SBS2', 5 | FF_FULLBRIGHT, 2.0 / 35.0, S_SORCFX2_ORBIT7) = A_SorcFX2Orbit
	S_SORCFX2_ORBIT7('SBS2', 6 | FF_FULLBRIGHT, 2.0 / 35.0, S_SORCFX2_ORBIT8) = A_SorcFX2Orbit
	S_SORCFX2_ORBIT8('SBS2', 7 | FF_FULLBRIGHT, 2.0 / 35.0, S_SORCFX2_ORBIT9) = A_SorcFX2Orbit
	S_SORCFX2_ORBIT9('SBS2', 8 | FF_FULLBRIGHT, 2.0 / 35.0, S_SORCFX2_ORBIT0) = A_SorcFX2Orbit
	S_SORCFX2_ORBIT0('SBS2', 9 | FF_FULLBRIGHT, 2.0 / 35.0, S_SORCFX2_ORBITA) = A_SorcFX2Orbit
	S_SORCFX2_ORBITA('SBS2', 10 | FF_FULLBRIGHT, 2.0 / 35.0, S_SORCFX2_ORBITB) = A_SorcFX2Orbit
	S_SORCFX2_ORBITB('SBS2', 11 | FF_FULLBRIGHT, 2.0 / 35.0, S_SORCFX2_ORBITC) = A_SorcFX2Orbit
	S_SORCFX2_ORBITC('SBS2', 12 | FF_FULLBRIGHT, 2.0 / 35.0, S_SORCFX2_ORBITD) = A_SorcFX2Orbit
	S_SORCFX2_ORBITD('SBS2', 13 | FF_FULLBRIGHT, 2.0 / 35.0, S_SORCFX2_ORBITE) = A_SorcFX2Orbit
	S_SORCFX2_ORBITE('SBS2', 14 | FF_FULLBRIGHT, 2.0 / 35.0, S_SORCFX2_ORBITF) = A_SorcFX2Orbit
	S_SORCFX2_ORBITF('SBS2', 15 | FF_FULLBRIGHT, 2.0 / 35.0, S_SORCFX2_ORBIT1) = A_SorcFX2Orbit
	S_SORCFX2_DEATH('SBS2', 0, 10.0 / 35.0, none) = none
}

defaultproperties
{
	Radius = 5.0;
	Height = 5.0;
	Speed = 525.0;
	bNoTeleport = true;
	IdleState = S_SORCFX2_SPLIT1;
	OrbitState = S_SORCFX2_ORBIT1_NF;
	DeathState = S_SORCFX2_DEATH;
}
