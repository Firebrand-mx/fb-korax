//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**	        ##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id$
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class KArenaWeapon : Weapon
	abstract;

//	Third ammo ... I mean mana.
class<Ammo>		AmmoType3;
int				AmmoGive3;
int				AmmoUse3;
Ammo			Ammo3;

bool			dex_mod;
bool			str_mod;
bool			int_mod;
bool			wis_mod;
bool			active_damage; 	// [FB] TRUE if PI Damage is active

bool			bInstantRanged;
TVec			ShotPosition;	// [CW]

// [CW] Weapon Obituary, melee weapon uses this directly, ranged ones
// assign this to spawned missiles
string			MeleeObituary;
string			RangedObituary;

// --------------------
// -- Bot AI stuff --
// --------------------

// Bot AI flags
bool			bBotChooseMelee;
bool			bBotChooseMedium;
bool			bBotChooseRanged;
// Fire & Refire tics
float			fire_tics;
float			refire_tics;

//	We need this for weapon pickups, leave for other weapons for now.
int				Slot;

//==========================================================================
//
//	HandlePickup
//
//	In Korax Arena weapons pickups and actual weapon classes are different,
// so we are using a different pickup handling.
//
//==========================================================================

bool HandlePickup(Inventory Item)
{
	if (Item.Class == Class)
	{
		//	Actual weapon classes are used only internally to give weapons,
		// so just ignore it.
		return true;
	}

	if (WeaponPickup(Item) && KArenaPlayerPawn(Owner) &&
		KArenaPlayerPawn(Owner).WeaponClasses[WeaponPickup(Item).Slot - 1] == Class)
	{
		//	It's a weapon pickup that will give this weapon, so just pick it
		// up for more mana.
		if (WeaponPickup(Item).PickupForMana(EntityEx(Owner)))
		{
			Item.bPickupGood = true;
		}
		return true;
	}

	if (Inventory)
	{
		return Inventory.HandlePickup(Item);
	}
	return false;
}

//==========================================================================
//
//	AttachToOwner
//
//==========================================================================

void AttachToOwner(EntityEx NewOwner)
{
	::AttachToOwner(NewOwner);

	Ammo3 = AddAmmo(NewOwner, AmmoType3, AmmoGive3);
}

//==========================================================================
//
//	SnoutSniff
//
//==========================================================================

// FIXME
void SnoutSniff()
{
}

//==========================================================================
//
//  GetManaUse
//
//==========================================================================

final int GetManaUse(int manause)
{
	if (wis_mod)
	{
		manause = manause * 10 / Player(Owner.Player).wisdom;
	}
	// [FB] Always use mana, no matter what
	if(manause < 1)
	{
		manause = 1;
	}
	return manause;
}

//==========================================================================
//
//  CheckAmmo
//
//  Returns true if there is enough mana to shoot.  If not, selects the
// next weapon to use.
//
//==========================================================================

bool CheckAmmo(byte Mode, bool AutoSwitch, optional bool RequireAmmo)
{
	if (!RequireAmmo && bAmmoOptional)
	{
		return true;
	}
	bool Good = true;
	if (Ammo1 && Ammo1.Amount < GetManaUse(AmmoUse1))
	{
		Good = false;
	}
	if (Ammo2 && Ammo2.Amount < GetManaUse(AmmoUse2))
	{
		Good = false;
	}
	if (Ammo3 && Ammo3.Amount < GetManaUse(AmmoUse3))
	{
		Good = false;
	}
	if (Good)
	{
		return true;
	}
	if (!AutoSwitch)
	{
		return false;
	}
	Player(Owner.Player).centreprint("No mana");

	// out of mana, pick a weapon to change to
	Weapon Best = Player(Owner.Player).BestWeapon();

	Player(Owner.Player).PendingWeapon = Best;
	Player(Owner.Player).SetViewState(ps_weapon, GetDownState());
	return false;
}

//==========================================================================
//
//  UseWeaponMana
//
//==========================================================================

final void UseWeaponMana()
{
	if (Ammo1)
	{
		Ammo1.Amount -= GetManaUse(AmmoUse1);
		if (Ammo1.Amount < 0)
		{
			Ammo1.Amount = 0;
		}
	}
	if (Ammo2)
	{
		Ammo2.Amount -= GetManaUse(AmmoUse2);
		if (Ammo2.Amount < 0)
		{
			Ammo2.Amount = 0;
		}
	}
	if (Ammo3)
	{
		Ammo3.Amount -= GetManaUse(AmmoUse3);
		if (Ammo3.Amount < 0)
		{
			Ammo3.Amount = 0;
		}
	}
}

//===========================================================================
//
//  GunShot1 (Used for the pistol)
//
//===========================================================================

final void GunShot1(EntityEx A, int accurate, TVec dir)
{
	int damage;

	//  Make a copy of angles because inacurate shoot will modify them
	if (!accurate)
	{
		TAVec angles;

		VectorAngles(&dir, &angles);
		angles.yaw = AngleMod360(angles.yaw +
			(Random() - Random()) * 45.0 / 8.0);
		AngleVector(&angles, &dir);
	}

	damage = 10;//5 * (P_Random() % 3 + 1);
	ApplyDamageModifiers(damage);

	ShotPosition = Player(Owner.Player).MO.Origin;	// [CW]
	A.LineAttack(dir, MISSILERANGE, damage, DoomPuff);
}

//===========================================================================
//
//  GunShot2 (Used for the chaingun)
//
//===========================================================================

final void GunShot2(EntityEx A, int accurate, TVec dir)
{
	int damage;

	//  Make a copy of angles because inacurate shoot will modify them
	if (!accurate)
	{
		TAVec angles;

		VectorAngles(&dir, &angles);
		angles.yaw = AngleMod360(angles.yaw +
			(Random() - Random()) * 45.0 / 8.0);
		AngleVector(&angles, &dir);
	}

	damage = 14;//7 * (P_Random() % 3 + 1);

	ApplyDamageModifiers(damage);

	ShotPosition = Player(Owner.Player).MO.Origin;	// [CW]
	A.LineAttack(dir, MISSILERANGE, damage, DoomPuff);
}

//===========================================================================
//
//  ApplyDamageModifiers
//
//===========================================================================

final void ApplyDamageModifiers(out int damage)
{
	if (str_mod)
		damage = damage * Player(Owner.Player).strength / 10;
	if (int_mod)
		damage = damage * Player(Owner.Player).intelligence / 10;

	// PI Damage
	if(active_damage)
		damage *= ftoi(3.1415);
}

defaultproperties
{
}
