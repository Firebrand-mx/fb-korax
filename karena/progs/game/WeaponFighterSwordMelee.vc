//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**		##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id$
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class WeaponFighterSwordMelee : KArenaWeapon;

const float SwordRange = MELEERANGE + MELEERANGE;

//==========================================================================
//
//  A_FSwordMeleeAttack
//
//==========================================================================

final void A_FSwordMeleeAttack() self(KArenaPlayerPawn)
{
	Actor		pmo = Actor(Owner);
	float		power;
	int			damage;
	TAVec		angles;
	TVec		vforward;
	EntityEx	AimTarget;

	if (!bIsPlayer)
	{
		return;
	}
	KArenaWeapon Wpn = KArenaWeapon(PlayerEx(Player).ReadyWeapon);

	damage = 125; //100 + (P_Random() & 30) + (P_Random() & 15);
	Wpn.ApplyDamageModifiers(damage);
	power = 0.0;
	AimTarget = AimEx(vforward, WeaponFighterSwordMelee::SwordRange, 45.0 / 16.0, 16, MELEERANGE);
	if (AimTarget)
	{
		VectorAngles(&vforward, &angles);
		if (LineAttack(vforward, WeaponFighterSwordMelee::SwordRange, damage, AxePuff))
		{
			PlaySound('FighterHammerMiss', CHAN_WEAPON);
		}
		if (AimTarget.bMonster || AimTarget.bIsPlayer)
		{
			AimTarget.Thrust(angles.yaw, power);
		}
		Player(Player).AdjustPlayerAngle(AimTarget);
		Wpn.UseWeaponMana();
	}
	else
	{
		// didn't find any creatures, so try to strike any walls
		if (LineAttack(vforward, MELEERANGE, damage, AxePuff))
		{
			PlaySound('FighterHammerMiss', CHAN_WEAPON);
		}
	}
}

states
{
Ready:
	FSD2 A 1 A_WeaponReady
	Loop
Deselect:
	FSD2 A 1 A_Lower
	Loop
Select:
	FSD2 A 1 A_Raise
	Loop
Fire:
	FSD2 B 4 Offset(15, 32)
	FSD2 C 3 Offset(15, 32)
	FSD2 D 2 Offset(15, 32)
	FSD2 D 1 Offset(-5, 70) A_FSwordMeleeAttack
	FSD2 D 2 Offset(-25, 90)
	FSD2 E 1 Offset(15, 32)
	FSD2 E 2 Offset(10, 54)
	FSD2 E 7 Offset(10, 150)
	FSD2 A 1 Offset(0, 60) A_ReFire
	FSD2 A 1 Offset(0, 52)
	FSD2 A 1 Offset(0, 44)
	FSD2 A 1 Offset(0, 36)
	FSD2 A 1
	Goto Ready
}

/* SEVENTH */
defaultproperties
{
	Slot = 7;
	SelectionOrder = 1100;
	AmmoType1 = ItemManaRed;
	AmmoUse1 = 50;
	PSpriteSY = 12.0;
	BotCombatDist = MELEERANGE + MELEERANGE;
	wis_mod = true;
	int_mod = false;
	dex_mod = true;
	str_mod = true;
	bBotChooseMelee = true;
	bBotChooseMedium = false;
	bBotChooseRanged = false;
	bFireDamage = false;
	PickupMessage = "HALF QUIETUS";
	refire_tics = 23.0;
	fire_tics = 10.0;
	HitObituary = "$ob_quietusmelee";
}
