//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**	        ##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id: CTFBanner.vc 696 2007-01-13 21:44:38Z dj_jl $
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class CTFBanner : Actor
	__mobjinfo__(15022);

// Banner status
enum
{
	BANNER_STATUS__BASE,			// Standing on the base spot, ready to be captured
	BANNER_STATUS__CARRIED,			// Carried by capturer
	BANNER_STATUS__LOST,			// Dropped somewhere on level
	BANNER_STATUS__BEING_RETURNED	// Flying home (just in case we'll use delayed respawn for any reason)
};

const float		AUTORESPAWN_DELAY	= 120.0 * 35.0;	// 2 minutes

PlayerTeam	Team;		// Which team this banner do belong
						// (theoretically can be changed during game for some weird gameplay effect... (: )
CTFBase		BaseOrigin;	// This Banner's Base; it spawns and respawns here
Player		Capturer;	// A player who is carrying this banner
int			Status;		// Current status (on base, carried, lost).
float		lost_timer;
bool		TransSet;

//==========================================================================
//
//	Activate
//
//==========================================================================

bool Activate(EntityEx Activator)
{
	bDormant = false;
	bInvisible = false;
	return true;
}

//==========================================================================
//
//	Deactivate
//
//==========================================================================

bool Deactivate(EntityEx Activator)
{
	bDormant = true;
	bInvisible = true;
	return true;
}

//==========================================================================
//
//	IsTouched
//
//	[CW]
//
//==========================================================================

bool IsTouched(Entity Toucher)
{
	if (bDormant)
		return true;

	GameCTF CTF = GameCTF(MainGameInfo(Level.Game).GameModel);
	if (CTF && CTF.IsInPlayableState())
	{
		if(Toucher && Toucher.Player && Toucher.Player.Health > 0)
		{
			if (Status != BANNER_STATUS__CARRIED && Status != BANNER_STATUS__BEING_RETURNED)
			{
				// First, we check if a toucher is of the defending team or offending team
				if (Player(Toucher.Player).Team == Team)
				{
					// Defender; if a banner is not on its Base, it should be returned there at once
					if (Status == BANNER_STATUS__LOST)
					{
						ReturnToBase(Toucher, false);
						Toucher.PlaySound('misc/p_pkup', CHAN_AUTO);
					}
					// Elsewise banner is on base; check if defender is carrying captured opponents' flag
					else
					{
						int i;
						for (i = 0; i < GameCTF::MAXBANNERS; i++)
						{
							if (CTF.Banners[i] && CTF.Banners[i] != self &&
								CTF.Banners[i].Capturer == Player(Toucher.Player))
							{
								CTF.CommitCapture(CTF.Banners[i]);
								Toucher.PlaySound('misc/p_pkup', CHAN_AUTO);
							}
						}						
					}
				}
				else
				{
					// Offender, capture the flag
					CaptureBy(Toucher);
					Toucher.PlaySound('misc/p_pkup', CHAN_AUTO);
				}
			}
		}
	}
	return true;
}

//==========================================================================
//
//	CaptureBy
//
//	[CW] Called when offending player gets the idle banner.
//
//==========================================================================

void CaptureBy(Entity newCapturer)
{
	if (bDormant)
		return;

	if(!newCapturer || !newCapturer.Player)
		return;

	GameCTF CTF = GameCTF(MainGameInfo(Level.Game).GameModel);
	if (CTF && CTF.IsInPlayableState())
	{
		int i;
		MainGameInfo(Level.Game).bcentreprint(va("%s got the %s flag!",
									newCapturer.Player.PlayerName,
									Team.Name /* MainGameInfo(Level.Game).ColourNames[Team.Colour]*/));
		Capturer = Player(newCapturer.Player);
		Capturer.Banner = self;

		//[FB] We need to let the bots know they must return to their own goal spot
		if(Capturer.bIsBot)
			Capturer.Bot.botstate.BState = BotPlayer::bst_scoring;

		Status = BANNER_STATUS__CARRIED;

		for (i = 0; i < Team.GetPlayerCount(); i++)
		{
			Team.Players[i].BannerStatus = Status;
		}
	}
}

//==========================================================================
//
//	ReturnToBase
//
//	[CW]
//
//==========================================================================

void ReturnToBase(Entity Savior, bool silent)
{
	if (bDormant)
		return;

	GameCTF CTF = GameCTF(MainGameInfo(Level.Game).GameModel);
	if (CTF && CTF.IsInPlayableState())
	{
		int i;

		if (!silent)
		{
			if (Savior && Savior.Player)
			{
				Player(Savior.Player).UpdateScore(HexenDefs::scoreevent_CtfSaveFlag);
				MainGameInfo(Level.Game).bcentreprint(va("%s returned %s flag!",
							Savior.Player.PlayerName,
							Team.Name /* MainGameInfo(Level.Game).ColourNames[Team.Colour]*/));
			}
			else
				MainGameInfo(Level.Game).bcentreprint(va("%s flag returned to the base",
							Team.Name /* MainGameInfo(Level.Game).ColourNames[Team.Colour]*/));
		}
		
		Status = BANNER_STATUS__BEING_RETURNED;
		//[FB] We need to let the bots know they must get on deciding state again
		if(Capturer)
		{
			if (Capturer.bIsBot)
				Capturer.Bot.botstate.BState = BotPlayer::bst_decide;
			Capturer.Banner = none;
		}

		Capturer = none;
		bColideWithThings = false;	// we don't want to stomp anything... banner shouldn't act this way
		dprint("ReturnToBase : BaseOrigin = %i", BaseOrigin);
		Teleport(BaseOrigin.Origin, BaseOrigin.Angles.yaw, !silent, !silent && Savior, false);
		bColideWithThings = true;
		Status = BANNER_STATUS__BASE;

		for (i = 0; i < Team.GetPlayerCount(); i++)
		{
			Team.Players[i].BannerStatus = Status;
		}
	}
}

//==========================================================================
//
//	WasLost
//
//	[CW] Should be called by GameCTF from notifyPlayerDeath, when this banner's capturer is killed.
//
//==========================================================================

void WasLost()
{
	if (bDormant)
		return;

	GameCTF CTF = GameCTF(MainGameInfo(Level.Game).GameModel);
	if (CTF && CTF.IsInPlayableState())
	{
		int i;

		MainGameInfo(Level.Game).bcentreprint(va("%s dropped the %s flag!",
									Capturer.PlayerName,
									Team.Name /* MainGameInfo(Level.Game).ColourNames[Team.Colour]*/));
		//[FB] We need to let the bots know they must get on deciding state again
		if(Capturer)
		{
			if (Capturer.bIsBot)
				Capturer.Bot.botstate.BState = BotPlayer::bst_decide;
			Capturer.Banner = none;
		}

		Capturer = none;
		lost_timer = AUTORESPAWN_DELAY;
		Status = BANNER_STATUS__LOST;

		for (i = 0; i < Team.GetPlayerCount(); i++)
		{
			Team.Players[i].BannerStatus = Status;
		}
	}
}

//==========================================================================
//
//	Physics
//
//==========================================================================

bool Physics(float DeltaTime)
{
	// Carried flag should follow capturer
	if (Status == BANNER_STATUS__CARRIED)
	{
		UnlinkFromWorld();
		if (Capturer)
		{
			TVec forward;
			Origin = Capturer.MO.Origin;
			Origin.z = Origin.z + Capturer.MO.Height;
			AngleVector(&Capturer.MO.Angles, &forward);
			VectorRotateAroundZ(&forward, -90.0);
			forward = forward * (Capturer.MO.Radius / 2.0);
			Origin += forward;
		}
		LinkToWorld();
		return true;
	}
	else
		return ::Physics(DeltaTime);
}

//==========================================================================
//
//	SetTranslation
//
//	[FB] Set the team colour for this Banner
//
//==========================================================================

void SetTranslation()
{
	GameCTF CTF = GameCTF(MainGameInfo(Level.Game).GameModel);

	if (!Team)
		return;

	if (CTF && CTF.IsInPlayableState())
	{
		// [CW] Huh, another change
		/*//
		// [CW] I am changing how it works; moved actual translation setting to
		//		LevelInfo class, mainly because not only Banner, but Colored Decor
		//		uses this as well.
		//
		//HexenLevelInfo(Level).SetTeamTranslation(Team.Index, TID);*/
		CTF.HandleEvent(GameCTF::event_colortranslation, none, Team.Index, TID, 0,0);
		
		TransSet = true;
	}
}

//==========================================================================
//
//	Tick
//
//==========================================================================

void Tick(float deltaTime)
{
	if (!TransSet)
		SetTranslation();

	// Lost flag counts a timer down until auto-respawn; it also should be returned in case it was dropped in dangerous area
	if (Status == BANNER_STATUS__LOST)
	{
		lost_timer -= deltaTime;
		if (lost_timer <= 0.0)
			ReturnToBase(none, false);
	}

	::Tick(deltaTime);
}

states
{
Spawn:
	FLAG FEDCBA 3
	Loop
}

defaultproperties
{
	Radius = 32.0;
	Height = 120.0;
	bSolid = false;
}
