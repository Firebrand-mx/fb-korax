//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**		##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id: GameXmasHavoc.vc 508 2006-07-10 19:02:43Z firebrand_kh $
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class GameXmasHavoc : GameModel;

enum
{
	event_snowfallcommence		= GameModel::event_custom,
	num_xmashavocevents	= event_snowfallcommence - GameModel::event_custom + 1
};

acsnotifier_t	AcsNotifiersXmasHavoc[num_xmashavocevents];

int TotalBurnt;
bool bSnowSpawned;

//==========================================================================
//
//	IsInPlayableState
//
//==========================================================================

bool IsInPlayableState()
{
	return true;
}

//==========================================================================
//
//	NotifySpawnPlayer
//
//==========================================================================

void NotifyPlayerSpawn(Player pl)
{
	if (IsInPlayableState())
		pl.centreprint("burn xmas trees down!");
}

//==========================================================================
//
//	NotifyXMasTreeBurnt
//
//==========================================================================

void NotifyXMasTreeBurnt(ZXmasHavocTree xmtree)
{
	TotalBurnt++;
	if (!bSnowSpawned && TotalBurnt > 100)
	{
		HexenLevelInfo(Level).EV_WeatherSnow(WeatherSnow.default.Amount >> 1,0,0,0,0);
		bSnowSpawned = true;
		NotifyACS(event_snowfallcommence, 0,0,0);
	}
}

//==========================================================================
//
//	HandleEvent
//
//	ACS callable
//
//==========================================================================

void HandleEvent(int Event, EntityEx A, int arg1, int arg2, int arg3, int arg4)
{
	dprint("GameXmasHavoc::HandleEvent : %i", Event);

	switch (Event)
	{
	case event_snowfallcommence:
		break;
	default:
		::HandleEvent(Event, A, arg1, arg2, arg3, arg4);
		return;
	}

	NotifyACS(Event, 0,0,0);
}

//==========================================================================
//
//	SetACSNotifier
//
//	ACS callable
//
//==========================================================================

void SetACSNotifier(int event, int script)
{
	if (event >= GameModel::event_custom && event < event_snowfallcommence + num_xmashavocevents)
	{
		event -= GameModel::event_custom;
		AcsNotifiersXmasHavoc[event].enabled = true;
		AcsNotifiersXmasHavoc[event].script = script;
	}
	else
	{
		::SetACSNotifier(event, script);
	}
}

//==========================================================================
//
//	NotifyACS
//
//==========================================================================

void NotifyACS(int Event, int Arg1, int Arg2, int Arg3)
{
	dprint("GameXmasHavoc::NotifyACS : Event = %i", Event);
	if (Event >= GameModel::event_custom && Event < event_snowfallcommence + num_xmashavocevents)
	{
		Event -= GameModel::event_custom;
		if (AcsNotifiersXmasHavoc[Event].enabled)
		{
			Level.ExecuteActionSpecial(LNSPEC_ACSExecuteAlways,
					AcsNotifiersXmasHavoc[Event].script,
					0,
					Arg1,
					Arg2,
					Arg3,
					NULL, 0, none);
		}
	}
	else
		::NotifyACS(Event, Arg1, Arg2, Arg3);
}

defaultproperties
{
}
