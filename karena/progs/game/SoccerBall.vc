//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**		##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id: SoccerBall.vc 508 2006-07-10 19:02:43Z firebrand_kh $
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class SoccerBall : Actor
	__mobjinfo__(15021);

const int		MINFRAMES_NOKICK				= 4;
const int		MAXFRAMES_TARGETTING			= 9;
const float 	VELPOWER_MULTIPLIER				= 4.0;
const float 	STRENGTHPOWER_MULTIPLIER		= 100.0;
const float		STRENGTHPOWER_HORIZONTAL_FACTOR = 0.5;
const float		STRENGTHPOWER_VERTICAL_FACTOR 	= 1.5;

int	nokick_timer;				// free fly time (to avoid repeatable touch bug)
Player Owner;					// a player who kicked the ball last
bool Rolling;

//==========================================================================
//
//	IsTouched
//
//	[CW]
//
//==========================================================================

bool IsTouched(Entity Toucher)
{
	GameFootball FB = GameFootball(MainGameInfo(Level.Game).GameModel);
	if (FB && FB.IsInPlayableState())
	{
		if(!(nokick_timer && Owner == Toucher.Player)
			&& Toucher.IsA('PlayerPawn') && Toucher.Player.Health > 0)
		{
			DoKick(Player(Toucher.Player));
		}
	}
	return true;
}

//==========================================================================
//
//	DoKick
//
//	[CW]
//
//==========================================================================

void DoKick(Player Kicker)
{
	int i;
	int	playernum;
	float an;
	float van;
	float velpower;
	float strpower;

	Owner = Kicker;
	playernum = Kicker.GetPlayerNum();
	an = AngleMod360(atan2(Kicker.MO.Origin.y - Origin.y, Kicker.MO.Origin.x - Origin.x));
	an += (an < 180.0 ? 180.0 : -180.0);
	van = itof(Kicker.use_power * 10);
	velpower = VELPOWER_MULTIPLIER * Length(Kicker.MO.Velocity) / 100.0;
	if (Kicker.use_power)
	{
		strpower = STRENGTHPOWER_MULTIPLIER * itof(Kicker.strength) / 100.0;
	}
	else
	{
		strpower = 0.0;
	}

	Thrust(an, velpower + strpower * cos(van) * STRENGTHPOWER_HORIZONTAL_FACTOR);
	Velocity.z += strpower * sin(van) * 35.0 * STRENGTHPOWER_VERTICAL_FACTOR;

	nokick_timer = MINFRAMES_NOKICK;
	Kicker.use_power = 0;
}

//============================================================================
//
// A_LetKick
//
// [CW] Using modified Firebrand's original function --->
// [FB] ...the method that makes the players "kick" the ball.
//
//============================================================================

final void A_LetKick()
{
	int i;
	Player P;
	int	playernum;
	float dist;

	GameFootball FB = GameFootball(MainGameInfo(Level.Game).GameModel);
	if (!FB || !FB.IsInPlayableState())
	{
		return;
	}

	if (nokick_timer)
	{
		nokick_timer--;
		return;
	}

	for (i = 0; i < MAXPLAYERS; i++)
	{
		P = Player(Level.Game.Players[i]);

		if (!P || !P.bSpawned || !P.MO)
		{
			continue;	// [FB] Can't kick the ball if not playing!
		}
		if (P.Health <= 0)
		{
			continue;	// [FB] Dead meat can't kick balls!
						// [CW]... and asses as well =)
		}
		playernum = P.GetPlayerNum();
		dist = DistTo(P.MO);

		if (dist <= MELEERANGE * 6.0)
		{
			//
			//[CW]
			//
			if (dist <= MELEERANGE && (!(P.Buttons & BT_USE) && P.use_power > 0 ||
					P.use_power >= MAXFRAMES_TARGETTING))
			{
				DoKick(P);
				return;
			}
				
			if (P.Buttons & BT_USE && P.use_power < MAXFRAMES_TARGETTING)
			{
				P.use_power++;
			}
			else if (!(P.Buttons & BT_USE) && P.use_power > 0)
			{
				P.use_power = 0;
			}
		}
		else
		{
			P.use_power = 0;
		}
	}
}

//==========================================================================
//
//	Tick
//
//==========================================================================

void Tick(float deltaTime)
{
	::Tick(deltaTime);

	if ((Velocity.x || Velocity.y || Velocity.z) &&
		!Rolling)
	{
		SetState(FindState('Roll'));
		Rolling = true;
	}
	else
	{
		SetState(FindState('Spawn'));
		Rolling = false;
	}
}

states
{
Spawn:
	FBAL A 2 A_LetKick
	Loop
Roll:
	FBAL A 1 A_LetKick
	FBAL B 1 A_LetKick
	FBAL C 1 A_LetKick
	FBAL D 1 A_LetKick
	Loop
}

defaultproperties
{
	Health = 1000;
	Radius = 20.0;
	Height = 48.0;
	Mass = 40.0;

	bSolid = true;
	bShootable = true;
	bNoBlood = true;
	bPushable = true;
	BounceType = BOUNCE_Hexen;
	bActivatePushWall = true;
	bActivateMCross = true;
	bInvulnerable = true;
	bNoMorph = true;	
	//bMissile = true;
	bBounceOnActors = true;
	bBounceSky = true;
	bCanBounceWater = true;
	bPassMobj = true;
}
