//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**		##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id$
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class WeaponClericMorningStar : WeaponEx;

state NoMoreManaState;
float MStarRange;

//==========================================================================
//
//  A_CMSAttack
//
//==========================================================================

final void A_CMSAttack()
{
	Actor			pmo = Actor(Owner);
	float			power;
	int				damage;
	int				useMana;
	TAVec			angles;
	TVec			vforward;
	class<Actor>	PuffType;
	EntityEx		AimTarget;

	damage = 56; //40 + (P_Random() & 15) + (P_Random() & 7);
	if (str_mod)
	{
		if(!active_damage)
		{
			damage = damage * Player(Owner.Player).strength / 10;
		}
		else // [FB] PI Damage
		{
			damage = (damage * Player(Owner.Player).strength / 10) * ftoi(3.1415);
		}
	}
	power = 0.0;
	if (IsWeaponManaUsable())
	{
		damage <<= 1;
		power = 6.0;
		PuffType = MorningStarPuffGlow;
		useMana = 1;
	}
	else
	{
		PuffType = AxePuff;
		useMana = 0;
	}
	AimTarget = pmo.AimEx(vforward, MStarRange, 45.0 / 16.0, 16, MELEERANGE);
	if (AimTarget)
	{
		VectorAngles(&vforward, &angles);
		if (pmo.LineAttack(vforward, MStarRange, damage, PuffType))
		{
			pmo.PlaySound('FighterHammerMiss', CHAN_WEAPON);
		}
		if (AimTarget.bMonster || AimTarget.bIsPlayer)
		{
			AimTarget.Thrust(angles.yaw, power);
		}
		Player(Owner.Player).AdjustPlayerAngle(AimTarget);
		useMana++;
	}
	else
	{
		// didn't find any creatures, so try to strike any walls
		if (pmo.LineAttack(vforward, MELEERANGE, damage, PuffType))
		{
			pmo.PlaySound('FighterHammerMiss', CHAN_WEAPON);
		}
	}

	if (useMana == 2)
	{
		UseWeaponMana();
		if (!IsWeaponManaUsable())
		{
			Owner.Player.SetViewState(ps_weapon, NoMoreManaState);
		}
	}
}

__states__
{
	S_CMSREADY1('WMST', 0, 1.0 / 35.0, S_CMSREADY2) = A_WeaponReady
	S_CMSREADY2('WMST', 0, 1.0 / 35.0, S_CMSREADY3) = A_WeaponReady
	S_CMSREADY3('WMSB', 0, 1.0 / 35.0, S_CMSREADY4) = A_WeaponReady
	S_CMSREADY4('WMSB', 0, 1.0 / 35.0, S_CMSREADY1) = A_WeaponReady
	S_CMSDOWN('WMST', 0, 1.0 / 35.0, S_CMSDOWN) = A_Lower
	S_CMSUP('WMSB', 0, 1.0 / 35.0, S_CMSUP) = A_Raise
	S_CMSATK_1('WMST', 1, 6.0 / 35.0, S_CMSATK_2) = none
	S_CMSATK_2('WMST', 2, 3.0 / 35.0, S_CMSATK_3) = none
	S_CMSATK_3('WMST', 3, 3.0 / 35.0, S_CMSATK_4) = none
	S_CMSATK_4('WMST', 4, 2.0 / 35.0, S_CMSATK_5) = none
	S_CMSATK_5('WMST', 4, 3.0 / 35.0, S_CMSATK_6, -25, 0) = none
	S_CMSATK_6('WMST', 5, 2.0 / 35.0, S_CMSATK_7) = A_CMSAttack
	S_CMSATK_7('WMST', 6, 3.0 / 35.0, S_CMSATK_8) = none
	S_CMSATK_8('WMSB', 0, 1.0 / 35.0, S_CMSATK_9, 0, 60) = A_ReFire
	S_CMSATK_9('WMST', 0, 1.0 / 35.0, S_CMSATK_10, 0, 52) = none
	S_CMSATK_10('WMSB', 0, 1.0 / 35.0, S_CMSATK_11, 0, 44) = none
	S_CMSATK_11('WMST', 0, 1.0 / 35.0, S_CMSREADY1, 0, 36) = none
}

//==========================================================================
//
//	GetUpState
//
//==========================================================================

state GetUpState()
{
	if (IsWeaponManaUsable())
	{
		return S_CMSUP;
	}
	else
	{
		return UpState;
	}
}

//==========================================================================
//
//	GetDownState
//
//==========================================================================

state GetDownState()
{
	if (IsWeaponManaUsable())
	{
		return S_CMSDOWN;
	}
	else
	{
		return DownState;
	}
}

//==========================================================================
//
//	GetReadyState
//
//==========================================================================

state GetReadyState()
{
	if (IsWeaponManaUsable())
	{
		return S_CMSREADY1;
	}
	else
	{
		return ReadyState;
	}
}

//==========================================================================
//
//	GetAttackState
//
//==========================================================================

state GetAttackState()
{
	if (IsWeaponManaUsable())
	{
		// Glowing axe
		return S_CMSATK_1;
	}
	else
	{
		return Player(Owner.Player).Refire ? HoldAttackState : AttackState;
	}
}

//==========================================================================
//
//	GotMana
//
//==========================================================================

void GotMana(Ammo InMana)
{
	if (InMana.Class == ItemManaBlue && IsWeaponManaUsable())
	{
		Owner.Player.SetViewState(ps_weapon, S_CMSREADY1);
	}
}

/*THIRD*/
defaultproperties
{
	WeaponType = HexenDefs::WP_THIRD;
	ManaType1 = ItemManaGreen;
	manause = 8;
	//needsnomana = true;
	UpState = S_CMSUP;
	DownState = S_CMSDOWN;
	ReadyState = S_CMSREADY1;
	AttackState = S_CMSATK_1;
	HoldAttackState = S_CMSATK_1;
	NoMoreManaState = S_CMSATK_5;
	PSpriteSY = 0.0;
	MStarRange = MELEERANGE * 3.0;
	wis_mod = true;
	int_mod = false;
	dex_mod = true;
	str_mod = true;
	PickUpMessage = "MORNING STAR";
	Obituary = "$ob_hmorningstar";
}
