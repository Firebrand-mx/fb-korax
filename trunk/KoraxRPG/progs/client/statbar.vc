//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

// MACROS ------------------------------------------------------------------

// CONSTANTS ---------------------------------------------------------------

// TYPES -------------------------------------------------------------------

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

int sb_height = 39;

int sb_pclass;
int sb_color;

int HealthMarker;
int sb_health;

bool hitCenterFrame;

int pic_bar;
int pic_chain;
int pic_lifegem;
int pic_lfedge;
int pic_rtedge;

int pic_innum[2][10];
int pic_smallinnum[10];
int pic_bignum[10];
int bignumwidth[10];
int pic_minus;
int pic_arti[NUMARTIFACTS];

int pic_statbar;
int pic_kills;
int pic_manadim1[2];
int pic_manadim2[2];
int pic_manavial1[2];
int pic_manavial2[2];
int pic_artiflash[5];
int pic_wpslot;
int pic_wpfull;
int pic_wppiece[3];
int wppiecex[3];

int pic_keybar;
int pic_key[NUMKEYS];
int pic_armor[NUMARMOR];

int pic_invbar;
int pic_selectbox;
int pic_invgeml[2];
int pic_invgemr[2];

int pic_fly[16];
int pic_mino[16];
int pic_boot[16];
int pic_shld[16];

int pic_paused;

// For the Fullscreen stuff
int pic_health;
int pic_armor2;

string arti_pic_names[NUMARTIFACTS] = {
	"ARTIBOX",	// none
	"ARTIINVU",	// invulnerability
	"ARTIPTN2",	// health
	"ARTISPHL",	// superhealth
	"ARTIHRAD",	// healing radius
	"ARTISUMN",	// summon maulator
	"ARTITRCH",	// torch
	"ARTIPORK",	// pig
	"ARTISOAR",	// fly
	"ARTIBLST",	// blast radius
	"ARTIPSBG",	// poison bag
	"ARTITELO",	// teleport other
	"ARTISPED",	// speed
	"ARTIBMAN",	// boost mana
	"ARTIBRAC",	// boost armor
	"ARTIATLP",	// teleport
	"ARTISKLL",	// arti_puzzskull
	"ARTIBGEM",	// arti_puzzgembig
	"ARTIGEMR",	// arti_puzzgemred
	"ARTIGEMG",	// arti_puzzgemgreen1
	"ARTIGMG2",	// arti_puzzgemgreen2
	"ARTIGEMB",	// arti_puzzgemblue1
	"ARTIGMB2",	// arti_puzzgemblue2
	"ARTIBOK1",	// arti_puzzbook1
	"ARTIBOK2",	// arti_puzzbook2
	"ARTISKL2",	// arti_puzzskull2
	"ARTIFWEP",	// arti_puzzfweapon
	"ARTICWEP",	// arti_puzzcweapon
	"ARTIMWEP",	// arti_puzzmweapon
	"ARTIGEAR",	// arti_puzzgear1
	"ARTIGER2",	// arti_puzzgear2
	"ARTIGER3",	// arti_puzzgear3
	"ARTIGER4"	// arti_puzzgear4
};

// CODE --------------------------------------------------------------------

//==========================================================================
//
//  SB_StartMap
//
//==========================================================================

void SB_StartMap(void)
{
	int i;
	int namebuf[3];
	string Name = ARR2STR(namebuf);
	picinfo_t info;

	sb_pclass = GetCvar("class");
	sb_color = GetCvar("color");

	//
	//  COMMON BAR
	//
	pic_bar = R_RegisterPic("H2BAR", PIC_PATCH);
	switch (sb_pclass)
	{
	case PCLASS_FIGHTER:
		pic_chain = R_RegisterPic("CHAIN", PIC_PATCH);
		if (!netgame)
		{
			// single player game uses red life gem (the second gem)
			pic_lifegem = R_RegisterPic("LIFEGMF2", PIC_PATCH);
		}
		else if (!sb_color)
		{
			pic_lifegem = R_RegisterPic("LIFEGEM", PIC_PATCH);
		}
		else
		{
			sprint(Name, "LIFEGMF%d", sb_color + 1);
			pic_lifegem = R_RegisterPic(Name, PIC_PATCH);
		}
		break;
	case PCLASS_CLERIC:
		pic_chain = R_RegisterPic("CHAIN2", PIC_PATCH);
		if (!netgame)
		{
			// single player game uses red life gem (the second gem)
			pic_lifegem = R_RegisterPic("LIFEGMC2", PIC_PATCH);
		}
		else
		{
			sprint(Name, "LIFEGMC%d", sb_color + 1);
			pic_lifegem = R_RegisterPic(Name, PIC_PATCH);
		}
		break;
	case PCLASS_MAGE:
		pic_chain = R_RegisterPic("CHAIN3", PIC_PATCH);
		if (!netgame)
		{
			// single player game uses red life gem (the second gem)
			pic_lifegem = R_RegisterPic("LIFEGMM2", PIC_PATCH);
		}
		else
		{
			sprint(Name, "LIFEGMM%d", sb_color + 1);
			pic_lifegem = R_RegisterPic(Name, PIC_PATCH);
		}
		break;
	}
	pic_lfedge = R_RegisterPic("LFEDGE", PIC_PATCH);
	pic_rtedge = R_RegisterPic("RTEDGE", PIC_PATCH);

	for (i = 0; i < 10; i++)
	{
		sprint(Name, "IN%d", i);
		pic_innum[0][i] = R_RegisterPic(Name, PIC_PATCH);
		sprint(Name, "INRED%d", i);
		pic_innum[1][i] = R_RegisterPic(Name, PIC_PATCH);
		sprint(Name, "SMALLIN%d", i);
		pic_smallinnum[i] = R_RegisterPic(Name, PIC_PATCH);
		sprint(Name, "FONTB%d", 16 + i);
		pic_bignum[i] = R_RegisterPic(Name, PIC_PATCH);
		R_GetPicInfo(pic_bignum[i], &info);
		bignumwidth[i] = info.width;
	}
	pic_minus = R_RegisterPic("NEGNUM", PIC_PATCH);
	for (i = 0; i < NUMARTIFACTS; i++)
	{
		pic_arti[i] = R_RegisterPic(arti_pic_names[i], PIC_PATCH);
	}

	//
	//  MAIN BAR
	//
	pic_statbar = R_RegisterPic("STATBAR", PIC_PATCH);
	pic_kills = R_RegisterPic("KILLS", PIC_PATCH);
	pic_manadim1[0] = R_RegisterPic("MANADIM1", PIC_PATCH);
	pic_manadim1[1] = R_RegisterPic("MANABRT1", PIC_PATCH);
	pic_manadim2[0] = R_RegisterPic("MANADIM2", PIC_PATCH);
	pic_manadim2[1] = R_RegisterPic("MANABRT2", PIC_PATCH);
	pic_manavial1[0] = R_RegisterPic("MANAVL1D", PIC_PATCH);
	pic_manavial1[1] = R_RegisterPic("MANAVL1", PIC_PATCH);
	pic_manavial2[0] = R_RegisterPic("MANAVL2D", PIC_PATCH);
	pic_manavial2[1] = R_RegisterPic("MANAVL2", PIC_PATCH);
	pic_artiflash[0] = R_RegisterPic("USEARTIA", PIC_PATCH);
	pic_artiflash[1] = R_RegisterPic("USEARTIB", PIC_PATCH);
	pic_artiflash[2] = R_RegisterPic("USEARTIC", PIC_PATCH);
	pic_artiflash[3] = R_RegisterPic("USEARTID", PIC_PATCH);
	pic_artiflash[4] = R_RegisterPic("USEARTIE", PIC_PATCH);
	switch (sb_pclass)
	{
	case PCLASS_FIGHTER:
		pic_wpslot = R_RegisterPic("WPSLOT0", PIC_PATCH);
		pic_wppiece[0] = R_RegisterPic("WPIECEF1", PIC_PATCH);
		pic_wppiece[1] = R_RegisterPic("WPIECEF2", PIC_PATCH);
		pic_wppiece[2] = R_RegisterPic("WPIECEF3", PIC_PATCH);
		pic_wpfull = R_RegisterPic("WPFULL0", PIC_PATCH);
		wppiecex[0] = 190;
		wppiecex[1] = 225;
		wppiecex[2] = 234;
		break;
	case PCLASS_CLERIC:
		pic_wpslot = R_RegisterPic("WPSLOT1", PIC_PATCH);
		pic_wppiece[0] = R_RegisterPic("WPIECEC1", PIC_PATCH);
		pic_wppiece[1] = R_RegisterPic("WPIECEC2", PIC_PATCH);
		pic_wppiece[2] = R_RegisterPic("WPIECEC3", PIC_PATCH);
		pic_wpfull = R_RegisterPic("WPFULL1", PIC_PATCH);
		wppiecex[0] = 190;
		wppiecex[1] = 212;
		wppiecex[2] = 225;
		break;
	case PCLASS_MAGE:
		pic_wpslot = R_RegisterPic("WPSLOT2", PIC_PATCH);
		pic_wppiece[0] = R_RegisterPic("WPIECEM1", PIC_PATCH);
		pic_wppiece[1] = R_RegisterPic("WPIECEM2", PIC_PATCH);
		pic_wppiece[2] = R_RegisterPic("WPIECEM3", PIC_PATCH);
		pic_wpfull = R_RegisterPic("WPFULL2", PIC_PATCH);
		wppiecex[0] = 190;
		wppiecex[1] = 205;
		wppiecex[2] = 224;
		break;
	}

	//
	//  KEY BAR
	//
	pic_keybar = R_RegisterPic("KEYBAR", PIC_PATCH);
	for (i = 0; i < NUMKEYS; i++)
	{
		sprint(Name, "KEYSLOT%x", i + 1);
		pic_key[i] = R_RegisterPic(Name, PIC_PATCH);
	}
	for (i = 0; i < NUMARMOR; i++)
	{
		sprint(Name, "ARMSLOT%d", i + 1);
		pic_armor[i] = R_RegisterPic(Name, PIC_PATCH);
	}

	//
	//  INVENTORY
	//
	pic_invbar = R_RegisterPic("INVBAR", PIC_PATCH);
	pic_selectbox = R_RegisterPic("SELECTBO", PIC_PATCH);
	pic_invgeml[0] = R_RegisterPic("INVGEML1", PIC_PATCH);
	pic_invgeml[1] = R_RegisterPic("INVGEML2", PIC_PATCH);
	pic_invgemr[0] = R_RegisterPic("INVGEMR1", PIC_PATCH);
	pic_invgemr[1] = R_RegisterPic("INVGEMR2", PIC_PATCH);

	//
	//  ANIMATED ICONS
	//
	for (i = 0; i < 16; i++)
	{
		sprint(Name, "SPFLY%d", i);
		pic_fly[i] = R_RegisterPic(Name, PIC_PATCH);
		sprint(Name, "SPMINO%d", i);
		pic_mino[i] = R_RegisterPic(Name, PIC_PATCH);
		sprint(Name, "SPBOOT%d", i);
		pic_boot[i] = R_RegisterPic(Name, PIC_PATCH);
		sprint(Name, "SPSHLD%d", i);
		pic_shld[i] = R_RegisterPic(Name, PIC_PATCH);
	}

	pic_paused = R_RegisterPic("PAUSED", PIC_PATCH);

	//  FULLSCREEN ICONS FOR HEALTH AND ARMOR
	pic_health = R_RegisterPic("PTN1A0", PIC_PATCH);
	pic_armor2 = R_RegisterPic("ARM1A0", PIC_PATCH);
}

//==========================================================================
//
//	SB_DrawBackground
//
//==========================================================================

void SB_DrawBackground(void)
{
	sb_health = HealthMarker;
	if (sb_health < 0)
	{
		sb_health = 0;
	}
	else if (sb_health > 100)
	{
		sb_health = 100;
	}

	R_DrawPic(0, 134, pic_bar);
	R_DrawPic(28 + (((sb_health * 196) / 100) % 9), 193, pic_chain);
	R_DrawPic(7 + ((sb_health * 11) / 5), 193, pic_lifegem);
	R_DrawPic(0, 193, pic_lfedge);
	R_DrawPic(277, 193, pic_rtedge);
}

//==========================================================================
//
//	SB_DrawNumber9
//
//==========================================================================

void SB_DrawNumber9(int x, int y, int num, int color)
{
	int w = 9;
	int neg = num < 0;

	if (neg)
	{
		num = -num;
	}

	x = x + 27;
    
	// in the special case of 0, you draw 0
	if (!num)
	{
		R_DrawPic(x - w, y, pic_innum[color][0]);
	}

	// draw the new number
	while (num)
	{
		x -= w;
		R_DrawPic(x, y, pic_innum[color][num % 10]);
		num /= 10;
	}

	// draw a minus sign if necessary
	if (neg)
	{
		R_DrawPic(x - 8, y, pic_minus);
	}
}

//==========================================================================
//
//	SB_DrawNumber12
//
//==========================================================================

void SB_DrawNumber12(int x, int y, int num)
{
	x = x + 36;
    
	// in the special case of 0, you draw 0
	if (!num)
	{
		R_DrawShadowedPic(x - bignumwidth[0], y, pic_bignum[0]);
	}

	// draw the new number
	while (num)
	{
		x -= bignumwidth[num % 10];
		R_DrawShadowedPic(x, y, pic_bignum[num % 10]);
		num /= 10;
		x -= 3;
	}
}

//==========================================================================
//
//	SB_DrawINumber
//
//==========================================================================

void SB_DrawINumber(int x, int y, int num)
{
	if (num > 1)
	{
		x = x + 8;
    
		// draw the new number
		while (num)
		{
			x -= 4;
			R_DrawPic(x, y, pic_smallinnum[num % 10]);
			num /= 10;
		}
	}
}

//==========================================================================
//
//	SB_DrawMNumber
//
//==========================================================================

void SB_DrawMNumber(int x, int y, int num)
{
	if (num > 0)
	{
		x = x + 12;
    
		// draw the new number
		while (num)
		{
			x -= 4;
			R_DrawPic(x, y, pic_smallinnum[num % 10]);
			num /= 10;
		}
	}
}

//==========================================================================
//
//	SB_DrawMainBar
//
//==========================================================================

void SB_DrawMainBar(void)
{
	int sb_mana1;
	int sb_mana2;
	int sb_manaVial1;
	int sb_manaVial2;
	int readyweapon;

	SB_DrawBackground();
	R_DrawPic(38, 162, pic_statbar);

	// Frags / health
	if (deathmatch)
	{
		R_DrawPic(38, 162, pic_kills);
		SB_DrawNumber9(40, 176, cl->Frags, 0);
	}
	else
	{
		if (sb_health >= 25)
		{
			SB_DrawNumber9(40, 176, sb_health, 0);
		}
		else
		{
			SB_DrawNumber9(40, 176, sb_health, 1);
		}
	}

	//  Mana
	if (cl->mana[0] == 0)
	{
		// Draw Dim Mana icon
		sb_mana1 = 0;
	}
	else
	{
		sb_mana1 = 1;
	}
	if (cl->mana[1] == 0)
	{
		// Draw Dim Mana icon
		sb_mana2 = 0;
	}
	else
	{
		sb_mana2 = 1;
	}

	// Update mana graphics based upon mana count/weapon type
	readyweapon = (cl->stats.flags & SBF_WPN_MASK) >> SBF_WPN_SHIFT;
	if (readyweapon == WP_FIRST)
	{
		sb_mana1 = 0;
		sb_mana2 = 0;
		sb_manaVial1 = 0;
		sb_manaVial2 = 0;
	}
	else if (readyweapon == WP_SECOND)
	{
		sb_manaVial1 = 1;
		sb_mana2 = 0;
		sb_manaVial2 = 0;
	}
	else if (readyweapon == WP_THIRD)
	{
		sb_mana1 = 0;
		sb_manaVial1 = 0;
		sb_manaVial2 = 1;
	}
	else
	{
		sb_manaVial1 = 1;
		sb_manaVial2 = 1;
	}
	SB_DrawMNumber(79, 181, cl->mana[0]);
	SB_DrawMNumber(111, 181, cl->mana[1]);
	R_DrawPic(77, 164, pic_manadim1[sb_mana1]);
	R_DrawPic(110, 164, pic_manadim2[sb_mana2]);
	R_DrawPic(94, 164, pic_manavial1[sb_manaVial1]);
	R_DrawPic(102, 164, pic_manavial2[sb_manaVial2]);
	R_ShadeRect(95, 165, 3, 22 - (22 * cl->mana[0]) / MAX_MANA, 31);
	R_ShadeRect(103, 165, 3, 22 - (22 * cl->mana[1]) / MAX_MANA, 31);

	// Ready artifact
	if (cl->ArtifactFlash)
	{
		R_DrawPic(148, 164, pic_artiflash[cl->ArtifactFlash]);
	}
	else if (cl->readyArtifact > 0)
	{
		R_DrawPic(143, 163, pic_arti[cl->readyArtifact]);
		SB_DrawINumber(166, 184, cl->inventory[cl->inv_ptr].count);
	}

	// Weapon Pieces
	if ((cl->stats.flags & SBF_PIECES_MASK) != SBF_PIECES_MASK)
	{
		R_DrawPic(190, 162, pic_wpslot);
		if (cl->stats.flags & SBF_PIECE1)
		{
			R_DrawPic(wppiecex[0], 162, pic_wppiece[0]);
		}
		if (cl->stats.flags & SBF_PIECE2)
		{
			R_DrawPic(wppiecex[1], 162, pic_wppiece[1]);
		}
		if (cl->stats.flags & SBF_PIECE3)
		{
			R_DrawPic(wppiecex[2], 162, pic_wppiece[2]);
		}
	}
	else
	{
		R_DrawPic(190, 162, pic_wpfull);
	}

	// Armor
	SB_DrawNumber9(250, 176, ftoi((AutoArmorSave[sb_pclass]
			+ cl->armorpoints[ARMOR_ARMOR]
			+ cl->armorpoints[ARMOR_SHIELD]
			+ cl->armorpoints[ARMOR_HELMET]
			+ cl->armorpoints[ARMOR_AMULET]) / 5.0), 0);
}

//==========================================================================
//
//	SB_DrawKeyBar
//
//==========================================================================

void SB_DrawKeyBar(void)
{
	int i;
	int num;

	SB_DrawBackground();
	R_DrawPic(38, 162, pic_keybar);

	//  Keys
	for (i = 0, num = 0; i < NUMKEYS && num < 5; i++)
	{
		if (cl->stats.flags & (1 << i))
		{
			R_DrawPic(46 + num * 20, 164, pic_key[i]);
			num++;
		}
	}

	//  Armor
	for (i = 0; i < NUMARMOR; i++)
	{
		if (!cl->armorpoints[i])
		{
			num = 100;
		}
		else if (cl->armorpoints[i] <=
			(ArmorIncrement[sb_pclass * NUMARMOR + i] / 4.0))
		{
			num = 66;
		}
		else if (cl->armorpoints[i] <=
			(ArmorIncrement[sb_pclass * NUMARMOR + i] / 2.0))
		{
			num = 33;
		}
		else
		{
			num = 0;
		}
		R_DrawPic2(150 + 31 * i, 164, pic_armor[i], num);
	}
}

//==========================================================================
//
//	SB_DrawInventoryBar
//
//==========================================================================

void SB_DrawInventoryBar(void)
{
	int i;
	int x;

	SB_DrawBackground();
	R_DrawPic(38, 162, pic_invbar);

	//  Inventory
	x = cl->inv_ptr - cl->curpos;
	for (i = 0; i < 7; i++)
	{
		if (cl->inventorySlotNum > x + i
			&& cl->inventory[x + i].type != arti_none)
		{
			R_DrawPic(50 + i * 31, 163, pic_arti[cl->inventory[x + i].type]);
			SB_DrawINumber(71 + i * 31, 185, cl->inventory[x + i].count);
		}
	}

	R_DrawPic(50 + cl->curpos * 31, 163, pic_selectbox);
	if (x != 0)
	{
		R_DrawPic(42, 163, pic_invgeml[!(level->tictime & 4) ? 0 : 1]);
	}
	if (cl->inventorySlotNum - x > 7)
	{
		R_DrawPic(269, 163, pic_invgemr[!(level->tictime & 4) ? 0 : 1]);
	}
}

//==========================================================================
//
//	SB_DrawFullscreenStats
//
//==========================================================================

void SB_DrawFullscreenStats(void)
{
	int i;
	int x;
	int sb_mana1;
	int sb_mana2;
	int readyweapon;

	//  Health
	SB_DrawNumber12(5, 180, cl->health);
	R_DrawPic(62, 224, pic_health);

	// Armor
	SB_DrawNumber12(5, 160, ftoi((AutoArmorSave[sb_pclass]
			+ cl->armorpoints[ARMOR_ARMOR]
			+ cl->armorpoints[ARMOR_SHIELD]
			+ cl->armorpoints[ARMOR_HELMET]
			+ cl->armorpoints[ARMOR_AMULET]) / 5.0));
	R_DrawPic(62, 200, pic_armor2);

	//  Frags
	if (deathmatch)
	{
		SB_DrawNumber9(45, 185, cl->Frags, 0);
	}

	if (cl->InventoryTime)
	{
		//  Inventory
		x = cl->inv_ptr - cl->curpos;
		for (i = 0; i < 7; i++)
		{
			R_DrawPic2(50 + i * 31, 168, pic_arti[0], 40);
			if (cl->inventorySlotNum > x + i
				&& cl->inventory[x + i].type != arti_none)
			{
				R_DrawPic(49 + i * 31, 167,
					pic_arti[cl->inventory[x + i].type]);
				SB_DrawINumber(69 + i * 31, 188, cl->inventory[x + i].count);
			}
		}
		R_DrawPic(50 + cl->curpos * 31, 167, pic_selectbox);
		if (x != 0)
		{
			R_DrawPic(40, 167, pic_invgeml[!(level->tictime & 4) ? 0 : 1]);
		}
		if (cl->inventorySlotNum - x > 7)
		{
			R_DrawPic(268, 167, pic_invgemr[!(level->tictime & 4) ? 0 : 1]);
		}
	}
	else if (cl->readyArtifact > 0)
	{
		//  Ready artifact
		R_DrawPic2(286, 170, pic_arti[0], 40);
		R_DrawPic(284, 169, pic_arti[cl->readyArtifact]);
		SB_DrawINumber(306, 192, cl->inventory[cl->inv_ptr].count);
	}

	//  Mana
	if (cl->mana[0] == 0)
	{
		// Draw Dim Mana icon
		sb_mana1 = 0;
	}
	else
	{
		sb_mana1 = 1;
	}
	if (cl->mana[1] == 0)
	{
		// Draw Dim Mana icon
		sb_mana2 = 0;
	}
	else
	{
		sb_mana2 = 1;
	}

	// Update mana graphics based upon mana count/weapon type
	readyweapon = (cl->stats.flags & SBF_WPN_MASK) >> SBF_WPN_SHIFT;
	if (readyweapon == WP_FIRST)
	{
		sb_mana1 = 0;
		sb_mana2 = 0;
	}
	else if (readyweapon == WP_SECOND)
	{
		sb_mana2 = 0;
	}
	else if (readyweapon == WP_THIRD)
	{
		sb_mana1 = 0;
	}
	else
	{
	}

	SB_DrawMNumber(270, 176, cl->mana[0]);
	SB_DrawMNumber(270, 192, cl->mana[1]);
	R_DrawPic(254, 170, pic_manadim1[sb_mana1]);
	R_DrawPic(254, 186, pic_manadim2[sb_mana2]);
}

//==========================================================================
//
//	SB_DrawIcons
//
//==========================================================================

void SB_DrawIcons(void)
{
	int frame;

	// Wings of wrath
	if (cl->stats.flags & SBF_POWER_FLIGHT)
	{
		frame = (level->tictime / 3) & 15;
		if (cl->stats.flags & SBF_IN_FLIGHT)
		{
			if (hitCenterFrame && frame != 15 && frame != 0)
			{
				frame = 15;
			}
			else
			{
				hitCenterFrame = false;
			}
		}
		else
		{
			if (hitCenterFrame || frame == 15 || frame == 0)
			{
				frame = 15;
				hitCenterFrame = true;
			}
		}
		R_DrawPic(20, 19, pic_fly[frame]);
	}

	// Speed Boots
	if (cl->stats.flags & SBF_POWER_SPEED)
	{
		R_DrawPic(60, 19, pic_boot[(level->tictime / 3) & 15]);
	}

	// Defensive power
	if (cl->stats.flags & SBF_POWER_INVULN)
	{
		R_DrawPic(260, 19, pic_shld[(level->tictime / 3) & 15]);
	}

	// Minotaur Active
	if (cl->stats.flags & SBF_POWER_MINOTAUR)
	{
		R_DrawPic(300, 19, pic_mino[(level->tictime / 3) & 15]);
	}
}

//==========================================================================
//
//	SB_DrawPause
//
//==========================================================================

void SB_DrawPause(void)
{
	if (cl->bPaused && GetCvar("draw_pause"))
	{
		R_DrawPic(160, netgame ? 70 : 20, pic_paused);
	}
}

//==========================================================================
//
//  SB_Drawer
//
//==========================================================================

void SB_Drawer(int sb_view)
{
	int i;

	if (sb_view == SB_VIEW_FULLSCREEN)
	{
		SB_DrawFullscreenStats();
	}
	else if (cl->InventoryTime)
	{
		SB_DrawInventoryBar();
	}
	else if (sb_view == SB_VIEW_AUTOMAP)
	{
		SB_DrawKeyBar();
	}
	else
	{
		SB_DrawMainBar();
	}

	//  Animated icons
	SB_DrawIcons();

	SB_DrawPause();
}

//==========================================================================
//
//  SB_UpdateWidgets
//
//==========================================================================

void SB_UpdateWidgets(void)
{
	int delta;
	int curHealth;

	curHealth = cl->health;
	if (curHealth < 0)
	{
		curHealth = 0;
	}
	if (curHealth < HealthMarker)
	{
		delta = (HealthMarker - curHealth) >> 2;
		if (delta < 1)
		{
			delta = 1;
		}
		else if (delta > 6)
		{
			delta = 6;
		}
		HealthMarker -= delta;
	}
	else if (curHealth > HealthMarker)
	{
		delta = (curHealth - HealthMarker) >> 2;
		if (delta < 1)
		{
			delta = 1;
		}
		else if (delta > 6)
		{
			delta = 6;
		}
		HealthMarker += delta;
	}
}

//**************************************************************************
//
//  $Log$
//  Revision 1.3  2006/02/06 19:43:03  firebrand_kh
//  Added latest Vavoom changes
//
//  Revision 1.15  2005/03/28 07:44:09  dj_jl
//  Some Boom line specials and other improvements.
//
//  Revision 1.14  2002/09/07 16:28:25  dj_jl
//  Added Level class.
//
//  Revision 1.13  2002/06/29 15:58:14  dj_jl
//  Added total frags count.
//
//  Revision 1.12  2002/03/16 17:49:35  dj_jl
//  Beautification.
//
//  Revision 1.11  2002/02/02 19:17:25  dj_jl
//  Replacing pointers with references, beautification.
//
//  Revision 1.10  2002/01/28 18:47:02  dj_jl
//  Fixed blue fighter ligegem
//
//  Revision 1.9  2002/01/17 18:15:54  dj_jl
//  Renamed all map object classes
//
//  Revision 1.8  2002/01/11 08:03:13  dj_jl
//  Renamed 'name' to "Name'
//
//  Revision 1.7  2002/01/07 12:25:57  dj_jl
//  Changed copyright year
//
//  Revision 1.6  2001/10/09 17:36:57  dj_jl
//  Added flags for status bar
//
//  Revision 1.5  2001/10/02 17:37:19  dj_jl
//  Removed status bar widgets
//
//  Revision 1.4  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/29 17:46:25  dj_jl
//  Moved view border and message box to progs
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
