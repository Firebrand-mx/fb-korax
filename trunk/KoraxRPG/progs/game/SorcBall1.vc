//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class SorcBall1 : SorcBall;

//==========================================================================
//
//  A_SorcOffense1
//
//  Actor is ball.
//
//==========================================================================

final void A_SorcOffense1()
{
	EntityEx mo;
	float ang1, ang2;

	ang1 = AngleMod360(Angles.yaw + 70.0);
	ang2 = AngleMod360(Angles.yaw - 70.0);
	mo = Actor(Target).SpawnMissileAngle(SorcFX1, ang1, 0.0);
	if (mo)
	{
		mo.Target = Target;
		mo.Tracer = Target.Target;
		mo.Args[4] = Heresiarch::BOUNCE_TIME_UNIT;
		mo.Args[3] = 15;	// Bounce time in seconds
	}
	mo = Actor(Target).SpawnMissileAngle(SorcFX1, ang2, 0.0);
	if (mo)
	{
		mo.Target = Target;
		mo.Tracer = Target.Target;
		mo.Args[4] = Heresiarch::BOUNCE_TIME_UNIT;
		mo.Args[3] = 15;	// Bounce time in seconds
	}
}

//==========================================================================
//
//  A_CastSorcererSpell
//
//  Actor is ball.
//
//==========================================================================

void A_CastSorcererSpell()
{
	if (P_Random() < 200)
	{
		Special2 = Heresiarch::SORCFX4_RAPIDFIRE_TIME;
		Args[4] = 128;
		Target.Args[3] = Heresiarch::SORC_FIRING_SPELL;
		return;
	}

	// Put sorcerer into throw spell animation
	if (Target.Health > 0)
		Target.SetState(Target.FindState('Attack2'));

	// Offensive
	A_SorcOffense1();

	Target.Args[3] = Heresiarch::SORC_STOPPED;
}

states
{
Spawn:
	SBMP ABCDEFGHIJKLMNOP 2 A_SorcBallOrbit
	Loop
Pain:
	SBMP A 5 A_SorcBallPop
	SBMP B 2 A_BounceCheck
	Wait
Death:
	SBS4 D 5 A_Explode
	SBS4 E 5
	SBS4 FGH 6
	Stop
}

defaultproperties
{
	BallAngleOffset = 0.0;
}
