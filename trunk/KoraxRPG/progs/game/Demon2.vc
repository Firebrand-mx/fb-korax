//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Demon2 : Demon
	__mobjinfo__(8080);

//===========================================================================
//
//	A_Demon2Death
//
//===========================================================================

void A_Demon2Death()
{
	Actor A;
	float angle;

	A = Spawn(Demon2Chunk1, Origin + vector(0.0, 0.0, 45.0));
	if (A)
	{
		angle = AngleMod360(Angles.yaw + 90.0);
		A.Velocity.x = (Random() * 4.0 + 1.0) * cos(angle) * 35.0;
		A.Velocity.y = (Random() * 4.0 + 1.0) * sin(angle) * 35.0;
		A.Velocity.z = 8.0 * 35.0;
		A.Instigator = self;
	}
	A = Spawn(Demon2Chunk2, Origin + vector(0.0, 0.0, 45.0));
	if (A)
	{
		angle = AngleMod360(Angles.yaw - 90.0);
		A.Velocity.x = (Random() * 4.0 + 1.0) * cos(angle) * 35.0;
		A.Velocity.y = (Random() * 4.0 + 1.0) * sin(angle) * 35.0;
		A.Velocity.z = 8.0 * 35.0;
		A.Instigator = self;
	}
	A = Spawn(Demon2Chunk3, Origin + vector(0.0, 0.0, 45.0));
	if (A)
	{
		angle = AngleMod360(Angles.yaw - 90.0);
		A.Velocity.x = (Random() * 4.0 + 1.0) * cos(angle) * 35.0;
		A.Velocity.y = (Random() * 4.0 + 1.0) * sin(angle) * 35.0;
		A.Velocity.z = 8.0 * 35.0;
		A.Instigator = self;
	}
	A = Spawn(Demon2Chunk4, Origin + vector(0.0, 0.0, 45.0));
	if (A)
	{
		angle = AngleMod360(Angles.yaw - 90.0);
		A.Velocity.x = (Random() * 4.0 + 1.0) * cos(angle) * 35.0;
		A.Velocity.y = (Random() * 4.0 + 1.0) * sin(angle) * 35.0;
		A.Velocity.z = 8.0 * 35.0;
		A.Instigator = self;
	}
	A = Spawn(Demon2Chunk5, Origin + vector(0.0, 0.0, 45.0));
	if (A)
	{
		angle = AngleMod360(Angles.yaw - 90.0);
		A.Velocity.x = (Random() * 4.0 + 1.0) * cos(angle) * 35.0;
		A.Velocity.y = (Random() * 4.0 + 1.0) * sin(angle) * 35.0;
		A.Velocity.z = 8.0 * 35.0;
		A.Instigator = self;
	}
}

__states__
{
	S_DEMN2_LOOK1('DEM2', 0, 'monsters/demon/base2.md2', 0, 5.0 / 35.0, S_DEMN2_LOOK2) { A_Look(); }
	S_DEMN2_LOOK2('DEM2', 0, 'monsters/demon/base2.md2', 1, 5.0 / 35.0, S_DEMN2_LOOK3) { }
	S_DEMN2_LOOK3('DEM2', 0, 'monsters/demon/base2.md2', 2, 5.0 / 35.0, S_DEMN2_LOOK4) { A_Look(); }
	S_DEMN2_LOOK4('DEM2', 0, 'monsters/demon/base2.md2', 3, 5.0 / 35.0, S_DEMN2_LOOK5) { }
	S_DEMN2_LOOK5('DEM2', 0, 'monsters/demon/base2.md2', 4, 5.0 / 35.0, S_DEMN2_LOOK6) { A_Look(); }
	S_DEMN2_LOOK6('DEM2', 0, 'monsters/demon/base2.md2', 5, 5.0 / 35.0, S_DEMN2_LOOK7) { }
	S_DEMN2_LOOK7('DEM2', 0, 'monsters/demon/base2.md2', 6, 5.0 / 35.0, S_DEMN2_LOOK8) { A_Look(); }
	S_DEMN2_LOOK8('DEM2', 0, 'monsters/demon/base2.md2', 7, 5.0 / 35.0, S_DEMN2_LOOK1) { }
	S_DEMN2_CHASE1('DEM2', 0, 'monsters/demon/base2.md2', 8, 2.0 / 35.0, S_DEMN2_CHASE2) { A_Chase(); }
	S_DEMN2_CHASE2('DEM2', 0, 'monsters/demon/base2.md2', 9, 2.0 / 35.0, S_DEMN2_CHASE3) { }
	S_DEMN2_CHASE3('DEM2', 1, 'monsters/demon/base2.md2', 10, 2.0 / 35.0, S_DEMN2_CHASE4) { A_Chase(); }
	S_DEMN2_CHASE4('DEM2', 1, 'monsters/demon/base2.md2', 11, 2.0 / 35.0, S_DEMN2_CHASE5) { }
	S_DEMN2_CHASE5('DEM2', 2, 'monsters/demon/base2.md2', 12, 2.0 / 35.0, S_DEMN2_CHASE6) { A_Chase(); }
	S_DEMN2_CHASE6('DEM2', 2, 'monsters/demon/base2.md2', 13, 2.0 / 35.0, S_DEMN2_CHASE7) { }
	S_DEMN2_CHASE7('DEM2', 3, 'monsters/demon/base2.md2', 14, 2.0 / 35.0, S_DEMN2_CHASE8) { A_Chase(); }
	S_DEMN2_CHASE8('DEM2', 3, 'monsters/demon/base2.md2', 15, 2.0 / 35.0, S_DEMN2_CHASE1) { }
	S_DEMN2_ATK1_1('DEM2', 4, 'monsters/demon/base2.md2', 16, 6.0 / 35.0, S_DEMN2_ATK1_2) { A_FaceTarget(); }
	S_DEMN2_ATK1_2('DEM2', 5, 'monsters/demon/base2.md2', 17, 8.0 / 35.0, S_DEMN2_ATK1_3) { A_FaceTarget(); }
	S_DEMN2_ATK1_3('DEM2', 6, 'monsters/demon/base2.md2', 18, 6.0 / 35.0, S_DEMN2_CHASE1) { A_DemonAttack1(); }
	S_DEMN2_ATK2_1('DEM2', 4, 'monsters/demon/base2.md2', 19, 5.0 / 35.0, S_DEMN2_ATK2_2) { A_FaceTarget(); }
	S_DEMN2_ATK2_2('DEM2', 5, 'monsters/demon/base2.md2', 20, 6.0 / 35.0, S_DEMN2_ATK2_3) { A_FaceTarget(); }
	S_DEMN2_ATK2_3('DEM2', 6, 'monsters/demon/base2.md2', 21, 5.0 / 35.0, S_DEMN2_CHASE1) { A_DemonAttack2(); }
	S_DEMN2_PAIN1('DEM2', 4, 'monsters/demon/base2.md2', 22, 4.0 / 35.0, S_DEMN2_PAIN2) { }
	S_DEMN2_PAIN2('DEM2', 4, 'monsters/demon/base2.md2', 23, 4.0 / 35.0, S_DEMN2_CHASE1) { A_Pain(); }
	S_DEMN2_DEATH1('DEM2', 7, 'monsters/demon/base2.md2', 24, 6.0 / 35.0, S_DEMN2_DEATH2) { }
	S_DEMN2_DEATH2('DEM2', 8, 'monsters/demon/base2.md2', 25, 6.0 / 35.0, S_DEMN2_DEATH3) { }
	S_DEMN2_DEATH3('DEM2', 9, 'monsters/demon/base2.md2', 26, 6.0 / 35.0, S_DEMN2_DEATH4) { A_Scream(); }
	S_DEMN2_DEATH4('DEM2', 10, 'monsters/demon/base2.md2', 27, 6.0 / 35.0, S_DEMN2_DEATH5) { A_NoBlocking(); }
	S_DEMN2_DEATH5('DEM2', 11, 'monsters/demon/base2.md2', 28, 6.0 / 35.0, S_DEMN2_DEATH6) { A_QueueCorpse(); }
	S_DEMN2_DEATH6('DEM2', 12, 'monsters/demon/base2.md2', 29, 6.0 / 35.0, S_DEMN2_DEATH7) { }
	S_DEMN2_DEATH7('DEM2', 13, 'monsters/demon/base2.md2', 30, 6.0 / 35.0, S_DEMN2_DEATH8) { }
	S_DEMN2_DEATH8('DEM2', 14, 'monsters/demon/base2.md2', 31, 6.0 / 35.0, S_DEMN2_DEATH9) { }
	S_DEMN2_DEATH9('DEM2', 15, 'monsters/demon/base2.md2', 32, -1.0, S_NULL) { }
	S_DEMN2_XDEATH1('DEM2', 7, 'monsters/demon/base2.md2', 24, 6.0 / 35.0, S_DEMN2_XDEATH2) { }
	S_DEMN2_XDEATH2('DEM2', 8, 'monsters/demon/base2.md2', 25, 6.0 / 35.0, S_DEMN2_XDEATH3) { A_Demon2Death(); }
	S_DEMN2_XDEATH3('DEM2', 9, 'monsters/demon/base2.md2', 26, 6.0 / 35.0, S_DEMN2_XDEATH4) { A_Scream(); }
	S_DEMN2_XDEATH4('DEM2', 10, 'monsters/demon/base2.md2', 27, 6.0 / 35.0, S_DEMN2_XDEATH5) { A_NoBlocking(); }
	S_DEMN2_XDEATH5('DEM2', 11, 'monsters/demon/base2.md2', 28, 6.0 / 35.0, S_DEMN2_XDEATH6) { A_QueueCorpse(); }
	S_DEMN2_XDEATH6('DEM2', 12, 'monsters/demon/base2.md2', 29, 6.0 / 35.0, S_DEMN2_XDEATH7) { }
	S_DEMN2_XDEATH7('DEM2', 13, 'monsters/demon/base2.md2', 30, 6.0 / 35.0, S_DEMN2_XDEATH8) { }
	S_DEMN2_XDEATH8('DEM2', 14, 'monsters/demon/base2.md2', 31, 6.0 / 35.0, S_DEMN2_XDEATH9) { }
	S_DEMN2_XDEATH9('DEM2', 15, 'monsters/demon/base2.md2', 32, -1.0, S_NULL) { }
}

defaultproperties
{
	IdleState = S_DEMN2_LOOK1;
	SeeState = S_DEMN2_CHASE1;
	MeleeState = S_DEMN2_ATK1_1;
	MissileState = S_DEMN2_ATK2_1;
	PainState = S_DEMN2_PAIN1;
	DeathState = S_DEMN2_DEATH1;
	GibsDeathState = S_DEMN2_XDEATH1;
	FireBallType = Demon2Missile;
}

//**************************************************************************
//
//  $Log$
//  Revision 1.2  2005/11/22 19:21:27  firebrand_kh
//  Updated to latest Vavoom version
//
//  Revision 1.2  2005/08/13 15:38:49  dj_jl
//  Models added.
//
//  Revision 1.1  2002/10/26 16:32:26  dj_jl
//  New style of defining classes.
//
//**************************************************************************
