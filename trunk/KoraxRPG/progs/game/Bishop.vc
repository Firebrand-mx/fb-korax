//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Bishop : IntelligentActor
	__mobjinfo__(114)
	__scriptid__(19);

int NumToSpawn;		//	Number of blurs/missiles to spawn
int WeaveIndex;		//	Index into floatbob

bool bAttackSoundContinious;
class<Actor> BishopFXType;
class<Actor> BishopBlurType;
class<Actor> BishopPainBlurType;

//==========================================================================
//
//	GetExplodeParms
//
//==========================================================================

void GetExplodeParms(out int damage, out float distance, out byte damageSelf)
{
	// Bishop radius death
	damage = 25 + (P_Random() & 15);
}

//==========================================================================
//
//  A_BishopDecide
//
//==========================================================================

final void A_BishopDecide()
{
	if (P_Random() < 220)
	{
		return;
	}
	else
	{
		SetState(FindState('Blur'));
	}
}

//==========================================================================
//
//  A_BishopDoBlur
//
//==========================================================================

final void A_BishopDoBlur()
{
	NumToSpawn = bInvisible ? ((P_Random() & 3) + 3) : ((P_Random() & 7) + 4);	// P_Random number of blurs
	if (P_Random() < 120)
	{
		Thrust(AngleMod360(Angles.yaw + 90.0), 11.0);
	}
	else if (P_Random() > 125)
	{
		Thrust(AngleMod360(Angles.yaw - 90.0), 11.0);
	}
	else
	{
		// Thrust forward
		Thrust(Angles.yaw, 11.0);
	}
	PlaySound('BishopBlur', CHAN_VOICE);
}

//==========================================================================
//
//	A_BishopSpawnBlur
//
//==========================================================================

final void A_BishopSpawnBlur()
{
	Actor blur;

	if (!--NumToSpawn)
	{
		Velocity.x = 0.0;
		Velocity.y = 0.0;
		if (!Target)
			SetState(IdleState);
		if (P_Random() > 96)
		{
			SetState(SeeState);
		}
		else
		{
			SetState(MissileState);
		}
	}

	if (!bInvisible)
	{
		blur = Spawn(BishopBlurType, Origin);
		if (blur)
		{
			blur.Angles = Angles;
		}
	}
}

//==========================================================================
//
//	A_BishopChase
//
//==========================================================================

final void A_BishopChase()
{
	bShootable = true;
	bInvisible = false;

	Origin.z -= Level.Game.FloatBobOffsets[WeaveIndex] / 2.0;
	WeaveIndex = (WeaveIndex + 4) & 63;
	Origin.z += Level.Game.FloatBobOffsets[WeaveIndex] / 2.0;
}

//==========================================================================
//
//	A_BishopAttack
//
//==========================================================================

final void A_BishopAttack()
{
	bShootable = true;
	bInvisible = false;

	if (!Target || !CanSee(Target))
	{
		return;
	}
	PlaySound(AttackSound, CHAN_WEAPON);
	if (CheckMeleeRange())
	{
		Target.Damage(self, self, HITDICE(4));
		return;
	}
	NumToSpawn = (P_Random() & 3) + 5;
}

//==========================================================================
//
//  A_BishopAttack2
//
//  Spawns one of a string of bishop missiles
//
//==========================================================================

final void A_BishopAttack2()
{
	EntityEx mo;

	if (!Target || !CanSee(Target) || !NumToSpawn)
	{
		NumToSpawn = 0;
		SetState(SeeState);
		return;
	}
	mo = SpawnMissile(Target, BishopFXType);
	if (mo)
	{
		if (bAttackSoundContinious)
			PlaySound(AttackSound, CHAN_WEAPON);
		mo.Tracer = Target;
		mo.Special2 = 16;
	}
	NumToSpawn--;
}

//==========================================================================
//
//  A_BishopPainBlur
//
//==========================================================================

final void A_BishopPainBlur()
{
	Actor blur;

	bInvisible = false;

	if (P_Random() < 64)
	{
		SetState(FindState('Blur'));
		return;
	}
	blur = Spawn(BishopPainBlurType,
		Origin + vector((Random() - Random()) * 16.0,
		(Random() - Random()) * 16.0, (Random() - Random()) * 8.0));
	if (blur)
	{
		blur.Angles = Angles;
	}
}

//==========================================================================
//
//	A_BishopPuff
//
//==========================================================================

final void A_BishopPuff()
{
	Actor puff;

	bInvisible = false;

	puff = Spawn(BishopPuff, Origin + vector(0.0, 0.0, 40.0));
	if (puff)
	{
		puff.Velocity.z = 0.5 * 35.0;
	}
}

states
{
Spawn:
	BISH A 10 A_LookAI
	Loop
See:
	BISH A 2 A_ChaseAI
	BISH A 2 A_BishopChase
	BISH A 2
	BISH B 2 A_BishopChase
	BISH B 2 A_ChaseAI
	BISH B 2 A_BishopChase
	BISH A 1 A_BishopDecide
	Loop
Blur:
Evade:
	BISH A 2 A_BishopDoBlur
	BISH A 4 A_BishopSpawnBlur
	Wait
Missile:
	BISH A 3 A_FaceTarget
	BISH DE 3 Bright A_FaceTarget
	BISH F 3 Bright A_BishopAttack
	BISH F 5 Bright A_BishopAttack2
	Wait
Pain:
	BISH C 6 A_Pain
	BISH CCC 6 A_BishopPainBlur
	BISH C 0
	Goto See
Death:
	BISH G 6
	BISH H 6 Bright A_Scream
	BISH I 5 Bright A_NoBlocking
	BISH J 5 Bright A_Explode
	BISH K 5 Bright
	BISH LM 4 Bright
	BISH N 4 A_BishopPuff
	BISH O 4 A_QueueCorpse
	BISH P -1
	Stop
Ice:
	BISH X 5 A_FreezeDeath
	BISH X 1 A_FreezeDeathChunks
	Wait
}

defaultproperties
{
	bSolid = true;
	bShootable = true;
	bCountKill = true;
	bMonster = true;
	bActivatePushWall = true;
	bActivateMCross = true;
	bPassMobj = true;
	bCanUseWalls = true;

	bFloorClip = true;
	bTelestomp = true;

	Health = 130;
	Radius = 22.0;
	Height = 65.0;
	Mass = 100.0;
	Speed = 20.0 * 35.0;
	PainChance = 0.4296875;
	bNoGravity = true;
	bFloat = true;
	bNoBlood = true;
	bFloorClip = false;
	bActivateMCross = false;
	bNoTargetSwitch = true;
	bDontOverlap = true;
	SightSound = 'BishopSight';
	ActiveSound = 'BishopActiveSounds';
	AttackSound = 'BishopAttack';
	PainSound = 'BishopPain';
	DeathSound = 'BishopDeath';
	Obituary = "$ob_bishop";

	bAttackSoundContinious = false;
	BishopFXType = BishopFX;
	BishopBlurType = BishopBlur;
	BishopPainBlurType = BishopPainBlur;

	Behavior.bEvadeMelee = true;
	Behavior.bRunOnEvade = true;
}
