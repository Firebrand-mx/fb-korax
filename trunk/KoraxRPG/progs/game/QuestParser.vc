
class QuestParser : ScriptsParser;

enum
{
	readstate_questtoken,
	//readstate_openbracket,
	readstate_questblock,
	//readstate_scriptname,
	//readstate_scriptid,
	readstate_title,
	readstate_texts,
	//readstate_texts_openbracket,
	readstate_texts_block,
	//readstate_texts_end,
	readstate_vars,
	//readstate_vars_openbracket,
	readstate_vars_block,
	//readstate_vars_end,
	readstate_qstate,
	readstate_position,
	readstate_questend
};

//==========================================================================
//
//	ReadQuest
//
//==========================================================================

bool ReadQuest(Quest::questinfo_t * p_QInfo)
{
	bool eof;
	//bool missing;
	int readstate = readstate_questtoken;
	
	p_QInfo->scriptName = "";
	p_QInfo->scriptId = 0;
	p_QInfo->title = "";
	p_QInfo->texts.Num = 0;
	p_QInfo->vars.Num = 0;
	p_QInfo->position = 0;
	p_QInfo->qstate = 0;

	while (!AtEnd())
	{
		//missing = false;

		/*
		if (//readstate == readstate_scriptid ||
			readstate == readstate_position ||
			readstate == readstate_qstate)
		{
			ExpectNumber();
		}
		else
		{
			ExpectString();
		}
		*/

		switch (readstate)
		{
		case readstate_questtoken:
			Expect("quest");
			ExpectString();
			p_QInfo->scriptName = String;
			ExpectNumber();
			p_QInfo->scriptId = Number;

			dprint("QUEST: %s, %i", p_QInfo->scriptName, p_QInfo->scriptId);

			Expect("{");

			eof = true;
			readstate = readstate_questblock; //readstate_openbracket;
			break;
		//case readstate_openbracket:
		//	if (strcmp(String, "{"))
		//		missing = true;
		//	else
		//		readstate = readstate_questblock;
		//	break;
		case readstate_questblock:
			ExpectString();
			if (!strcmp(String, "}"))
				readstate = readstate_questend;
			else if (!strcmp(String, "title"))
				readstate = readstate_title;
			else if (!strcmp(String, "texts"))
				readstate = readstate_texts;
			else if (!strcmp(String, "vars"))
				readstate = readstate_vars;
			else if (!strcmp(String, "state"))
				readstate = readstate_qstate;
			else if (!strcmp(String, "position"))
				readstate = readstate_position;
			else
				ScriptError("unexpected \"%s\"", String);
			break;
		case readstate_texts_block:
			ExpectString();
			if (!strcmp(String, "}"))
				readstate = readstate_questblock;
			else
			{
				p_QInfo->texts.Num = p_QInfo->texts.Num + 1;
				p_QInfo->texts[p_QInfo->texts.Num - 1] = String;
				dprint("QUEST TEXT: %s", p_QInfo->texts[p_QInfo->texts.Num - 1]);
			}
			break;
		case readstate_vars_block:
			ExpectString();
			if (!strcmp(String, "}"))
				readstate = readstate_questblock;
			else
			{
				p_QInfo->vars.Num = p_QInfo->vars.Num + 1;
				p_QInfo->vars[p_QInfo->vars.Num - 1].sname = String;
				ExpectNumber();
				p_QInfo->vars[p_QInfo->vars.Num - 1].id = Number;
				ExpectString();
				if (!strcmp(String, "boolean")) p_QInfo->vars[p_QInfo->vars.Num - 1].type = Quest::qvar_type_boolean;
				else if (!strcmp(String, "integer")) p_QInfo->vars[p_QInfo->vars.Num - 1].type = Quest::qvar_type_integer;
				else
				{
					ScriptError("unexpected \"%s\"", String);
					break;
				}
				ExpectNumber();
				p_QInfo->vars[p_QInfo->vars.Num - 1].value = Number;

				dprint("QUEST VAR: %s %s,%i = %i", p_QInfo->vars[p_QInfo->vars.Num - 1].type == Quest::qvar_type_boolean ? "boolean" : "integer",
					p_QInfo->vars[p_QInfo->vars.Num - 1].sname, p_QInfo->vars[p_QInfo->vars.Num - 1].id, p_QInfo->vars[p_QInfo->vars.Num - 1].value);
			}
			break;
		case readstate_title:
			ExpectString();
			p_QInfo->title = String;
			dprint("QUEST TITLE: %s", p_QInfo->title);
			readstate = readstate_questblock;
			break;
		case readstate_texts:
			Expect("{");
			readstate = readstate_texts_block;
			break;
		case readstate_vars:
			Expect("{");
			readstate = readstate_vars_block;
			break;
		case readstate_qstate:
			ExpectNumber();
			p_QInfo->qstate = Number;
			dprint("QUEST STATE: %i", p_QInfo->qstate);
			readstate = readstate_questblock;
			break;
		case readstate_position:
			ExpectNumber();
			p_QInfo->position = Number;
			dprint("QUEST POSITION: %i", p_QInfo->position);
			readstate = readstate_questblock;
			break;
		}

		/*
		if (missing)
		{
			ScriptError("unexpected \"%s\"", String);
			return false;
		}
		*/

		if (readstate == readstate_questend)
		{
			eof = false;
			break;
		}
	}

	if (eof /*&& !missing*/)
	{
		ScriptError("unexpected end of file");
		return false;
	}

	return (readstate == readstate_questend);
}

defaultproperties
{
}
