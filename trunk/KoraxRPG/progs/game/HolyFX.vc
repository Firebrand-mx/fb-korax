//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class HolyFX:Projectile;

int WeaveXY;
int WeaveZ;

//==========================================================================
//
//	Touch
//
//==========================================================================

bool Touch(Entity InOther)
{
	int damage;
	Actor Other;

	Other = Actor(InOther);
	if (!Other.bSolid && !Other.bSpecial && !Other.bShootable)
		return true;

	// Check for skulls slamming into things
	if (bSkullFly)
	{
		if (Other.bShootable && Other != Instigator)
		{
			if (netgame && !deathmatch && Other.bIsPlayer)
			{
				// don't attack other co-op players
				return true;
			}
			if (Other.bReflective && (Other.bIsPlayer || Other.bBoss))
			{
				Enemy = Instigator;
				Instigator = Other;
				return true;
			}
			if (Other.bCountKill || Other.bIsPlayer)
			{
				Enemy = Other;
			}
			if (P_Random() < 96)
			{
				damage = 12;
				if (Other.bIsPlayer || Other.bBoss)
				{
					damage = 3;
					// ghost burns out faster when attacking players/bosses
					Health -= 6;
				}
				Other.Damage(self, Instigator, damage);
				if (P_Random() < 128)
				{
					Spawn(HolyPuff, Origin);
					PlaySound('SpiritAttack', CHAN_VOICE);
					if (Other.bCountKill && P_Random() < 128
						&& !GetSoundPlayingInfo(Other,
							GetSoundID('PuppyBeat')))
					{
						if ((Other.Class == Centaur) ||
							(Other.Class == CentaurLeader) ||
							(Other.Class == Ettin))
						{
							Other.PlaySound('PuppyBeat', CHAN_VOICE);
						}
					}
				}
			}
			if (Other.Health <= 0)
			{
				Enemy = none;
			}
		}
		return true;
	}
	return ::Touch(InOther);
}

//===========================================================================
//
//  RoughCheckThing
//
//===========================================================================

bool RoughCheckThing(Entity Other)
{
	Actor link = Actor(Other);
	
	if ((!link.bCountKill && !link.bIsPlayer) || link.bDormant)
	{
		return false;
	}
	if (!link.bShootable)
	{
		return false;
	}
	if (netgame && !deathmatch && link.bIsPlayer)
	{
		return false;
	}
	if (link == Instigator)
	{
		return false;
	}
	if (CanSee(link))
	{
		return true;
	}
	return false;
}

//============================================================================
//
//  CHolyFindTarget
//
//============================================================================

void CHolyFindTarget(void)
{
	Actor targ;

	targ = Actor(RoughMonsterSearch(6));
	if (targ)
	{
		Enemy = targ;
		bColideWithWorld = false;
		bSkullFly = true;
		bMissile = false;
	}
}

//============================================================================
//
//  CHolySeekerMissile
//
//  Similar to SeekerMissile, but seeks to a random Z on the target
//
//============================================================================

void CHolySeekerMissile(float thresh, float turnMax)
{
	int dir;
	float dist;
	float delta;
	float angle;
	float newZ;
	float deltaZ;

	if (!Enemy)
	{
		return;
	}
	if (!Enemy.bShootable || (!Enemy.bCountKill && !Enemy.bIsPlayer))
	{
		// Target died/target isn't a player or creature
		Enemy = none;
		bColideWithWorld = true;
		bSkullFly = false;
		bMissile = true;
		CHolyFindTarget();
		return;
	}
	dir = FaceActor(Enemy, &delta);
	if (delta > thresh)
	{
		delta /= 2.0;
		if (delta > turnMax)
		{
			delta = turnMax;
		}
	}
	if (dir)
	{
		// Turn clockwise
		Angles.yaw += delta;
	}
	else
	{
		// Turn counter clockwise
		Angles.yaw -= delta;
	}
	Angles.yaw = AngleMod360(Angles.yaw);
	angle = Angles.yaw;
	Velocity.x = Speed * cos(angle);
	Velocity.y = Speed * sin(angle);
	if (!(level->tictime & 15) ||
		Origin.z > Enemy.Origin.z + Enemy.Height ||
		Origin.z + Height < Enemy.Origin.z)
	{
		newZ = Enemy.Origin.z + Random() * Enemy.Height;
		deltaZ = newZ - Origin.z;
		if (fabs(deltaZ) > 15.0)
		{
			if (deltaZ > 0.0)
			{
				deltaZ = 15.0;
			}
			else
			{
				deltaZ = -15.0;
			}
		}
		dist = MobjDist2(Enemy, self);
		dist = dist / Speed;
		if (dist < 1.0)
		{
			dist = 1.0;
		}
		Velocity.z = deltaZ / dist;
	}
	return;
}

//============================================================================
//
//	CHolyWeave
//
//============================================================================

void CHolyWeave(void)
{
	float newX, newY;
	float angle;

	angle = AngleMod360(Angles.yaw + 90.0);
	newX = Origin.x - cos(angle) * FloatBobOffsets[WeaveXY] * 4.0;
	newY = Origin.y - sin(angle) * FloatBobOffsets[WeaveXY] * 4.0;
	WeaveXY = (WeaveXY + (P_Random() % 5)) & 63;
	newX += cos(angle) * FloatBobOffsets[WeaveXY] * 4.0;
	newY += sin(angle) * FloatBobOffsets[WeaveXY] * 4.0;
	TryMove(vector(newX, newY, Origin.z));
	Origin.z -= FloatBobOffsets[WeaveZ] * 2.0;
	WeaveZ = (WeaveZ + (P_Random() % 5)) & 63;
	Origin.z += FloatBobOffsets[WeaveZ] * 2.0;
}

//============================================================================
//
//	A_CHolySeek
//
//============================================================================

void A_CHolySeek(void)
{
	Health--;
	if (Health <= 0)
	{
		Velocity.x /= 4.0;
		Velocity.y /= 4.0;
		Velocity.z = 0.0;
		SetState(DeathState);
		StateTime -= Random() * 0.1;
		return;
	}
	if (Enemy)
	{
		CHolySeekerMissile(itof(Args[0]), itof(Args[0]) * 2.0);
		if (!((level->tictime + 7) & 15))
		{
			Args[0] = 5 + (P_Random() / 20);
		}
	}
	CHolyWeave();
}

//============================================================================
//
//	A_CHolyCheckScream
//
//============================================================================

void A_CHolyCheckScream(void)
{
	A_CHolySeek();
	if (P_Random() < 20)
	{
		PlaySound('SpiritActive', CHAN_VOICE);
	}
	if (!Enemy)
	{
		CHolyFindTarget();
	}
}

__states__
{
	S_HOLY_FX1('SPIR', 0, 2.0 / 35.0, S_HOLY_FX2) { A_CHolySeek(); }
	S_HOLY_FX2('SPIR', 0, 2.0 / 35.0, S_HOLY_FX3) { A_CHolySeek(); }
	S_HOLY_FX3('SPIR', 1, 2.0 / 35.0, S_HOLY_FX4) { A_CHolySeek(); }
	S_HOLY_FX4('SPIR', 1, 2.0 / 35.0, S_HOLY_FX1) { A_CHolyCheckScream(); }
	S_HOLY_FX_X1('SPIR', 3, 4.0 / 35.0, S_HOLY_FX_X2) { }
	S_HOLY_FX_X2('SPIR', 4, 4.0 / 35.0, S_HOLY_FX_X3) { A_Scream(); }
	S_HOLY_FX_X3('SPIR', 5, 4.0 / 35.0, S_HOLY_FX_X4) { }
	S_HOLY_FX_X4('SPIR', 6, 4.0 / 35.0, S_HOLY_FX_X5) { }
	S_HOLY_FX_X5('SPIR', 7, 4.0 / 35.0, S_HOLY_FX_X6) { }
	S_HOLY_FX_X6('SPIR', 8, 4.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	Health = 105;
	Radius = 10.0;
	Height = 6.0;
	Speed = 420.0;
	MissileDamage = 3;
	Translucency = 33;
	bRip = true;
	bSeekerMissile = true;
	IdleState = S_HOLY_FX1;
	DeathState = S_HOLY_FX_X1;
	DeathSound = 'SpiritDie';
}

//**************************************************************************
//
//  $Log$
//  Revision 1.1  2005/08/02 16:13:23  firebrand_kh
//  Initial Import
//
//  Revision 1.1  2002/10/26 16:32:26  dj_jl
//  New style of defining classes.
//
//**************************************************************************
