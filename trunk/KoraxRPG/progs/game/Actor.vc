//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id: Actor.vc 2644 2007-08-15 18:56:16Z dj_jl $
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Actor : ScriptedEntity
	abstract;

const float MORPHTIME 		= 40.0;
const float MAULATORTIME 	= 25.0;

const float TELEFOGHEIGHT	= 32.0;

int _Special1;	// Special info
int _Special2;	// Special info
float Special2f;
class<Actor> SpecialCID;


LinkedList Conditions;


//==========================================================================
//
//  HITDICE
//
//  Most damage in HERETIC and HEXEN defined using HITDICE
//
//==========================================================================

int HITDICE(int a)
{
	return (1 + (P_Random() & 7)) * a;
}

//==========================================================================
//
//	Destroyed
//
//==========================================================================

void Destroyed()
{
	// Remove from creature queue
	if (bMonster && bCorpse)
	{
		A_DeQueueCorpse();
	}

	::Destroyed();
}

//==========================================================================
//
//  ActiveMinotaur
//
//  Search thinker list for minotaur
//
//==========================================================================

Actor ActiveMinotaur()
{
	MinotaurFriend mo;

	foreach AllThinkers(MinotaurFriend, mo)
	{
		if (mo.Health <= 0)
			continue;
		if (!mo.bMonster)
			continue;	// for morphed minotaurs
		if (mo.bCorpse)
			continue;
		if ((XLevel.TicTime - mo.Args[0]) >= ftoi(MAULATORTIME * 35.0))
			continue;
		if (mo.Tracer == self)
			return mo;
	}
	return none;
}

//==========================================================================
//
//	Died
//
//==========================================================================

void Died(EntityEx source, EntityEx inflictor)
{
	::Died(source, inflictor);

														// FIXME!
	NotifyConditions(ActorCondition::notify_RecepientDead, Actor(source), 0);
}

//==========================================================================
//
//	KilledByPlayer
//
//==========================================================================

void KilledByPlayer(EntityEx source)
{
	// Check for frag changes
	if (bIsPlayer)
	{
		if (source.Player.bIsBot)
		{
			Player(source.Player).Bot.Killed(self);
		}

		if (Player.bIsBot)
		{
			Player(Player).Bot.Died(Actor(source));
		}

		if (self == source)
		{
			// Self-frag
			Player.FragsStats[Player.GetPlayerNum()]--;
			Player.Frags--;
		}
		else
		{
			source.Player.FragsStats[Player.GetPlayerNum()]++;
			source.Player.Frags++;
		}
	}
}

//==========================================================================
//
//	PlayerKilled
//
//==========================================================================

void PlayerKilled(EntityEx source, EntityEx inflictor)
{
	// Count environment kills against you
	if (!source)
	{
		Player.FragsStats[Player.GetPlayerNum()]--;
		Player.Frags--;
	}
}

//==========================================================================
//
//  MinotaurSlam
//
//==========================================================================

void MinotaurSlam(Actor source)
{
	float angle;
	float thrust;

	angle = atan2(Origin.y - source.Origin.y, Origin.x - source.Origin.x);
	thrust = 16.0 + Random() * 4.0;
	Velocity.x += thrust * cos(angle) * 35.0;
	Velocity.y += thrust * sin(angle) * 35.0;
	Damage(none, source, HITDICE(4));
	if (bIsPlayer)
	{
		ReactionTime = 0.4 + Random() * 0.2;
	}
	source.Args[4] = 0;	// Stop charging
}

//==========================================================================
//
//  MorphPlayer
//
//  Returns true if the player gets turned into a pig
//
//==========================================================================

bool MorphPlayer()
{
	Actor fog;
	Actor beastMo;
	int i;

	if (bInvulnerable)
	{
		// Immune when invulnerable
		return false;
	}
	if (Player(Player).MorphTime)
	{
		// Player is already a beast
		return false;
	}

	fog = Spawn(TeleportFog, Origin + vector(0.0, 0.0, TELEFOGHEIGHT));
	fog.PlaySound('Teleport', CHAN_VOICE);

	beastMo = Spawn(PigPlayer, Origin);
	beastMo.Tracer = Player(Player).ReadyWeapon;
	beastMo.Angles = Angles;
	beastMo.Player = Player;
	beastMo.bIsPlayer = true;
	beastMo.Health = Player::MAXMORPHHEALTH;
	Player.Health = beastMo.Health;
	Player.MO = beastMo;
	HexenArmor HArmor = HexenArmor(FindInventory(HexenArmor));
	for (i = 0; i < 4; i++)
	{
		HArmor.Slots[i] = 0.0;
	}
	beastMo.ObtainInventory(self);
	Player.PClass = HexenDefs::PCLASS_PIG;
	beastMo.bFly = bFly;
	Player(Player).MorphTime = MORPHTIME;
	Player(Player).ActivateMorphWeapon();

	SetState(S_FREETARGMOBJ);

	return true;
}

//==========================================================================
//
//  MorphMonster
//
//==========================================================================

bool MorphMonster()
{
	Actor monster;
	Actor fog;
	int i;

	if (bIsPlayer)
		return false;
	if (!bMonster)
		return false;
	if (bBoss)
		return false;
	if (bNoMorph)
		return false;

	fog = Spawn(TeleportFog, Origin + vector(0.0, 0.0, TELEFOGHEIGHT));
	fog.PlaySound('Teleport', CHAN_VOICE);

	monster = Spawn(Pig, Origin);
	monster.SpecialCID = class<Actor>(Class);
	monster._Special1 = ftoi(MORPHTIME * 35.0) + P_Random();
	monster.Alpha = Alpha;
	monster.Target = Target;
	monster.Angles.yaw = Angles.yaw;
	monster.TID = TID;
	monster.Special = Special;
	monster.InsertIntoTIDList(TID);
	for (i = 0; i < 5; i++)
	{
		monster.Args[i] = Args[i];
	}

	RemoveFromTIDList();

	SetState(S_FREETARGMOBJ);

	return true;
}

//==========================================================================
//
//  AutoUseHealth
//
//==========================================================================

void AutoUseHealth(int saveHealth)
{
	int i;
	int count;

	Inventory normal = FindInventory(ArtiHealth);
	Inventory super = FindInventory(ArtiSuperHealth);
	if ((Level.Game.gameskill == sk_baby) && (normal.Amount * 25 >= saveHealth))
	{
		// Use quartz flasks
		count = (saveHealth + 24) / 25;
		for (i = 0; i < count; i++)
		{
			Health += 25;
			if (!(--normal.Amount))
			{
				// Used last of a type - compact the artifact list
				normal.Destroy();
			}
		}
	}
	else if (super.Amount * 100 >= saveHealth)
	{
		// Use mystic urns
		count = (saveHealth + 99) / 100;
		for (i = 0; i < count; i++)
		{
			Health += 100;
			if (!(--super.Amount))
			{
				// Used last of a type - compact the artifact list
				super.Destroy();
			}
		}
	}
	else if ((Level.Game.gameskill == sk_baby)
		&& (super.Amount * 100 + normal.Amount * 25 >= saveHealth))
	{
		// Use mystic urns and quartz flasks
		count = (saveHealth + 24) / 25;
		saveHealth -= count * 25;
		for (i = 0; i < count; i++)
		{
			Health += 25;
			if (!(--normal.Amount))
			{
				// Used last of a type - compact the artifact list
				normal.Destroy();
			}
		}
		count = (saveHealth + 99) / 100;
		for (i = 0; i < count; i++)
		{
			Health += 100;
			// The same as in HERETIC
			if (!(--super.Amount))
			{
				// Used last of a type - compact the artifact list
				super.Destroy();
			}
		}
	}
	Player.Health = Health;
}

// KRPG
/*//==========================================================================
//
//  PoisonPlayer - Sets up all data concerning poisoning
//
//==========================================================================

void PoisonPlayer(Actor poisoner, int poison)
{
	if ((Player(Player).Cheats & Player::CF_GODMODE) || bInvulnerable)
	{
		return;
	}
	Player(Player).PoisonCount += poison;
	Player(Player).Poisoner = poisoner;
	if (Player(Player).PoisonCount > 100)
	{
		Player(Player).PoisonCount = 100;
	}
	Player(Player).LastPoisonTime = XLevel.Time;
}*/

// KRPG
/*//==========================================================================
//
//  PoisonDamage
//
//  Similar to Actor::Damage
//
//==========================================================================

void PoisonDamage(Actor source, int damage, bool playPainSound)
{
	Actor inflictor;

	inflictor = source;
	if (Health <= 0)
	{
		return;
	}
	if (bInvulnerable && damage < 10000)
	{	// mobj is invulnerable
		return;
	}
	if (bIsPlayer && Level.Game.gameskill == sk_baby)
	{
		// Take half damage in trainer mode
		damage >>= 1;
	}
	if (damage < 1000 && ((Player(Player).Cheats & Player::CF_GODMODE) ||
		bInvulnerable))
	{
		return;
	}
	if (damage >= Player.Health && ((Level.Game.gameskill == sk_baby) ||
		Level.Game.deathmatch) && !Player(Player).MorphTime)
	{
		// Try to use some inventory health
		AutoUseHealth(damage - Player.Health + 1);
	}
	Player.Health -= damage;	// mirror mobj health here for Dave
	if (Player.Health < 0)
	{
		Player.Health = 0;
	}
	Player(Player).Attacker = source;

	//
	// do the damage
	//
	Health -= damage;
	if (Health <= 0)
	{
		// Death
		_Special1 = damage;
		if (bIsPlayer && inflictor && !Player(Player).MorphTime)
		{
			// Check for flame death
			if (inflictor.DamageType == 'Fire' && (Health > -50) && (damage > 25))
			{
				DamageType = 'Fire';
			}
			else
			{
				DamageType = inflictor.DamageType;
			}
		}
		Died(source, inflictor);
		return;
	}
	if (!(XLevel.TicTime & 63) && playPainSound)
	{
		SetState(PainState);
	}
}*/

//============================================================================
//
//  SpawnDirt
//
//  Dirt stuff
//
//============================================================================

void SpawnDirt(float radius)
{
	float angle;
	TVec org;
	class<Actor> dtype;
	Actor dirt;

	angle = 360.0 * Random();
	org.x = Origin.x + radius * cos(angle);
	org.y = Origin.y + radius * sin(angle);
	org.z = Origin.z + Random() * 2.0 + 1.0;
	switch (P_Random() % 6)
	{
	case 0:
		dtype = Dirt1;
		break;
	case 1:
		dtype = Dirt2;
		break;
	case 2:
		dtype = Dirt3;
		break;
	case 3:
		dtype = Dirt4;
		break;
	case 4:
		dtype = Dirt5;
		break;
	case 5:
		dtype = Dirt6;
		break;
	}
	dirt = Spawn(dtype, org);
	if (dirt)
	{
		dirt.Velocity.z = Random() * 4.0 * 35.0;
	}
}

//==========================================================================
//
//  TeleportToPlayerStarts
//
//==========================================================================

void TeleportToPlayerStarts()
{
	int i;
	int selections = 0;
	float destX;
	float destY;
	float destAngle;

	for (i = 0; i < MAXPLAYERS; i++)
	{
		if (!Level.Game.Players[i])
			continue;
		selections++;
	}
	i = P_Random() % selections;
	destX = Level.PlayerStarts[i].x;
	destY = Level.PlayerStarts[i].y;
	destAngle = itof(45 * (Level.PlayerStarts[i].angle / 45));
	Teleport(vector(destX, destY, ONFLOORZ), destAngle, true, true, false);
}

//==========================================================================
//
//  TeleportToDeathmatchStarts
//
//==========================================================================

void TeleportToDeathmatchStarts()
{
	int i;
	float destX;
	float destY;
	float destAngle;

	if (Level.NumDeathmatchStarts)
	{
		i = P_Random() % Level.NumDeathmatchStarts;
		destX = Level.DeathmatchStarts[i].x;
		destY = Level.DeathmatchStarts[i].y;
		destAngle = itof(45 * (Level.DeathmatchStarts[i].angle / 45));
		Teleport(vector(destX, destY, ONFLOORZ), destAngle, true, true,
			false);
	}
	else
	{
		TeleportToPlayerStarts();
	}
}

//==========================================================================
//
//  TeleportOther
//
//==========================================================================

void TeleportOther()
{
	if (bIsPlayer)
	{
		if (Level.Game.deathmatch)
			TeleportToDeathmatchStarts();
		else
			TeleportToPlayerStarts();
	}
	else
	{
		// If death action, run it upon teleport
		if (bMonster && Special)
		{
			RemoveFromTIDList();
			Level.ExecuteActionSpecial(Special, Args[0], Args[1], Args[2],
				Args[3], Args[4], NULL, 0, self);
			Special = 0;
		}

		// Send all monsters to deathmatch spots
		TeleportToDeathmatchStarts();
	}
}

//==========================================================================
//
//	Tick
//
//==========================================================================

void Tick(float deltaTime)
{
	::Tick(deltaTime);

	if (Conditions && Conditions.refHead)
	{
		ActorCondition ac = ActorCondition(Conditions.refHead);
		while (ac)
		{
			ac.Tick(deltaTime);
			ac = ActorCondition(ac.refNext);
		};
	}
}

//**************************************************************************
//
//  OBJECT MOVEMENT
//
//**************************************************************************

//==========================================================================
//
//  ClipVelocity
//
//  Slide off of the impacting object
//
//==========================================================================

TVec ClipVelocity(TVec in, TVec normal, float overbounce)
{
	return in - normal * (DotProduct(in, normal) * overbounce);
}

//===========================================================================
//
//	PlayerIsMorphed
//
//===========================================================================

bool PlayerIsMorphed()
{
	return !!Player(Player).MorphTime;
}

//===========================================================================
//
//	SpawnBlasterEffects
//
//===========================================================================

void SpawnBlasterEffects()
{
	float z;
	Actor A;

	if (Class == MageWandMissile)
	{
		if (P_Random() < 128)
		{
			z = Origin.z - 8.0;
			if (z < FloorZ)
			{
				z = FloorZ;
			}
			Spawn(MageWandSmoke, vector(Origin.x, Origin.y, z));
		}
	}
	else
	{
		if (!--_Special1)
		{
			_Special1 = 4;
			z = Origin.z - 12.0;
			if (z < FloorZ)
			{
				z = FloorZ;
			}
			A = Spawn(CFlameFloor, vector(Origin.x, Origin.y, z));
			if (A)
			{
				A.Angles.yaw = Angles.yaw;
			}
		}
	}
}

//==========================================================================
//
//	GetBaseViewHeight
//
//==========================================================================

float GetBaseViewHeight()
{
	return Player::VIEWHEIGHT;
}

//==========================================================================
//
//  Blast
//
//==========================================================================

final void Blast(Actor source, float strength)
{
	float angle;
	float ang;
	Actor A;
	float x;
	float y;
	float z;

	angle = atan2(Origin.y - source.Origin.y, Origin.x - source.Origin.x);
	if (strength < ArtiBlastRadius::BLAST_FULLSTRENGTH)
	{
		Velocity.x = strength * cos(angle) * 35.0;
		Velocity.y = strength * sin(angle) * 35.0;
		if (bIsPlayer)
		{
			// Players handled automatically
		}
		else
		{
			bSlide = true;
			bBlasted = true;
		}
	}
	else	// full strength blast from artifact
	{
		if (bMissile)
		{
			if (SorcBall(self))
			{
				// don't blast sorcerer balls
				return;
			}
			else if (MageStaffFX2(self))
			{
				// Reflect to originator
				Tracer = Target;
				Target = source;
			}
		}
		if (Class == HolySpirit)
		{
			if (Tracer == source)
			{
				Tracer = Target;
				Target = source;
			}
		}
		Velocity.x = ArtiBlastRadius::BLAST_SPEED * cos(angle) * 35.0;
		Velocity.y = ArtiBlastRadius::BLAST_SPEED * sin(angle) * 35.0;

		// Spawn blast puff
		ang = atan2(source.Origin.y - Origin.y, source.Origin.x - Origin.x);
		x = Origin.x + (Radius + 1.0) * cos(ang);
		y = Origin.y + (Radius + 1.0) * sin(ang);
		z = Origin.z - FloorClip + Height / 2.0;
		A = Spawn(BlastEffect, vector(x, y, z));
		if (A)
		{
			A.Velocity.x = Velocity.x;
			A.Velocity.y = Velocity.y;
		}

		if (bMissile)
		{
			Velocity.z = 8.0 * 35.0;
			A.Velocity.z = Velocity.z;
		}
		else
		{
			Velocity.z = 1000.0 / Mass * 35.0;
		}
		if (bIsPlayer)
		{
			// Players handled automatically
		}
		else
		{
			bSlide = true;
			bBlasted = true;
		}
	}
}

//===========================================================================
//
//  A_NoGravity
//
//===========================================================================

final void A_NoGravity()
{
	bNoGravity = true;
}

//============================================================================
//
//  A_SetInvulnerable
//
//============================================================================

final void A_SetInvulnerable()
{
	bInvulnerable = true;
}

//============================================================================
//
//  A_UnSetInvulnerable
//
//============================================================================

final void A_UnSetInvulnerable()
{
	bInvulnerable = false;
}

//==========================================================================
//
//  A_HideThing
//
//==========================================================================

final void A_HideThing()
{
	bHidden = true;
}

//==========================================================================
//
//  A_UnHideThing
//
//==========================================================================

final void A_UnHideThing()
{
	bHidden = false;
}

//============================================================================
//
//  A_PlayerScream
//
//============================================================================

final void A_PlayerScream()
{
	// Handle the different player death screams
	if (Velocity.z <= -39.0 * 35.0)
	{
		// Falling splat
		PlaySound('*splat', CHAN_VOICE);
	}
	else if (Health > -50)
	{
		// Normal death sound
		PlaySound('*death', CHAN_VOICE);
	}
	else if (Health > -100)
	{
		// Crazy death sound
		PlaySound('*crazydeath', CHAN_VOICE);
	}
	else
	{
		// Extreme death sound
		PlaySound('*xdeath', CHAN_VOICE);
	}
}

//==========================================================================
//
//  A_AddPlayerCorpse
//
//==========================================================================

final void A_AddPlayerCorpse()
{
	if (HexenLevelInfo(Level).bodyqueslot >= HexenLevelInfo::BODYQUESIZE)
	{
		// Too many player corpses - remove an old one
		HexenLevelInfo(Level).bodyque[HexenLevelInfo(Level).bodyqueslot % HexenLevelInfo::BODYQUESIZE].Destroy();
	}
	HexenLevelInfo(Level).bodyque[HexenLevelInfo(Level).bodyqueslot % HexenLevelInfo::BODYQUESIZE] = self;
	HexenLevelInfo(Level).bodyqueslot++;
}

//============================================================================
//
//  A_CheckBurnGone
//
//============================================================================

final void A_CheckBurnGone()
{
	if (_Special2 == 666)
	{
		SetState(S_PLAY_FDTH20);
	}
}

//============================================================================
//
//  A_QueueCorpse
//
//  Throw another corpse on the queue.
//
//============================================================================

final void A_QueueCorpse()
{
	EntityEx corpse;

	if (HexenLevelInfo(Level).corpseQueueSlot >= HexenLevelInfo::CORPSEQUEUESIZE)
	{
		// Too many corpses - remove an old one
		corpse = HexenLevelInfo(Level).corpseQueue[HexenLevelInfo(Level).corpseQueueSlot % HexenLevelInfo::CORPSEQUEUESIZE];
		if (corpse)
			corpse.Destroy();
	}
	HexenLevelInfo(Level).corpseQueue[HexenLevelInfo(Level).corpseQueueSlot % HexenLevelInfo::CORPSEQUEUESIZE] = self;
	HexenLevelInfo(Level).corpseQueueSlot++;
}

//============================================================================
//
//  A_DeQueueCorpse
//
//  Remove a mobj from the queue (for resurrection)
//
//============================================================================

final void A_DeQueueCorpse()
{
	int slot;

	for (slot = 0; slot < HexenLevelInfo::CORPSEQUEUESIZE; slot++)
	{
		if (HexenLevelInfo(Level).corpseQueue[slot] == self)
		{
			HexenLevelInfo(Level).corpseQueue[slot] = none;
			break;
		}
	}
}

//============================================================================
//
//  A_PigPain
//
//============================================================================

final void A_PigPain()
{
	A_Pain();
	if (Origin.z <= FloorZ)
	{
		Velocity.z = 3.5 * 35.0;
	}
}

//==========================================================================
//
//	CastCondition
//
//==========================================================================

ActorCondition CastCondition(class<ActorCondition> ConditionClass, bool accumulative,
											Actor Instigator, int level, float life_duration)
{
	if (!Conditions)
	{
		Conditions = LinkedList(SpawnObject(LinkedList));
		if (!Conditions) return none;
	}

	ActorCondition AC;
	ActorCondition existingAC;

	if (accumulative)
		existingAC = GetCondition(ConditionClass, Instigator, level);

	if (existingAC)
	{
		float limit;

		if (existingAC.MaxAccumulatedLifePerLevel < 0.0)
			existingAC.LifeTime += life_duration;
		else
		{
			limit = existingAC.MaxAccumulatedLifePerLevel * itof(existingAC.Level);
			if (existingAC.LifeTime >= limit)
				existingAC = none;	// [CW] to mark that no condition is added
			else
			{
				existingAC.LifeTime += life_duration;
				if (existingAC.LifeTime > limit)
					existingAC.LifeTime = limit;
			}
		}
	}
	else
	{
		AC = ActorCondition(SpawnObject(ConditionClass));

		if (AC)
		{
			Conditions.Add(AC);

			AC.ARecepient = self;
			AC.AInstigator = Instigator;
			AC.Level = level;
			AC.LifeDuration = life_duration;
			AC.Activate();
		}
	}

	if (existingAC || AC)
	{
		if (Player && AC.CastMessage)
				Player.cprint(AC.CastMessage);
		if (AC.CastSound)
			PlaySound(AC.CastSound, CHAN_VOICE);
	}

	if (existingAC) return existingAC;
	if (AC) return AC;

	return none;
}

//==========================================================================
//
//	GetCondition
//
//==========================================================================

ActorCondition GetCondition(class<ActorCondition> ConditionClass, Actor Instigator, int level)
{
	if (Conditions && Conditions.refHead)
	{
		ActorCondition ac = ActorCondition(Conditions.refHead);
		while (ac)
		{
			if (ac.Class == ConditionClass &&
					ac.AInstigator == Instigator &&
					ac.Level == level)
			{
				return ac;
			}
			ac = ActorCondition(ac.refNext);
		};
	}

	return none;
}

//==========================================================================
//
//	NotifyConditions
//
//==========================================================================

void NotifyConditions(int notification, Actor A, int param)
{
	if (Conditions && Conditions.refHead)
	{
		ActorCondition ac = ActorCondition(Conditions.refHead);
		while (ac)
		{
			ac.Notify(notification, A, param);
			ac = ActorCondition(ac.refNext);
		};
	}
}


__states__
{
	S_FREETARGMOBJ('ACLO', 4, 1050.0 / 35.0, none) = A_FreeTargMobj
	S_GIBS1('GIBS', 0, -1.0, none) = none
	S_PLAY_FDTH20('ACLO', 4, 8.0 / 35.0, none) = none
}

defaultproperties
{
	SoundClass = 'fighter';
	CrunchState = S_GIBS1;
	CrunchSound = '*splat';
}
