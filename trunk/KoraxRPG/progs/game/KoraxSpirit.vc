//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class KoraxSpirit : Projectile;

int LifeTime;
int WeaveXY;
int WeaveZ;

//==========================================================================
//
//  KSpiritInit
//
//==========================================================================

void KSpiritInit(Actor korax)
{
	int i;
	Actor tail;
	Actor next;

	Tracer = korax;	// Swarm around korax
	WeaveZ = 32 + (P_Random() & 7);	// Float bob index

	// Spawn a tail for spirit
	tail = Spawn(HolyTail, Origin);
	HolyTail(tail).ParentSpirit = self;	// parent
	for (i = 1; i < 3; i++)
	{
		next = Spawn(HolyTail, Origin);
		next.SetState(GetStatePlus(next.IdleState, 1, true));
		HolyTail(tail).NextTail = HolyTail(next);
		tail = next;
	}
}

//==========================================================================
//
//  A_KSpiritSeeker
//
//==========================================================================

final void A_KSpiritSeeker(float thresh, float turnMax)
{
	int dir;
	float dist;
	float delta;
	float angle;
	float newZ;
	float deltaZ;

	if (Tracer == none)
	{
		return;
	}
	dir = FaceActor(Actor(Tracer), delta);
	if (delta > thresh)
	{
		delta /= 2.0;
		if (delta > turnMax)
		{
			delta = turnMax;
		}
	}
	if (dir)
	{
		// Turn clockwise
		Angles.yaw = AngleMod360(Angles.yaw + delta);
	}
	else
	{
		// Turn counter clockwise
		Angles.yaw = AngleMod360(Angles.yaw - delta);
	}
	angle = Angles.yaw;
	Velocity.x = Speed * cos(angle);
	Velocity.y = Speed * sin(angle);

	if (!(XLevel.TicTime & 15) ||
		Origin.z > Tracer.Origin.z + Tracer.Height ||
		Origin.z + Height < Tracer.Origin.z)
	{
		newZ = Tracer.Origin.z + Random() * Tracer.Height;
		deltaZ = newZ - Origin.z;
		if (fabs(deltaZ) > 15.0)
		{
			if (deltaZ > 0.0)
			{
				deltaZ = 15.0;
			}
			else
			{
				deltaZ = -15.0;
			}
		}
		dist = DistTo2(Tracer);
		dist = dist / Speed;
		if (dist < 1.0)
		{
			dist = 1.0;
		}
		Velocity.z = deltaZ / dist;
	}
	return;
}

//==========================================================================
//
//  A_KSpiritWeave
//
//==========================================================================

final void A_KSpiritWeave()
{
	float newX, newY;
	float angle;

	angle = AngleMod360(Angles.yaw + 90.0);
	newX = Origin.x - cos(angle) * Level.Game.FloatBobOffsets[WeaveXY] * 4.0;
	newY = Origin.y - sin(angle) * Level.Game.FloatBobOffsets[WeaveXY] * 4.0;
	WeaveXY = (WeaveXY + (P_Random() % 5)) & 63;
	newX += cos(angle) * Level.Game.FloatBobOffsets[WeaveXY] * 4.0;
	newY += sin(angle) * Level.Game.FloatBobOffsets[WeaveXY] * 4.0;
	TryMove(vector(newX, newY, Origin.z));
	Origin.z -= Level.Game.FloatBobOffsets[WeaveZ] * 2.0;
	WeaveZ = (WeaveZ + (P_Random() % 5)) & 63;
	Origin.z += Level.Game.FloatBobOffsets[WeaveZ] * 2.0;
}

//==========================================================================
//
//  A_KSpiritRoam
//
//==========================================================================

final void A_KSpiritRoam()
{
	if (LifeTime-- <= 0)
	{
		PlaySound('SpiritDie', CHAN_VOICE);
		SetState(FindState('Death'));
	}
	else
	{
		if (Tracer)
		{
			A_KSpiritSeeker(10.0, 20.0);
		}
		A_KSpiritWeave();
		if (Random() < 0.1953125)
		{
			PlaySound('SpiritActive', CHAN_VOICE, 1.0, ATTN_NONE);
		}
	}
}

states
{
Spawn:
	SPIR AB 5 A_KSpiritRoam
	Loop
Death:
	SPIR DEFGHI 5
	Stop
}

defaultproperties
{
	LifeTime = 5 * 35 / 5;	// 5 seconds
	Speed = 280.0;
	RenderStyle = STYLE_Translucent;
	Alpha = 0.666;
	bColideWithWorld = false;
	bColideWithThings = false;
	bActivateImpact = false;
	bActivatePCross = false;
	bDynamicLight = true;
	DLightColour = RGB(221, 221, 221);
	DLightRadius = 126.0;
}
