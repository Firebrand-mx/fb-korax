//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class HolyMissile : Projectile;

//============================================================================
//
//	A_CHolySpawnPuff
//
//============================================================================

final void A_CHolySpawnPuff()
{
	Spawn(HolyMissilePuff, Origin);
}

//============================================================================
//
//  A_CHolyAttack2
//
//  Spawns the spirits
//
//============================================================================

final void A_CHolyAttack2()
{
	int j;
	int i;
	Actor A;
	Actor tail;
	Actor next;

	for (j = 0; j < 4; j++)
	{
		A = Spawn(HolySpirit, Origin);
		if (!A)
		{
			continue;
		}
		switch (j)
		{	// float bob index
		case 0:
			HolySpirit(A).WeaveZ = P_Random() & 7;	// upper-left
			break;
		case 1:
			HolySpirit(A).WeaveZ = 32 + (P_Random() & 7);	// upper-right
			break;
		case 2:
			HolySpirit(A).WeaveXY = 32 + (P_Random() & 7);	// lower-left
			break;
		case 3:
			HolySpirit(A).WeaveXY = 32 + (P_Random() & 7);
			HolySpirit(A).WeaveZ = 32 + (P_Random() & 7);
			break;
		}
		A.Origin.z = Origin.z;
		A.Angles.yaw = AngleMod360(Angles.yaw +
			(45.0 + 45.0 / 2.0) - 45.0 * itof(j));
		A.Thrust(A.Angles.yaw, A.Speed * Level.Game.frametime);
		A.Target = Target;
		A.Args[0] = 10;	// initial turn value
		A.Args[1] = 0;	// initial look angle
		if (Level.Game.deathmatch)
		{
			// Ghosts last slightly less longer in DeathMatch
			A.Health = 85;
		}
		if (Tracer)
		{
			A.Tracer = Tracer;
			//	Don't colide with world but colide with things, i.e explode
			A.bColideWithWorld = false;
			A.bSkullFly = true;
			A.bMissile = false;
		}
		tail = Spawn(HolyTail, A.Origin);
		HolyTail(tail).ParentSpirit = A;	// parent
		for (i = 1; i < 3; i++)
		{
			next = Spawn(HolyTail, A.Origin);
			next.SetState(GetStatePlus(next.IdleState, 1));
			HolyTail(tail).NextTail = HolyTail(next);
			tail = next;
		}
	}
}

states
{
Spawn:
	SPIR PPPP 3 Bright A_CHolySpawnPuff
Death:
	SPIR P 1 Bright A_CHolyAttack2
	Stop
}

defaultproperties
{
	Radius = 15.0;
	Height = 8.0;
	Speed = 1050.0;
	MissileDamage = 4;
	bActivateImpact = false;
	bActivatePCross = false;
	bExtremeDeath = true;
	bDynamicLight = true;
	DLightColour = RGB(221, 221, 221);
	DLightRadius = 126.0;
}
