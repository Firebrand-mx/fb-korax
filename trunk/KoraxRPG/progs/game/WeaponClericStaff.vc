//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class WeaponClericStaff : Weapon;

int BlinkCount;
int BlinkState;
int Attack2State;

//============================================================================
//
//  A_CStaffInitBlink
//
//============================================================================

void A_CStaffInitBlink(void)
{
	BlinkCount = (P_Random() >> 1) + 20;
}

//============================================================================
//
//  A_CStaffCheckBlink
//
//============================================================================

void A_CStaffCheckBlink(void)
{
	if (!--BlinkCount)
	{
		SetState(BlinkState);
		BlinkCount = (P_Random() + 50) >> 2;
	}
}

//============================================================================
//
//  A_CStaffCheck
//
//============================================================================

void A_CStaffCheck(void)
{
	Actor pmo;
	int damage;
	int newLife;
	int i;
	TAVec angles;
	TVec vforward;

	pmo = Player.MO;
	damage = 20 + (P_Random() & 15);
	PuffType = ClericStaffPuff;
	for (i = 0; i < 3; i++)
	{
		angles = pmo.Angles;
		angles.yaw = AngleMod360(angles.yaw + itof(i) * (45.0 / 16.0));
		AimLineAttack(pmo, &angles, 3.0 * MELEERANGE / 2.0);
		if (linetarget)
		{
			AngleVector(&angles, &vforward);
			LineAttack(pmo, vforward, 1.5 * MELEERANGE, damage);
			pmo.Angles.yaw = atan2(linetarget.Origin.y - pmo.Origin.y,
				linetarget.Origin.x - pmo.Origin.x);
			if ((linetarget.bIsPlayer || linetarget.bCountKill) &&
				!linetarget.bDormant && !linetarget.bInvulnerable)
			{
				newLife = Player.Health + (damage >> 3);
				newLife = newLife > 100 ? 100 : newLife;
				pmo.Health = newLife;
				Player.Health = newLife;
				SetState(Attack2State);
			}
			Player.Mana[MANA_1] -=
				WeaponManaUse(Player.PClass, Player.ReadyWeapon);
			break;
		}
		angles = pmo.Angles;
		angles.yaw = AngleMod360(angles.yaw - itof(i) * (45.0 / 16.0));
		AimLineAttack(Player.MO, &angles, 3.0 * MELEERANGE / 2.0);
		if (linetarget)
		{
			AngleVector(&angles, &vforward);
			LineAttack(pmo, vforward, 1.5 * MELEERANGE, damage);
			pmo.Angles.yaw = atan2(linetarget.Origin.y - pmo.Origin.y,
				linetarget.Origin.x - pmo.Origin.x);
			if (linetarget.bIsPlayer || linetarget.bCountKill)
			{
				newLife = Player.Health + (damage >> 4);
				newLife = newLife > 100 ? 100 : newLife;
				pmo.Health = newLife;
				Player.Health = pmo.Health;
				SetState(Attack2State);
			}
			Player.Mana[MANA_1] -=
				WeaponManaUse(Player.PClass, Player.ReadyWeapon);
			break;
		}
	}
}

//============================================================================
//
//  A_CStaffAttack
//
//============================================================================

void A_CStaffAttack()
{
	Actor mo;
	PlayerPawn playPawn;

	Player.Mana[MANA_1] -=
		WeaponManaUse(Player.PClass, Player.ReadyWeapon);
	playPawn = PlayerPawn(Player.MO);
	mo = Player.SpawnPlayerMissileAngle(ClericStaffMissile,
		playPawn.Angles.yaw - (45.0 / 15.0));
	if (mo)
	{
		ClericStaffMissile(mo).WeaveXY = 32;
	}
	mo = Player.SpawnPlayerMissileAngle(ClericStaffMissile,
		playPawn.Angles.yaw + (45.0 / 15.0));
	if (mo)
	{
		ClericStaffMissile(mo).WeaveXY = 0;
	}
	playPawn.PlaySound('ClericCStaffFire', CHAN_WEAPON);
}

__states__
{
	S_CSTAFFREADY('CSSF', 2, 4.0 / 35.0, S_CSTAFFREADY1) { }
	S_CSTAFFREADY1('CSSF', 1, 3.0 / 35.0, S_CSTAFFREADY2) { A_CStaffInitBlink(); }
	S_CSTAFFREADY2('CSSF', 0, 1.0 / 35.0, S_CSTAFFREADY3) { A_WeaponReady(); }
	S_CSTAFFREADY3('CSSF', 0, 1.0 / 35.0, S_CSTAFFREADY4) { A_WeaponReady(); }
	S_CSTAFFREADY4('CSSF', 0, 1.0 / 35.0, S_CSTAFFREADY5) { A_WeaponReady(); }
	S_CSTAFFREADY5('CSSF', 0, 1.0 / 35.0, S_CSTAFFREADY6) { A_WeaponReady(); }
	S_CSTAFFREADY6('CSSF', 0, 1.0 / 35.0, S_CSTAFFREADY7) { A_WeaponReady(); }
	S_CSTAFFREADY7('CSSF', 0, 1.0 / 35.0, S_CSTAFFREADY8) { A_WeaponReady(); }
	S_CSTAFFREADY8('CSSF', 0, 1.0 / 35.0, S_CSTAFFREADY9) { A_WeaponReady(); }
	S_CSTAFFREADY9('CSSF', 0, 1.0 / 35.0, S_CSTAFFREADY2) { A_CStaffCheckBlink(); }
	S_CSTAFFBLINK1('CSSF', 1, 1.0 / 35.0, S_CSTAFFBLINK2) { A_WeaponReady(); }
	S_CSTAFFBLINK2('CSSF', 1, 1.0 / 35.0, S_CSTAFFBLINK3) { A_WeaponReady(); }
	S_CSTAFFBLINK3('CSSF', 1, 1.0 / 35.0, S_CSTAFFBLINK4) { A_WeaponReady(); }
	S_CSTAFFBLINK4('CSSF', 2, 1.0 / 35.0, S_CSTAFFBLINK5) { A_WeaponReady(); }
	S_CSTAFFBLINK5('CSSF', 2, 1.0 / 35.0, S_CSTAFFBLINK6) { A_WeaponReady(); }
	S_CSTAFFBLINK6('CSSF', 2, 1.0 / 35.0, S_CSTAFFBLINK7) { A_WeaponReady(); }
	S_CSTAFFBLINK7('CSSF', 2, 1.0 / 35.0, S_CSTAFFBLINK8) { A_WeaponReady(); }
	S_CSTAFFBLINK8('CSSF', 2, 1.0 / 35.0, S_CSTAFFBLINK9) { A_WeaponReady(); }
	S_CSTAFFBLINK9('CSSF', 1, 1.0 / 35.0, S_CSTAFFBLINK10) { A_WeaponReady(); }
	S_CSTAFFBLINK10('CSSF', 1, 1.0 / 35.0, S_CSTAFFBLINK11) { A_WeaponReady(); }
	S_CSTAFFBLINK11('CSSF', 1, 1.0 / 35.0, S_CSTAFFREADY2) { A_WeaponReady(); }
	S_CSTAFFDOWN('CSSF', 1, 3.0 / 35.0, S_CSTAFFDOWN2) { }
	S_CSTAFFDOWN2('CSSF', 2, 4.0 / 35.0, S_CSTAFFDOWN3) { }
	S_CSTAFFDOWN3('CSSF', 2, 1.0 / 35.0, S_CSTAFFDOWN3) { A_Lower(); }
	S_CSTAFFUP('CSSF', 2, 1.0 / 35.0, S_CSTAFFUP) { A_Raise(); }
	S_CSTAFFATK_1('CSSF', 0, 1.0 / 35.0, S_CSTAFFATK_2) { SY = 45.0; A_CStaffCheck(); }
	S_CSTAFFATK_2('CSSF', 9, 1.0 / 35.0, S_CSTAFFATK_3) { SY = 50.0; A_CStaffAttack(); }
	S_CSTAFFATK_3('CSSF', 9, 2.0 / 35.0, S_CSTAFFATK_4) { SY = 50.0; }
	S_CSTAFFATK_4('CSSF', 9, 2.0 / 35.0, S_CSTAFFATK_5) { SY = 45.0; }
	S_CSTAFFATK_5('CSSF', 0, 2.0 / 35.0, S_CSTAFFATK_6) { SY = 40.0; }
	S_CSTAFFATK_6('CSSF', 0, 2.0 / 35.0, S_CSTAFFREADY2) { SY = 36.0; }
	S_CSTAFFATK2_1('CSSF', 10, 10.0 / 35.0, S_CSTAFFREADY2) { SY = 36.0; }
}

defaultproperties
{
	Mana = MANA_1;
	UpState = S_CSTAFFUP;
	DownState = S_CSTAFFDOWN;
	ReadyState = S_CSTAFFREADY;
	BlinkState = S_CSTAFFBLINK1;
	AttackState = S_CSTAFFATK_1;
	HoldAttackState = S_CSTAFFATK_1;
	Attack2State = S_CSTAFFATK2_1;
	PSpriteSY = 10.0;
}

//**************************************************************************
//
//  $Log$
//  Revision 1.1  2005/08/02 16:13:26  firebrand_kh
//  Initial Import
//
//  Revision 1.3  2004/08/22 19:23:26  dj_jl
//  Moved many functions to player class.
//
//  Revision 1.2  2003/11/12 16:50:47  dj_jl
//  Changed player structure into a class
//
//  Revision 1.1  2002/10/26 16:32:27  dj_jl
//  New style of defining classes.
//
//**************************************************************************
