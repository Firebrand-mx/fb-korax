//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class FWeapHammer : FighterWeapon
	__mobjinfo__(123)
	__scriptid__(28);

bool bThrowHammer;
const float HammerRange = Actor::MELEERANGE + Actor::MELEERANGE / 2.0;

//============================================================================
//
//  A_FHammerAttack
//
//============================================================================

final void A_FHammerAttack() self(Actor)
{
	int			damage;
	float		power;
	TAVec		angles;
	TVec		vforward;
	EntityEx	AimTarget;

	if (!bIsPlayer)
	{
		return;
	}
	Weapon Wpn = PlayerEx(Player).ReadyWeapon;

	damage = 60 + (P_Random() & 63);
	power = 10.0;
	AimTarget = AimEx(vforward, FWeapHammer::HammerRange, 45.0 / 32.0, 16, FWeapHammer::HammerRange);
	if (AimTarget)
	{
		VectorAngles(&vforward, &angles);
		if (LineAttack(vforward, FWeapHammer::HammerRange, damage, HammerPuff))
		{
			PlaySound('FighterHammerMiss', CHAN_WEAPON);
		}
		Player(Player).AdjustPlayerAngle(AimTarget);
		if (AimTarget.bMonster || AimTarget.bIsPlayer)
		{
			AimTarget.Thrust(angles.yaw, power);
		}
		FWeapHammer(Wpn).bThrowHammer = false;	// Don't throw a hammer
	}
	else
	{
		// didn't find any targets in meleerange, so set to throw out a hammer
		LineSpecialLevelInfo(Level).bPuffSpawned = false;
		if (LineAttack(vforward, FWeapHammer::HammerRange, damage, HammerPuff))
		{
			PlaySound('FighterHammerMiss', CHAN_WEAPON);
		}
		if (LineSpecialLevelInfo(Level).bPuffSpawned)
		{
			FWeapHammer(Wpn).bThrowHammer = false;
		}
		else
		{
			FWeapHammer(Wpn).bThrowHammer = true;
		}
	}

	if (!Wpn.CheckAmmo(false, true))
	{
		// Don't spawn a hammer if the player doesn't have enough mana
		FWeapHammer(Wpn).bThrowHammer = false;
	}
	return;
}

//============================================================================
//
//  A_FHammerThrow
//
//============================================================================

final void A_FHammerThrow() self(Actor)
{
	if (!bIsPlayer)
	{
		return;
	}
	Weapon Wpn = PlayerEx(Player).ReadyWeapon;

	if (!FWeapHammer(Wpn).bThrowHammer)
	{
		return;
	}
	
	SpawnPlayerMissile(HammerMissile);
	FWeapHammer(Wpn).DepleteAmmoEx(false);
}

states
{
Ready:
	FHMR A 1 A_WeaponReady
	Loop
Deselect:
	FHMR A 1 A_Lower
	Loop
Select:
	FHMR A 1 A_Raise
	Loop
Fire:
	FHMR B 6 Offset(5, 0)
	FHMR C 3 Offset(5, 0) A_FHammerAttack
	FHMR D 3 Offset(5, 0)
	FHMR E 2 Offset(5, 0)
	FHMR E 10 Offset(5, 150) A_FHammerThrow
	FHMR A 1 Offset(0, 60)
	FHMR A 1 Offset(0, 55)
	FHMR A 1 Offset(0, 50)
	FHMR A 1 Offset(0, 45)
	FHMR A 1 Offset(0, 40)
	FHMR A 1 Offset(0, 35)
	FHMR A 1
	Goto Ready
Spawn:
	WFHM A -1
	Stop
}

defaultproperties
{
	WeaponClass = HexenDefs::PCLASS_FIGHTER;
	SelectionOrder = 900;
	AmmoType1 = Mana2;
	AmmoUse1 = 3;
	AmmoGive1 = 25;
	PSpriteSY = -10.0;
	PickupMessage = "$txt_weapon_f3";
	BotCombatDist = 192.0;
	bAmmoOptional = true;
	bBotProjectile = true;
}
