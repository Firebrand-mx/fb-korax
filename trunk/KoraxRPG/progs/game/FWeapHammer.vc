//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id: FWeapHammer.vc 2641 2007-08-15 11:19:53Z dj_jl $
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class FWeapHammer : FighterWeapon
	__mobjinfo__(123)
	__scriptid__(28);

bool bThrowHammer;
float HammerRange;

//============================================================================
//
//  A_FHammerAttack
//
//============================================================================

final void A_FHammerAttack()
{
	int			damage;
	float		power;
	TAVec		angles;
	TVec		vforward;
	EntityEx	AimTarget;

	damage = 60 + (P_Random() & 63);
	power = 10.0;
	AimTarget = Actor(Owner).AimEx(vforward, HammerRange, 45.0 / 32.0, 16, HammerRange);
	if (AimTarget)
	{
		VectorAngles(&vforward, &angles);
		if (Actor(Owner).LineAttack(vforward, HammerRange, damage, HammerPuff))
		{
			Owner.PlaySound('FighterHammerMiss', CHAN_WEAPON);
		}
		Player(Owner.Player).AdjustPlayerAngle(AimTarget);
		if (AimTarget.bMonster || AimTarget.bIsPlayer)
		{
			AimTarget.Thrust(angles.yaw, power);
		}
		bThrowHammer = false;	// Don't throw a hammer
	}
	else
	{
		// didn't find any targets in meleerange, so set to throw out a hammer
		LineSpecialLevelInfo(Level).bPuffSpawned = false;
		if (Actor(Owner).LineAttack(vforward, HammerRange, damage, HammerPuff))
		{
			Owner.PlaySound('FighterHammerMiss', CHAN_WEAPON);
		}
		if (LineSpecialLevelInfo(Level).bPuffSpawned)
		{
			bThrowHammer = false;
		}
		else
		{
			bThrowHammer = true;
		}
	}

	if (!CheckAmmo(false, true))
	{
		// Don't spawn a hammer if the player doesn't have enough mana
		bThrowHammer = false;
	}
	return;
}

//============================================================================
//
//  A_FHammerThrow
//
//============================================================================

final void A_FHammerThrow()
{
	if (!bThrowHammer)
	{
		return;
	}
	Actor(Owner).SpawnPlayerMissile(HammerMissile);
	DepleteAmmoEx(false);
}

__states__
{
	S_FHAMMERREADY('FHMR', 0, 1.0 / 35.0, S_FHAMMERREADY) = A_WeaponReady
	S_FHAMMERDOWN('FHMR', 0, 1.0 / 35.0, S_FHAMMERDOWN) = A_Lower
	S_FHAMMERUP('FHMR', 0, 1.0 / 35.0, S_FHAMMERUP) = A_Raise
	S_FHAMMERATK_1('FHMR', 1, 6.0 / 35.0, S_FHAMMERATK_2, 5, 0) = none
	S_FHAMMERATK_2('FHMR', 2, 3.0 / 35.0, S_FHAMMERATK_3, 5, 0) = A_FHammerAttack
	S_FHAMMERATK_3('FHMR', 3, 3.0 / 35.0, S_FHAMMERATK_4, 5, 0) = none
	S_FHAMMERATK_4('FHMR', 4, 2.0 / 35.0, S_FHAMMERATK_5, 5, 0) = none
	S_FHAMMERATK_5('FHMR', 4, 10.0 / 35.0, S_FHAMMERATK_6, 5, 150) = A_FHammerThrow
	S_FHAMMERATK_6('FHMR', 0, 1.0 / 35.0, S_FHAMMERATK_7, 0, 60) = none
	S_FHAMMERATK_7('FHMR', 0, 1.0 / 35.0, S_FHAMMERATK_8, 0, 55) = none
	S_FHAMMERATK_8('FHMR', 0, 1.0 / 35.0, S_FHAMMERATK_9, 0, 50) = none
	S_FHAMMERATK_9('FHMR', 0, 1.0 / 35.0, S_FHAMMERATK_10, 0, 45) = none
	S_FHAMMERATK_10('FHMR', 0, 1.0 / 35.0, S_FHAMMERATK_11, 0, 40) = none
	S_FHAMMERATK_11('FHMR', 0, 1.0 / 35.0, S_FHAMMERATK_12, 0, 35) = none
	S_FHAMMERATK_12('FHMR', 0, 1.0 / 35.0, S_FHAMMERREADY) = none
	S_HAMM('WFHM', 0, -1.0, none) = none
}

defaultproperties
{
	WeaponClass = HexenDefs::PCLASS_FIGHTER;
	Slot = 3;
	SelectionOrder = 900;
	AmmoType1 = Mana2;
	AmmoUse1 = 3;
	AmmoGive1 = 25;
	PSpriteSY = -10.0;
	HammerRange = Actor::MELEERANGE + Actor::MELEERANGE / 2.0;
	PickupMessage = "$txt_weapon_f3";
	BotCombatDist = 192.0;
	bAmmoOptional = true;
	bBotProjectile = true;
	IdleState = S_HAMM;
	UpState = S_FHAMMERUP;
	DownState = S_FHAMMERDOWN;
	ReadyState = S_FHAMMERREADY;
	AttackState = S_FHAMMERATK_1;
	HoldAttackState = S_FHAMMERATK_1;
}
