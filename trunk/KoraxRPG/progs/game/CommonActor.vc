
class CommonActor : Actor
	abstract;

//
//	[CW]
//	CommonActor is an extension for common Actor class created
//	to allow KRPGPlayerPawn inherit KRPGActor.
//	Contains overriden methods which use KRPGPlayerPawn references
//	instead of PlayerPawn.
//

//==========================================================================
//
//  A_SkullPopEx
//
//	[CW] Modified Actor::A_SkullPop with PlayerChunk subst.
//
//==========================================================================

final void A_SkullPopEx(optional class<Actor> SpawnType)
{
	EntityEx A;

	if (!class<CommonPlayerChunk>(SpawnType))
	{
		SpawnType = CommonBloodySkull;
	}
	bSolid = false;
	A = Spawn(SpawnType, Origin + vector(0.0, 0.0, 48.0),,, false);
	A.Velocity.x = (Random() - Random()) * 2.0 * 35.0;
	A.Velocity.y = (Random() - Random()) * 2.0 * 35.0;
	A.Velocity.z = (2.0 + Random() / 4.0) * 35.0;
	A.Health = Health;
	A.Angles.yaw = Angles.yaw;

	if (bIsPlayer)
	{
		// Attach player mobj to bloody skull
		A.Player = Player;
		A.bIsPlayer = true;
		A.ObtainInventory(EntityEx(Player.MO));
		Player = none;
		bIsPlayer = false;
		A.Player.MO = A;
		if (A.Player.Camera == self)
		{
			A.Player.Camera = A;
		}
		PlayerEx(A.Player).DamageFlash = 1.0;
		LineSpecialLevelInfo(Level).AddPlayerCorpse(self);
	}
}

//============================================================================
//
//  A_FreezeDeathChunksEx
//
//	[CW] Modified Actor::A_FreezeDeathChunks with PlayerPawn subst.
//
//============================================================================

final void A_FreezeDeathChunksEx()
{
	int i;
	Actor A;

	if (Length(Velocity) > 1.0)
	{
		StateTime = 3.0;
		return;
	}
	PlaySound('misc/icebreak', CHAN_VOICE);

	for (i = 0; i < MAXPLAYERS; i++)
	{
		if (!Level.Game.Players[i])
			continue;
		if (!Level.Game.Players[i].bSpawned)
			continue;
		PlayerEx(Level.Game.Players[i]).ParticleEffect(256,
			LineSpecialLevelInfo::pt_static,
			LineSpecialLevelInfo::pt_ice_chunk, Origin + vector(0.0, 0.0,
			Height * 0.5), 20.0, vector(64.0, 64.0, 96.0), 0.6, 6.0, 80.0,
			RGB(127, 130, 240), 10.0, 16.0);
	}

	for (i = 12 + (P_Random() & 15); i >= 0; i--)
	{
		A = Spawn(IceChunk, Origin + vector(
			(Random() - 0.5) * 2.0 * Radius,
			(Random() - 0.5) * 2.0 * Radius,
			Random() * Height));
		A.SetState(GetStatePlus(A.IdleState, P_Random() % 3));
		if (A)
		{
			A.Velocity.z = (A.Origin.z - Origin.z) / Height * 4.0 * 35.0;
			A.Velocity.x = (Random() - Random()) * 2.0 * 35.0;
			A.Velocity.y = (Random() - Random()) * 2.0 * 35.0;
			IceChunk(A).A_IceSetTics();	// set a random tic wait
		}
	}
	for (i = 12 + (P_Random() & 15); i >= 0; i--)
	{
		A = Spawn(IceChunk, Origin + vector(
			(Random() - 0.5) * 2.0 * Radius,
			(Random() - 0.5) * 2.0 * Radius,
			Random() * Height));
		A.SetState(GetStatePlus(A.IdleState, P_Random() % 3));
		if (A)
		{
			A.Velocity.z = (A.Origin.z - Origin.z) / Height * 4.0 * 35.0;
			A.Velocity.x = (Random() - Random()) * 2.0 * 35.0;
			A.Velocity.y = (Random() - Random()) * 2.0 * 35.0;
			IceChunk(A).A_IceSetTics();	// set a random tic wait
		}
	}
	if (bIsPlayer)
	{
		// attach the player's view to a chunk of ice
		A = Spawn(CommonIceChunkHead, Origin +
			vector(0.0, 0.0,
			// [CW] ------------- experimental
			/*PlayerPawn(self).ViewHeight*/PlayerEx(Player).GetMOViewHeight()));
		A.Velocity.x = (Random() - Random()) * 2.0 * 35.0;
		A.Velocity.y = (Random() - Random()) * 2.0 * 35.0;
		A.Velocity.z = (A.Origin.z - Origin.z) / Height * 4.0 * 35.0;
		A.Player = Player;
		A.bIsPlayer = true;
		A.ObtainInventory(EntityEx(Player.MO));
		Player = none;
		bIsPlayer = false;
		A.Health = Health;
		A.Angles.yaw = Angles.yaw;
		A.Player.MO = A;
		A.Player.Camera = A;
		A.Angles.pitch = 0.0;
	}
	SetTID(0);
	if (bBossDeath)
	{
		A_BossDeath();
	}
	SetState(FindState('FreeTargMobj'));
	bInvisible = true;
}

defaultproperties
{
}
