//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class MinotaurFriend : Pawn;

//
// Minotaur variables
//

bool bFloorFireRefired;		//  internal to minotaur AI
float StartTime;			//  minotaur start time
//  Args[4]         charge duration countdown

float MinotaurLookDist;
float ChargeSpeed;

//==========================================================================
//
//  IsServant
//
//==========================================================================

bool IsServant()
{
	return true;
}

//==========================================================================
//
//  DoSpecialDamage
//
//==========================================================================

int DoSpecialDamage(EntityEx victim, EntityEx source, int damage)
{
	if (bSkullFly)
	{
		// Slam only when in charge mode
		MinotaurSlam(Actor(victim));
		return -1;
	}
	return damage;
}

//==========================================================================
//
//  MinotaurSlam
//
//==========================================================================

final void MinotaurSlam(Actor victim)
{
	float angle;
	float thrust;

	angle = atan2(victim.Origin.y - Origin.y, victim.Origin.x - Origin.x);
	thrust = 16.0 + Random() * 4.0;
	victim.Velocity.x += thrust * cos(angle) * 35.0;
	victim.Velocity.y += thrust * sin(angle) * 35.0;
	victim.Damage(none, self, HITDICE(4));
	if (victim.bIsPlayer)
	{
		victim.ReactionTime = 0.4 + Random() * 0.2;
	}
	Args[4] = 0;	// Stop charging
}

//==========================================================================
//
//	Slam
//
//==========================================================================

bool Slam(EntityEx Other)
{
	// Slamming minotaurs shouldn't move non-creatures
	if (!Other.bMonster && !Other.bIsPlayer)
	{
		return false;
	}
	return ::Slam(Other);
}

//==========================================================================
//
//  ActiveMinotaur
//
//  Search thinker list for minotaur
//
//==========================================================================

Actor ActiveMinotaur()
{
	MinotaurFriend mo;

	foreach AllThinkers(MinotaurFriend, mo)
	{
		if (mo.Health <= 0)
			continue;
		if (!mo.bMonster)
			continue;	// for morphed minotaurs
		if (mo.bCorpse)
			continue;
		if ((XLevel.Time - mo.StartTime) >= SummoningDoll::MAULATORTIME)
			continue;
		if (mo.Tracer == Tracer)
			return mo;
	}
	return none;
}

//==========================================================================
//
//  Died
//
//==========================================================================

void Died(EntityEx source, EntityEx inflictor)
{
	::Died(source, inflictor);
	if (Tracer && Tracer.Health > 0)
	{
		Inventory Power = Tracer.FindInventory(PowerMinotaur);
		if (!ActiveMinotaur() && Power)
		{
			Power.Destroy();
		}
	}
}

//==========================================================================
//
//	MonsterMorphed
//
//==========================================================================

void MonsterMorphed()
{
	// check for turning off minotaur power for active icon
	if (Tracer && Tracer.Health > 0)
	{
		Inventory Power = Tracer.FindInventory(PowerMinotaur);
		if (!ActiveMinotaur() && Power)
		{
			Power.Destroy();
		}
	}
}

//==========================================================================
//
//  RoughCheckThing
//
//==========================================================================

bool RoughCheckThing(Entity Other)
{
	EntityEx link = EntityEx(Other);
	
	if (!link.bMonster && (!link.bIsPlayer || link == Tracer))
	{
		return false;
	}
	if (!link.bShootable)
	{
		return false;
	}
	if (link.bDormant)
	{
		return false;
	}
	if (MinotaurFriend(link) && link.Tracer == Tracer)
	{
		return false;
	}
	if (Level.Game.netgame && !Level.Game.deathmatch && link.bIsPlayer)
	{
		return false;
	}
	if (!CanSee(link))
	{
		return false;
	}
	return true;
}

//==========================================================================
//
//  A_MinotaurFade0
//
//==========================================================================

final void A_MinotaurFade0()
{
	RenderStyle = STYLE_Translucent;
	Alpha = 0.333;
}

//==========================================================================
//
//  A_MinotaurFade1
//
//==========================================================================

final void A_MinotaurFade1()
{
	// Second level of transparency
	RenderStyle = STYLE_Translucent;
	Alpha = 0.666;
}

//==========================================================================
//
//  A_MinotaurFade2
//
//==========================================================================

final void A_MinotaurFade2()
{
	// Make fully visible
	RenderStyle = STYLE_Normal;
	Alpha = 1.0;
}

//==========================================================================
//
//  A_MinotaurLook
//
//  Look for enemy of player
//
//==========================================================================

final void A_MinotaurLook()
{
	Actor mo;
	float dist;
	int i;

	Target = none;

	if (Level.Game.deathmatch)	// Quick search for players
	{
		for (i = 0; i < MAXPLAYERS; i++)
		{
			if (!Level.Game.Players[i] || !Level.Game.Players[i].bSpawned)
				continue;
			mo = Actor(Level.Game.Players[i].MO);
			if (mo == Tracer)
				continue;
			if (mo.Health <= 0)
				continue;
			dist = DistTo(mo);
			if (dist > MinotaurLookDist)
				continue;
			Target = mo;
			break;
		}
	}

	if (!Target)	// Near player monster search
	{
		if (Tracer && (Tracer.Health > 0) && Tracer.bIsPlayer)
			Target = Actor(Tracer.RoughMonsterSearch(20));
		else
			Target = Actor(RoughMonsterSearch(20));
	}

	if (!Target)	// Normal monster search
	{
		foreach AllThinkers(Actor, mo)
		{
			if (!mo.bMonster)
				continue;
			if (mo.Health <= 0)
				continue;
			if (!mo.bShootable)
				continue;
			dist = DistTo(mo);
			if (dist > MinotaurLookDist)
				continue;
			if ((mo == Tracer) || (mo == self))
				continue;
			if (mo.Class == MinotaurFriend && mo.Tracer == Tracer)
 				continue;
			Target = mo;
			break;	// Found mobj to attack
		}
	}

	if (Target)
	{
		SetState(FindState('SeeNF'));
	}
	else
	{
		SetState(FindState('RoamNF'));
	}
}

//==========================================================================
//
//  A_MinotaurChase
//
//==========================================================================

final void A_MinotaurChase()
{
	RenderStyle = STYLE_Normal;
	Alpha = 1.0;	// In case pain caused him to skip his fade in.

	if (XLevel.Time - StartTime >= SummoningDoll::MAULATORTIME)
	{
		Damage(none, none, 10000);
		return;
	}

	if (P_Random() < 30)
		A_MinotaurLook();	// adjust to closest target

	if (!Target || (Target.Health <= 0) || !Target.bShootable)
	{
		// look for a new enemy
		SetState(FindState('Look'));
		return;
	}

	FaceMovementDirection();
	ReactionCount = 0;

	// Melee attack
	if (MeleeState && CheckMeleeRange())
	{
		if (AttackSound)
		{
			PlaySound(AttackSound, CHAN_WEAPON);
		}
		SetState(MeleeState);
		return;
	}

	// Missile attack
	if (MissileState && CheckMissileRange())
	{
		SetState(MissileState);
		return;
	}

	// chase towards target
	if (!StepMove())
	{
		NewChaseDir();
	}

	// Active sound
	if (ActiveSound && P_Random() < 6)
	{
		PlaySound(ActiveSound, CHAN_VOICE);
	}

}

//==========================================================================
//
//  A_MinotaurRoam
//
//==========================================================================

final void A_MinotaurRoam()
{
	RenderStyle = STYLE_Normal;
	Alpha = 1.0;	// In case pain caused him to skip his fade in.

	if (XLevel.Time - StartTime >= SummoningDoll::MAULATORTIME)
	{
		Damage(none, none, 10000);
		return;
	}

	if (P_Random() < 30)
		A_MinotaurLook();	// adjust to closest target

	if (P_Random() < 6)
	{
		//Choose new direction
		MoveDir = P_Random() % 8;
		FaceMovementDirection();
	}
	if (!StepMove())
	{
		// Turn
		if (P_Random() & 1)
			MoveDir = (++MoveDir) % 8;
		else
			MoveDir = (MoveDir + 7) % 8;
		FaceMovementDirection();
	}
}

//==========================================================================
//
//  A_MinotaurAtk1
//
//  Melee attack.
//
//==========================================================================

final void A_MinotaurAtk1()
{
	if (!Target)
	{
		return;
	}

	PlaySound('MaulatorHamSwing', CHAN_WEAPON);
	if (CheckMeleeRange())
	{
		Target.Damage(self, self, HITDICE(4));
	}
}

//==========================================================================
//
//  A_MinotaurDecide
//
//  Choose a missile attack.
//
//==========================================================================

final void A_MinotaurDecide()
{
	float dist;

	if (!Target)
		return;
	dist = DistTo(Target);

	if (Target.Origin.z + Target.Height > Origin.z &&
		Target.Origin.z + Target.Height < Origin.z + Height &&
		dist < 16.0 * 64.0 && dist > 1.0 * 64.0 && P_Random() < 230)
	{
		// Charge attack
		// Don't call the state function right away
		SetState(FindState('Charge'));
		bSkullFly = true;
		A_FaceTarget();
		Velocity = Normalise(Target.Origin - Origin) * ChargeSpeed;
		Args[4] = 35 / 2;	// Charge duration
	}
	else if (Target.Origin.z == Target.FloorZ &&
		dist < 9.0 * 64.0 && P_Random() < 100)
	{
		// Floor fire attack
		SetState(FindState('FloorFire'));
		bFloorFireRefired = false;
	}
	else
	{
		// Swing attack
		A_FaceTarget();
		// Don't need to call SetState because the current state
		// falls through to the swing attack
	}
}

//==========================================================================
//
//  A_MinotaurAtk2
//
//  Swing attack.
//
//==========================================================================

final void A_MinotaurAtk2()
{
	EntityEx mo;
	float angle;
	float momz;

	if (!Target)
		return;

	PlaySound('MaulatorHamSwing', CHAN_WEAPON);
	if (CheckMeleeRange())
	{
		Target.Damage(self, self, HITDICE(3));
		return;
	}
	mo = SpawnMissile(Target, MinotaurFX1, 40.0);
	if (mo)
	{
		momz = mo.Velocity.z;
		angle = mo.Angles.yaw;
		SpawnMissileAngle(MinotaurFX1,
			AngleMod360(angle - (45.0 / 8.0)), momz, 40.0);
		SpawnMissileAngle(MinotaurFX1,
			AngleMod360(angle + (45.0 / 8.0)), momz, 40.0);
		SpawnMissileAngle(MinotaurFX1,
			AngleMod360(angle - (45.0 / 16.0)), momz, 40.0);
		SpawnMissileAngle(MinotaurFX1,
			AngleMod360(angle + (45.0 / 16.0)), momz, 40.0);
	}
}

//==========================================================================
//
//  A_MinotaurAtk3
//
//  Floor fire attack.
//
//==========================================================================

final void A_MinotaurAtk3()
{
	EntityEx mo;

	if (!Target)
	{
		return;
	}
	if (CheckMeleeRange())
	{
		Target.Damage(self, self, HITDICE(3));
		if (Target.bIsPlayer)
		{
			// Squish the player
			Player(Target.Player).DeltaViewHeight = -512.0;
		}
	}
	else
	{
		mo = SpawnMissile(Target, MinotaurFX2);
		if (mo)
		{
			mo.PlaySound('MaulatorHamHit', CHAN_VOICE);
		}
	}
	if (P_Random() < 192 && !bFloorFireRefired)
	{
		SetState(FindState('FloorFireRefire'));
		bFloorFireRefired = true;
	}
}

//==========================================================================
//
//  A_MinotaurCharge
//
//==========================================================================

final void A_MinotaurCharge()
{
	Actor puff;

	if (!Target)
		return;

	if (Args[4] > 0)
	{
		puff = Spawn(PunchPuff, Origin);
		puff.Velocity.z = 2.0 * 35.0;
		Args[4]--;
	}
	else
	{
		bSkullFly = false;
		SetState(SeeState);
	}
}

//==========================================================================
//
//  A_SmokePuffExit
//
//==========================================================================

final void A_SmokePuffExit()
{
	Spawn(MinotaurSmokeExit, Origin);
}

states
{
Spawn:
	MNTR A 15
	MNTR A 15 A_MinotaurFade1
	MNTR A 3 A_MinotaurFade2
	//Fall through
Look:
	MNTR AB 10 A_MinotaurLook
	Loop
See:
	MNTR ABCD 5 A_MinotaurChase
	Loop
SeeNF:
	MNTR A 5
	Goto See+1
Roam:
	MNTR ABCD 5 A_MinotaurRoam
	Loop
RoamNF:
	MNTR A 5
	Goto Roam+1
Melee:
	MNTR G 10 A_FaceTarget
	MNTR H 7 A_FaceTarget
	MNTR I 12 A_MinotaurAtk1
	Goto See
Missile:
	MNTR G 10 A_MinotaurDecide
	MNTR J 4 A_FaceTarget
	MNTR K 9 A_MinotaurAtk2
	Goto See
FloorFire:
	MNTR G 10 A_FaceTarget
	MNTR H 7 A_FaceTarget
	MNTR I 12 A_MinotaurAtk3
	Goto See
FloorFireRefire:
	MNTR I 12
	Goto FloorFire
Charge:
	MNTR F 2
	MNTR F 2 A_MinotaurCharge
	Wait
Pain:
	MNTR E 3
	MNTR E 6 A_Pain
	Goto See
Death:
	MNTR E 6
	MNTR E 2 A_Scream
	MNTR E 5 A_SmokePuffExit
	MNTR E 5
	MNTR E 5 A_NoBlocking
	MNTR E 5
	MNTR E 5 A_MinotaurFade1
	MNTR E 5 A_MinotaurFade0
	MNTR E 10
	Stop
}

defaultproperties
{
	Health = 2500;
	Radius = 28.0;
	Height = 100.0;
	Mass = 800.0;
	Speed = 16.0 * 35.0;
	PainChance = 0.09765625;
	MissileDamage = 7;
	RenderStyle = STYLE_Translucent;
	Alpha = 0.333;
	ChargeSpeed = 805.0;
	MinotaurLookDist = 16.0 * 54.0;
	SightSound = 'MaulatorSight';
	ActiveSound = 'MaulatorActive';
	AttackSound = 'MaulatorHamSwing';
	PainSound = 'MaulatorPain';
	DeathSound = 'MaulatorDeath';
	bActivateMCross = false;
	bNoTargetSwitch = true;
	bCountKill = false;
}
