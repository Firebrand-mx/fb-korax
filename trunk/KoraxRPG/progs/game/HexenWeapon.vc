//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id: HexenWeapon.vc 2527 2007-07-29 08:18:44Z dj_jl $
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class HexenWeapon : Weapon
	abstract;

int WeaponClass;


//==========================================================================
//
//	DepleteAmmoEx
//
//==========================================================================

bool DepleteAmmoEx(optional bool CheckEnough)
{
	//	Default parameter values
	if (!specified_CheckEnough)
	{
		CheckEnough = true;
	}
	

	if (CheckEnough && !CheckAmmo(false))
	{
		return false;
	}

	DepleteAmmo(false);

	if (Ammo1)
		Actor(Owner.Player.MO).NotifyConditions(ActorCondition::notify_ManaUsed, none, AmmoUse1);
	if (Ammo2)
		Actor(Owner.Player.MO).NotifyConditions(ActorCondition::notify_ManaUsed, none, AmmoUse2);
}

//==========================================================================
//
//  TryPickup
//
//==========================================================================

bool TryPickup(EntityEx Toucher)
{
	if (Toucher.Player.PClass != WeaponClass)
	{
		// Wrong class, but try to pick up for mana
		if (ShouldStay() && !bDropped)
		{
			return false;
		}
		bool gaveMana = false;
		if (Player(Toucher.Player).GiveMana(AmmoType1, AmmoGive1))
		{
			gaveMana = true;
		}
		if (Player(Toucher.Player).GiveMana(AmmoType2, AmmoGive2))
		{
			gaveMana = true;
		}
		if (gaveMana)
		{
			GoAwayAndDie();
			GiveQuest(Toucher);
			return true;
		}
		return false;
	}

	return ::TryPickup(Toucher);
}

defaultproperties
{
}
