//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ## ###  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**				   ######  #####   ######
//**	               ##   ## ##  ## ##    ##
//**	     		   ##   ## ##  ## ##   
//**	               #####   #####  ##  ####
//**	     		   ## ###  ##     ###   ##
//**	     		   ##  ### ##      ######
//**
//**    $Id: template.vc 1305 2008-03-01 09:20:29Z dj_jl $
//**
//**    Copyright (C) 2004-2008 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class KRPGPlayerReplicationInfo : PlayerReplicationInfo;

int		plclass;
int		exp;
int		level;
int 	next_lvl;
int		gold;
int		strg;
int		cons;
int		intln;
int		wsdm;
int		dext;
int		char;
int		points;


// KoraxRPG quest variables
// possible states:
// 0 = undiscovered
// 1 = active
// 2 = objective completed
// 3 = quest turned in

// main questline

int qsaa;
int qsab;
int qsac;

// church quests

int qsba;
int qsbb;
int qsbc;
int qsbd;

// legion quests

int qsca;
int qscb;
int qscc;
int qscd;
int qsce;

// arcanum quests

int qsda;
int qsdb;
int qsdc;

// merchant guild quests

int qsea;
int qseb;

// map trackers

int maptrackaa;
int maptrackab;
int maptrackac;
int maptrackad;
int maptrackae;
int maptrackaf;
int maptrackag;
int maptrackba;
int maptrackbb;
int maptrackbc;
int maptrackbd;
int maptrackbe;
int maptrackbf;
int maptrackca;
int maptrackcb;
int maptrackcc;
int maptrackcd;
int maptrackce;
int maptrackcf;
int maptrackcg;
int maptrackch;
int maptrackda;
int maptrackdb;
int maptrackdc;
int maptrackdd;
int maptrackde;
int maptrackdf;
int maptrackdg;
int maptrackdh;
int maptrackdi;
int maptrackdj;
int maptrackdk;
int maptrackdl;
int maptrackdm;
int maptrackea;
int maptrackeb;
int maptrackec;
int maptracked;
int maptrackee;
int maptrackfa;
int maptrackfb;
int maptrackfc;
int maptrackfd;
int maptrackfe;

// codex

int codexaa;
int codexab;
int codexac;
int codexad;
int codexae;
int codexaf;
int codexag;
int codexah;
int codexai;
int codexaj;
int codexba;
int codexbb;
int codexbc;
int codexbd;
int codexbe;
int codexbf;
int codexbg;
int codexbh;



replication
{
	reliable if (Role == ROLE_Authority)
		plclass, exp, level, next_lvl, gold, strg,
		cons, intln, wsdm, dext, char, points,
		qsaa, qsab, qsac,
		qsba, qsbb, qsbc, qsbd,
		qsca, qscb, qscc, qscd, qsce,
		qsda, qsdb, qsdc,
		qsea, qseb,
		maptrackaa, maptrackab, maptrackac, maptrackad, maptrackae, maptrackaf, maptrackag,
		maptrackba, maptrackbb, maptrackbc, maptrackbd, maptrackbe, maptrackbf,
		maptrackca, maptrackcb, maptrackcc, maptrackcd, maptrackce, maptrackcf, maptrackcg, maptrackch,
		maptrackda, maptrackdb, maptrackdc, maptrackdd, maptrackde, maptrackdf, maptrackdg, maptrackdh, maptrackdi, maptrackdj, maptrackdk, maptrackdl, maptrackdm,
		maptrackea, maptrackeb, maptrackec, maptracked, maptrackee,
		maptrackfa, maptrackfb, maptrackfc, maptrackfd, maptrackfe,
		codexaa, codexab, codexac, codexad, codexae, codexaf, codexag, codexah, codexai, codexaj,
		codexba, codexbb, codexbc, codexbd, codexbe, codexbf, codexbg, codexbh;
}

//==========================================================================
//
//  Tick
//
//==========================================================================

void Tick(float DeltaTime)
{
	Player		P;

	::Tick(DeltaTime);

	P = Player(Player);
	plclass = P.PClass;
	exp = P.experience;
	level = P.exp_level;
	next_lvl = P.next_level;
	gold = P.money;
	strg = P.strength;
	cons = P.constitution;
	intln = P.intelligence;
	wsdm = P.wisdom;
	dext = P.dexterity;
	char = P.charisma;
	qsaa = P.qsaa;
	qsab = P.qsab;
	qsac = P.qsac;
	qsba = P.qsba;
	qsbb = P.qsbb;
	qsbc = P.qsbc;
	qsbd = P.qsbd;
	qsca = P.qsca;	
	qscb = P.qscb;	
	qscc = P.qscc;
	qscd = P.qscd;
	qsce = P.qsce;
	qsda = P.qsda;
	qsdb = P.qsdb;
	qsdc = P.qsdc;
	qsea = P.qsea;
	qseb = P.qseb;
	maptrackaa = P.maptrackaa;
	maptrackab = P.maptrackab;
	maptrackac = P.maptrackac;
	maptrackad = P.maptrackad;
	maptrackae = P.maptrackae;
	maptrackaf = P.maptrackaf;
	maptrackag = P.maptrackag;
	maptrackba = P.maptrackba;
	maptrackbb = P.maptrackbb;
	maptrackbc = P.maptrackbc;
	maptrackbd = P.maptrackbd;
	maptrackbe = P.maptrackbe;
	maptrackbf = P.maptrackbf;
	maptrackca = P.maptrackca;
	maptrackcb = P.maptrackcb;
	maptrackcc = P.maptrackcc;
	maptrackcd = P.maptrackcd;
	maptrackce = P.maptrackce;
	maptrackcf = P.maptrackcf;
	maptrackcg = P.maptrackcg;
	maptrackda = P.maptrackda;
	maptrackdb = P.maptrackdb;
	maptrackdc = P.maptrackdc;
	maptrackdd = P.maptrackdd;
	maptrackde = P.maptrackde;
	maptrackdf = P.maptrackdf;
	maptrackdg = P.maptrackdg;
	maptrackdh = P.maptrackdh;
	maptrackdi = P.maptrackdi;
	maptrackdj = P.maptrackdj;
	maptrackdk = P.maptrackdk;
	maptrackdl = P.maptrackdl;
	maptrackdm = P.maptrackdm;
	maptrackea = P.maptrackea;
	maptrackeb = P.maptrackeb;
	maptrackec = P.maptrackec;
	maptracked = P.maptracked;
	maptrackee = P.maptrackee;
	maptrackfa = P.maptrackfa;
	maptrackfb = P.maptrackfb;
	maptrackfc = P.maptrackfc;
	maptrackfd = P.maptrackfd;
	maptrackfe = P.maptrackfe;
	codexaa = P.codexaa;
	codexab = P.codexab;
	codexac = P.codexac;
	codexad = P.codexad;
	codexae = P.codexae;
	codexaf = P.codexaf;
	codexag = P.codexag;
	codexah = P.codexah;
	codexai = P.codexai;
	codexaj = P.codexaj;
	codexba = P.codexba;
	codexbb = P.codexbb;
	codexbc = P.codexbc;
	codexbd = P.codexbd;
	codexbe = P.codexbe;
	codexbf = P.codexbf;
	codexbg = P.codexbg;
	codexbh = P.codexbh;
	points = P.GetPoints();
}

defaultproperties
{
}
