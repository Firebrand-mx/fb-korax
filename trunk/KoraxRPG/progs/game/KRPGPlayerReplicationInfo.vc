//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ## ###  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**				   ######  #####   ######
//**	               ##   ## ##  ## ##    ##
//**	     		   ##   ## ##  ## ##   
//**	               #####   #####  ##  ####
//**	     		   ## ###  ##     ###   ##
//**	     		   ##  ### ##      ######
//**
//**    $Id: template.vc 1305 2008-03-01 09:20:29Z dj_jl $
//**
//**    Copyright (C) 2004-2008 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class KRPGPlayerReplicationInfo : PlayerReplicationInfo;

int		plclass;
int		exp;
int		level;
int 	next_lvl;
int		gold;
int		strg;
int		cons;
int		intln;
int		wsdm;
int		dext;
int		char;
int		points;


// KoraxRPG quest variables
// possible states:
// 0 = undiscovered
// 1 = active
// 2 = objective completed
// 3 = quest turned in

// main questline

int qsaa;
int qsab;
int qsac;

// church quests

int qsba;
int qsbb;
int qsbc;
int qsbd;

// legion quests

int qsca;
int qscb;
int qscc;
int qscd;
int qsce;

// arcanum quests

int qsda;
int qsdb;
int qsdc;

// merchant guild quests

int qsea;
int qseb;



replication
{
	reliable if (Role == ROLE_Authority)
		plclass, exp, level, next_lvl, gold, strg,
		cons, intln, wsdm, dext, char, points,
		qsaa, qsab, qsac,
		qsba, qsbb, qsbc, qsbd,
		qsca, qscb, qscc, qscd, qsce,
		qsda, qsdb, qsdc,
		qsea, qseb;
		
}

//==========================================================================
//
//  Tick
//
//==========================================================================

void Tick(float DeltaTime)
{
	Player		P;

	::Tick(DeltaTime);

	P = Player(Player);
	plclass = P.PClass;
	exp = P.experience;
	level = P.exp_level;
	next_lvl = P.next_level;
	gold = P.money;
	strg = P.strength;
	cons = P.constitution;
	intln = P.intelligence;
	wsdm = P.wisdom;
	dext = P.dexterity;
	char = P.charisma;
	qsaa = P.qsaa;
	qsab = P.qsab;
	qsac = P.qsac;
	qsba = P.qsba;
	qsbb = P.qsbb;
	qsbc = P.qsbc;
	qsbd = P.qsbd;
	qsca = P.qsca;	
	qscb = P.qscb;	
	qscc = P.qscc;
	qscd = P.qscd;
	qsce = P.qsce;
	qsda = P.qsda;
	qsdb = P.qsdb;
	qsdc = P.qsdc;
	qsea = P.qsea;
	qseb = P.qseb;
	points = P.GetPoints();
}

defaultproperties
{
}
