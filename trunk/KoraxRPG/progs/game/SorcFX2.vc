//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class SorcFX2 : Effect;

//==========================================================================
// Blue spell - defense
//==========================================================================
//
// FX2 Variables
//      Special1f       current angle
//      Args[0]     0 = CW,  1 = CCW
//==========================================================================

//==========================================================================
//
//  A_SorcFX2Split
//
//  Split ball in two
//
//==========================================================================

final void A_SorcFX2Split()
{
	Actor A;

	A = Spawn(SorcFX2, Origin,,, false);
	if (A)
	{
		A.Target = Target;
		A.Args[0] = 0;	// CW
		A.Special1f = Angles.yaw;	// Set angle
		A.SetState(A.FindState('Orbit'));
	}
	A = Spawn(SorcFX2, Origin,,, false);
	if (A)
	{
		A.Target = Target;
		A.Args[0] = 1;	// CCW
		A.Special1f = Angles.yaw;	// Set angle
		A.SetState(A.FindState('Orbit'));
	}
	SetState(none);
}

//==========================================================================
//
//  A_SorcFX2Orbit
//
//  Orbit FX2 about sorcerer
//
//==========================================================================

final void A_SorcFX2Orbit()
{
	float angle;
	float x, y, z;
	float dist = Target.Radius;

	if ((Target.Health <= 0) ||	// Sorcerer is dead
		(!Target.Args[0]))	// Time expired
	{
		SetState(FindState('Death'));
		Target.Args[0] = 0;
		Actor(Target).bReflective = false;
		Actor(Target).bInvulnerable = false;
	}

	if (Args[0] && (Target.Args[0]-- <= 0))	// Time expired
	{
		SetState(FindState('Death'));
		Target.Args[0] = 0;
		Actor(Target).bReflective = false;
	}

	// Move to new position based on angle
	if (Args[0])	// Counter clock-wise
	{
		Special1f = AngleMod360(Special1f + 10.0);
		angle = Special1f;
		x = Target.Origin.x + dist * cos(angle);
		y = Target.Origin.y + dist * sin(angle);
		z = Target.Origin.z - Target.FloorClip + Heresiarch::SORC_DEFENSE_HEIGHT;
		z += 15.0 * cos(angle);
		// Spawn trailer
		Spawn(SorcFX2T1, vector(x, y, z));
	}
	else	// Clock wise
	{
		Special1f = AngleMod360(Special1f - 10.0);
		angle = Special1f;
		x = Target.Origin.x + dist * cos(angle);
		y = Target.Origin.y + dist * sin(angle);
		z = Target.Origin.z - Target.FloorClip + Heresiarch::SORC_DEFENSE_HEIGHT;
		z += 20.0 * sin(angle);
		// Spawn trailer
		Spawn(SorcFX2T1, vector(x, y, z));
	}

	Origin.x = x;
	Origin.y = y;
	Origin.z = z;
}

states
{
Spawn:
	SBS2 A 3 Bright A_SorcFX2Split
	Loop
Orbit:
	SBS2 A 2 Bright
	Goto Orbiting+1
Orbiting:
	SBS2 ABCDEFGHIJKLMNOP 2 Bright A_SorcFX2Orbit
	Loop
Death:
	SBS2 A 10
	Stop
}

defaultproperties
{
	Radius = 5.0;
	Height = 5.0;
	Speed = 525.0;
	bNoTeleport = true;
	bDynamicLight = true;
	DLightColour = RGB(60, 100, 255);
	DLightRadius = 118.0;
}
