
class ActorTask : LinkedObject
	abstract;


enum
{
	ORDER__NONE,
	ORDER__STANDSTILL,			// stand idle, looking in one direction
	ORDER__STANDLOOK180,		// stand idle, turning left and right consequently
	ORDER__STANDLOOK360,		// stand idle, looking 360 degrees around
	ORDER__WALKTO,				// walk to a point on map
	ORDER__WALKPATH,			// walk along a path of nodes
	ORDER__PATROL2PT,			// walk continiously between two points
	ORDER__PATROLPATH,			// walk continiously along the path, first fw, then bw
	ORDER__PATROLLOOP,			// walk continiously along the path, interpreting it as a loop
	ORDER__FOLLOW,				// follow actor
	ORDER__ATTACKALL,			// havoc! attack everyone on map
	ORDER__ATTACKTHING,			// attack single target until its death
	ORDER__EVADETHING,
	ORDER__EVADEPOS
};

bool						bSituative;

int							Order;
int							Priority;	// 0 is highest (unquestioned order)

float						Duration;	// 0.0 means unlimited duration
float						Time;

IntelligentActor::generic_target_t		GnTarget;

bool									bTargetMustBeAlive;

TVec									NextPos;
bool									Direction;	// 0 = fw; 1 = bw

IntelligentActor			Owner;


//==========================================================================
//
//	CheckCompleted
//
//==========================================================================

bool CheckCompleted()
{
	if (Duration > 0.0 && Time <= 0.0)
		return true;

	switch (Order)
	{
	case ORDER__NONE:
		return true;
	case ORDER__ATTACKTHING:
	case ORDER__ATTACKALL:
	case ORDER__FOLLOW:
	case ORDER__EVADETHING:
		return !GnTarget.Thing || GnTarget.Thing.IsDestroyed() || (bTargetMustBeAlive && GnTarget.Thing.Health <= 0);
	case ORDER__WALKTO:
	case ORDER__WALKPATH:
	case ORDER__PATROLPATH:
	case ORDER__PATROLLOOP:
		return (Length(Owner.Origin - GnTarget.Pos) < IntelligentActor::ACCEPTABLE_WAYPOINT_VICINITY ); 
	}
	return false;
}

//==========================================================================
//
//	Tick
//
//==========================================================================

void Tick(float deltaTime)
{
	if (Duration > 0.0)
	{
		Time -= deltaTime;
	}
}


defaultproperties
{
	Order = ORDER__NONE;
	Priority = 0;
	Duration = 0.0;
	Time = 0.0;
}
