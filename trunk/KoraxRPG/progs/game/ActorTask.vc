//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ## ###  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**				   ######  #####   ######
//**	               ##   ## ##  ## ##    ##
//**	     		   ##   ## ##  ## ##   
//**	               #####   #####  ##  ####
//**	     		   ## ###  ##     ###   ##
//**	     		   ##  ### ##      ######
//**
//**    $Id$
//**
//**    Copyright (C) 2004-2008 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class ActorTask : LinkedObject
	abstract;


enum
{
	ORDER__NONE,
	ORDER__STANDSTILL,			// stand idle, looking in one direction
	ORDER__STANDLOOK180,		// stand idle, turning left and right consequently
	ORDER__STANDLOOK360,		// stand idle, looking 360 degrees around
	ORDER__WALKTO,				// walk to a point on map
	ORDER__WALKPATH,			// walk along a path of nodes
	ORDER__PATROL2PT,			// walk continiously between two points
	ORDER__PATROLPATH,			// walk continiously along the path, first fw, then bw
	ORDER__PATROLLOOP,			// walk continiously along the path, interpreting it as a loop
	ORDER__FOLLOW,				// follow actor
	ORDER__ATTACKALL,			// havoc! attack everyone on map
	ORDER__ATTACKTHING,			// attack single target until its death
	ORDER__EVADETHING,			// evade thing while it is alive
	ORDER__EVADEPOS,			// stay away from some position
	ORDER__EVADEDIR,			// stay away from something in defined direction
	ORDER__WANDER,				// just wander around
	ORDER__USELINE,				// come closer and 'use' line
	ORDER__USETHING				// come closer and 'use' thing
};

bool						bSituative;

int							Order;
int							Priority;	// 0 is highest (unquestioned order)

float						Duration;	// 0.0 means unlimited duration
float						Time;

IntelligentActor::generic_target_t		Target;

bool									bTargetMustBeAlive;

TVec									NextPos;
bool									Direction;	// 0 = fw; 1 = bw
float									Radius;

IntelligentActor			Owner;


//==========================================================================
//
//	ConsiderCompleted
//
//==========================================================================

bool ConsiderCompleted()
{
	if (Duration > 0.0 && Time <= 0.0)
		return true;

	bool bCompleted = false;

	switch (Order)
	{
	case ORDER__NONE:
		bCompleted = true;
	case ORDER__ATTACKTHING:
	case ORDER__ATTACKALL:
	case ORDER__FOLLOW:
	case ORDER__EVADETHING:
		bCompleted = !Target.Thing || Target.Thing.IsDestroyed() || (bTargetMustBeAlive && Target.Thing.Health <= 0);
		break;
	case ORDER__WALKTO:
	case ORDER__WALKPATH:
	case ORDER__PATROL2PT:
	case ORDER__PATROLPATH:
	case ORDER__PATROLLOOP:
		bCompleted = (Length(Owner.Origin - Target.Pos) < IntelligentActor::ACCEPTABLE_WAYPOINT_VICINITY ); 
	case ORDER__WANDER:
		bCompleted = (Length(Owner.Origin - NextPos) < IntelligentActor::ACCEPTABLE_WAYPOINT_VICINITY );
	}

	switch (Order)
	{
	case ORDER__ATTACKALL:
		Owner.bIgnoreTeams = Owner.default.bIgnoreTeams;
		break;
	case ORDER__PATROL2PT:
		{
			TVec v = Target.Pos;
			Target.Pos = NextPos;
			NextPos = v;
		}
		break;
	}

	return bCompleted;
}

//==========================================================================
//
//	Tick
//
//==========================================================================

void Tick(float deltaTime)
{
	if (Duration > 0.0)
	{
		Time -= deltaTime;
	}
}


defaultproperties
{
	Order = ORDER__NONE;
	Priority = 0;
	Duration = 0.0;
	Time = 0.0;
}
