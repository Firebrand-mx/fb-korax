//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ## ###  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**				   ######  #####   ######
//**	               ##   ## ##  ## ##    ##
//**	     		   ##   ## ##  ## ##   
//**	               #####   #####  ##  ####
//**	     		   ## ###  ##     ###   ##
//**	     		   ##  ### ##      ######
//**
//**    $Id: ACSpellBerserk.vc 1638 2008-08-28 19:10:17Z firebrand_kh $
//**
//**    Copyright (C) 2004-2008 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class ACSpellBerserk : ActorCondition;

int preberserk_health;
float preberserk_dexterity;	// [FB] Made this one a float
int preberserk_strength;


//==========================================================================
//
//	Tick
//
//==========================================================================

void Tick(float deltaTime)
{
	::Tick(deltaTime);

	if (!ARecepient.Player)
	{
		ARecepient.StateTime /= 1.5;
	}
}

//==========================================================================
//
//	Activate
//
//==========================================================================

void Activate()
{
	::Activate();

	if (!ARecepient)
		Error("ACSpellBerserk::Activate : no reference to Recepient actor, bad algorythm?");

	// [FB] Berserker actors get the double of their actual health
	//	    Doubling their speed and their strength (MissileDamage for non players)
	if (ARecepient.Player)
	{
		// [FB] Player actor case
		preberserk_strength = Player(ARecepient.Player).strength;
		preberserk_dexterity = itof(Player(ARecepient.Player).dexterity);
		preberserk_health = ARecepient.Health;
		
		Player(ARecepient.Player).strength <<= 1;
		Player(ARecepient.Player).dexterity <<= 1;
		ARecepient.Player.Health <<= 1;
		ARecepient.Health = ARecepient.Player.Health;
		Player(ARecepient.Player).sp_power = 0; // <<-- move to spell item?
	}
	else
	{
		//PlaySound('UseArtifact', CHAN_VOICE);	<--- should be played by actor when casting
		//                                           (using spell-item)
		preberserk_strength = ARecepient.MissileDamage;
		preberserk_dexterity = ARecepient.Speed;
		preberserk_health = ARecepient.Health;

		ARecepient.MissileDamage <<= 1;
		ARecepient.Speed *= 2.0;
		ARecepient.Health <<= 1;
	}
}

//==========================================================================
//
//	Deactivate
//
//==========================================================================

void Deactivate()
{
	::Deactivate();

	if (!ARecepient)
		Error("ACSpellBerserk::Deactivate : no reference to Recepient actor, bad algorythm?");

	if (ARecepient.Player)
	{
		Player(ARecepient.Player).strength = preberserk_strength;
		Player(ARecepient.Player).dexterity = ftoi(preberserk_dexterity);

		if (ARecepient.Health > 0)
		{
			ARecepient.Player.Health >>= 1;
			// -JL- Decrease also mobj's health which is the actual health value
			ARecepient.Health = ARecepient.Player.Health;
			Player(ARecepient.Player).DamageFlash += itof(ARecepient.Health) * 0.09;
			if (Player(ARecepient.Player).DamageFlash > 2.0)
			{
				Player(ARecepient.Player).DamageFlash = 2.0;
			}
			ARecepient.SetState(ARecepient.FindState('Pain'));
			ARecepient.Player.centreprint("BERSERKER DEACTIVATED");
		}
	}
	else
	{
		ARecepient.MissileDamage = preberserk_strength;
		ARecepient.Speed = preberserk_dexterity;

		if (ARecepient.Health > 0)
		{
			ARecepient.Health = preberserk_health;
			// Go to the pain state
			ARecepient.SetState(ARecepient.FindState('Pain'));
		}
	}
}

defaultproperties
{
	bIsMagic = false;
	CastMessage = "enraged!";

	// Berserk spell flash is similar to Bonus Flash
	CShiftOperation = CSHIFT_OP_OR;
	CShift = RGBA(215, 186, 68, 76 /* 0.3 * 256.0 */);
}
