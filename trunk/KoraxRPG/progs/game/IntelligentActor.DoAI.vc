//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ## ###  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**				   ######  #####   ######
//**	               ##   ## ##  ## ##    ##
//**	     		   ##   ## ##  ## ##   
//**	               #####   #####  ##  ####
//**	     		   ## ###  ##     ###   ##
//**	     		   ##  ### ##      ######
//**
//**    $Id: IntelligentActor.DoAI.vc 1963 2009-03-06 23:26:20Z crimsonwizard $
//**
//**    Copyright (C) 2004-2008 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

const float		AI_ROUTINE_DELAY_IDLE = 10.0 / 35.0;
const float		AI_ROUTINE_DELAY_ACTIVE = 35.0 / 35.0;

float			AITime;
state 			last_state;

//==========================================================================
//
//	Tick
//
//==========================================================================

void Tick(float deltaTime)
{
	::Tick(deltaTime);
	
	if (Health > 0)
	{
		if (CurrentTask)
			CurrentTask.Tick(deltaTime);

		AITime -= deltaTime;
		if (AITime <= 0.0)
		{
			if (bDormant)
			{
				AITime = 0.0;
			}
			else
			{
				DoAI();
				AITime = (StateIsInSequence(State, IdleState) || StateIsInSequence(State, DamagedIdleState)) ?
					AI_ROUTINE_DELAY_IDLE :
					AI_ROUTINE_DELAY_ACTIVE;
			}
		}
	}
}

//==========================================================================
//
//	SetFinalTarget
//
//==========================================================================

void SetFinalTarget(Actor Thing, optional TVec Pos, optional int Action)
{
	Behavior.bKnowFTargetPos = true;
	FTarget.Thing = Thing;

	if (specified_Pos)
	{
		FTarget.Pos = Pos;
	}
	else if (Thing)
	{
		FTarget.Pos = Thing.Origin;
	}

	FTarget.Action = Action;
	LastKnownPosition = FTarget.Thing ? FTarget.Thing.Origin : FTarget.Pos;
}

//==========================================================================
//
//	SetImmediateTarget
//
//==========================================================================

void SetImmediateTarget(Actor Thing, optional TVec Pos, optional int Action)
{
	ITarget.Thing = Thing;

	if (specified_Pos)
	{
		ITarget.Pos = Pos;
	}
	else if (Thing)
	{
		ITarget.Pos = Thing.Origin;
	}

	ITarget.Action = Action;
}

//==========================================================================
//
//	SetDangerSource
//
//==========================================================================

void SetDangerSource(Actor Thing, optional TVec Pos, optional float Angle)
{
	if (Thing)
	{
		DangerSource.Thing = Thing;
		DangerSource.Action = ActorTask::ORDER__EVADETHING;
	}
	else if (specified_Pos)
	{
		DangerSource.Pos = Pos;
		DangerSource.Action = ActorTask::ORDER__EVADEPOS;
	}
	else if (specified_Angle)
	{
		DangerSource.Angle = Angle;
		DangerSource.Action = ActorTask::ORDER__EVADEDIR;
	}
	else
	{
		DangerSource.Action = ActorTask::ORDER__NONE;
	}
}

//==========================================================================
//
//	DoAI
//
//==========================================================================

void DoAI()
{
	UpdateTarget();
	CheckThreat();
	DoTasks();
}

//==========================================================================
//
//	CheckThreat
//
//==========================================================================

void CheckThreat()
{
	bool bThreatened = false;

	if (Behavior.ThreatReaction >= THREATREACTION__DETECT)
	{
		if (!Target || !Threshold)
		{
			Actor targ = (Level.CompatSoundTarget || bNoSector) ?
							Actor(Sector->SoundTarget) : Actor(LastHeard);

			if (targ && targ != Target && IsOkayToTarget(targ))
			{
				//if (Behavior.ThreatReaction == THREATREACTION__AMBUSH)
				if (bAmbush)
				{
					// Do not target enemy yet, only become alerted by his presence
					Alertness = HIGH_ALERTNESS;
				}
				else
				{
					float dist;
					if (Target)
					{
						float dt = DistTo(Target);
						dist = dt > Behavior.ThreatVicinity ? Behavior.ThreatVicinity : dt;
					}
					else
						dist = Behavior.ThreatVicinity;

					if (DistTo(targ) <= dist)
					{
						bThreatened = true;
						Target = targ;
						bHateTarget = false;
						SetDangerSource(Actor(Target));
						bInCombat = true;
						Threshold = BASETHRESHOLD;
						Alertness = HIGH_ALERTNESS;

						OrderAttackThing(true, TASK_PRIORITY_THREAT_BASE +
							CanSee(Target) ? THREATREACTION__SEE : THREATREACTION__DETECT, 0.0, Actor(Target));
					}
				}
			}
		}
	}

	if (Behavior.ThreatReaction >= THREATREACTION__SEE)
	{
		if (!Target || !Threshold)
		{
			float dist;
			if (Target)
			{
				float dt = DistTo(Target);
				dist = dt > Behavior.ThreatVicinity ? Behavior.ThreatVicinity : dt;
			}
			else
				dist = Behavior.ThreatVicinity;
			
			if (LookForEnemy(bLookAllAround || (Alertness > 0.0), true, Origin, dist, Actor(Target)))
			{
				Alertness = HIGH_ALERTNESS;
				Threshold = BASETHRESHOLD;
				SetDangerSource(Actor(Target));

				bThreatened = true;
				OrderAttackThing(true, TASK_PRIORITY_THREAT_BASE + THREATREACTION__SEE, 0.0, Actor(Target));
			}
		}
	}

	if (bThreatened && !bKeepSilent)
	{
		if (SightSound && (StateIsInSequence(State, IdleState) || StateIsInSequence(State, DamagedIdleState)))
		{
			if (bBoss)
			{
				// Full volume
				PlaySound(SightSound, CHAN_VOICE, 1.0, ATTN_NONE);
			}
			else
			{
				PlaySound(SightSound, CHAN_VOICE);
			}
		}
		else
		{
			PlayActiveSound();
		}
	}
}

//==========================================================================
//
//	ConsiderChangeState
//
//==========================================================================

void ConsiderChangeState()
{
	if (DangerSource.Action && P_Random() < 128)
	{
		if (bEvadeMelee &&
			(StateIsInSequence(State, IdleState) || StateIsInSequence(State, DamagedIdleState) ||
			StateIsInSequence(State, SeeState) || StateIsInSequence(State, DamagedSeeState) ||
			WalkState && (StateIsInSequence(State, WalkState) || StateIsInSequence(State, DamagedWalkState))))
		{
			if (DangerSource.Thing && DistTo(DangerSource.Thing) <= ACCEPTABLE_DANGERMELEE_VICINITY)
			{
				state S = FindState('Evade');
				if (S && SetState(S))
				{
					bIsInAttackRush = false;
					return;
				}
			}
		}
	}

	// Common state changing
	if (StateIsInSequence(State, IdleState) || StateIsInSequence(State, DamagedIdleState))
	{
		// Actor is in Idle State, check if he needs to start the move
		if (CurrentTask && CurrentTask.Order >= ActorTask::ORDER__WALKTO)
		{
			if (bInCombat || !WalkState)
			{
				SetState(SeeState);
			}
			else
			{
				SetState(WalkState);
			}
		}
	}
	else if (StateIsInSequence(State, SeeState) || StateIsInSequence(State, DamagedSeeState))
	{
		if (!ConsiderAttack())
		{
			if (!CurrentTask || CurrentTask.Order < ActorTask::ORDER__WALKTO)
			{
				bIsInAttackRush = false;
				SetState(IdleState);
			}
			else if (!bInCombat && WalkState)
			{
				bIsInAttackRush = false;
				SetState(WalkState);
			}
		}
	}
	else if (WalkState && (StateIsInSequence(State, WalkState) || StateIsInSequence(State, DamagedWalkState)))
	{	
		if (!ConsiderAttack())
		{	
			if (!CurrentTask || CurrentTask.Order < ActorTask::ORDER__WALKTO)
			{
				SetState(IdleState);
			}
			else if (bInCombat)
			{
				SetState(SeeState);
			}
		}
	}
}

//==========================================================================
//
//	ConsiderAttack
//
//==========================================================================

bool ConsiderAttack()
{
	if (Target)
	{
		if (ConsiderSpecialAttack())
		{
			return true;
		}
		else
		{
			if (CanAttackTarget(Target))
			{
				if (ConsiderMeleeAttack() || ConsiderMissileAttack())
				{
					return true;
				}
			}
		}
	}

	return false;
}

//==========================================================================
//
//	ConsiderSpecialAttack
//
//	[CW] Override in derived class to implement something special.
//
//==========================================================================

bool ConsiderSpecialAttack()
{
	return false;
}

//==========================================================================
//
//	ConsiderMeleeAttack
//
//	[CW] Started as a copy of corresponding DoMove section;
//	easy to override for monsters that need it.
//
//==========================================================================

bool ConsiderMeleeAttack()
{
	if (!MeleeState) return false;

	if (CheckMeleeRange())
	{
		if (AttackSound)
		{
			PlaySound(AttackSound, CHAN_WEAPON);
		}
		SetState(MeleeState);
		return true;
	}
		
	// [CW] CHECKME actually calculated many times, check maybe it's worth to make this
	// a temporarily used variable
	if (CanReach(Target.Origin, Target))
	{
		// [CW] CHECKME actually calculated many times, check maybe it's worth to make this
		// a temporarily used variable
		float distToTarget = DistTo2(Target);
			
		if (AttackLeapChance > 0.0)
		{
			if (distToTarget <= AttackLeapDistance &&
				Random() < AttackLeapChance)
			{
				state S = FindState('AttackLeap');
				if (S && SetState(S))
				{
					return true;
				}
			}
		}
			
		if (AttackRushChance > 0.0)
		{
			if (distToTarget <= AttackRushDistance)
			{
				if (bIsInAttackRush)
				{
					if (State != last_state)
					{
						last_state = State;
						// [FB] Avoid making enemies in attack rush too fast
						if (!GetCondition(ACSpellBerserk))
						{
							StateTime /= 1.5;
						}
						else
						{
							StateTime /= 1.15;
						}
					}
				}
				else if (Random() < AttackRushChance)
				{
					state S = FindState('AttackRush');
					if (S && SetState(S))
					{
						return true;
					}
					
					bIsInAttackRush = true;
				}
			}
			else
				bIsInAttackRush = false;
		}
	}

	return false;
}

//==========================================================================
//
//	ConsiderMissileAttack
//
//	[CW] Started as a copy of corresponding DoMove section;
//	easy to override for monsters that need it.
//
//==========================================================================

bool ConsiderMissileAttack()
{
	if (!MissileState) return false;

	//	Check for missile attack.
	if (IsFast() || !MoveCount)
	{
		if (CheckMissileRange())
		{
			SetState(MissileState);
			bJustAttacked = true;
			return true;
		}
	}
		
	return false;
}

//==========================================================================
//
//	A_LookAI
//
//==========================================================================

final void A_LookAI()
{
	// ZDoom-style patrol
	// Set goal now if appropriate.
	if (Special == LNSPEC_ThingSetGoal && Args[0] == 0)
	{
		Entity Ent;
		for (Ent = Level.FindMobjFromTID(Args[1], none); Ent;
			Ent = Level.FindMobjFromTID(Args[1], Ent))
		{
			if (!Ent.IsA('PathNode'))
			{
				continue;
			}
			OrderWalkPath(false, false, false,
				Args[3] ? IntelligentActor::TASK_PRIORITY_ABSOLUTE : IntelligentActor::TASK_PRIORITY_THREATSENSITIVE,
				0.0, PathNode(Ent));
			ReactionTime = itof(Args[2]) + XLevel.Time;
			break;
		}
		Special = 0;
	}

	// [FB] Apply NoTarget property for players...
	if (Target && Target.bIsPlayer && PlayerEx(Target.Player).bNoTarget)
	{
		return;
	}

	ConsiderChangeState();
}

//==========================================================================
//
//	A_ChaseAI
//
//==========================================================================

final void A_ChaseAI()
{
	// [CW] Moved to the end of the routine
	//ConsiderChangeState();

	if (!bNeverUseRoutes)
		DoRoute();

	if (ITarget.Thing)
		pDestination = &ITarget.Thing.Origin;
	else if (ITarget.Action)
		pDestination = &ITarget.Pos;
	else if (NRoute)
		pDestination = &NRoute.Nodes[NRouteNodeIndex].Origin;
	else if (TaskLeader)
		pDestination = &TaskLeader.Origin;
	else
		pDestination = NULL;

	if ((pDestination || Target) && DoMoveR)
	{
		DoMoveR(false, /*MeleeState, MissileState,*/ false, true, ReactionTime > XLevel.Time);
	}
	
	ConsiderChangeState();
}

//==========================================================================
//
//	UpdateTarget
//
//==========================================================================

void UpdateTarget()
{
	// Update known info about target position, if this is a moving target
	if (FTarget.Thing && FTarget.Thing.bCombatant)
	{
		if (Sector->SoundTarget == FTarget.Thing || CanSense(FTarget.Thing))
		{
			Behavior.bKnowFTargetPos = true;
			LastKnownPosition = FTarget.Thing.Origin;
		}
		else
		{
			Behavior.bKnowFTargetPos = false;
		}
	}
}
