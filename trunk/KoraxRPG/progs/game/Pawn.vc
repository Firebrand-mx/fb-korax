//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Pawn : IntelligentActor
	abstract;

//============================================================================
//
//  IsNotAttackingMaster
//
//============================================================================

bool IsNotAttackingMaster(EntityEx Other)
{
	return Class == MinotaurFriend && Other.Class == MinotaurFriend &&
		Other.Target != Tracer;
}

//==========================================================================
//
//	IsMaster
//
//==========================================================================

bool IsMaster(EntityEx Other)
{
	return Class == MinotaurFriend && Tracer == Other;
}

//**************************************************************************
//
// [KORAX RPG] Advanced interaction
//
//
//**************************************************************************

//==========================================================================
//
//  TryUse
//
//	[CW] Override or modify to add more 'use' possibilities
//
//==========================================================================

bool TryUse(optional float fUseRange, optional float fUseThingRange, optional name FailSound)
{
	if (UseLines(fUseRange, fUseThingRange, FailSound))
		return true;
	else
	{
		if (RidePartner && bRideControl)
		{
			RidePartner.Dismount();
			return true;
		}
	}

	return false;
}

//==========================================================================
//
//  UseLines
//
//  Looks for special lines in front of the pawn to activate.
//
//	[CW] copied from Player::P_UseLines
//
//==========================================================================

bool UseLines(optional float fUseRange, optional float fUseThingRange, optional name FailSound)
{
	bool action;
	float x1;
	float y1;
	float x2;
	float y2;
	TVec useDir;
	intercept_t* in;
	TVec hit_point;
	opening_t *open;

	action = false;
	AngleVector(&Angles, &useDir);
	x1 = Origin.x;
	y1 = Origin.y;

	x2 = x1 + fUseThingRange * useDir.x;
	y2 = y1 + fUseThingRange * useDir.y;
	foreach PathTraverse(in, x1, y1, x2, y2, PT_ADDLINES | PT_ADDTHINGS)
	{
		if (!in->bIsALine)
		{
			//	Check height.
			if (Origin.z >= in->Thing.Origin.z + in->Thing.Height ||
				Origin.z + Height <= in->Thing.Origin.z)
			{
				continue;
			}
			if (in->Thing.IsA('KRPGActor') && UseThing(KRPGActor(in->Thing)))
			{
				action = true;
				break;
			}
			continue;
		}

		if (!(in->line->flags & ML_TWOSIDED))
			break;	// stop

		hit_point = Origin + (fUseThingRange * in->frac) * useDir;
		open = LineOpenings(in->line, hit_point);
		open = FindOpening(open, hit_point.z, hit_point.z + Height);
		if (!open || open->range < 1.0)
		{
			// can't use through a wall
			break;
		}
		continue;
	}

	x2 = x1 + fUseRange * useDir.x;
	y2 = y1 + fUseRange * useDir.y;
	foreach PathTraverse(in, x1, y1, x2, y2, PT_ADDLINES)
	{
		line_t* line;
		float pheight;

		line = in->line;
		if (!line->special || (Level.GET_SPAC(line->flags) != SPAC_USE &&
			Level.GET_SPAC(line->flags) != SPAC_USETHROUGH))
		{
			hit_point = Origin + (fUseRange * in->frac) * useDir;
			open = LineOpenings(line, hit_point);
			open = FindOpening(open, hit_point.z + Height / 2.0,
				hit_point.z + Height);
			if (!open)
			{
				PlaySound(FailSound, CHAN_VOICE);
				break;	// can't use through a wall
			}
			pheight = Origin.z + Height / 2.0;
			if ((open->top < pheight) || (open->bottom > pheight))
			{
				PlaySound(FailSound, CHAN_VOICE);
			}
			continue;	// not a special line, but keep checking
		}

		if (PointOnPlaneSide(Origin, line) == 1)
		{
			//	Don't use back side unless it's a two-sided line.
			if (line->backsector != NULL)
				continue;
			break;
		}

		HexenLevelInfo(Level).ActivateLine(line, self, 0, SPAC_USE);
		action = true;

		//WAS can't use more than one special line in a row
		//jff 3/21/98 NOW multiple use allowed with enabling line flag
		if (Level.GET_SPAC(line->flags) != SPAC_USETHROUGH)
		{
			break;
		}
	}

	return action;
}

//==========================================================================
//
//	UseThing
//
//==========================================================================

bool UseThing(KRPGActor Thing)
{
	if (!Thing)
		Error("Pawn::UseThing : Thing reference not set to an instance of an object");

	// [CW] TODO: thinkout what conversation style do we need;
	//			  also, should other persons have ability to talk with each other?
	//
	// [CW] that's how it could look like if we used Strife-like dialogs
	if (Thing.ConversationID >= 0 && KRPGLevelInfo(Level).StartConversation(self, Actor(Thing)))
		return true;
	// Possible generic 'use' types

	return Thing.IsBeingUsed(self);
}

//==========================================================================
//
//	P_Order_UseLine			-=  TODO  =-
//
//==========================================================================

void P_Order_UseLine()
{
}

//==========================================================================
//
//	P_Order_UseThing		-=  TODO  =-
//
//==========================================================================

void P_Order_UseThing()
{
}



defaultproperties
{
	bSolid = true;
	bShootable = true;
	bCountKill = true;
	bMonster = true;
	bFloorClip = true;
	bTelestomp = true;
	bActivatePushWall = true;
	bActivateMCross = true;
	bPassMobj = true;
	bNeverTarget = false;

	bNonScalable = false;
	bCombatant = true;
}
