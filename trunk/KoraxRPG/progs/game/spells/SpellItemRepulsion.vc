//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ## ###  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**				   ######  #####   ######
//**	               ##   ## ##  ## ##    ##
//**	     		   ##   ## ##  ## ##   
//**	               #####   #####  ##  ####
//**	     		   ## ###  ##     ###   ##
//**	     		   ##  ### ##      ######
//**
//**    $Id: template.vc 1638 2008-08-28 19:10:17Z firebrand_kh $
//**
//**    Copyright (C) 2004-2008 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class SpellItemRepulsion : SpellItem;

const float BLAST_RADIUS_DIST	= 255.0;
const float BLAST_FULLSTRENGTH	= 0.0038909912;
const float BLAST_SPEED			= 20.0;

//==========================================================================
//
//	ActivateSpell
//
//  Blast all mobj things away
//
//  [FB] Based off from the blast radius artifact,  modified only in that the spell effects
//	     are level based... and change depending on that...
//
//==========================================================================

bool ActivateSpell(bool Pickup, int level)
{
	Actor mo;
	float dist;

	if(Player(Owner.Player).sp_power >= 5)
	{
		Owner.PlaySound('BlastRadius', CHAN_ITEM);
		HexenLevelInfo(Owner.Level).NoiseAlert(EntityEx(Owner), EntityEx(Owner));
		// [FB] Calculate level depending the Wisdom value of the owner (if it's a player)
		if(Player(Owner.Player).wisdom < 7)
		{
			Level = 1;
		}
		else if(Player(Owner.Player).wisdom > 7 && Player(Owner.Player).wisdom < 14)
		{
			Level = 2;
		}
		else if(Player(Owner.Player).wisdom > 14 && Player(Owner.Player).wisdom < 21)
		{
			Level = 3;
		}
		else if(Player(Owner.Player).wisdom > 21 && Player(Owner.Player).wisdom < 28)
		{
			Level = 4;
		}
		else if(Player(Owner.Player).wisdom > 28)
		{
			Level = 5;
		}

		foreach AllThinkers(Actor, mo)
		{
			if (mo == Owner || mo.bBoss)
			{
				// Not a valid monster
				continue;
			}
			if (mo.bCanBlast || mo.bIceCorpse)	// frozen corpse
			{
				// Let these special cases go
			}
			else if (mo.bMonster && (mo.Health <= 0))
			{
				continue;
			}
			else if (!mo.bMonster && !mo.bIsPlayer && !mo.bMissile)
			{
				// Must be monster, player, or missile
				continue;
			}
			if (mo.bDormant)
			{
				continue;	// no dormant creatures
			}
			if (mo.bDontBlast)
			{
				continue;
			}
			dist = Owner.DistTo(mo);
			if (dist > BLAST_RADIUS_DIST / (6.0 - itof(Level)))
			{
				// Out of range
				continue;
			}
			Blast(mo, Actor(Owner), BLAST_FULLSTRENGTH, Level);
		}
		Player(Owner.Player).cprint("REPULSION SPELL ACTIVATED");
		Player(Owner.Player).sp_power -= 5;
	}
	else
	{
		Player(Owner.Player).centreprint("NOT ENOUGH SPIRITUAL POWER");
	}
	
	return true;
}

//==========================================================================
//
//  Blast
//
//==========================================================================

final void Blast(Actor victim, Actor source, float strength, int level)
{
	float angle;
	float ang;
	Actor A;
	float x;
	float y;
	float z;

	angle = atan2(victim.Origin.y - source.Origin.y,
		victim.Origin.x - source.Origin.x);
	if (strength < SpellItemRepulsion::BLAST_FULLSTRENGTH)
	{
		victim.Velocity.x = strength * cos(angle) * 35.0;
		victim.Velocity.y = strength * sin(angle) * 35.0;
		if (victim.bIsPlayer)
		{
			// Players handled automatically
		}
		else
		{
			victim.bSlide = true;
			victim.bBlasted = true;
		}
	}
	else	// full strength blast from artifact
	{
		if (victim.bMissile)
		{
			if (SorcBall(victim))
			{
				// don't blast sorcerer balls
				return;
			}
			else if (MageStaffFX2(victim))
			{
				// Reflect to originator
				victim.Tracer = victim.Target;
				victim.Target = source;
			}
		}
		if (victim.Class == HolySpirit)
		{
			if (victim.Tracer == source)
			{
				victim.Tracer = victim.Target;
				victim.Target = source;
			}
		}
		victim.Velocity.x = (ArtiBlastRadius::BLAST_SPEED / (6.0 - itof(Level))) * cos(angle) * 35.0;
		victim.Velocity.y = (ArtiBlastRadius::BLAST_SPEED / (6.0 - itof(Level))) * sin(angle) * 35.0;

		// Spawn blast puff
		ang = atan2(source.Origin.y - victim.Origin.y,
			source.Origin.x - victim.Origin.x);
		x = victim.Origin.x + (victim.Radius + 1.0) * cos(ang);
		y = victim.Origin.y + (victim.Radius + 1.0) * sin(ang);
		z = victim.Origin.z - victim.FloorClip + victim.Height / 2.0;
		A = Spawn(BlastEffect, vector(x, y, z));
		if (A)
		{
			A.Velocity.x = victim.Velocity.x;
			A.Velocity.y = victim.Velocity.y;
		}

		if (victim.bMissile)
		{
			victim.Velocity.z = (8.0  / (6.0 - itof(Level))) * 35.0;
			A.Velocity.z = victim.Velocity.z;
		}
		else
		{
			victim.Velocity.z = ((1000.0 / victim.Mass) / (6.0 - itof(Level))) * 35.0;
		}
		if (victim.bIsPlayer)
		{
			// Players handled automatically
		}
		else
		{
			victim.bSlide = true;
			victim.bBlasted = true;
		}
	}
}

states
{
// [FB] Change this later!
Spawn:
	BLST ACBDEFGH 4 Bright
	Loop
}

defaultproperties
{
	MaxAmount = DefMaxAmount;
	PickupSound = 'PickupArtifact';
	PickupMessage = "$txt_repulsion";
	IconName = 'splm1';
	bFloatBob = true;
	PickupFlashType = PickupFlash;
	bSpellBar = true;
	Level = 1;
}
