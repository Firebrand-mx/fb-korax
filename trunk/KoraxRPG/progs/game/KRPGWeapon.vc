//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ## ###  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**				   ######  #####   ######
//**	               ##   ## ##  ## ##    ##
//**	     		   ##   ## ##  ## ##   
//**	               #####   #####  ##  ####
//**	     		   ## ###  ##     ###   ##
//**	     		   ##  ### ##      ######
//**
//**    $Id$
//**
//**    Copyright (C) 2004-2008 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class KRPGWeapon : HexenWeapon
	abstract;

//==========================================================================
//
//	DepleteAmmoEx
//
//==========================================================================

bool DepleteAmmoEx(byte Mode, optional bool CheckEnough)
{
	//	Default parameter values
	if (!specified_CheckEnough)
	{
		CheckEnough = true;
	}
	

	if (CheckEnough && !CheckAmmo(Weapon::FIRE_Either, false))
	{
		return false;
	}

	if (Ammo1)
	{
		Ammo1.Amount -= AmmoUse1 * 10 / Player(Owner.Player).wisdom;
		KRPGPlayerPawn(Owner.Player.MO).NotifyConditions(ActorCondition::notify_ManaUsed, none, AmmoUse1);
	}
	if (Ammo2)
	{
		Ammo2.Amount -= AmmoUse2 * 10 / Player(Owner.Player).wisdom;
		KRPGPlayerPawn(Owner.Player.MO).NotifyConditions(ActorCondition::notify_ManaUsed, none, AmmoUse2);
	}

	return true;
}

defaultproperties
{
}
