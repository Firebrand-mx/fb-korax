//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id: FighterPlayer.vc 2632 2007-08-12 08:02:24Z dj_jl $
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class FighterPlayer : PlayerPawn;

//============================================================================
//
//  A_SkullPop
//
//============================================================================

final void A_SkullPop()
{
	Actor A;

	if (!bIsPlayer)
	{
		//	Not a player anymore, i.e. already respawned or disconnected.
		return;
	}
	bSolid = false;
	A = Spawn(BloodySkull, Origin + vector(0.0, 0.0, 48.0));
	A.Velocity.x = (Random() - Random()) * 2.0 * 35.0;
	A.Velocity.y = (Random() - Random()) * 2.0 * 35.0;
	A.Velocity.z = (2.0 + Random() / 4.0) * 35.0;
	// Attach player mobj to bloody skull
	A.Player = Player;
	A.bIsPlayer = true;
	Player = none;
	bIsPlayer = false;
	_Special1 = A.Player.PClass;
	A.Health = Health;
	A.Angles.yaw = Angles.yaw;
	A.Player.MO = A;
	Player(A.Player).DamageFlash = 1.0;
}

__states__
{
	S_FPLAY('PLAY', 0, -1.0, none) = none
	S_FPLAY_RUN1('PLAY', 0, 4.0 / 35.0, S_FPLAY_RUN2) = none
	S_FPLAY_RUN2('PLAY', 1, 4.0 / 35.0, S_FPLAY_RUN3) = none
	S_FPLAY_RUN3('PLAY', 2, 4.0 / 35.0, S_FPLAY_RUN4) = none
	S_FPLAY_RUN4('PLAY', 3, 4.0 / 35.0, S_FPLAY_RUN1) = none
	S_FPLAY_ATK1('PLAY', 4, 8.0 / 35.0, S_FPLAY_ATK2) = none
	S_FPLAY_ATK2('PLAY', 5, 8.0 / 35.0, S_FPLAY) = none
	S_FPLAY_PAIN('PLAY', 6, 4.0 / 35.0, S_FPLAY_PAIN2) = none
	S_FPLAY_PAIN2('PLAY', 6, 4.0 / 35.0, S_FPLAY) = A_Pain
	S_FPLAY_DIE1('PLAY', 7, 6.0 / 35.0, S_FPLAY_DIE2) = none
	S_FPLAY_DIE2('PLAY', 8, 6.0 / 35.0, S_FPLAY_DIE3) = A_PlayerScream
	S_FPLAY_DIE3('PLAY', 9, 6.0 / 35.0, S_FPLAY_DIE4) = none
	S_FPLAY_DIE4('PLAY', 10, 6.0 / 35.0, S_FPLAY_DIE5) = none
	S_FPLAY_DIE5('PLAY', 11, 6.0 / 35.0, S_FPLAY_DIE6) = A_NoBlocking
	S_FPLAY_DIE6('PLAY', 12, 6.0 / 35.0, S_FPLAY_DIE7) = none
	S_FPLAY_DIE7('PLAY', 13, -1.0, none) = A_AddPlayerCorpse
	S_FPLAY_XDIE1('PLAY', 14, 5.0 / 35.0, S_FPLAY_XDIE2) = A_PlayerScream
	S_FPLAY_XDIE2('PLAY', 15, 5.0 / 35.0, S_FPLAY_XDIE3) = A_SkullPop
	S_FPLAY_XDIE3('PLAY', 17, 5.0 / 35.0, S_FPLAY_XDIE4) = A_NoBlocking
	S_FPLAY_XDIE4('PLAY', 18, 5.0 / 35.0, S_FPLAY_XDIE5) = none
	S_FPLAY_XDIE5('PLAY', 19, 5.0 / 35.0, S_FPLAY_XDIE6) = none
	S_FPLAY_XDIE6('PLAY', 20, 5.0 / 35.0, S_FPLAY_XDIE7) = none
	S_FPLAY_XDIE7('PLAY', 21, 5.0 / 35.0, S_FPLAY_XDIE8) = none
	S_FPLAY_XDIE8('PLAY', 22, -1.0, none) = A_AddPlayerCorpse
	S_FPLAY_ICE('PLAY', 23, 5.0 / 35.0, S_FPLAY_ICE2) = A_FreezeDeath
	S_FPLAY_ICE2('PLAY', 23, 1.0 / 35.0, S_FPLAY_ICE2) = A_FreezeDeathChunks
	S_PLAY_F_FDTH1('FDTH', 0 | FF_FULLBRIGHT, 5.0 / 35.0, S_PLAY_F_FDTH2)
	{
		PlaySound('*burndeath', CHAN_VOICE);
	}
	S_PLAY_F_FDTH2('FDTH', 1 | FF_FULLBRIGHT, 4.0 / 35.0, S_PLAY_FDTH3) = none
	S_PLAY_FDTH3('FDTH', 6 | FF_FULLBRIGHT, 5.0 / 35.0, S_PLAY_FDTH4) = none
	S_PLAY_FDTH4('FDTH', 7 | FF_FULLBRIGHT, 4.0 / 35.0, S_PLAY_FDTH5) = A_PlayerScream
	S_PLAY_FDTH5('FDTH', 8 | FF_FULLBRIGHT, 5.0 / 35.0, S_PLAY_FDTH6) = none
	S_PLAY_FDTH6('FDTH', 9 | FF_FULLBRIGHT, 4.0 / 35.0, S_PLAY_FDTH7) = none
	S_PLAY_FDTH7('FDTH', 10 | FF_FULLBRIGHT, 5.0 / 35.0, S_PLAY_FDTH8) = none
	S_PLAY_FDTH8('FDTH', 11 | FF_FULLBRIGHT, 4.0 / 35.0, S_PLAY_FDTH9) = none
	S_PLAY_FDTH9('FDTH', 12 | FF_FULLBRIGHT, 5.0 / 35.0, S_PLAY_FDTH10) = none
	S_PLAY_FDTH10('FDTH', 13 | FF_FULLBRIGHT, 4.0 / 35.0, S_PLAY_FDTH11) = none
	S_PLAY_FDTH11('FDTH', 14 | FF_FULLBRIGHT, 5.0 / 35.0, S_PLAY_FDTH12) = none
	S_PLAY_FDTH12('FDTH', 15 | FF_FULLBRIGHT, 4.0 / 35.0, S_PLAY_FDTH13) = none
	S_PLAY_FDTH13('FDTH', 16 | FF_FULLBRIGHT, 5.0 / 35.0, S_PLAY_FDTH14) = none
	S_PLAY_FDTH14('FDTH', 17 | FF_FULLBRIGHT, 4.0 / 35.0, S_PLAY_FDTH15) = none
	S_PLAY_FDTH15('FDTH', 18 | FF_FULLBRIGHT, 5.0 / 35.0, S_PLAY_FDTH16) = A_NoBlocking
	S_PLAY_FDTH16('FDTH', 19 | FF_FULLBRIGHT, 4.0 / 35.0, S_PLAY_FDTH17) = none
	S_PLAY_FDTH17('FDTH', 20 | FF_FULLBRIGHT, 5.0 / 35.0, S_PLAY_FDTH18) = none
	S_PLAY_FDTH18('FDTH', 21 | FF_FULLBRIGHT, 4.0 / 35.0, S_PLAY_FDTH19) = none
	S_PLAY_FDTH19('ACLO', 4, 35.0 / 35.0, S_PLAY_FDTH19) = A_CheckBurnGone
	S_PLAY_FDTH20('ACLO', 4, 8.0 / 35.0, none) = none
}

defaultproperties
{
	Health = 100;
	GibsHealth = -50;
	Radius = 16.0;
	Height = 64.0;
	PainChance = 1.0;
	HexenArmor[0] = 15.0;
	HexenArmor[1] = 25.0;
	HexenArmor[2] = 20.0;
	HexenArmor[3] = 15.0;
	HexenArmor[4] = 5.0;
	bPickUp = true;
	IdleState = S_FPLAY;
	SeeState = S_FPLAY_RUN1;
	MeleeState = S_FPLAY_ATK1;
	MissileState = S_FPLAY_ATK1;
	PainState = S_FPLAY_PAIN;
	DeathState = S_FPLAY_DIE1;
	GibsDeathState = S_FPLAY_XDIE1;
	FireDeathState = S_PLAY_F_FDTH1;
	IceDeathState = S_FPLAY_ICE;
	PainSound = 'PlayerFighterPain';
	SoundClass = 'fighter';

	InitialInventory.Num = 1;
	InitialInventory[0].Type = FWeapFist; InitialInventory[0].Amount = 1;
}
