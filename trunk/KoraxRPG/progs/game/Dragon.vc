//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Dragon : IntelligentActor
	__mobjinfo__(254);

Actor FlightTarget;

//==========================================================================
//
//	A_DragonInitFlight
//
//==========================================================================

final void A_DragonInitFlight()
{
	FlightTarget = none;
	do
	{
		// find the first tid identical to the dragon's tid
		FlightTarget = Actor(Level.FindMobjFromTID(TID, FlightTarget));
		if (!FlightTarget)
		{
			SetState(IdleState);
			return;
		}
	}
	while (FlightTarget == self);
	SetTID(0);
}

//==========================================================================
//
//	DragonSeek
//
//==========================================================================

final void DragonSeek(float thresh, float turnMax)
{
	int dir;
	float dist;
	float delta;
	EntityEx tempTarget;
	int i;
	int bestArg;
	float bestAngle;
	float angleToSpot, angleToTarget;
	Actor A;
	EntityEx oldTarget;

	tempTarget = FlightTarget;
	if (!tempTarget)
	{
		return;
	}
	dir = FaceActor(Actor(tempTarget), delta);
	if (delta > thresh)
	{
		delta /= 2.0;
		if (delta > turnMax)
		{
			delta = turnMax;
		}
	}
	if (dir)
	{
		// Turn clockwise
		Angles.yaw = AngleMod360(Angles.yaw + delta);
	}
	else
	{
		// Turn counter clockwise
		Angles.yaw = AngleMod360(Angles.yaw - delta);
	}
	Velocity.x = Speed * cos(Angles.yaw);
	Velocity.y = Speed * sin(Angles.yaw);
	if (Origin.z + Height < tempTarget.Origin.z ||
		tempTarget.Origin.z + tempTarget.Height < Origin.z)
	{
		dist = DistTo2(tempTarget);
		dist = dist / Speed;
		if (dist < 1.0)
		{
			dist = 1.0;
		}
		Velocity.z = (tempTarget.Origin.z - Origin.z) / dist;
	}
	else
	{
		dist = DistTo2(tempTarget);
		dist = dist / Speed;
	}
	if (tempTarget.bShootable && P_Random() < 64)
	{
		// attack the destination mobj if it's attackable
		if (fabs(AngleMod180(Angles.yaw -
			atan2(tempTarget.Origin.y - Origin.y,
			tempTarget.Origin.x - Origin.x))) < 45.0 / 2.0)
		{
			oldTarget = Target;
			Target = tempTarget;
			if (CheckMeleeRange())
			{
				Target.Damage(self, self, HITDICE(10));
				PlaySound('DragonAttack', CHAN_WEAPON);
			}
			else if (P_Random() < 128 && CheckMissileRange())
			{
				SpawnMissile(tempTarget, DragonFireball);
				PlaySound('DragonAttack', CHAN_WEAPON);
			}
			Target = oldTarget;
		}
	}
	if (dist * 35.0 < 4.0)
	{
		// Hit the target thing
		if (Target && P_Random() < 200)
		{
			bestArg = -1;
			bestAngle = 360.0;
			angleToTarget = atan2(Target.Origin.y - Origin.y,
				Target.Origin.x - Origin.x);
			for (i = 0; i < 5; i++)
			{
				if (!tempTarget.Args[i])
				{
					continue;
				}
				A = Actor(Level.FindMobjFromTID(tempTarget.Args[i], none));
				angleToSpot = atan2(A.Origin.y - Origin.y,
					A.Origin.x - Origin.x);
				delta = fabs(AngleMod180(angleToSpot - angleToTarget));
				if (delta < bestAngle)
				{
					bestAngle = delta;
					bestArg = i;
				}
			}
			if (bestArg != -1)
			{
				FlightTarget = Actor(Level.FindMobjFromTID(tempTarget.Args[bestArg],
					none));
			}
		}
		else
		{
			do
			{
				i = (P_Random() >> 2) % 5;
			}
			while (!tempTarget.Args[i]);
			FlightTarget = Actor(Level.FindMobjFromTID(tempTarget.Args[i], none));
		}
	}
}

//==========================================================================
//
//	A_DragonFlight
//
//==========================================================================

final void A_DragonFlight()
{
	float angle;

	DragonSeek(4.0, 8.0);
	if (Target)
	{
		if (!Target.bShootable)
		{
			// enemy died
			Target = none;
			return;
		}
		angle = atan2(Target.Origin.y - Origin.y, Target.Origin.x - Origin.x);
		if (fabs(AngleMod180(Angles.yaw - angle)) < 45.0 / 2.0
			&& CheckMeleeRange())
		{
			Target.Damage(self, self, HITDICE(8));
			PlaySound('DragonAttack', CHAN_WEAPON);
		}
		else if (fabs(AngleMod180(Angles.yaw - angle)) <= 20.0)
		{
			SetState(MissileState);
			PlaySound('DragonAttack', CHAN_WEAPON);
		}
	}
	else
	{
		LookForEnemy(true);	// KoraxRPG
	}
}

//==========================================================================
//
//	A_DragonFlap
//
//==========================================================================

final void A_DragonFlap()
{
	A_DragonFlight();
	if (P_Random() < 240)
	{
		PlaySound('DragonWingflap', CHAN_BODY);
	}
	else
	{
		PlaySound(ActiveSound, CHAN_VOICE);
	}
}

//==========================================================================
//
//	A_DragonAttack
//
//==========================================================================

final void A_DragonAttack()
{
	SpawnMissile(Target, DragonFireball);
}

//==========================================================================
//
//  A_DragonPain
//
//==========================================================================

final void A_DragonPain()
{
	A_Pain();
	if (!FlightTarget)
	{
		// no destination spot yet
		SetState(SeeState);
	}
}

//==========================================================================
//
//	A_DragonCheckCrash
//
//==========================================================================

final void A_DragonCheckCrash()
{
	if (Origin.z <= FloorZ)
	{
		SetState(FindState('Crashed'));
	}
}

states
{
Spawn:
	DRAG D 10 A_LookAI
	Loop
See:
	DRAG CB 5
	DRAG A 5 A_DragonInitFlight
	DRAG B 3 A_DragonFlap
	DRAG BCCDDCCBBAA 3 A_DragonFlight
	Goto See+3
Missile:
	DRAG E 8 A_DragonAttack
	Goto See+3
Pain:
	DRAG F 10 A_DragonPain
	Goto See+3
Death:
	DRAG G 5 A_Scream
	DRAG H 4 A_NoBlocking
	DRAG I 4
	DRAG J 4 A_DragonCheckCrash
	Wait
Crashed:
	DRAG KL 5
	DRAG M -1
	Stop
}

defaultproperties
{
	bSolid = true;
	bShootable = true;
	bCountKill = true;
	bMonster = true;
	bActivatePushWall = true;
	bActivateMCross = true;
	bPassMobj = true;
	bCanUseWalls = true;

	bFloorClip = true;
	bTelestomp = true;

	Health = 640;
	Radius = 20.0;
	Height = 65.0;
	Mass = 99999.0;
	Speed = 350.0;
	PainChance = 0.5;
	bNoGravity = true;
	bFloat = true;
	bNoBlood = true;
	bBoss = true;
	bNeverTarget = true;
	bFloorClip = false;
	bTelestomp = false;
	bActivatePushWall = false;
	bActivateMCross = false;
	bFullVolActive = true;
	bNoIceDeath = true;
	SightSound = 'DragonSight';
	ActiveSound = 'DragonActive';
	AttackSound = 'DragonAttack';
	PainSound = 'DragonPain';
	DeathSound = 'DragonDeath';
	Obituary = "$ob_dragon";
}
