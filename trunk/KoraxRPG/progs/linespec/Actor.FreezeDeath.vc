//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

//**************************************************************************
//	Freeze death functions
//**************************************************************************

//============================================================================
//
//	A_FreezeDeath
//
//============================================================================

final void A_FreezeDeath()
{
	StateTime = 2.0 + Random() * 8.0 + Random() * 8.0;
	bSolid = true;
	bShootable = true;
	bNoBlood = true;
	bPushable = true;
	bTelestomp = true;
	bSlide = true;
	bPassMobj = true;
	Height *= 4.0;
	PlaySound('misc/freeze', CHAN_VOICE);
	Translation = 0;	//no translation
	bIceCorpse = true;

	//	Andy Baker's stealth monsters
	if (bStealth)
	{
		Alpha = 1.0;
		VisDir = 0;
	}

	if (bIsPlayer)
	{
		PlayerEx(Player).DamageFlash = 0.0;
		PlayerEx(Player).PoisonCount = 0;
		PlayerEx(Player).BonusFlash = 0.0;
	}
	else
	{
		if (bMonster && Special)
		{
			// Initiate monster death actions
			Level.ExecuteActionSpecial(Special, Args[0], Args[1], Args[2],
				Args[3], Args[4], NULL, 0, self);
		}
	}
}

//============================================================================
//
//	A_GenericFreezeDeath
//
//============================================================================

final void A_GenericFreezeDeath()
{
	A_FreezeDeath();
	Translation = (TRANSL_Standard << TRANSL_TYPE_SHIFT) + 7;
}

//============================================================================
//
//  A_FreezeDeathChunks
//
//============================================================================

final void A_FreezeDeathChunks()
{
	int i;
	Actor A;

	if (Length(Velocity) > 1.0)
	{
		StateTime = 3.0;
		return;
	}
	PlaySound('misc/icebreak', CHAN_VOICE);

	for (i = 0; i < MAXPLAYERS; i++)
	{
		if (!Level.Game.Players[i])
			continue;
		if (!Level.Game.Players[i].bSpawned)
			continue;
		PlayerEx(Level.Game.Players[i]).ParticleEffect(256,
			LineSpecialLevelInfo::pt_static,
			LineSpecialLevelInfo::pt_ice_chunk, Origin + vector(0.0, 0.0,
			Height * 0.5), 20.0, vector(64.0, 64.0, 96.0), 0.6, 6.0, 80.0,
			RGB(127, 130, 240), 10.0, 16.0);
	}

	for (i = 12 + (P_Random() & 15); i >= 0; i--)
	{
		A = Spawn(IceChunk, Origin + vector(
			(Random() - 0.5) * 2.0 * Radius,
			(Random() - 0.5) * 2.0 * Radius,
			Random() * Height));
		A.SetState(GetStatePlus(A.IdleState, P_Random() % 3));
		if (A)
		{
			A.Velocity.z = (A.Origin.z - Origin.z) / Height * 4.0 * 35.0;
			A.Velocity.x = (Random() - Random()) * 2.0 * 35.0;
			A.Velocity.y = (Random() - Random()) * 2.0 * 35.0;
			IceChunk(A).A_IceSetTics();	// set a random tic wait
		}
	}
	for (i = 12 + (P_Random() & 15); i >= 0; i--)
	{
		A = Spawn(IceChunk, Origin + vector(
			(Random() - 0.5) * 2.0 * Radius,
			(Random() - 0.5) * 2.0 * Radius,
			Random() * Height));
		A.SetState(GetStatePlus(A.IdleState, P_Random() % 3));
		if (A)
		{
			A.Velocity.z = (A.Origin.z - Origin.z) / Height * 4.0 * 35.0;
			A.Velocity.x = (Random() - Random()) * 2.0 * 35.0;
			A.Velocity.y = (Random() - Random()) * 2.0 * 35.0;
			IceChunk(A).A_IceSetTics();	// set a random tic wait
		}
	}
	if (bIsPlayer)
	{
		// attach the player's view to a chunk of ice
		A = Spawn(IceChunkHead, Origin +
			vector(0.0, 0.0,
			// [CW] ------------- experimental
			/*PlayerPawn(self).ViewHeight*/PlayerEx(Player).GetMOViewHeight()));
		A.Velocity.x = (Random() - Random()) * 2.0 * 35.0;
		A.Velocity.y = (Random() - Random()) * 2.0 * 35.0;
		A.Velocity.z = (A.Origin.z - Origin.z) / Height * 4.0 * 35.0;
		A.Player = Player;
		A.bIsPlayer = true;
		A.ObtainInventory(EntityEx(Player.MO));
		Player = none;
		bIsPlayer = false;
		A.Health = Health;
		A.Angles.yaw = Angles.yaw;
		A.Player.MO = A;
		A.Player.Camera = A;
		A.Angles.pitch = 0.0;
	}
	RemoveFromTIDList();
	if (bBossDeath)
	{
		A_BossDeath();
	}
	SetState(FindState('FreeTargMobj'));
	bInvisible = true;
}

//==========================================================================
//
//	A_IceGuyDie
//
//==========================================================================

final void A_IceGuyDie()
{
	Velocity = vector(0.0, 0.0, 0.0);
	Height *= 4.0;
	A_FreezeDeathChunks();
}
