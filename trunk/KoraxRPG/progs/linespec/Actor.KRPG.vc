//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ## ###  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**				   ######  #####   ######
//**	               ##   ## ##  ## ##    ##
//**	     		   ##   ## ##  ## ##   
//**	               #####   #####  ##  ####
//**	     		   ## ###  ##     ###   ##
//**	     		   ##  ### ##      ######
//**
//**    $Id$
//**
//**    Copyright (C) 2004-2008 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************


//
// [KoraxRPG] Advanced behavior
//
bool			bReflectMissileDamage;	// invulnerable to missile weapons except for
										// blaster and ripping ones
bool			bNonScalable;	// Deny scaling variations
bool			bXYAnchored;	// Stuck in floor/ceiling (won't move freely along X & Y axes)
bool			bZAnchored;		// Stuck in floor/ceiling (won't move freely along Z axis)

bool			bCombatant;		// fighting actor

bool			bKeepSilent;	// do not play See, Active and Pain sounds
bool			bSenseAlways;	// detects target without seeing it

bool			bLiving;		// has a chance to spawn "dying spirit" on death
								// [CW] currently just for fun, though it may get some sense later

//
// [KoraxRPG] Advanced AI
//

bool			bIgnoreTeams;	// ignore Team factor (attack everyone)
bool			bHateTarget;	// ignore Team factor for current Target only
int				Team;			// this actor's Team ID

//
// [KoraxRPG] RPG Stuff
//

int				experience;		// How much experience this actor gives when dying
int				level;			// [FB] Actor level, for spells, projectiles and monsters

//**************************************************************************
//
//
//	[KoraxRPG] Extended common stuff
//
//
//**************************************************************************

//==========================================================================
//
//	Destroy
//
//==========================================================================

void Destroy()
{
	// Purge all conditions from this actor
	PurgeConditions();

	::Destroy();
}

//==========================================================================
//
//	BeginPlay
//
//==========================================================================

void BeginPlay()
{
	::BeginPlay();

	if (bFriendly)
		Team = KRPGDefs::TEAM_PLAYER;

	// Set random scaling for more game variety
	if (!bNonScalable)
	{
		float rand = (Random() - 0.5) * 0.15;
		ScaleX += ScaleX * rand;
		ScaleY += ScaleY * rand;
		Height += Height * rand;
		Radius += Radius * rand;
	}
}

//==========================================================================
//
//	OnMapSpawn
//
//==========================================================================

void OnMapSpawn(mthing_t* mthing)
{
	//[Korax]
/*	if (!bMissile && !bPickUp && !IsA('PlayerPig'))
	{
		// [FB]  FIXME: I should check this later...
		experience = default.Health;
	}*/
	
	// [FB] Implement actor levels here...

	::OnMapSpawn(mthing);
}

//==========================================================================
//
//  A_KRPGPain
//
//==========================================================================

void A_KRPGPain()
{
	A_Pain();
}

//==========================================================================
//
//	Died
//
//==========================================================================

void Died(EntityEx source, EntityEx inflictor)
{
	Target = none;
	bHateTarget = false;
	bInCombat = false;

	::Died(source, inflictor);

//[Korax]
	if (source && !bIsPlayer)
	{
		float mod;
		// [FB] First let's calculate the experience modifier
		switch(GetCvar('ExpModifier'))
		{
			case 0: // 50%
				mod = 0.5;
				break;
			case 1: // 100%
				mod = 1.0;
				break;
			case 2: // 125%
				mod = 1.25;
				break;
			case 3: // 150%
				mod = 1.50;
				break;
			case 4: // 200%
				mod = 2.0;
				break;
			default: // Anything else makes modifier 100%
				mod = 1.0;
				break;
		}
		if (!source.bIsPlayer)
		{
			Actor(source).experience += ftoi((itof(experience) * ((90.0 + 
				itof(P_Random()) / 255.0 * 21.0) / 100.0)) * mod); //RPG
//			Actor(source).experience += ftoi(itof(experience) * mod);
		}
		else
		{
			KRPGPlayerBase(source.Player).GiveExperience(ftoi((itof(experience) * ((90.0 + 
				itof(P_Random()) / 255.0 * 21.0) / 100.0) * (Level.World.GameSkill < 2 ? 
				125.0 : (Level.World.GameSkill < 3 ? 100.0 : 80.0)) / 100.0) * mod));
//			KRPGPlayerBase(source.Player).GiveExperience(ftoi(itof(experience) * mod));
		}
	}

	NotifyConditions(ActorCondition::notify_RecepientDead, source, 0);
	
	// Purge all conditions from this actor
	PurgeConditions();
}

//==========================================================================
//
//	Physics
//
//==========================================================================

bool Physics(float DeltaTime)
{
	if (bXYAnchored)
	{
		Velocity.x = 0.0;
		Velocity.y = 0.0;
	}

	if (bZAnchored)
		Velocity.z = 0.0;

	if (!ApplySpecialPhysics(DeltaTime))
	{
		return false;
	}

	return ::Physics(DeltaTime);
}

//==========================================================================
//
//	ApplySpecialPhysics
//
//==========================================================================

bool ApplySpecialPhysics(float DeltaTime)
{
	return true;
}

//==========================================================================
//
//	Tick
//
//==========================================================================

void Tick(float deltaTime)
{
	// Process ACs that need it before anything else
	int i = 0;
	for (i = 0; i < Conditions.Num; i++)
	{
		if (Conditions[i] && Conditions[i].bDoFromActorTick &&
			!Conditions[i].bPlayerSpecific)
		{
			Conditions[i].DoDelegate(deltaTime);
		}
	}
	
	::Tick(deltaTime);
}

//==========================================================================
//
//  DoSpecialDamage
//
//	KRPG
//
//==========================================================================

int DoSpecialDamage(EntityEx victim, EntityEx source, int damage)
{
	if (MissilePoisonDamage && (victim.bIsPlayer || victim.bMonster && P_Random() < 33))
	{
		Actor(victim).CastCondition(ACPoisoned, true, Actor(source), 1,
			itof(MissilePoisonDamage) / 10.0);
		damage >>= 1;
	}
	return damage;
}

//==========================================================================
//
//  TakeSpecialDamage
//
//	[CW] Handles some special flags
//
//==========================================================================

int TakeSpecialDamage(EntityEx inflictor, EntityEx source, int damage,
	name DmgType)
{
    if (inflictor)
	{
		if (bReflectMissileDamage &&
				inflictor.bMissile && !FastProjectile(inflictor) && !inflictor.bRip)
			return -1;
	}
	return damage;
}

//**************************************************************************
//
//
//	[KoraxRPG] Advanced actor manipulations
//
//
//**************************************************************************

//==========================================================================
//
//	Kill
//
//	[CW] Useful method to kill actor instantly
//
//==========================================================================

void Kill(optional EntityEx inflictor, optional EntityEx source, optional bool bXDeath, optional name DmgType,
		  optional bool bNoInvulnerability)
{
	//
	// Calling Damage() is not an option here, because damage could be
	// decreased by skill level factor or not applied at all in some cases,
	// players also may autoheal to prevent death.
	// This method will ignore invulnerability and other conditions if
	// needed.
	//

	if (!specified_DmgType)
	{
		DmgType = 'InstantKill';
	}

	if (!bShootable)
	{
		return;
	}

	if (Health <= 0)
	{
		if (DmgType == 'Ice')
		{
			return;
		}
		else if (bIceCorpse)	// frozen
		{
			StateTime = 0.1;
			Velocity.x = 0.0;
			Velocity.y = 0.0;
		}
		return;
	}

	if (bInvulnerable && !bNoInvulnerability)
	{
		if (bIsPlayer)
		{
			// For player, no exceptions
			return;
		}
		else if (!inflictor || !inflictor.bDamageInvulnerable)
		{
			return;
		}
	}

	// No armor piercing check
	// No Spectral flag check

	//	Andy Baker's Stealth monsters
	if (bStealth)
	{
		Alpha = 1.0;
		VisDir = -1;
	}

	if (bSkullFly)
	{
		if (bSkullFlyInvulnerable && !bNoInvulnerability)
		{
			// Invulnerable during charge attack
			return;
		}
		Velocity = vector(0.0, 0.0, 0.0);
		SetState(SeeState);
	}

	// Ignore dormant state
	// Ignore skill level factor

	// No special damage appliance

	// No fire resistance
	// No other possible damage factors

	// No special damage appliance

	// No damage thrust

	int damage = bXDeath ? Health - GibsHealth + 1 : Health + 1;

	// player specific
	if (bIsPlayer)
	{
		// No misc player stuff

		PlayerEx(Player).DamageFlash += itof(damage) / 35.0;
		if (PlayerEx(Player).DamageFlash > 3.0)
		{
			PlayerEx(Player).DamageFlash = 3.0;	// teleport stomp does 10k points...
		}
	}

	// do the damage    
	Health -= damage;
	if (Health <= 0)
	{
		// Death
		Special1 = damage;
		// check for special fire damage or ice damage deaths
		if (DmgType == 'Fire')
		{
			if (bIsPlayer && !PlayerEx(Player).MorphTime)
			{
				// Check for flame death
				if (!inflictor || !inflictor.bConditionalFireDamage ||
					(Health > -50 && damage > 25))
				{
					DamageType = 'Fire';
				}
			}
			else
			{
				DamageType = 'Fire';
			}
		}
		else
		{
			DamageType = DmgType;
		}
		if (source && source.IsServant())
		{
			// Minotaur's kills go to his master
			EntityEx master = source.Tracer;
			// Make sure still alive and not a pointer to fighter head
			if (master && master.bIsPlayer && (master.Player.MO == master))
			{
				source = master;
			}
		}
		Died(source, inflictor);
		return;
	}
	else
	{
		// Shouldn't happen
		dprint("Actor.KRPG::Kill : damage did not kill actor");
	}
}

//==========================================================================
//
//  Thrust3d
//
//	[CW] A three-dimensional vector variant of Thrust, that
//		 uses vector angles and single vector length.
//
//==========================================================================

void Thrust3d(float angle2d, float angle3, float move)
{
	Thrust(angle2d, move * cos(angle3));
	Velocity.z += move * sin(angle3) * 35.0;
}

//==========================================================================
//
//  Thrust3d2
//
//	[CW] Variant of Thrust3d, that allows explicit definition
//	     of horizontal and vertical velocities.
//
//==========================================================================

void Thrust3d2(float angle2d, float move2d, float move3)
{
	Thrust(angle2d, move2d);
	Velocity.z += move3 * 35.0;
}

//**************************************************************************
//
//
//	[KoraxRPG] Advanced interaction
//
//
//**************************************************************************

//==========================================================================
//
//	CanBeUsed
//
//	TODO
//
//==========================================================================

bool CanBeUsed()
{
	return true;
}

//==========================================================================
//
//	UseThing
//
//==========================================================================

bool UseThing(EntityEx Thing)
{
	if (Thing == self)
	{
		return false;
	}

	if (Thing.bUseSpecial && Thing.Special && Level.ExecuteActionSpecial(
		Thing.Special, Thing.Args[0], Thing.Args[1], Thing.Args[2],
		Thing.Args[3], Thing.Args[4], NULL, 0, self))
	{
		return true;
	}

	// [CW] TODO: thinkout what conversation style do we need;
	//			  also, should other persons have ability to talk with each other?
	//
	//dprint("UseThing: Thing Class = %n, ConID = %i", GetClassName(Thing.Class), Thing.ConversationID);
	if (Thing.ConversationID > 0 && LineSpecialLevelInfo(Level).StartConversation(self, Thing))
	{
		return true;
	}

	if (UseThingSpecial(Thing))
	{
		return true;
	}

	return Actor(Thing).IsBeingUsed(self);
}

//==========================================================================
//
//	UseThingSpecial
//
//==========================================================================

bool UseThingSpecial(EntityEx Thing)
{
	return false;
}

//==========================================================================
//
//	IsBeingUsed
//
//	[CW] Override for actors that could be 'used'
//
//==========================================================================

bool IsBeingUsed(Actor User)
{
	return false;
}

//**************************************************************************
//
//
//	[KoraxRPG] Extra effects
//
//
//**************************************************************************

//==========================================================================
//
//	SpawnSphericalEffect
//
//	CHECKME --- rename? not only effects could be spawned
//	CHECKME --- not actually bound to Actor, move to levelinfo?
//	TODO -- add radial velocity
//
//==========================================================================

void SpawnSphericalEffect(class<Actor> EffectType, TVec origin, int amount, TVec spread,
							optional float RadialVelocity, optional TVec DirectVelocity)
{
	int i,c;
	TVec v;
	EntityEx ee;

	//c = P_Random() % amount;
	for (i = 0; i < amount; i++)
	{
		v = origin + vector((Random() - 0.5) * spread.x,
									(Random() - 0.5) * spread.y,
									(Random() - 0.5) * spread.z);
		ee = EntityEx(Spawn(EffectType, v));
		if (specified_RadialVelocity)
		{
		}
		if (specified_DirectVelocity)
		{
			ee.Velocity += DirectVelocity;
		}
	}
}

//==========================================================================
//
//	A_FadeAway
//
//==========================================================================

final void A_FadeAway(float FadeAlpha, float FadeScale, optional int FadeHealth)
{
	if (FadeAlpha > 0.0)
	{
		Alpha -= FadeAlpha;
	}
	if (FadeScale > 0.0)
	{
		ScaleX -= FadeScale;
		ScaleY -= FadeScale;
	}
	if (FadeHealth > 0)
	{
		Health -= FadeHealth;
	}
}

//==========================================================================
//
//  A_GenericFloorFire
//
//==========================================================================

final void A_GenericFloorFire(class<Actor> FFClass)
{
	Actor A;

	Origin.z = FloorZ;
	A = Spawn(FFClass, vector(
		Origin.x + (Random() - Random()) * 4.0,
		Origin.y + (Random() - Random()) * 4.0, ONFLOORZ));
	A.Target = Target;
	A.Velocity.x = 0.00001;	// Force block checking
	A.CheckMissileSpawn();
}

// CHECKME -- is this needed here?
int decorate_default_health
{
	get { return default.Health; }
}
