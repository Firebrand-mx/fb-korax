//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ## ###  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**				   ######  #####   ######
//**	               ##   ## ##  ## ##    ##
//**	     		   ##   ## ##  ## ##   
//**	               #####   #####  ##  ####
//**	     		   ## ###  ##     ###   ##
//**	     		   ##  ### ##      ######
//**
//**    $Id: template.vc 1638 2008-08-28 19:10:17Z firebrand_kh $
//**
//**    Copyright (C) 2004-2008 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

//==========================================================================
//
//	Dump
//
//	Dumps all inventory into the devlog.
//	USE FOR DEBUG PURPOSES ONLY
//
//==========================================================================

void Dump()
{
	dprint("INVENTORY DUMP START ---------------------");
	Inventory Item = EntityEx(Owner).Inventory;
	while (Item)
	{
		dprint("%n", GetClassName(Item.Class));
		Item = Item.Inventory;
	}
	dprint("INVENTORY DUMP END -----------------------");
}

//==========================================================================
//
//	PrevWpn
//
//	Return previous item with bWeaponStash flag set.
//
//==========================================================================

Inventory PrevWpn()
{
	Inventory Item = Inventory;
	while (Item && !Item.bWeaponStash)
	{
		Item = Item.Inventory;
	}
	return (Item && Item.bWeaponStash) ? Item : none;
}

//==========================================================================
//
//	NextWpn
//
//	Return next item with bWeaponStash flag set.
//
//==========================================================================

Inventory NextWpn()
{
	Inventory Ret = none;
	Inventory Item = EntityEx(Owner).Inventory;
	while (Item && Item != self)
	{
		if (Item.bWeaponStash)
		{
			Ret = Item;
		}
		Item = Item.Inventory;
	}
	return Ret;
}

//==========================================================================
//
//	PrevSpl
//
//	Return previous item with bSpellBar flag set.
//
//==========================================================================

Inventory PrevSpl()
{
	Inventory Item = Inventory;
	while (Item && !Item.bSpellBar)
	{
		Item = Item.Inventory;
	}
	return (Item && Item.bSpellBar) ? Item : none;
}

//==========================================================================
//
//	NextSpl
//
//	Return next item with bSpellBar flag set.
//
//==========================================================================

Inventory NextSpl()
{
	Inventory Ret = none;
	Inventory Item = EntityEx(Owner).Inventory;
	while (Item && Item != self)
	{
		if (Item.bSpellBar)
		{
			Ret = Item;
		}
		Item = Item.Inventory;
	}
	return Ret;
}
