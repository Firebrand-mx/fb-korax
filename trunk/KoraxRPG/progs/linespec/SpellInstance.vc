//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ## ###  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**				   ######  #####   ######
//**	               ##   ## ##  ## ##    ##
//**	     		   ##   ## ##  ## ##   
//**	               #####   #####  ##  ####
//**	     		   ## ###  ##     ###   ##
//**	     		   ##  ### ##      ######
//**
//**    $Id$
//**
//**    Copyright (C) 2004-2008 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class SpellInstance : Thinker
	abstract;

Actor	AInstigator;		// the caster object
bool	bPlayActivation;	// call BirthTick until bActive flag is not set
bool	bPlayDeactivation;	// call DeathTick until bShouldDestroy flag is set or explicitly destroyed
bool	bDontCallDo;		// do not call Do method each tick

name	CastSound;

bool	bIsNegative;
bool	bIsMagic;

int		Level;

float	LifeTime;
float	LifeDuration;

int		SpiritPowerDrain;
float	SPDrainDelay;
float	SPDrainTime;

bool	bActive;			// spell is active and working
bool	bInActivation;		// playing activation
bool	bInDeactivation;	// playing deactivation
bool	bShouldDestroy;		// spell will be destroyed next tick

//==========================================================================
//
//	Tick
//
//==========================================================================

void Tick(float deltaTime)
{
	::Tick(deltaTime);

	if (bShouldDestroy)
	{
		Destroy();
		return;
	}

	if (!bActive && !bInActivation && !bInDeactivation)
	{
		Activate();
	}

	if (bActive && LifeDuration > 0.0)
	{
		LifeTime -= deltaTime;
		if (LifeTime <= 0.0)
		{
			Deactivate();
			//Dispell();
			//return;
		}
	}

	if (bActive)
	{
		SPDrainTime -= deltaTime;
		if (SPDrainTime <= 0.0)
		{
			// [CW] TODO: how to drain spirit power from caster player/monster?
			//		TODO: if not enouph SP, should call Dispell and return
			// use SpiritPowerDrain amount;
			SPDrainTime = SPDrainDelay;
		}

		if (!bDontCallDo)
		{
			Do(deltaTime);
		}
	}
	else
	{
		if (bInActivation)
		{
			BirthTick(deltaTime);
		}
		else if (bInDeactivation)
		{
			DeathTick(deltaTime);
		}
	}
}

//==========================================================================
//
//	Activate
//
//==========================================================================

void Activate()
{
	LifeTime = LifeDuration;

	if (bPlayActivation)
	{
		bInActivation = true;
	}
	else
	{
		bActive = true;
	}
}

//==========================================================================
//
//	Deactivate
//
//==========================================================================

void Deactivate()
{
	bActive = false;

	if (bPlayDeactivation)
	{
		bInDeactivation = true;
	}
	else
	{
		bShouldDestroy = true;
	}
}

//==========================================================================
//
//	BirthTick
//
//==========================================================================

void BirthTick(float deltaTime)
{
	// [CW] Just in case someone forget to override this properly,
	// this will save spell from stucking in pre-activation state.
	FinishActivation();
}

//==========================================================================
//
//	FinishActivation
//
//==========================================================================

void FinishActivation()
{
	bInActivation = false;
	bActive = true;
}

//==========================================================================
//
//	Do
//
//==========================================================================

void Do(float deltaTime)
{
	// [CW] Annoying reminder :)
	dprint("SpellInstance of class %n is doing nothing! Better set bDontCallDo = false", GetClassName(Class));
}

//==========================================================================
//
//	DeathTick
//
//==========================================================================

void DeathTick(float deltaTime)
{
	// [CW] Just in case someone forget to override this properly,
	// this will save spell from stucking in post-deactivation state.
	FinishDeactivation();
}

//==========================================================================
//
//	FinishDeactivation
//
//==========================================================================

void FinishDeactivation()
{
	bInDeactivation = false;
	bShouldDestroy = true;
}

/*
//==========================================================================
//
//	Dispell
//
//==========================================================================

void Dispell()
{
	Deactivate();
	Destroy();
}
*/

defaultproperties
{
	bIsMagic = true;
}
