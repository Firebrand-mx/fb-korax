//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ## ###  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**				   ######  #####   ######
//**	               ##   ## ##  ## ##    ##
//**	     		   ##   ## ##  ## ##   
//**	               #####   #####  ##  ####
//**	     		   ## ###  ##     ###   ##
//**	     		   ##  ### ##      ######
//**
//**    $Id: template.vc 1305 2008-03-01 09:20:29Z dj_jl $
//**
//**    Copyright (C) 2004-2008 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class KRPGPlayerBase : PlayerEx;

int strength;
int intelligence;
int wisdom;

//
// [FB] Spell bar stuff
//
KRPGInventory	SpellFirst;
KRPGInventory	SpellPtr;
float			SpellTime;
int				SpellSize;

replication
{
	reliable if (!bIsClient)
		strength, intelligence, wisdom, SpellFirst,
		SpellPtr, SpellTime;
}

//==========================================================================
//
//	AddInventory
//
//==========================================================================

void AddInventory(KRPGInventory Item)
{
	if (Item.bSpellBar && !SpellPtr)
	{
		SpellPtr = Item;
		SpellFirst = Item;
	}
}

//==========================================================================
//
//	RemoveInventory
//
//==========================================================================

void RemoveInventory(KRPGInventory Item)
{
	if (SpellPtr == Item)
	{
		SpellPtr = Item.PrevSpl();
		if (!SpellPtr)
		{
			InvPtr = Item.NextSpl();
		}
	}
	if (SpellFirst == Item)
	{
		SpellFirst = Item.PrevSpl();
		if (!SpellFirst)
		{
			SpellFirst = Item.NextSpl();
		}
	}
	if (Item.bSpellBar)
	{
		AdjustSpellFirst();
	}
}

//==========================================================================
//
//	GiveExperience
//
//==========================================================================

void GiveExperience(int Exp)
{
}

//==========================================================================
//
//	UpdateStats
//
//==========================================================================

void UpdateStats(int n_strength, int n_vitality, int n_speed, int n_intelligence,
		int n_wisdom)
{
}

//==========================================================================
//
//	GetPoints
//
//==========================================================================

int GetPoints()
{
}

//==========================================================================
//
//	SetPoints
//
//==========================================================================

void SetPoints(int value)
{
}

//==========================================================================
//
//	BuildCharacter
//
//==========================================================================

void BuildCharacter(int i_strength, int i_vitality, int i_speed, int i_intelligence,
		int i_wisdom)
{
}

//==========================================================================
//
//  NextSpell
//
//==========================================================================

final void NextSpell()
{
	if (!bInventoryAlwaysOpen)
	{
		if (!SpellTime)
		{
			SpellTime = 5.0;
			return;
		}
		SpellTime = 5.0;
	}
	if (SpellPtr)
	{
		KRPGInventory Prev = SpellPtr.PrevSpl();
		if (Prev)
		{
			SpellPtr = Prev;
			AdjustSpellFirst();
		}
	}		
}

//==========================================================================
//
//  PreviousSpell
//
//==========================================================================

final void PreviousSpell()
{
	if (!bInventoryAlwaysOpen)
	{
		if (!SpellTime)
		{
			SpellTime = 5.0;
			return;
		}
		SpellTime = 5.0;
	}
	if (SpellPtr)
	{
		KRPGInventory Next = SpellPtr.NextSpl();
		if (Next)
		{
			SpellPtr = Next;
			AdjustSpellFirst();
		}
	}
}

//==========================================================================
//
//  SpellUse
//
//==========================================================================

final void SpellUse()
{
	// flag to denote that it's okay to use an artifact
	if (SpellTime)
	{
		SpellTime = 0.0;
	}
	else if (SpellPtr)
	{
		Actor(MO).UseSpell(SpellPtr);
	}
}

//==========================================================================
//
//  SpellTick
//
//==========================================================================

final void SpellTick(float deltaTime)
{
	// turn spell bar off after a certain amount of time
	if (SpellTime)
	{
		SpellTime -= deltaTime;
		if (SpellTime <= 0.0)
		{
			SpellTime = 0.0;
		}
	}
}

//==========================================================================
//
//	AdjustSpellFirst
//
//==========================================================================

final void AdjustSpellFirst()
{
	KRPGInventory Item;

	if (!SpellPtr)
	{
		SpellFirst = none;
		return;
	}

	//	Count how many items are following the current one, also make sure
	// that first is not after this one.
	int NumFollowing = 0;
	for (Item = SpellPtr.NextSpl(); Item; Item = Item.NextSpl())
	{
		NumFollowing++;
		if (SpellFirst == Item)
		{
			SpellFirst = SpellPtr;
		}
	}
	int FirstOffs = 0;
	for (Item = SpellPtr; Item && Item != SpellFirst; Item = Item.PrevSpl())
	{
		FirstOffs++;
	}
	while (FirstOffs > SpellSize)
	{
		SpellFirst = SpellFirst.NextSpl();
		FirstOffs--;
	}
	while (NumFollowing + FirstOffs < SpellSize &&	SpellFirst.PrevSpl())
	{
		SpellFirst = SpellFirst.PrevSpl();
		FirstOffs++;
	}
}

defaultproperties
{
}
