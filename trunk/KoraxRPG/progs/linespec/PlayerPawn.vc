//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ## ###  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**				   ######  #####   ######
//**	               ##   ## ##  ## ##    ##
//**	     		   ##   ## ##  ## ##   
//**	               #####   #####  ##  ####
//**	     		   ## ###  ##     ###   ##
//**	     		   ##  ### ##      ######
//**
//**    $Id: PlayerPawn.vc 1976 2009-06-06 15:07:33Z firebrand_kh $
//**
//**    Copyright (C) 2004-2008 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

//
// A full copy of common PlayerPawn, inherited from KRPGPawn instead of Actor
//

class PlayerPawn : KRPGPawn
	abstract;

//	Default view height.
float			ViewHeight;

//	Player is unable to run if health is lower than this.
int				RunHealth;

//	Movement speed modifiers.
float			ForwardMove1;
float			ForwardMove2;
float			SideMove1;
float			SideMove2;

//	Colour translation range.
int				TranslStart;
int				TranslEnd;

//	Values for Hexen armor.
float			HexenArmor[5];

//	Jump velocity.
float			JumpVelZ;

//	Name displayed in menu.
string			DisplayName;

//	For ArtiHealRadius
name			HealRadiusType;

//	Special mode of the invulnerability powerup.
name			InvulnerabilityMode;

//	Which class filter to use.
name			SpawnClass;

//	Icon for intermission screen.
name			ScoreIcon;

//	For morphed player classes
class<Weapon>	MorphWeapon;

//	Attack offset, relative to the centre of the player.
float			AttackZOffset;

//	Damage flash colour.
int				DamageScreenColour;

//	Maximal health.
int				MaxHealth;

//==========================================================================
//
//	ShouldDropItems
//
//==========================================================================

bool ShouldDropItems()
{
	return false;
}

//==========================================================================
//
//	AddInventory
//
//==========================================================================

void AddInventory(Inventory Item)
{
	::AddInventory(Item);
	if (bIsPlayer && Item.bInvBar && !PlayerEx(Player).InvPtr)
	{
		PlayerEx(Player).InvPtr = Item;
		PlayerEx(Player).InvFirst = Item;
	}
}

//==========================================================================
//
//	RemoveInventory
//
//==========================================================================

void RemoveInventory(Inventory Item)
{
	bool SelectNewWeap = false;
	if (bIsPlayer)
	{
		if (PlayerEx(Player).InvPtr == Item)
		{
			PlayerEx(Player).InvPtr = Item.PrevInv();
			if (!PlayerEx(Player).InvPtr)
			{
				PlayerEx(Player).InvPtr = Item.NextInv();
			}
		}
		if (PlayerEx(Player).InvFirst == Item)
		{
			PlayerEx(Player).InvFirst = Item.PrevInv();
			if (!PlayerEx(Player).InvFirst)
			{
				PlayerEx(Player).InvFirst = Item.NextInv();
			}
		}
		if (PlayerEx(Player).PendingWeapon == Item)
		{
			PlayerEx(Player).PendingWeapon = none;
		}
		if (PlayerEx(Player).ReadyWeapon == Item)
		{
			PlayerEx(Player).ReadyWeapon = none;
			PlayerEx(Player).Refire = 0;
			SelectNewWeap = true;
		}
	}
	::RemoveInventory(Item);
	if (bIsPlayer && Item.bInvBar)
	{
		PlayerEx(Player).AdjustInvFirst();
	}
	if (SelectNewWeap && !PlayerEx(Player).PendingWeapon)
	{
		Weapon Best = PlayerEx(Player).BestWeapon();
		if (Best)
		{
			PlayerEx(Player).SetWeapon(Best);
			PlayerEx(Player).BringUpWeapon();
		}
	}
}

//==========================================================================
//
//  UseInventory
//
//==========================================================================

bool UseInventory(Inventory Item)
{
	//	Can't use anything while totally frozen
	if (PlayerEx(Player).bTotallyFrozen)
	{
		return false;
	}
	// Found match - try to use
	if (!::UseInventory(Item))
	{
		if (!PuzzleItem(Item))
		{
			// Unable to use artifact, advance pointer
			PlayerEx(Player).PlayerNextArtifact();
		}
		return false;
	}
	PlaySound(Item.UseSound, CHAN_ITEM);
	PlayerEx(Player).ArtifactFlash = 4;
	return true;
}

//==========================================================================
//
//  AdjustSpeed
//
//==========================================================================

final void AdjustSpeed(out float forward, out float side)
{
	// When the player has less than 25 health points, he's unable to run
	if (Health < RunHealth)
	{
		if (forward > 1000.0)
		{
			forward = 1000.0;
		}
		else if (forward < -1000.0)
		{
			forward = -1000.0;
		}
		if (side > 1000.0)
		{
			side = 1000.0;
		}
		else if (side < -1000.0)
		{
			side = -1000.0;
		}
	}

	if (forward >= -1000.0 && forward < 1000.0)
	{
		forward *= ForwardMove1;
	}
	else
	{
		forward *= ForwardMove2;
	}
	if (side >= -1000.0 && side < 1000.0)
	{
		side *= SideMove1;
	}
	else
	{
		side *= SideMove2;
	}

	if (Inventory && !PlayerEx(Player).MorphTime)
	{
		// Adjust for a player with a speed artifact
		float SpeedFactor = Inventory.GetSpeedFactor();
		forward *= SpeedFactor;
		side *= SpeedFactor;
	}
}

//==========================================================================
//
//  MorphPlayerThink
//
//==========================================================================

void MorphPlayerThink()
{
}

//===========================================================================
//
//  GetSigilPieces
//
//===========================================================================

int GetSigilPieces()
{
	return PlayerEx(Player).GetSigilPieces();
}

//==========================================================================
//
//	UnmorphActor
//
//==========================================================================

int UnmorphActor(Entity Activator, int Force)
{
	if (PlayerEx(Player).MorphTime)
	{
		return PlayerEx(Player).UndoPlayerMorph(Force, Activator ?
			PlayerEx(Activator.Player) : none);
	}
	return 0;
}

defaultproperties
{
	Health = 100;
	Radius = 16.0;
	Height = 56.0;
	PainChance = 1.0;
	Speed = 1.0;
	ReactionCount = 0;
	ViewHeight = 41.0;
	ForwardMove1 = 1.0;
	ForwardMove2 = 1.0;
	SideMove1 = 1.0;
	SideMove2 = 1.0;
	JumpVelZ = 8.0 * 35.0;
	AttackZOffset = 8.0;
	DamageScreenColour = 0xffff0000;
	bSolid = true;
	bShootable = true;
	bDropOff = true;
	bPickUp = true;
	bNoDeathmatch = true;
	bFriendly = true;
	bSlide = true;
	bPassMobj = true;
	bActivatePushWall = true;
	bFloorClip = true;
	bWindThrust = true;
	bTelestomp = true;
	bNoBlockMonst = true;
}
