//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

//**************************************************************************
//	Special actions
//**************************************************************************

//==========================================================================
//
//  A_BossDeath
//
//  Possibly trigger special effects if on first boss level
//
//==========================================================================

final void A_BossDeath()
{
	name Cls = GetClassName(Class);

	if (!CheckBossDeath())
	{
		return;
	}

	//	Check generic actions first.
	int i;
	for (i = 0; i < Level.SpecialActions.Num; i++)
	{
		if (Class == FindClassLowerCase(Level.SpecialActions[i].TypeName))
		{
			Level.ExecuteActionSpecial(Level.SpecialActions[i].Special,
				Level.SpecialActions[i].Args[0],
				Level.SpecialActions[i].Args[1],
				Level.SpecialActions[i].Args[2],
				Level.SpecialActions[i].Args[3],
				Level.SpecialActions[i].Args[4], NULL, 0, self);
		}
	}

	if (!((Cls == 'BaronOfHell' && Level.bBaronSpecial) ||
		(Cls == 'Cyberdemon' && Level.bCyberDemonSpecial) ||
		(Cls == 'SpiderMastermind' && Level.bSpiderMastermindSpecial) ||
		(Cls == 'Arachnotron' && Level.bMap07Special) ||
		(Cls == 'Fatso' && Level.bMap07Special) ||
		(Cls == 'Ironlich' && Level.bIronLichSpecial) ||
		(Cls == 'Minotaur' && Level.bMinotaurSpecial) ||
		(Cls == 'Sorcerer2' && Level.bDSparilSpecial)))
	{
		return;
	}

	// victory!
	if (Level.bSpecialActionKillMonsters)
	{
		// Kill any remaining monsters
		LineSpecialLevelInfo(Level).P_Massacre();
	}

	if (Level.bMap07Special)
	{
		if (GetClassName(Class) == 'Fatso')
		{
			Level.ExecuteActionSpecial(LNSPEC_FloorLowerToLowest, 666, 8,
				0, 0, 0, NULL, 0, none);
			return;
		}
		if (GetClassName(Class) == 'Arachnotron')
		{
			Level.ExecuteActionSpecial(LNSPEC_FloorRaiseByTexture, 667, 8,
				0, 0, 0, NULL, 0, none);
			return;
		}
	}
	else if (Level.bSpecialActionOpenDoor)
	{
		Level.ExecuteActionSpecial(LNSPEC_DoorOpen, 666, 64, 150, 0, 0,
			NULL, 0, none);
		return;
	}
	else if (Level.bSpecialActionLowerFloor)
	{
		Level.ExecuteActionSpecial(LNSPEC_FloorLowerToLowest, 666, 8, 0, 0,
			0, NULL, 0, none);
		return;
	}
	Level.ExitLevel(0);
}

//==========================================================================
//
//  A_KeenDie
//
//  DOOM II special, map 32. Uses special tag 666.
//
//==========================================================================

final void A_KeenDie()
{
	EntityEx		Other;

	A_Fall();

	// scan the remaining thinkers to see if all Keens are dead
	foreach AllThinkers(class<Thinker>(Class), Other)
	{
		if (Other != self && Other.Health > 0)
		{
			// other mobj of the same Class not dead
			return;
		}
	}
	Level.ExecuteActionSpecial(LNSPEC_DoorOpen, 666, 16, 150, 0, 0, NULL, 0,
		none);
}

//==========================================================================
//
//  A_BrainDie
//
//  Killed brain, exit level.
//
//==========================================================================

final void A_BrainDie()
{
	Level.ExitLevel(0);
}

//==========================================================================
//
//	A_GetHurt
//
//==========================================================================

final void A_GetHurt()
{
	bInCombat = true;
	if ((P_Random() % 5) == 0)
	{
		PlaySound(PainSound, CHAN_VOICE);
		Health--;
	}
	if (Health <= 0)
	{
		Died(Target, none);
	}
}

//==========================================================================
//
//	A_KlaxonBlare
//
//==========================================================================

final void A_KlaxonBlare()
{
	ReactionCount--;
	if (ReactionCount <= 0)
	{
		Target = none;
		ReactionCount = 60;
		if (Target == none)
		{
			SetState(IdleState);
		}
	}
	if (ReactionCount == 2)
	{
		// Should make enemies go to Idle state again
		LineSpecialLevelInfo(Level).NoiseAlert(none, self);
	}
	else if (ReactionCount > 50)
	{
		PlaySound('misc/alarm', CHAN_VOICE);
	}
}

//==========================================================================
//
//	A_CheckTerrain
//
//==========================================================================

final void A_CheckTerrain()
{
	int anglespeed;
	float speed;
	float finean;

	if (Origin.z == GetPlanePointZ(Floor, Origin))
	{
		if ((Sector->special & SECSPEC_BASE_MASK) == SECSPEC_DamageInstantDeath)
		{
			Damage(none, none, 999);
		}
		else if ((Sector->special & SECSPEC_BASE_MASK) == SECSPEC_ScrollCurrent)
		{
			anglespeed = Sector->tag - 100;
			speed = itof(anglespeed % 10) / 16.0 * 35.0;
			finean = itof(anglespeed / 10) * 45.0;
			Velocity.x += speed * cos(finean);
			Velocity.y += speed * sin(finean);
		}
	}
}

//============================================================================
//
//  A_Print
//
//============================================================================

final void A_Print(string Text, optional float Time, optional string FontName)
{
	BasePlayer Plr;
	if (bIsPlayer)
	{
		Plr = Player;
	}
	else if (Target && Target.bIsPlayer)
	{
		Plr = Target.Player;
	}
	else
	{
		return;
	}

	if (!Time)
	{
		Time = 7.0;
	}
	Plr.ClientHudMessage(Text, StrToName(FontName), 0, 123456, CR_UNTRANSLATED,
		"", 0.5, 0.2, 0, 0, Time, 0.0, 0.0);
}

//============================================================================
//
//  A_SetBlend
//
//============================================================================

final void A_SetBlend(string Col1, float A, int Tics, optional string Col2)
{
	int C1 = ParseColour(Col1);
	int C2 = ParseColour(Col2);
	if (A < 0.0)
	{
		A = 0.0;
	}
	else if (A > 1.0)
	{
		A = 1.0;
	}

	//	Huh?
	if (C1 == 0xffffffff)
	{
		C1 = 0;
	}
	if (C2 == 0xffffffff)
	{
		C2 = 0;
	}
	if (!specified_Col2)
	{
		C2 = C1;
	}

	FlashFader F = Spawn(FlashFader);
	F.Init(itof((C1 >> 16) & 0xff) / 255.0, itof((C1 >> 8) & 0xff) / 255.0,
		itof(C1 & 0xff) / 255.0, A, itof((C2 >> 16) & 0xff) / 255.0,
		itof((C2 >> 8) & 0xff) / 255.0, itof(C2 & 0xff) / 255.0, 0.0,
		itof(Tics) / 35.0, self);
}

//============================================================================
//
//  A_CheckSight
//
//============================================================================

final void A_CheckSight(state Label)
{
	//	State jumps should not affect state chain results.
	if (XLevel.StateCall)
	{
		XLevel.StateCall->Result = false;
	}

	int i;
	for (i = 0; i < MAXPLAYERS; i++)
	{
		if (!Level.Game.Players[i] || !Level.Game.Players[i].bSpawned)
		{
			continue;
		}
		if (Level.Game.Players[i].Camera.CanSee(self))
		{
			return;
		}
	}

	DoJump(Label);
}

//==========================================================================
//
//  A_CheckFloor
//
//  Checks if an object hit the floor
//
//==========================================================================

final void A_CheckFloor(state Label)
{
	//	State jumps should not affect state chain results.
	if (XLevel.StateCall)
	{
		XLevel.StateCall->Result = false;
	}

	if (Origin.z <= FloorZ)
	{
		DoJump(Label);
	}
}

//============================================================================
//
//  A_CheckPlayerDone
//
//============================================================================

final void A_CheckPlayerDone()
{
	if (!bIsPlayer)
	{
		Destroy();
	}
}

//==========================================================================
//
//  A_SkullPop
//
//==========================================================================

final void A_SkullPop(optional class<Actor> SpawnType)
{
	EntityEx A;

	if (!class<PlayerChunk>(SpawnType))
	{
		SpawnType = BloodySkull;
	}
	bSolid = false;
	A = Spawn(SpawnType, Origin + vector(0.0, 0.0, 48.0),,, false);
	A.Velocity.x = (Random() - Random()) * 2.0 * 35.0;
	A.Velocity.y = (Random() - Random()) * 2.0 * 35.0;
	A.Velocity.z = (2.0 + Random() / 4.0) * 35.0;
	A.Health = Health;
	A.Angles.yaw = Angles.yaw;

	if (bIsPlayer)
	{
		// Attach player mobj to bloody skull
		A.Player = Player;
		A.bIsPlayer = true;
		A.ObtainInventory(EntityEx(Player.MO));
		Player = none;
		bIsPlayer = false;
		A.Player.MO = A;
		if (A.Player.Camera == self)
		{
			A.Player.Camera = A;
		}
		PlayerEx(A.Player).DamageFlash = 1.0;
		LineSpecialLevelInfo(Level).AddPlayerCorpse(self);
	}
}
