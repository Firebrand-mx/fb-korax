//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ## ###  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**				   ######  #####   ######
//**	               ##   ## ##  ## ##    ##
//**	     		   ##   ## ##  ## ##   
//**	               #####   #####  ##  ####
//**	     		   ## ###  ##     ###   ##
//**	     		   ##  ### ##      ######
//**
//**    $Id: KRPGPawn.vc 1976 2009-06-06 15:07:33Z firebrand_kh $
//**
//**    Copyright (C) 2004-2008 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class KRPGPawn : Actor
	abstract;

const float HIGH_ALERTNESS				= 10.0;

bool			bSaddleHorse;	// actor can be ridden by pawns
bool			bIsMountedOn;	// actor is currently a 'rider'
bool			bCanRide;		// actor is allowed to ride saddlehorses
bool			bRideControl;	// actor controls the ride (can be both 'rider' and 'horse')
KRPGPawn		RidePartner;	// either 'rider' or 'horse', depending on flags

bool			bMirrorImage;	// actor is a magic clone that dies from a single hit
Actor			MirrorMaster;	// mirror image's "original copy"

float			Alertness;		// while alert, creature will look for enemies all around

//==========================================================================
//
//  OkayToSwitchTarget
//
//==========================================================================

bool OkayToSwitchTarget(EntityEx source)
{
	Alertness = HIGH_ALERTNESS;

	if (!bIgnoreTeams && Team == Actor(source).Team)
	{
		return false;
	}

	return ::OkayToSwitchTarget(source);
}

//==========================================================================
//
//	Died
//
//==========================================================================

void Died(EntityEx source, EntityEx inflictor)
{
	if (RidePartner)
	{
		if (bIsMountedOn) Dismount();
		else RidePartner.Dismount();
	}

	::Died(source, inflictor);

	if (!bMirrorImage && bLiving && P_Random() < 33)
	{
		Spawn(DyingSpirit, Origin);
	}
}

//==========================================================================
//
//	ApplySpecialPhysics
//
//==========================================================================

bool ApplySpecialPhysics(float DeltaTime)
{
	if (RidePartner)
	{
		if (bIsMountedOn)
		{
			TVec saddle = RidePartner.Origin;
			saddle.z += RidePartner.Height;

			Velocity = RidePartner.Velocity + ((saddle - Origin) * 5.0);

			float lx = Origin.x - saddle.x;
			float ly = Origin.y - saddle.y;
			float limit = (RidePartner.Radius + Radius) * 2.0;

			if (fabs(lx) > limit || fabs(ly) > limit)
				Dismount();
		}
	}

	return ::ApplySpecialPhysics(DeltaTime);
}

//==========================================================================
//
//	Tick
//
//==========================================================================

void Tick(float deltaTime)
{
	if (Alertness > 0.0)
		Alertness -= deltaTime;

	if (bMirrorImage && (!MirrorMaster || MirrorMaster.Health <= 0))
		Kill();
	
	::Tick(deltaTime);
}

//==========================================================================
//
//  TakeSpecialDamage
//
//	[CW] Handles some special flags
//
//==========================================================================

int TakeSpecialDamage(EntityEx inflictor, EntityEx source, int damage,
	name DmgType)
{
	if (bMirrorImage)
	{
		Health = 0;
		if (SetState(FindState('MirrorDeath')))
			return -1;
		else
			return 0;	// [CW] process death normally
	}
	return ::TakeSpecialDamage(inflictor, source, damage, DmgType);
}

//==========================================================================
//
//  TryUse
//
//	[CW] Override or modify to add more 'use' possibilities
//
//==========================================================================

bool TryUse(optional float fUseRange, optional float fUseThingRange, optional name FailSound)
{
	if (UseLines(fUseRange, fUseThingRange, FailSound))
		return true;
	else
	{
		if (RidePartner && (bIsMountedOn || bRideControl))
		{
			Dismount();
			return true;
		}
	}

	return false;
}

//==========================================================================
//
//	UseThingSpecial
//
//==========================================================================

bool UseThingSpecial(EntityEx Thing)
{
	if (bCanRide && KRPGPawn(Thing) && KRPGPawn(Thing).bSaddleHorse && !KRPGPawn(Thing).RidePartner)
	{
		MountOn(KRPGPawn(Thing), true);
		return true;
	}

	return false;
}

//==========================================================================
//
//	MountOn
//
//==========================================================================

void MountOn(KRPGPawn Horse, bool bGainControl)
{
	if (Health <= 0 || Horse.Health <= 0)
		return;

	RidePartner = Horse;
	bIsMountedOn = true;
	bRideControl = bGainControl;
	bXYAnchored = true;
	bZAnchored = true;
	Horse.IsBeingMountedOn(self, !bGainControl);
}

//==========================================================================
//
//	IsBeingMountedOn
//
//	[CW] Override for extra effects
//
//==========================================================================

void IsBeingMountedOn(KRPGPawn Rider, bool bGainControl)
{
	RidePartner = Rider;
	bIsMountedOn = false;
	bRideControl = bGainControl;
}

//==========================================================================
//
//	Dismount
//
//==========================================================================

void Dismount()
{
	bIsMountedOn = false;
	bRideControl = false;
	bXYAnchored = default.bXYAnchored;
	bZAnchored = default.bZAnchored;
	RidePartner.IsBeingDismountedFrom();
	RidePartner = none;
}

//==========================================================================
//
//	IsBeingDismountedFrom
//
//	[CW] Override for extra effects
//
//==========================================================================

void IsBeingDismountedFrom()
{
	RidePartner = none;
	bRideControl = false;
}

//==========================================================================
//
//	RideCommand
//
//	[CW] override for different behavior
//
//==========================================================================

void RideCommand(float forward, float side, optional float vertical)
{
	if (forward)
	{
		Velocity.x += forward * cos(Angles.yaw);
		Velocity.y += forward * sin(Angles.yaw);
	}
	if (side)
	{
		float angle = AngleMod360(Angles.yaw - 90.0);
		Velocity.x += side * cos(angle);
		Velocity.y += side * sin(angle);
	}
}

defaultproperties
{
	bCombatant = true;
}
