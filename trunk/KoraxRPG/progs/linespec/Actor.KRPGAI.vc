//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ## ###  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**				   ######  #####   ######
//**	               ##   ## ##  ## ##    ##
//**	     		   ##   ## ##  ## ##   
//**	               #####   #####  ##  ####
//**	     		   ## ###  ##     ###   ##
//**	     		   ##  ### ##      ######
//**
//**    $Id: template.vc 1638 2008-08-28 19:10:17Z firebrand_kh $
//**
//**    Copyright (C) 2004-2008 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

//**************************************************************************
//
//
//	[KoraxRPG] Advanced AI
//
//
//**************************************************************************

const float	DEFAULT_THREAT_VICINITY			= MISSILERANGE;

//==========================================================================
//
//	SetTeam
//
//==========================================================================

void SetTeam(int team)
{
	Team = team;
}

//==========================================================================
//
//	CanSense
//
//==========================================================================

bool CanSense(EntityEx Other)
{
	return bSenseAlways || CanSee(Other);
}

//==========================================================================
//
//	CanBeAttacked
//
//	Returns TRUE if Actor can be attacked by any other actor. Method
//	does not check if attack can have any success, so Invulnerable actors
//	still count as attackable.
//
//==========================================================================

bool CanBeAttacked()
{
	return bShootable && !bNonShootable &&
		Health > 0;
}

//==========================================================================
//
//	IsOkayToTarget
//
//==========================================================================

bool IsOkayToTarget(Actor Other)
{
	return Other && Other.CanBeAttacked() && !Other.bDormant &&
		(!Other.bNeverTarget || (Other == Target && bHateTarget)) &&
		(!Other.bInvulnerable || !Other.default.bInvulnerable) &&
		bCombatant /* [CW] may be ignored in some cases? */ &&
		(bIgnoreTeams || (Other == Target && bHateTarget) || Team != Actor(Other).Team);
}

//==========================================================================
//
//	LookForEnemy
//
//==========================================================================

bool LookForEnemy(bool allaround, optional bool nearest,
					optional TVec At, optional float maxdist, optional Actor ExcludeActor)
{
	Actor		mo;
	float		an;
	float		dist;
	float		min_dist;

	if (!specified_nearest)
		nearest = true;

	if (!specified_At)
		At = Origin;

	if (!specified_maxdist)
		maxdist = DEFAULT_THREAT_VICINITY;

	Actor NewTarget;
	min_dist = -1.0;

	foreach AllThinkers(Actor, mo)
	{
		if (mo == self)
			continue;	// self

		if (mo == ExcludeActor)
			continue;

		if (!IsOkayToTarget(mo))
			continue;

		if (!CanSense(mo))
			continue;	// out of senses

		if (Length(mo.GetCentre() - At) > maxdist)
			continue;

		if (P_Random() > 200)
			continue;	// sometimes skip

		if (!bSenseAlways && !allaround && At == Origin)
		{
			dist = DistTo(mo);
			an = AngleMod360(atan2(mo.Origin.y - Origin.y,
				mo.Origin.x - Origin.x) - Angles.yaw);

			if (an > 90.0 && an < 270.0)
			{
				// if real close, react anyway
				if (dist > MELEERANGE)
					continue;	// behind back
			}
		}

		dist = Length(mo.GetCentre() - At);

		if (nearest)
		{
			if (min_dist < 0.0 || min_dist > dist)
			{
				min_dist = dist;
				NewTarget = mo;
			}

			continue;
		}
		else
		{
			NewTarget = mo;
		}

		break;
	}

	if (NewTarget)
	{
		//	Need to be sure the reactiontime is 0 if the monster is leaving
		// its goal to go after an enemy.
		if (Goal && Target == Goal)
		{
			ReactionTime = 0.0;
		}

		Target = NewTarget;
		bHateTarget = false;
		bInCombat = true;
	}
	return NewTarget != none;
}

//==========================================================================
//
//	CanReach
//
//  Checks whether this Actor can pass to target directly
//	(along the straight line).
//	TargetEntity is optional.
//
//==========================================================================

bool CanReach(TVec TargetPos, optional EntityEx TargetEntity,
			  // [CW] use these three to override default passability calculations
			  optional float MaxPassableStep,
			  optional float MaxPassableDropOff,
			  optional float MinPassableOpening,
			  optional bool bCanUseLines)
{
	bool canreach;
	ReachTraverse::reach_traverse_data_t CRTRData;

	if (!specified_TargetEntity)
		TargetEntity = none;

	if (!specified_MaxPassableStep)
		MaxPassableStep = MaxStepHeight;
	if (!specified_MaxPassableDropOff)
		MaxPassableDropOff = MaxDropoffHeight;
	if (!specified_MinPassableOpening)
		MinPassableOpening = Height;
	
	canreach = DoCanReachPathTraverse(TargetPos, TargetEntity, &CRTRData,
		MaxPassableStep, MaxPassableDropOff, MinPassableOpening, bCanUseLines);
	
	if (!CRTRData.intercepted_once && XLevel.PointInSector(Origin) != XLevel.PointInSector(TargetPos))
	{
		return false;
	}
	
	if (canreach && TargetEntity)
	{
		// [FB]  3d Floor checks...
		// [CW]  checks for things that are above or below final floor
		float dist;
		if (TargetEntity.Origin.z > CRTRData.finalPos.z)
		{
			// TargetEntity is above final position; this can be an item,
			// floating in the air on normal height, or some object raised
			// above ground; this also can mean that there's solid 3dfloor
			// between final position and TargetEntity.
			//

			// TODO: need extra check for a 3dfloor above?

			dist = CRTRData.finalPos.z + Height / 2.0  + MaxPassableStep;

			if (TargetEntity.Origin.z - TargetEntity.Height / 2.0 > dist)
			{
				return false;
			}
		}
		else if (TargetEntity.Origin.z < CRTRData.finalPos.z)
		{
			// TargetEntity is below final position; either object is
			// below a 3dfloor, which usually means the actor won't be
			// able to access it, either stuck in the floor for some
			// wicked reason. In the last case it will be only accessible
			// if it "sticks out" enough to make contact with the actor.
			//

			// TODO: need check for liquid surface here (i.e. for items in water)?

			dist = CRTRData.finalPos.z - TargetEntity.Origin.z + TargetEntity.Height;

			if (dist < CRTRData.finalPos.z)
			{
				// Nothing "sticks out"
				return false;
			}
		}
	}

	return canreach;
}

//==========================================================================
//
//	DoCanReachPathTraverse
//
// [FB] Added partial 3d floor support, needs to be checked and corrected...
//
//==========================================================================

bool DoCanReachPathTraverse(TVec TargetPos,
							EntityEx TargetThing,
							ReachTraverse::reach_traverse_data_t * pCRTRData,
							float MaxPassableStep,
							float MaxPassableDropOff,
							float MinPassableOpening,
							bool bCanUseLines)
{
	intercept_t *	in;
	opening_t *		opening;					// [FB] For 3d floors
	TVec			tracedir;
	TVec			hit_point;

	//
	// [CW] For slope recognition
	float			distance_bak;
	float			distance_traced;		// distance traced total
	float			distance_traced_last;	// distance traced last iteration
	float			slope_angle;

	pCRTRData->intercepted_once = false;
	pCRTRData->prev_sector = Sector;

	float traceZ = Origin.z; // Z coordinate of the trace

	// [CW] A unit vector determines the direction of tracing
	//		Needed to get the hit_point for each 2-sided line found
	tracedir = Normalise(TargetPos - Origin);
	tracedir.z = 0.0;

	foreach PathTraverse(in, Origin.x, Origin.y, TargetPos.x, TargetPos.y,
		PT_ADDLINES | PT_ADDTHINGS)
	{
		pCRTRData->intercepted_once = true;

		distance_bak = distance_traced;
		distance_traced = Length(Origin - TargetPos) * in->frac;
		distance_traced_last = distance_traced - distance_bak;

		if (in->bIsALine)
		{
			// single-sided lines abort traverse
			if (!(in->line->flags & ML_TWOSIDED) || (in->line->flags & ML_BLOCKING) ||
				(in->line->flags & ML_BLOCKEVERYTHING) ||
				!in->line->backsector)
			{
				return false;
			}

			//
			// [FB] partial 3d floor support...
			//

			hit_point = Origin + distance_traced * tracedir;
			hit_point.z = traceZ;
			// (c) JL: LineOpenings: sets opentop and openbottom to the window through a two sided line.
			opening = LineOpenings(in->line, hit_point);
			// (c) JL: FindOpening: Find the best gap that the thing could fit in, given a certain Z
			// position (z1 is foot, z2 is head)
			opening = FindOpening(opening, hit_point.z, hit_point.z + MinPassableOpening);

			// only valid openings
			if (!opening)
			{
				//	No openings.
				return false;
			}

			if (opening->range < MinPassableOpening ||
				(opening->lowfloor - opening->bottom > MaxPassableStep) ||
				(opening->lowfloor - opening->bottom > MaxPassableDropOff)) // cannot fit through, do not bother
			{
				return false;
			}

			// [CW] Now, when we have the best opening available, we must check
			//		if the best is actually the passable
			//
			// [CW]
			//
			//		From what I saw in engine code, -
			//		opening->top is the lowest ceiling between previous and next sector;
			//		opening->bottom is the highest floor between previous and next sector;
			//		opening->range is distance between opening->top and opening->bottom;
			//		opening->lowfloor is the lowest floor between previous and next sector;
			//

			//
			// [FB] We need to check for ceiling slopes FIRST
			// 	    Check for ceiling slopes on both sides
			if (traceZ != opening->top)
			{
				if (
					(opening->floor->minz <= opening->highceilingplane->maxz &&
					opening->highceilingplane->minz >= opening->floor->maxz)
					||
					(opening->lowfloorplane->minz <= opening->ceiling->maxz &&
					opening->ceiling->minz >= opening->floor->maxz)
				   )
				{
					if (opening->highceilingplane->minz < MinPassableOpening ||
						opening->ceiling->minz < MinPassableOpening)
					{
						// [FB] We'll get stuck on this slope
						return false;
					}
				}
			}

			//
			// [CW] Check floor planes for slopes
			//
			if (traceZ != opening->bottom && traceZ != opening->lowfloor)
			{
				// There is definitely a slope;
				// [FB] Checks for sloped floors on both sides
				if (
					(opening->floor->maxz <= opening->highceilingplane->minz &&
					opening->highceilingplane->minz >= opening->floor->minz)
					||
					(opening->lowfloorplane->maxz <= opening->ceiling->minz &&
					opening->ceiling->minz >= opening->floor->minz)
					)
				{
					// [FB] This is actually a slope, so calculate angles
					slope_angle = atan2(opening->bottom - traceZ, distance_traced_last);
				}

				// Check if slope angle is too high to ascend
				if (slope_angle >= 70.0)
				{
					return false;
				}

				// Make our "ghost" actor stand at the end of the slope
				traceZ = opening->bottom;
			}

			if (// use traceZ to know which height is "ghost" actor's previous position
				(traceZ >= opening->bottom && ((traceZ - opening->bottom) > MaxPassableDropOff ||
					((opening->bottom - opening->lowfloor) > MaxPassableDropOff)))
					// drop from highest floor to lowest one is too much to accept it
				||
				(traceZ <= opening->lowfloor && ((opening->lowfloor - traceZ) > MaxPassableStep ||
					((opening->bottom - opening->lowfloor) > MaxPassableStep)))
					// raise from lowest floor to highest one is too much to step/jump there
				)
			{
				return false;
			}

			// [FB] This should partially cover it...

			// [CW] Update height position;
			if (traceZ == opening->bottom)
				traceZ = opening->lowfloor;
			else
				traceZ = opening->bottom;
		}
		else
		{
			// [CW] Frankly speaking, this is no use in most situations... :(
			// TODO: check this precisely...
			pCRTRData->linetarget = EntityEx(in->Thing);

			if (!pCRTRData->linetarget)
				continue; // something out there

			if (pCRTRData->linetarget == TargetThing)
				break; // it is the target

			if (pCRTRData->linetarget.bSolid)
			{
				if (pCRTRData->linetarget.Height > MaxPassableStep &&
						!pCRTRData->linetarget.bShootable)
					return false;
			}
		}
	}

	pCRTRData->finalPos = TargetPos;
	pCRTRData->finalPos.z = traceZ;

	return true;
}

//==========================================================================
//
//	GetNearestEntity
//
//==========================================================================

final EntityEx GetNearestEntity(class<EntityEx> EClass, optional bool bReachable)
{
	EntityEx EE;
	EntityEx ee;
	float dist = -1.0;

	foreach AllThinkers(EClass, ee)
	{
		if (dist < 0.0 || Length(ee.Origin - Origin) < dist)
		{
			if (bReachable && !CanReach(ee.Origin))
				continue;
			EE = ee;
			dist = Length(ee.Origin - Origin);
		}
	}

	return EE;
}
