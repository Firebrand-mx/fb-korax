//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ## ###  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**				######  #####   ######
//**	            ##   ## ##  ## ##    ##
//**	     	    ##   ## ##  ## ##   
//**	            #####   #####  ##  ####
//**	            ## ###  ##     ###   ##
//**	     	    ##  ### ##      ######
//**
//**    $Id: template.vc 1638 2008-08-28 19:10:17Z firebrand_kh $
//**
//**    Copyright (C) 2004-2008 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class KRPGMenuScreenCharacter : MenuScreen;

int i_strength;
int i_dexterity;
int i_constitution;
int i_intelligence;
int i_wisdom;
int i_charisma;
int i_health;
int i_spiritpower;

int Class;

string sp_wording[HexenDefs::NUMCLASSES];

// [FB] Variables for storing default values
int init_dexterity[HexenDefs::NUMCLASSES];
int init_health[HexenDefs::NUMCLASSES];
int init_spiritualpower[HexenDefs::NUMCLASSES];
int player_strength[HexenDefs::NUMCLASSES];
int player_constitution[HexenDefs::NUMCLASSES];
int player_intelligence[HexenDefs::NUMCLASSES];
int player_wisdom[HexenDefs::NUMCLASSES];
int player_charisma[HexenDefs::NUMCLASSES];

//==========================================================================
//
//	OnDraw
//
//==========================================================================

void OnDraw()
{
	int i;
	int currentY = ChoicesStartY;

	::OnDraw();

	//DrawPic(0, 0, R_RegisterPic('bgplanks'));
	DrawPic(0, 0, R_RegisterPic('bgmarble'));
	DrawPic(0, 0, R_RegisterPic('weblb'));
	DrawPic(290, 0, R_RegisterPic('webra'));
	
	SetFont('bigfont');
	DrawText(ChoicesStartX, currentY, va("%s", sp_wording[Class]));
	DrawText(ChoicesStartX * 3, currentY, va("%i", i_spiritpower ? i_spiritpower : init_spiritualpower[Class]));
	currentY += 17;
	DrawText(ChoicesStartX, currentY, "HEALTH:");
	DrawText(ChoicesStartX * 3, currentY, va("%i", i_health ? i_health : init_health[Class]));
	currentY += 17;
	DrawText(ChoicesStartX, currentY, "DEXTERITY:");
	DrawText(ChoicesStartX * 3, currentY, va("%i", i_dexterity ? i_dexterity : init_dexterity[Class]));
	currentY += 17;
	DrawText(ChoicesStartX, currentY, "STRENGTH:");
	DrawText(ChoicesStartX * 3, currentY, va("%i", i_strength ? i_strength : player_strength[Class]));
	currentY += 17;
	DrawText(ChoicesStartX, currentY, "CONSTITUTION:");
	DrawText(ChoicesStartX * 3, currentY, va("%i", i_constitution ? i_constitution : player_constitution[Class]));
	currentY += 17;
	DrawText(ChoicesStartX, currentY, "INTELLIGENCE:");
	DrawText(ChoicesStartX * 3, currentY, va("%i", i_intelligence ? i_intelligence : player_intelligence[Class]));
	currentY += 17;
	DrawText(ChoicesStartX, currentY, "WISDOM:");
	DrawText(ChoicesStartX * 3, currentY, va("%i", i_wisdom ? i_wisdom : player_wisdom[Class]));
	currentY += 17;
	DrawText(ChoicesStartX, currentY, "CHARISMA:");
	DrawText(ChoicesStartX * 3, currentY, va("%i", i_charisma ? i_charisma : player_charisma[Class]));
}

//==========================================================================
//
//	SetClass
//
//==========================================================================

void SetClass(int PClass)
{
	Class = PClass;
}

//==========================================================================
//
//	DefaultRollStates
//
//==========================================================================

void DefaultRollStats(Object Sender)
{
	// [FB] Using a value of 0 will make the stats be built with the default values
	i_strength = 0;
	i_dexterity = 0;
	i_constitution = 0;
	i_intelligence = 0;
	i_wisdom = 0;
	i_charisma = 0;
	i_health = 0;
	i_spiritpower = 0;
}

//==========================================================================
//
//	RerollStats
//
//==========================================================================

void RerollStats(Object Sender)
{
	switch(Class)
	{
		case HexenDefs::PCLASS_FIGHTER:
			i_strength = 6 + (P_Random() & 3);
			i_dexterity =  6 + (P_Random() & 6);
			i_constitution = 1 + (P_Random() & 2);
			i_intelligence = 1 + (P_Random() & 2);
			i_wisdom = 1 + (P_Random() & 2);
			i_charisma = 1 + (P_Random() & 2);
			i_health = 100 - i_strength - i_constitution - i_dexterity;
			i_spiritpower = 3 + (P_Random() & 2);
			break;
		case HexenDefs::PCLASS_CLERIC:
			i_strength = 2 + (P_Random() & 4);
			i_dexterity = 2 + (P_Random() & 6);
			i_constitution = 2 + (P_Random() & 4);
			i_intelligence = 2 + (P_Random() & 4);
			i_wisdom = 2 + (P_Random() & 4);
			i_charisma = 2 + (P_Random() & 4);
			i_health = 66 - i_strength - i_constitution - i_dexterity;
			i_spiritpower = 80 - i_health;
			break;
		case HexenDefs::PCLASS_MAGE:
			i_strength = 1 + (P_Random() & 3);
			i_dexterity = 1 + (P_Random() & 5);
			i_constitution = 6 + (P_Random() & 6);
			i_intelligence = 6 + (P_Random() & 6);
			i_wisdom = 6 + (P_Random() & 6);
			i_dexterity = 1 + (P_Random() & 5);
			i_health = 40 - i_strength - i_constitution - i_dexterity;
			i_spiritpower = 80 - i_health;
			break;
	}
}

//==========================================================================
//
//	BuildCharacter
//
//==========================================================================

void BuildCharacter(Object Sender)
{
	KRPGPlayerReplicationInfo RepInfo;

	// [FB] We need to store these somewhere, it's not the most suited place IMO,
	//	but here it goes....
	if (ClGame.Game)
	{
		MainGameInfo(ClGame.Game).i_strength = i_strength;
		MainGameInfo(ClGame.Game).i_dexterity = i_dexterity;
		MainGameInfo(ClGame.Game).i_constitution = i_constitution;
		MainGameInfo(ClGame.Game).i_intelligence = i_intelligence;
		MainGameInfo(ClGame.Game).i_wisdom = i_wisdom;
		MainGameInfo(ClGame.Game).i_charisma = i_charisma;
		MainGameInfo(ClGame.Game).i_health = i_health;
		MainGameInfo(ClGame.Game).i_spiritpower = i_spiritpower;
	}
	PClassItemActivate(Sender);
}

//==========================================================================
//
//	CreateChoices
//
//==========================================================================

void CreateChoices()
{
	MenuTextButton		Btn;
	MenuChoiceEnum		Enum;
	MenuChoice_OnOff	OnOff;
	int YPos = ChoicesStartY + (17 * 9 + 7);

	//SetFont('BigFont');
	RerollStats(self);

	Btn = MenuTextButton(NewChild(MenuBigTextButton));
	Btn.SetOrigin(ChoicesStartX, YPos);
	Btn.Text = "Default Build";
	Btn.TextColourFocus = CR_YELLOW;
	Btn.Activated = DefaultRollStats;
	YPos += (Btn.Height + 0);
	
	Btn = MenuTextButton(NewChild(MenuBigTextButton));
	Btn.SetOrigin(ChoicesStartX, YPos);
	Btn.Text = "Reroll";
	Btn.TextColourFocus = CR_YELLOW;
	Btn.Activated = RerollStats;
	YPos += (Btn.Height + 0);


/*
	Enum = MenuChoiceEnumBig(NewChild(MenuChoiceEnumBig));
	Enum.SetOrigin(ChoicesStartX, YPos);
	Enum.Text = "Experience Modifier";
	Enum.bLeftAlign = false;
	Enum.AddItem("50%");
	Enum.AddItem("100%");
	Enum.AddItem("125%");
	Enum.AddItem("150%");
	Enum.AddItem("200%");
	Enum.SetInitialValue(GetCvar('ExpModifier'));
	Enum.ValueChanging = UpdateModifier;
	YPos += Enum.Height;
*/
/*
	OnOff = MenuChoice_OnOffBig(NewChild(MenuChoice_OnOffBig));
	OnOff.SetOrigin(ChoicesStartX, YPos);
	OnOff.Text = "Auto Update:";
	OnOff.ValueChanging = EnableAutoUpdate;
	YPos += OnOff.Height;
*/
	Btn = MenuTextButton(NewChild(MenuBigTextButton));
	Btn.SetOrigin(ChoicesStartX, YPos);
	Btn.Text = "OK";
	Btn.TextColourFocus = CR_YELLOW;
	Btn.Activated = BuildCharacter;
}

//==========================================================================
//
//	EnableAutoUpdate
//
//==========================================================================

bool EnableAutoUpdate(Object Sender, int newValue)
{
	SetCvar('AutoUpdate', newValue);
	return true;
}

//==========================================================================
//
//	UpdateModifier
//
//==========================================================================

bool UpdateModifier(Object Sender, int newValue)
{
	SetCvar('ExpModifier', newValue);
	return true;
}

//==========================================================================
//
//	PClassItemActivate
//
//==========================================================================

void PClassItemActivate(Object Sender)
{
	ClientGame(ClGame).KRPGSetPClass(Class);
}

//==========================================================================
//
//	SetDefaultChoice
//
//==========================================================================

void SetDefaultChoice()
{
	CursorPrev = -1;
	//CursorPos = 4;
	CursorPos = 2;
	CursorMoved();
}

defaultproperties
{
	ChoicesStartX = 74;
	//ChoicesStartX = 66;
	ChoicesStartY = 40;
	Height = 274;
	SelectorType = MenuSelector_Big;
	Title = "Starting Ability Scores";

	sp_wording[0] = "BATTLE RAGE";
	sp_wording[1] = "FAITH";
	sp_wording[2] = "MAGIC";
	sp_wording[3] = "";
	
	// Fighter
	init_dexterity[HexenDefs::PCLASS_FIGHTER] = 10;
	init_health[HexenDefs::PCLASS_FIGHTER] = 80;
	init_spiritualpower[HexenDefs::PCLASS_FIGHTER] = 5;
	player_strength[HexenDefs::PCLASS_FIGHTER] = 0x08;
	player_constitution[HexenDefs::PCLASS_FIGHTER] = 0x08;
	player_intelligence[HexenDefs::PCLASS_FIGHTER] = 0x02;
	player_wisdom[HexenDefs::PCLASS_FIGHTER] = 0x02;
	player_charisma[HexenDefs::PCLASS_FIGHTER] = 0x02;

	// Cleric
	init_dexterity[HexenDefs::PCLASS_CLERIC] = 8;
	init_health[HexenDefs::PCLASS_CLERIC] = 50;
	init_spiritualpower[HexenDefs::PCLASS_CLERIC] = 70;
	player_strength[HexenDefs::PCLASS_CLERIC] = 0x05;
	player_constitution[HexenDefs::PCLASS_CLERIC] = 0x05;
	player_intelligence[HexenDefs::PCLASS_CLERIC] = 0x05;
	player_wisdom[HexenDefs::PCLASS_CLERIC] = 0x05;
	player_charisma[HexenDefs::PCLASS_CLERIC] = 0x05;

	// Mage
	init_dexterity[HexenDefs::PCLASS_MAGE] = 6;
	init_health[HexenDefs::PCLASS_MAGE] = 20;
	init_spiritualpower[HexenDefs::PCLASS_MAGE] = 70;
	player_strength[HexenDefs::PCLASS_MAGE] = 0x02;
	player_constitution[HexenDefs::PCLASS_MAGE] = 0x02;
	player_intelligence[HexenDefs::PCLASS_MAGE] = 0x08;
	player_wisdom[HexenDefs::PCLASS_MAGE] = 0x08;
	player_charisma[HexenDefs::PCLASS_MAGE] = 0x08;

	// Oink, oink!
	// Easter egg, anyone??
	init_dexterity[HexenDefs::PCLASS_PIG] = 7;
	init_health[HexenDefs::PCLASS_PIG] = 30;
	init_spiritualpower[HexenDefs::PCLASS_PIG] = 5;
	player_strength[HexenDefs::PCLASS_PIG] = 0x06;
	player_constitution[HexenDefs::PCLASS_PIG] = 0x06;
	player_intelligence[HexenDefs::PCLASS_PIG] = 0x06;
	player_wisdom[HexenDefs::PCLASS_PIG] = 0x06;
	player_charisma[HexenDefs::PCLASS_PIG] = 0x06;
}
