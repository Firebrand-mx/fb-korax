//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ## ###  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**				   ######  #####   ######
//**	               ##   ## ##  ## ##    ##
//**	     		   ##   ## ##  ## ##   
//**	               #####   #####  ##  ####
//**	     		   ## ###  ##     ###   ##
//**	     		   ##  ### ##      ######
//**
//**    $Id: JournalScreen.vc 2236 2017-03-19 13:58:27Z ramborc $
//**
//**    Copyright (C) 2004-2008 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class JournalScreen : KRPGMenuScreen;

KRPGPlayerReplicationInfo RepInfo;

const int
	TABLE_HEAD_Y		= 68,
	TABLE_STRING_DELTA	= 14;

string playerclassnames[HexenDefs::NUMCLASSES];

//==========================================================================
//
//  OnDraw
//
//==========================================================================

 void OnDraw()
{
	::OnDraw();

	SetFont('smallfont');
	SetTextAlign(hleft, vtop);
	DrawPic(0, 0, R_RegisterPic('journmai'));
	ShadeRect(12, 78, 113, 289, GetCvarF('0.000000'));
	
	foreach ClGame.GLevel.LevelInfo.AllThinkers(KRPGPlayerReplicationInfo, RepInfo)
	{
		if (ClGame.cl.ClientNum == RepInfo.PlayerNum)
		{
		
			if (RepInfo.plclass == 0)
			{
			DrawPic(8, 80, R_RegisterPic('journf'));			
			}
			if (RepInfo.plclass == 1)
			{
			DrawPic(8, 80, R_RegisterPic('journc'));			
			}
			if (RepInfo.plclass == 2)
			{
			DrawPic(8, 80, R_RegisterPic('journm'));			
			}

			DrawText(160, TABLE_HEAD_Y + TABLE_STRING_DELTA, va("My name is %s.", GetCvarS('Name')), GetCvar('JournalFontColor') );
			DrawText(160, TABLE_HEAD_Y + (TABLE_STRING_DELTA + 14), va("I am a level %i %s.", RepInfo.level, playerclassnames[RepInfo.plclass]), GetCvar('JournalFontColor') );
			DrawText(160, TABLE_HEAD_Y + (TABLE_STRING_DELTA + 42), va("I recently accumulated %i", RepInfo.exp), GetCvar('JournalFontColor') );
			DrawText(160, TABLE_HEAD_Y + (TABLE_STRING_DELTA + 56), va("experience and need another"), GetCvar('JournalFontColor') );
			DrawText(160, TABLE_HEAD_Y + (TABLE_STRING_DELTA + 70), va("%i to reach level %i.", RepInfo.next_lvl, RepInfo.level+1), GetCvar('JournalFontColor') );
			DrawText(160, TABLE_HEAD_Y + (TABLE_STRING_DELTA + 98), va("I have %i gold to my name.", RepInfo.gold), GetCvar('JournalFontColor') );
			DrawText(160, TABLE_HEAD_Y + (TABLE_STRING_DELTA + 126), va("This journal contains a few"), GetCvar('JournalFontColor') );
			DrawText(160, TABLE_HEAD_Y + (TABLE_STRING_DELTA + 140), va("bookmarks for quick access:"), GetCvar('JournalFontColor') );
			
			
		}
	}
	
}

//==========================================================================
//
//  OnDestroy
//
//==========================================================================

void OnDestroy()
{
	::OnDestroy();

	ClientGame(ClGame).HideJournalScreen();
}

//==========================================================================
//
//	CreateChoices
//
//==========================================================================

void CreateChoices()
{
	MenuTextButton		Btn;
	int					currentY;
	
	currentY = ChoicesStartY;
	
	Btn = MenuTextButton(NewChild(MenuSmallTextButton));
	Btn.SetOrigin(ChoicesStartX + 3, currentY);
	Btn.Text = "Abilities";
	Btn.Activated = StatsOverview;
	currentY += 10 + Btn.Height;
/*
	Btn = MenuTextButton(NewChild(MenuSmallTextButton));
	Btn.SetOrigin(ChoicesStartX + 0, currentY);
	Btn.Text = "Arsenal";
	Btn.Activated = ModifyArsenal;
	currentY += 10 + Btn.Height;

	Btn = MenuTextButton(NewChild(MenuSmallTextButton));
	Btn.SetOrigin(ChoicesStartX + 8, currentY);
	Btn.Text = "Spellbook";
	Btn.Activated = ModifyArsenal;
	currentY += 10 + Btn.Height;
	*/
	Btn = MenuTextButton(NewChild(MenuSmallTextButton));
	Btn.SetOrigin(ChoicesStartX - 3, currentY);
	Btn.Text ="Quests";
	Btn.Activated = ShowQuests;
	currentY += 10 + Btn.Height;

	Btn = MenuTextButton(NewChild(MenuSmallTextButton));
	Btn.SetOrigin(ChoicesStartX - 11, currentY);
	Btn.Text = "Maps";
	Btn.Activated = ShowMap;
	currentY += 10 + Btn.Height;

	Btn = MenuTextButton(NewChild(MenuSmallTextButton));
	Btn.SetOrigin(ChoicesStartX + 4, currentY);
	Btn.Text = "Bestiary";
	Btn.Activated = ShowBestiary;
	currentY += 10 + Btn.Height;

	Btn = MenuTextButton(NewChild(MenuSmallTextButton));
	Btn.SetOrigin(ChoicesStartX - 6, currentY);
	Btn.Text = "Codex";
	Btn.Activated = ShowCodex;	

}

//==========================================================================
//
//	StatsOverview
//
//==========================================================================

void StatsOverview(Object Sender)
{
	ClientGame(ClGame).ShowUpgradeScreen();
}

//==========================================================================
//
//	ModifyArsenal
//
//==========================================================================

void ModifyArsenal(Object Sender)
{
	ClientGame(ClGame).ShowArsenalScreen();
}


//==========================================================================
//
//	ShowCodex
//
//==========================================================================

void ShowCodex(Object Sender)
{
	ClientGame(ClGame).ShowCodexScreen();
}

//==========================================================================
//
//	ShowBestiary
//
//==========================================================================

void ShowBestiary(Object Sender)
{
	ClientGame(ClGame).ShowBestiaryScreen();
}

//==========================================================================
//
//	ShowMap
//
//==========================================================================

void ShowMap(Object Sender)
{
	ClientGame(ClGame).ShowMapsScreen();
}

//==========================================================================
//
//	Quests
//
//==========================================================================

void ShowQuests(Object Sender)
{
	ClientGame(ClGame).ShowQuestsScreen();
}



defaultproperties
{
	X = 0;
	Y = 0;
	Width = 640;
	Height = 480;
	TitleX = 320;
	ChoicesStartX = 285;
	ChoicesStartY = 246;
/*	ScaleX = 2.0;
	ScaleY = 2.4;*/
	playerclassnames[0] = "fighter";
	playerclassnames[1] = "cleric";
	playerclassnames[2] = "mage";
	Title = "JOURNAL";
}

