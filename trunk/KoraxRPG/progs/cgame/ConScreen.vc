
class ConScreen : KRPGMenuScreen;


struct cue_t
{
	string				SpeakerName;
	//string			SpeechText;
	array<SplitLine>	SpeechLines;
};

//	Background
string				NPCName;
int					hBackPic;	// registered pic handle
name				Flat;

//	Speech
array<cue_t>		Cues;
int					MaximalCueLines;

// Choices
ConScrContinue		ChoiceContinue;
array<ConScrChoice>	Choices;

// Customization
bool				bDontDrawBigCharacterName;
bool				bDontDuplicateNPCName;
int					CueLinesSpacing;


//==========================================================================
//
//	Init
//
//==========================================================================

void Init()
{
	ChoiceContinue = ConScrContinue(NewChild(ConScrContinue));
	ChoiceContinue.SetPos(100, 440 - 1 * 18 + 0 * 18);
}

//==========================================================================
//
//	OnDraw
//
//==========================================================================

void OnDraw()
{
	int i, j, y, fontheight;

	fontheight = TextHeight("SAMPLE STRING");

	if (Flat)
	{
		FillRectWithFlat(0, 0, 640, 480, Flat);
	}
	if (hBackPic != -1)
	{
		DrawFullScreenPic(hBackPic);
	}
	else if (!Flat)
	{
		ShadeRect(60, 46, 515,
			// 96,
			MaximalCueLines * (fontheight + CueLinesSpacing) + ((64 - 46) << 1),
			0.6);
	}

	if (Choices.Num)
		ShadeRect(60, 438 - Choices.Num * 22, 501, (Choices.Num) * 22, 0.6);
	else
		ShadeRect(60, 438 - 22, 501, 22, 0.6);
	
	SetTextAlign(hleft, vtop);
	if (!bDontDrawBigCharacterName)
	{
		SetFont('bigfont');
		DrawText(72, 32, NPCName);
	}
	SetFont('smallfont');

	y = 64;
	for (i = 0; i < Cues.Num; i++)
	{
		if (Cues[i].SpeakerName)
		{
			if (!strcmp(Cues[i].SpeakerName, NPCName) && (!bDontDuplicateNPCName || bDontDrawBigCharacterName))
			{
				DrawText(64, y, Cues[i].SpeakerName, CR_GREEN); y += 24;
			}

			//DrawText(64, y, Cues[i].SpeechText); y += 32;
			for (j = 0; j < Cues[i].SpeechLines.Num; j++)
			{
				DrawText(64, y, Cues[i].SpeechLines[j].Text);
				y += fontheight + CueLinesSpacing;
			}
			y += 32;
		}
		else
		{
			// Possibly a narrator's commentary
			//DrawText(64, y, Cues[i].SpeechText, CR_BRICK); y += 32;
			for (j = 0; j < Cues[i].SpeechLines.Num; j++)
			{
				DrawText(64, y, Cues[i].SpeechLines[j].Text, CR_BRICK);
				y += fontheight + CueLinesSpacing;
			}
			y += 32;
		}
	}
}

//==========================================================================
//
//  CleanScene
//
//==========================================================================

void CleanScene()
{
	StopLocalSounds();
	Cues.Num = 0;
}

//==========================================================================
//
//  CleanChoices
//
//==========================================================================

void CleanChoices()
{
	int i;
	for (i = 0; i < NumItems; i++)
		Items[i] = none;
	NumItems = 0;
	for (i = 0; i < Choices.Num; i++)
	{
		Choices[i].Destroy();
		Choices[i] = none;
	}
	Choices.Num = 0;

	ChoiceContinue.Hide();
	ChoiceContinue.Focusable = false;
}

//==========================================================================
//
//  AddContinue
//
//==========================================================================

void AddContinue()
{
	Items[0] = ChoiceContinue;
	NumItems = 1;
	ChoiceContinue.Show();
	ChoiceContinue.Focusable = true;
}

//==========================================================================
//
//  AddChoice
//
//==========================================================================

void AddChoice(string Text, string Name, int Index)
{
	int i,y;
	Choices.Num = Choices.Num + 1;
	Choices[Choices.Num - 1] = ConScrChoice(NewChild(ConScrChoice));
	Choices[Choices.Num - 1].Text = Text;
	Choices[Choices.Num - 1].Name = Name;
	Choices[Choices.Num - 1].Index = Index;
	Choices[Choices.Num - 1].TextColour = CR_TAN;
	Choices[Choices.Num - 1].TextColourFocus = CR_GOLD;
	
	/*
	for (i = Choices.Num - 1, y = 438; i >= 0; i--, y -= 22)
	{
		Choices[i].Y = y;
	}
	*/
	for (i = 0; i < Choices.Num; i++)
	{
		Choices[i].SetPos(100, 440 - Choices.Num * 18 + i * 18);
	}
}

//==========================================================================
//
//  PlayCue
//
//==========================================================================

void PlayCue(string Who, string ToWhom, string Cue, name Voice)
{
	int i;

	SetFont('smallfont');
	Who = SplitTextWithNewlines(Who, Width - 120 - 40);
	//Cue = SplitTextWithNewlines(Cue, Width - 120 - 40);
	Cues.Num = Cues.Num + 1;
	Cues[Cues.Num - 1].SpeakerName = Who;
	//Cues[Cues.Num - 1].SpeechText = Cue;
	SplitText(Cue, Cues[Cues.Num - 1].SpeechLines, Width - 120 - 40);

	if (Cues.Num > 5)
	{
		Cues.Remove(0);
	}

	MaximalCueLines = 0;
	for (i = 0; i < Cues.Num; i++)
	{
		if (MaximalCueLines < Cues[i].SpeechLines.Num)
			MaximalCueLines = Cues[i].SpeechLines.Num;
	}

	if (Voice)
	{
		LocalSound(Voice);
	}
}

//==========================================================================
//
//	OnKeyDown
//
//==========================================================================

bool OnKeyDown(int key)
{
	switch (key)
	{
	case K_ESCAPE:
	case K_MOUSE2:
		if (!ChoiceContinue.IsVisible() && !Choices.Num)
		{
			StopLocalSounds();
			ClGame.PopMenu();
		}
		return true;
	}
	return ::OnKeyDown(key);
}

defaultproperties
{
	X = 0;
	Y = 0;
	Width = 640;
	Height = 480;
	SelectorType = MenuSelector_SmallLeft;
	CueLinesSpacing = 4;

	NPCName = "Person";
	hBackPic = -1;
	Flat = '';
}
