//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ## ###  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**				   ######  #####   ######
//**	               ##   ## ##  ## ##    ##
//**	     		   ##   ## ##  ## ##   
//**	               #####   #####  ##  ####
//**	     		   ## ###  ##     ###   ##
//**	     		   ##  ### ##      ######
//**
//**    $Id$
//**
//**    Copyright (C) 2004-2008 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class LocalSoundQueue : Object;

const int MAX_SOUNDS		= 20;

name	Sounds[MAX_SOUNDS];
float	delay[MAX_SOUNDS];
int		count;


//==========================================================================
//
//	Continue
//
//==========================================================================

void Continue(float deltaTime)
{
	if (count && !IsLocalSoundPlaying(Sounds[0]))
	{
		delay[0] -= deltaTime;
		if (delay[0] <= 0.0)
			PlayNextSound();
	}
}

//==========================================================================
//
//	PlayNextSound
//
//==========================================================================

void PlayNextSound()
{
	if (count)
	{
		int i;

		LocalSound(Sounds[0]);

		for (i = 0; i < count; i++)
		{
			if (i == MAX_SOUNDS - 1)
			{
				Sounds[i] = '';
				delay[i] = 0.0;
			}
			else
			{
				Sounds[i] = Sounds[i + 1];
				delay[i] = delay[i + 1];
			}
		}

		count--;
	}
}

//==========================================================================
//
//	QueueSound
//
//==========================================================================

void QueueSound(name sndName, float _delay)
{
	if (count < MAX_SOUNDS)
	{
		Sounds[count] = sndName;
		delay[count] = _delay;
		count++;
	}
}


defaultproperties
{
}
