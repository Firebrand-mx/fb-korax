//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id: MenuControlKey.vc 2781 2007-11-10 13:24:12Z dj_jl $
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class MenuControlKey : MenuChoice;

string Text;
string CommandOn;
string CommandOff;

//==========================================================================
//
//  SetOrigin
//
//==========================================================================

void SetOrigin(int x, int y)
{
	SetPos(x - 160, y);
}

void OnDraw()
{
	int key1;
	int key2;

	SetFont(font_small);
	if (IsFocus())
	{
		SetFont(font_yellow);
	}
	SetTextAlign(hright, vtop);
	DrawText(160, 0, Text);

	IN_GetBindingKeys(CommandOn, &key1, &key2);

	SetTextAlign(hleft, vtop);
	if (key1 >= 0)
	{
		DrawText(160 + 10, 0, KeyNameForNum(key1));
	}
	else
	{
		DrawText(160 + 10, 0, "---");
	}
	if (key2 >= 0)
	{
		DrawText(160 + 100, 0, KeyNameForNum(key2));
	}
	else
	{
		DrawText(160 + 100, 0, "---");
	}
}

bool OnKeyDown(int key)
{
	int key1;
	int key2;

	switch (key)
	{
	case K_LEFTARROW:
		GetClGame().ControlColumn = 0;
		MenuScreen(Parent).CursorMoved();
		return true;

	case K_RIGHTARROW:
		GetClGame().ControlColumn = 1;
		MenuScreen(Parent).CursorMoved();
		return true;

	case K_ENTER:
	case K_PADENTER:
	case K_MOUSE1:
		GetClGame().CurrentCtl = self;
		GetClGame().MessageBoxStartMessage("Press new key\n\nESC to cancel",
			ClientGame::MB_Control, false);
		return true;

	case K_BACKSPACE:
		IN_GetBindingKeys(CommandOn, &key1, &key2);
		if (GetClGame().ControlColumn == 0)
			IN_SetBinding(key1, "", "");
		if (GetClGame().ControlColumn == 1)
			IN_SetBinding(key2, "", "");
		return true;
	}
	return false;
}

defaultproperties
{
	CursorXOffs = 160;
}
