//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class GameInfo : Object
	native
	abstract;

int				netgame;
int				deathmatch;
int				gameskill;
int				respawn;
int				nomonsters;
int				fastparm;

int*			validcount;
int				skyflatnum;

Player			Players[MAXPLAYERS]; // Bookkeeping on players - state.

level_t*		level;

tmtrace_t*		tmtrace;

int				RebornPosition;

float			frametime;

int				num_stats;

float			FloatBobOffsets[64];
int				PhaseTable[64];

//==========================================================================
//
//	Init
//
//==========================================================================

void Init()
{
}

//==========================================================================
//
//  InitNewGame
//
//==========================================================================

void InitNewGame(int skill)
{
}

//==========================================================================
//
//  CreateLevelInfo
//
//==========================================================================

LevelInfo CreateLevelInfo()
{
	return none;
}

//==========================================================================
//
//  TranslateLevel
//
//==========================================================================

void TranslateLevel(Level InLevel)
{
}

//==========================================================================
//
//  SpawnWorld
//
//==========================================================================

void SpawnWorld(Level InLevel)
{
}

defaultproperties
{
	frametime = 1.0 / 35.0;
}

//**************************************************************************
//
//  $Log$
//  Revision 1.2  2006/02/15 23:37:45  dj_jl
//  Moved all server progs global variables to classes.
//
//  Revision 1.1  2006/02/13 18:44:38  dj_jl
//  Moved all server progs global functions to classes.
//
//**************************************************************************
