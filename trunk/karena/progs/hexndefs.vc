//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Janis Legzdins
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

import engine;


class HexenDefs : Object;

const int NUMWEAPONSLOTS = 8;

enum
{
	DEFAULT_FOV				= 90
};

enum
{
	IMPULSE__TOGGLE_BLASTRAD	= 9,
	IMPULSE__TOGGLE_POSIONBAG	= 10,
	IMPULSE__SUICIDE			= 16,
	IMPULSE__WEAPON_PREV		= 17,
	IMPULSE__WEAPON_NEXT		= 18,
	IMPULSE__SCOREBOARD			= 19,
	IMPULSE__ATTACK2			= 20,
	IMPULSE__SELECTTEAM			= 21,
	IMPULSE__FIXME				= 22
};

enum
{
	PCLASS_FIGHTER,
	PCLASS_CLERIC,
	PCLASS_MAGE,
	PCLASS_HERETIC,
	PCLASS_MARINE,
	PCLASS_WITCHAVEN,
	PCLASS_PIG,
	PCLASS_HERESIARCH,
	NUMCLASSES
};

enum
{
	ALTFIRE_BLASTRADIUS,
	ALTFIRE_POISONBAG,

	NUM_ALTFIRE
};

enum
{
	ALTFIRE_BLASTRADIUS_MODES = 3,
	ALTFIRE_POISONBAG_MODES = 3
};

// Disc of Repulsion modes
enum
{
	ALTFIRE_BLASTRADIUS_INSTANT,
	ALTFIRE_BLASTRADIUS_BOMB,
	ALTFIRE_BLASTRADIUS_MISSILE
};
// Flechette modes
enum
{
	ALTFIRE_POISONBAG_GRENADE,
	ALTFIRE_POISONBAG_BOMB,
	ALTFIRE_POISONBAG_CLOUD
};

//[Korax]

const int MAXPLAYERTEAMS		= 8;
const int MAXTEAMSINGAME		= MAXPLAYERS / 4;

// [CW] Team Selection states
enum
{
	teamselection_none,
	teamselection_wait,
	teamselection_done,
	teamselection_reselect,
	teamselection_autoselect
};

enum
{
	scoreevent_NoScore,
	scoreevent_PlayerDiscard,
	scoreevent_TeamDiscard,		// set score to the lowest score in table, minus one point
								// (it is used to push player or team down the table when
								// he/she quits or team discards the last player)
	scoreevent_PlayerReset,		// set score to zero
	scoreevent_TeamReset,
	scoreevent_Frag,			// player kill
	scoreevent_SelfFrag,		// self-kill
	scoreevent_TeamFrag,		// fragged team comrade
	scoreevent_Kill,			// monster kill
	scoreevent_FtbGoal,			// football goal
	scoreevent_FtbSelfGoal,		// goal in own gates
	scoreevent_FtbOpSelfGoal,	// opponent kicked in his own gates
	scoreevent_KthHeresiarchDeath,	// player fragged heresiarch
	scoreevent_KthHeresiarchFrag,	// heresiarch fragged player,
	scoreevent_CtfCapture,		// flag capture
	scoreevent_CtfSaveFlag,		// returned lost flag
	scoreevent_DomSigilCapture,	// captured domination sigil
	scoreevent_DomSigilKept,	// periodic score given to team for dominating sigil
	NUMSCOREEVENTS
};

enum
{
	game_unused = 0,
	game_dm,
	game_kth,			// kill the heresiarch
	game_sweep,			// castle sweep
	NUMGAMESNOTEAM,
	game_dmteam = 		NUMGAMESNOTEAM,
	game_ctf,
	game_domination,
	game_sweepteam,
	game_football,
	NUMGAMES
};

// Trophy classes
enum
{
	trophycl_fragsatonce,
	trophycl_killsatonce,
	trophycl_fragsrow,
	trophycl_killsrow,
	trophycl_accuracy,
	NUMTROPHYCLASSES
};

// Trophies
enum
{
// kills-at-once (frags)
	trophy_doublekill,
	trophy_triplekill,
	trophy_quadruplekill,
	trophy_multikill,
	trophy_impossiblekill,
	trophy_LAST_fao				= trophy_impossiblekill,
// kills-at-once (monsters)
	trophy_hunt,
	trophy_massacre,
	trophy_devastation,
	trophy_elimination,
// killing sprees
	trophy_frags_row,
	trophy_kills_row,
// accuracy
	trophy_accuracy,

	NUMTROPHIES
};

// Trophy limits
const float TROPHY_FAO_TIME = 2.5;
const float TROPHY_KAO_TIME = 2.5;
const float ACCURATE_SHOT_DISTANCE = 32.0 * 32.0;
enum
{
	TROPHY_KAO_HUNT			= 3,
	TROPHY_KAO_MASSACRE		= 5,
	TROPHY_KAO_DEVASTATION	= 7,
	TROPHY_KAO_ELIMINATION	= 10,
	TROPHY_FRAGSROW_LIMIT	= 8,
	TROPHY_KILLSROW_LIMIT	= 15
};

// Local Sound IDs
const float STANDART_LSQ_DELAY		= 0.5;
enum
{
	// Generic announcements

		// Team contest
			lsid_gen_an_Blue_Leads,
			lsid_gen_an_Red_Leads,
			lsid_gen_an_Gold_Leads,
			lsid_gen_an_Lime_Leads,
			lsid_gen_an_Green_Leads,			
			lsid_gen_an_Gray_Leads,
			lsid_gen_an_Brown_Leads,
			lsid_gen_an_Magenta_Leads,
			lsid_gen_an_Blue_Lost_Lead,
			lsid_gen_an_Red_Lost_Lead,
			lsid_gen_an_Gold_Lost_Lead,
			lsid_gen_an_Lime_Lost_Lead,
			lsid_gen_an_Green_Lost_Lead,			
			lsid_gen_an_Gray_Lost_Lead,
			lsid_gen_an_Brown_Lost_Lead,
			lsid_gen_an_Magenta_Lost_Lead,
			lsid_gen_an_teams_are_tied,

		// Player contest
			lsid_gen_an_y_lead,
			lsid_gen_an_y_lost_the_lead,
			lsid_gen_an_y_tied_ftl,

		// Player trophies
			lsid_PLAYERTROPHY,
			lsid_gen_an_doublekill = lsid_PLAYERTROPHY,
			lsid_gen_an_tripplekill,
			lsid_gen_an_quadruplekill,
			lsid_gen_an_multikill,
			lsid_gen_an_impossiblekill,
			lsid_gen_an_goodhunt,
			lsid_gen_an_massacre,
			lsid_gen_an_devastation,
			lsid_gen_an_elimination,
			lsid_gen_an_fragsmaster,
			lsid_gen_an_killingspree,
			lsid_gen_an_accuracy,

		// Kill The Heresiarch announcements
			lsid_kth_an_awaiting,
			lsid_kth_an_ishere,
			lsid_kth_an_isdown,
			lsid_kth_an_isdefeated,
			lsid_kth_an_hasreborn,
			lsid_kth_mus_death,
			lsid_kth_mus_birth,

		// CTF Fanfares
			lsid_ctf_fanfare1,
			lsid_ctf_fanfare3,
			lsid_ctf_fanfare4,
			lsid_ctf_fanfare6,
			lsid_ctf_fanfare7,
			lsid_ctf_fanfare8,
			lsid_ctf_fanfare11
};

defaultproperties
{
}
