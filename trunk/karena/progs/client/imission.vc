//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

// MACROS ------------------------------------------------------------------

#define	TEXTSPEED	0.1
#define	TEXTWAIT	4.0
#define MAX_INTRMSN_MESSAGE_SIZE	1024

#define TALLY_EFFECT_TIME	0.625
#define TALLY_FINAL_X_DELTA	23.0
#define TALLY_FINAL_Y_DELTA	13.0
#define TALLY_START_XPOS	178.0
#define TALLY_STOP_XPOS		90.0
#define TALLY_START_YPOS	132.0
#define TALLY_STOP_YPOS		83.0
#define TALLY_TOP_X			85
#define TALLY_TOP_Y			9
#define TALLY_LEFT_X		7
#define TALLY_LEFT_Y		71
#define TALLY_TOTALS_X		291

// CONSTANTS ---------------------------------------------------------------

// TYPES -------------------------------------------------------------------

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

// specifies current state
int interstate;
float intertime;

// background (map of levels).
int patchINTERPIC;

int ClusterMessage[MAX_INTRMSN_MESSAGE_SIZE / 4];

float HubCount;
string HubText;

// used for general timing
float cnt;

int slaughterboy;
int totalFrags[MAXPLAYERS];

struct team_t
{
	bool bActive;
	int frags[MAXPLAYERS];
};
team_t teams[MAXPLAYERS];

int tallytop;
int tallylft;

bool showTotals;

string ClusMsgLumpNames[] = {
	"clus1msg",
	"clus2msg",
	"clus3msg",
	"clus4msg",
	"clus5msg"
};

// CODE --------------------------------------------------------------------

//========================================================================
//
//  IM_LoadPics
//
//========================================================================

void IM_LoadPics(void)
{
	if (HubCount || cl->deathmatch)
	{
		patchINTERPIC = R_RegisterPic("INTERPIC", PIC_RAW);
		tallytop = R_RegisterPic("tallytop", PIC_PATCH);
		tallylft = R_RegisterPic("tallylft", PIC_PATCH);
	}
}

//========================================================================
//
//  IM_UnloadPics
//
//========================================================================

void IM_UnloadPics(void)
{
}

//========================================================================
//
//  IM_InitStats
//
//  Initializes the stats for single player mode
//
//========================================================================

void IM_InitStats(void)
{
	int i;
	int j;
	int slaughterfrags;
	int posnum;
	int slaughtercount;
	int playercount;
	string msgLumpName;

	if (!cl->deathmatch)
	{
		HubCount = 0.0;
		if (im->leavecluster != im->entercluster)
		{
			if (im->leavecluster >= 1 && im->leavecluster <= 5)
			{
				msgLumpName = ClusMsgLumpNames[im->leavecluster - 1];
				LoadTextLump(msgLumpName, &ClusterMessage[0],
					MAX_INTRMSN_MESSAGE_SIZE);
				HubText = ARR2STR(ClusterMessage);
				HubCount = itof(strlen(HubText)) * TEXTSPEED + TEXTWAIT;
#ifdef FIXME
				S_StartSong("hub", P_GetCDIntermissionTrack(), true);
#else
				CmdBuf_AddText("music loop hub\n");
#endif
			}
		}
	}
	else
	{
		slaughterboy = 0;
		slaughterfrags = -9999;
		posnum = 0;
		playercount = 0;
		slaughtercount = 0;
		for (i = 0; i < MAXPLAYERS; i++)
		{
			totalFrags[i] = 0;
			if (scores[i].bActive)
			{
				playercount++;
				if (cl->deathmatch==2)
				{
					string col = Info_ValueForKey(ARR2STR(scores[i].userinfo), "color");
					if (col && col!="")
					{
						int coo = atoi(col);
						teams[coo].bActive = true;
						for (j = 0; j < MAXPLAYERS; j++)
						{
							if (i==0)
							{
								teams[coo].frags[j] = 0;
							}
							totalFrags[coo] += scores[i].frags[j];
							teams[coo].frags[j] += scores[i].frags[j];
						}
					}
				}
				else
				{
					for (j = 0; j < MAXPLAYERS; j++)
					{
						if (scores[j].bActive)
						{
							totalFrags[i] += scores[i].frags[j];
						}
					}
				}
				posnum++;
			}
		}
		for (i = 0; i < MAXPLAYERS; i++)
		{
			if (totalFrags[i] > slaughterfrags)
			{
				slaughterboy = 1 << i;
				slaughterfrags = totalFrags[i];
				slaughtercount = 1;
			}
			else if (totalFrags[i] == slaughterfrags)
			{
				slaughterboy |= 1 << i;
				slaughtercount++;
			}
		}
		if (playercount == slaughtercount)
		{	// don't do the slaughter stuff if everyone is equal
			slaughterboy = 0;
		}
#ifdef FIXME
		S_StartSong("hub", P_GetCDIntermissionTrack(), true);
#else
		CmdBuf_AddText("music loop hub\n");
#endif
	}
}

//===========================================================================
//
//  IM_DrawHubText
//
//===========================================================================

void IM_DrawHubText(void)
{
	int count;

	count = ftoi((intertime - 0.3) / TEXTSPEED);
	if (count < 0)
	{
		count = 0;
	}
	T_SetFont(font_small);
	T_SetAlign(hleft, vtop);
	T_DrawNText(10, 5, HubText, count);
}

//==========================================================================
//
//  IM_DrawNumber
//
//==========================================================================

void IM_DrawNumber(int val, int x, int y, int wrapThresh)
{
	T_SetFont(font_small);
	T_SetAlign(hcenter, vtop);
	if (!(val < -9 && wrapThresh < 1000))
	{
		T_DrawText(x, y, va("%d",
				val >= wrapThresh ? val % wrapThresh : val));
	}
	else
	{
		T_DrawText(x, y, "XX");
	}
}

//==========================================================================
//
//  IM_DrawNumberBold
//
//==========================================================================

void IM_DrawNumberBold(int val, int x, int y, int wrapThresh)
{
	T_SetFont(font_yellow);
	T_SetAlign(hcenter, vtop);
	if (!(val < -9 && wrapThresh < 1000))
	{
		T_DrawText(x, y, va("%d",
				val >= wrapThresh ? val % wrapThresh : val));
	}
	else
	{
		T_DrawText(x, y, "XX");
	}
}

//========================================================================
//
//  IM_DrawDeathTally
//
//========================================================================

void IM_DrawDeathTally(void)
{
	int i, j;
	float xPos, yPos;
	float xDelta, yDelta;
	float xStart, scale;
	int x, y;
	bool bold;

	R_DrawPic(TALLY_TOP_X, TALLY_TOP_Y, tallytop);
	R_DrawPic(TALLY_LEFT_X, TALLY_LEFT_Y, tallylft);
	if (intertime < TALLY_EFFECT_TIME)
	{
		showTotals = false;
		scale = intertime / TALLY_EFFECT_TIME;
		xDelta = scale * TALLY_FINAL_X_DELTA;
		yDelta = scale * TALLY_FINAL_Y_DELTA;
		xStart = TALLY_START_XPOS -
			scale * (TALLY_START_XPOS - TALLY_STOP_XPOS);
		yPos = TALLY_START_YPOS -
			scale * (TALLY_START_YPOS - TALLY_STOP_YPOS);
	}
	else
	{
		xDelta = TALLY_FINAL_X_DELTA;
		yDelta = TALLY_FINAL_Y_DELTA;
		xStart = TALLY_STOP_XPOS;
		yPos = TALLY_STOP_YPOS;
	}
	if (intertime >= TALLY_EFFECT_TIME && showTotals == false)
	{
		showTotals = true;
		LocalSound('PlatformStop');
	}
	y = ftoi(yPos);
	for (i = 0; i < MAXPLAYERS; i++)
	{
		xPos = xStart;
		for (j = 0; j < MAXPLAYERS; j++, xPos += xDelta)
		{
			x = ftoi(xPos);
			bold = ((i == cl->clientnum || j == cl->clientnum)&&cl->deathmatch!=2)||
				(GetCvar("color") == i || GetCvar("color") == j);
			if ((scores[i].bActive && scores[j].bActive && cl->deathmatch!=2) ||
				(cl->deathmatch==2 && teams[i].bActive && teams[j].bActive))
			{
				int frr = (cl->deathmatch==2?teams[i].frags[j]:scores[i].frags[j]);
				if (bold)
				{
					IM_DrawNumberBold(frr, x, y, 100);
				}
				else
				{
					IM_DrawNumber(frr, x, y, 100);
				}
			}
			else
			{
				if (bold)
				{
					T_SetFont(font_yellow);
				}
				else
				{
					T_SetFont(font_small);
				}
				T_SetAlign(hcenter, vtop);
				T_DrawText(x, y, "--");
			}
		}
		if (showTotals && scores[i].bActive && !((slaughterboy & (1 << i)) &&
				!(ftoi(32.0 * intertime) & 16)))
		{
			IM_DrawNumber(totalFrags[i], TALLY_TOTALS_X, y, 1000);
		}
		yPos += yDelta;
		y = ftoi(yPos);
	}
}

//==========================================================================
//
//  IM_Drawer
//
//==========================================================================

void IM_Drawer(void)
{
	if (interstate)
	{
		return;
	}

	R_DrawPic(0, 0, patchINTERPIC);

	if (!cl->deathmatch)
	{
		if (HubCount)
		{
			IM_DrawHubText();
		}
	}
	else
	{
		IM_DrawDeathTally();
	}
}

//========================================================================
//
//  IM_UpdateStats
//
//========================================================================

void IM_UpdateStats(void)
{
	if (interstate)
	{
		if (cnt > 0.0)
		{
			cnt -= frametime;
			if (cnt <= 0.0)
			{
				IM_UnloadPics();
				CmdBuf_AddText("TeleportNewMap\n");
			}
		}
		return;
	}
	intertime += frametime;
	if (skipintermission || (!cl->deathmatch && !HubCount))
	{
		interstate = 1;
		cnt = 0.3;
		skipintermission = false;
	}
}

//==========================================================================
//
//  IM_Start
//
//==========================================================================

void IM_Start(void)
{
	IM_InitStats();
	IM_LoadPics();
	interstate = 0;
	skipintermission = false;
	intertime = 0.0;

	if (!cl->deathmatch && !HubCount)
	{
		interstate = 1;
		cnt = 0.3;
	}
}

//**************************************************************************
//
//  $Log$
//  Revision 1.1  2004/11/16 13:33:20  dj_jl
//  Initial import.
//
//  Revision 1.7  2002/09/07 16:28:25  dj_jl
//  Added Level class.
//
//  Revision 1.6  2002/01/11 18:19:41  dj_jl
//  Started to use names in progs
//
//  Revision 1.5  2002/01/07 12:25:57  dj_jl
//  Changed copyright year
//
//  Revision 1.4  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.3  2001/09/20 16:20:00  dj_jl
//  Start using object-oriented stuff, beautification
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
