//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************
//**
//**    VERTICAL DOORS
//**
//**************************************************************************

// MACROS ------------------------------------------------------------------

// CONSTANTS ---------------------------------------------------------------

enum
{
	DOOREV_Close,
	DOOREV_Open,
	DOOREV_Raise,
	DOOREV_RaiseLocked,
	DOOREV_CloseWaitOpen,
	DOOREV_RaiseIn5Mins
};

// TYPES -------------------------------------------------------------------

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

// CODE --------------------------------------------------------------------

//==========================================================================
//
//  EV_DoDoor
//
//  Move a door up/down
//
//==========================================================================

int EV_DoDoor(int Arg1, int Arg2, int Arg3, int Arg4, int Arg5, int Type,
	line_t* Line, Actor Thing)
{
	int				SecNum;
	int				RetCode;
	sector_t*		Sec;
	VerticalDoor	Door;

	RetCode = false;
	if (!Arg1)
	{
		if (!Line)
			return false;

		//	Make sure it's a two-sided line.
		if (Line->sidenum[1] < 0)
			return false;

		// if the sector has an active thinker, use it
		Sec = GLevel.Sides[Line->sidenum[1]].sector;
		if (Sec->SpecialData)
		{
			Door = VerticalDoor(Sec->SpecialData);
			if (Door && Type == DOOREV_Raise && Door.Type == DOOREV_Raise)
			{
				// ONLY FOR "RAISE" DOORS, NOT "OPEN"s
				if (Door.Direction == -1)
				{
					Door.Direction = 1;	// go back up
				}
				else if (GET_SPAC(Line->flags) != SPAC_PUSH)
					// [RH] activate push doors don't go back down when you
					//		run into them (otherwise opening them would be
					//		a real pain).
				{
					if (!Thing || !Thing.bIsPlayer || Thing.Player.bIsBot)
						return false;	// JDC: bad guys never close doors
					Door.Direction = -1;	// start going down immediately
				}
				else
				{
					return false;
				}
				return true;
			}
			return false;
		}
		//
		// new door thinker
		//
		Door = NewSpecialThinker(VerticalDoor);
		Door.Init(Sec, Arg1, Arg2, Arg3, Arg4, Arg5, Type);
		RetCode = true;
	}
	else
	{
		for (SecNum = FindSectorFromTag(Arg1, -1); SecNum >= 0;
			SecNum = FindSectorFromTag(Arg1, SecNum))
		{
			Sec = &GLevel.Sectors[SecNum];
			if (Sec->SpecialData)
			{
				continue;
			}
			// Add new door thinker
			RetCode = true;
			Door = NewSpecialThinker(VerticalDoor);
			Door.Init(Sec, Arg1, Arg2, Arg3, Arg4, Arg5, Type);
		}
	}
	return RetCode;
}

//==========================================================================
//
//  P_SpawnDoorCloseIn30
//
//  Spawn a door that closes after 30 seconds
//
//==========================================================================

void P_SpawnDoorCloseIn30(sector_t * sec)
{
	VerticalDoor	Door;
	float			Height;

	Door = NewSpecialThinker(VerticalDoor);

	sec->SpecialData = Door;
	sec->special = 0;

	Door.sector = sec;
	Door.Direction = 0;
	Door.Type = DOOREV_Raise;
	Door.Speed = 70.0;
	Door.TopTime = 30.0;
	Height = FindHighestFloorPoint(sec, &Door.BotSpot);
	Door.BotDist = DotProduct(vector(Door.BotSpot.x, Door.BotSpot.y, 
		Height), sec->ceiling.normal);
	Door.OldFloorDist = sec->floor.dist;
	Door.TopHeight = sec->ceiling.dist;
	Door.LightTag = 0;
}

//==========================================================================
//
//  P_SpawnDoorRaiseIn5Mins
//
//  Spawn a door that opens after 5 minutes
//
//==========================================================================

void P_SpawnDoorRaiseIn5Mins(sector_t * sec)
{
	VerticalDoor Door;

	sec->special = 0;
	Door = NewSpecialThinker(VerticalDoor);
	Door.Init(sec, 0, 16, 150, 0, 0, DOOREV_RaiseIn5Mins);
}

//==========================================================================
//
//  EV_LightTurnOnPartway
//
//==========================================================================

void EV_LightTurnOnPartway(int LightTag, float Delta)
{
}

//**************************************************************************
//
//  $Log$
//  Revision 1.4  2005/02/10 15:17:57  firebrand_kh
//  Constants for common line specials
//  Updated special utilites.
//
//  Revision 1.15  2005/01/25 17:45:16  dj_jl
//  Constants for common line specials
//  Updated special utilites.
//
//  Revision 1.14  2004/12/22 07:54:42  dj_jl
//  More extended ACS support, more linedef flags.
//
//  Revision 1.13  2004/11/22 07:36:28  dj_jl
//  Implemented all sector specials in all games.
//
//  Revision 1.12  2002/11/02 08:24:10  dj_jl
//  New style classes.
//
//  Revision 1.11  2002/09/07 16:28:26  dj_jl
//  Added Level class.
//
//  Revision 1.10  2002/04/11 16:48:10  dj_jl
//  New base classes for sector thinkers, Tick function.
//
//  Revision 1.9  2002/03/09 17:57:02  dj_jl
//  Got rid of function pointers, made most of the physics functions native.
//
//  Revision 1.8  2002/03/02 18:00:15  dj_jl
//  Some smaller changes, beautification.
//
//  Revision 1.7  2002/01/15 08:12:26  dj_jl
//  Replaced some pointers with references
//
//  Revision 1.6  2002/01/07 12:25:57  dj_jl
//  Changed copyright year
//
//  Revision 1.5  2001/12/18 18:31:01  dj_jl
//  Added class SectorThinker
//
//  Revision 1.4  2001/09/24 17:17:17  dj_jl
//  Created thinker classes
//
//  Revision 1.3  2001/09/20 16:20:00  dj_jl
//  Start using object-oriented stuff, beautification
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
