//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************
//**
//**    CEILINGS
//**
//**************************************************************************

// MACROS ------------------------------------------------------------------

// CONSTANTS ---------------------------------------------------------------

enum
{
	CEILEV_LowerToFloor,
	CEILEV_LowerToHighestFloor,
	CEILEV_LowerToLowest,
	CEILEV_RaiseToHighest,
	CEILEV_RaiseToNearest,
	CEILEV_LowerByValue,
	CEILEV_RaiseByValue,
	CEILEV_LowerByValueTimes8,
	CEILEV_RaiseByValueTimes8,
	CEILEV_LowerTimes8Instant,
	CEILEV_RaiseTimes8Instant,
	CEILEV_MoveToValueTimes8,
	CEILEV_LowerAndCrush,
	CEILEV_CrushAndRaise,
	CEILEV_CrushRaiseAndStay,
	CEILEV_CrushAndRaiseA,
	CEILEV_CrushAndRaiseSilA,
	CEILEV_CrushRaiseAndStayA,
	CEILEV_CrushRaiseAndStaySilA,
	CEILEV_Generic,
	CEILEV_GenericChange0,
	CEILEV_GenericChangeT,
	CEILEV_GenericChange,
	CEILEV_GenericCrush
};

// TYPES -------------------------------------------------------------------

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

// CODE --------------------------------------------------------------------

//==========================================================================
//
//  EV_DoCeiling
//
//  Move a ceiling up/down and all around!
//
//==========================================================================

int EV_DoCeiling(int Arg1, int Arg2, int Arg3, int Arg4, int Arg5, int Type,
	line_t* Line)
{
	int				SecNum;
	int				Rtn;
	sector_t*		Sec;
	CeilingMover	Ceiling;

	Rtn = false;

	//  Reactivate in-stasis ceilings...for certain types.
	if (Type == CEILEV_CrushAndRaiseA ||
		Type == CEILEV_CrushAndRaiseSilA)
	{
		FOREACH(CeilingMover, Ceiling)
		{
			Ceiling.ActivateInStasis(Arg1);
		}
	}

	for (SecNum = FindSectorFromTag(Arg1, -1); SecNum >= 0;
		SecNum = FindSectorFromTag(Arg1, SecNum))
	{
		Sec = &GLevel.Sectors[SecNum];
		if (Sec->CeilingData)
			continue;

		// new ceiling thinker
		Rtn = true;
		Ceiling = NewSpecialThinker(CeilingMover);
		Ceiling.Init(Sec, Arg1, Arg2, Arg3, Arg4, Arg5, Type, Line);
	}
	return Rtn;
}

//==================================================================
//
//  EV_CeilingCrushStop
//
//  Stop a ceiling from crushing!
//
//==================================================================

int EV_CeilingCrushStop(line_t * line, int *args)
{
	CeilingMover C;

	FOREACH(CeilingMover, C)
	{
		if (C.CrushStop(args[0]))
		{
			return 1;
		}
	}
	return 0;
}

//**************************************************************************
//
//  $Log$
//  Revision 1.3  2005/03/01 15:33:57  dj_jl
//  Big update of line specials.
//
//  Revision 1.1  2004/11/16 13:33:23  dj_jl
//  Initial import.
//
//  Revision 1.14  2002/11/02 08:24:10  dj_jl
//  New style classes.
//
//  Revision 1.13  2002/09/07 16:28:26  dj_jl
//  Added Level class.
//
//  Revision 1.12  2002/04/11 16:48:10  dj_jl
//  New base classes for sector thinkers, Tick function.
//
//  Revision 1.11  2002/03/09 17:57:02  dj_jl
//  Got rid of function pointers, made most of the physics functions native.
//
//  Revision 1.10  2002/01/29 18:16:19  dj_jl
//  Adjusted speed to fix timing
//
//  Revision 1.9  2002/01/15 08:12:26  dj_jl
//  Replaced some pointers with references
//
//  Revision 1.8  2002/01/12 18:02:48  dj_jl
//  Replaced some C style casts with dynamic casts
//
//  Revision 1.7  2002/01/07 12:25:57  dj_jl
//  Changed copyright year
//
//  Revision 1.6  2001/12/18 18:31:01  dj_jl
//  Added class SectorThinker
//
//  Revision 1.5  2001/09/25 17:13:50  dj_jl
//  Beautification
//
//  Revision 1.4  2001/09/24 17:17:17  dj_jl
//  Created thinker classes
//
//  Revision 1.3  2001/09/20 16:20:00  dj_jl
//  Start using object-oriented stuff, beautification
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
