//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

Actor bodyque[BODYQUESIZE];
int bodyqueslot;

//============================================================================
//
// CorpseQueue Routines
//
//============================================================================

// Corpse queue for monsters - this should be saved out
Actor corpseQueue[CORPSEQUEUESIZE];
int corpseQueueSlot;

//============================================================================
//
//  P_InitCreatureCorpseQueue
//
//============================================================================

void P_InitCreatureCorpseQueue(int corpseScan)
{
	Actor mo;
	int i;

	// Initialize queue
	corpseQueueSlot = 0;
	for (i = 0; i < CORPSEQUEUESIZE; i++)
	{
		corpseQueue[i] = none;
	}

	if (!corpseScan)
		return;

	// Search mobj list for corpses and place them in this queue
	FOREACH(Actor, mo)
	{
		if (!mo.bCorpse)
			continue;	// Must be a corpse
		if (mo.bIceCorpse)
			continue;	// Not ice corpses
		// Only corpses that call A_QueueCorpse from death routine
		switch (mo.Class)
		{
		case Centaur:
		case CentaurLeader:
		case Demon:
		case Demon2:
		case Wraith:
		case WraithBuried:
		case Bishop:
		case Ettin:
		case Pig:
		case CentaurShield:
		case CentaurSword:
		case DemonChunk1:
		case DemonChunk2:
		case DemonChunk3:
		case DemonChunk4:
		case DemonChunk5:
		case Demon2Chunk1:
		case Demon2Chunk2:
		case Demon2Chunk3:
		case Demon2Chunk4:
		case Demon2Chunk5:
		case FireDemonSplotch1:
		case FireDemonSplotch2:
			mo.A_QueueCorpse();	// Add corpse to queue
			break;
		default:
			break;
		}
	}
}

//**************************************************************************
//
//  $Log$
//  Revision 1.1  2004/11/16 13:33:23  dj_jl
//  Initial import.
//
//  Revision 1.32  2002/11/02 08:24:10  dj_jl
//  New style classes.
//
//  Revision 1.31  2002/09/07 16:28:26  dj_jl
//  Added Level class.
//
//  Revision 1.30  2002/07/23 13:07:30  dj_jl
//  Final touches for switching to floating-point time, beautification.
//
//  Revision 1.29  2002/07/13 08:01:49  dj_jl
//  Moved some functions to the Entity class.
//
//  Revision 1.28  2002/06/22 07:16:01  dj_jl
//  Added base classes for objects, split them into corresponding files.
//
//  Revision 1.27  2002/05/18 17:00:00  dj_jl
//  Renamed SpawnState to IdleState, other changes.
//
//  Revision 1.26  2002/03/28 18:15:34  dj_jl
//  Renamed mo in player_t to MO.
//
//  Revision 1.25  2002/03/16 17:47:46  dj_jl
//  Got rid of mobj_t and some other legacy.
//
//  Revision 1.24  2002/03/09 17:57:02  dj_jl
//  Got rid of function pointers, made most of the physics functions native.
//
//  Revision 1.23  2002/03/02 18:00:15  dj_jl
//  Some smaller changes, beautification.
//
//  Revision 1.22  2002/02/26 17:49:48  dj_jl
//  no message
//
//  Revision 1.21  2002/02/22 18:00:21  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.20  2002/02/16 16:26:55  dj_jl
//  Removed precalculated sound IDs
//
//  Revision 1.19  2002/02/14 19:20:58  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.18  2002/02/06 17:28:52  dj_jl
//  Replaced Actor flags with boolean variables.
//
//  Revision 1.17  2002/02/02 19:17:26  dj_jl
//  Replacing pointers with references, beautification.
//
//  Revision 1.16  2002/01/28 18:50:18  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.15  2002/01/25 18:04:35  dj_jl
//  Many global functions made Actor functions
//
//  Revision 1.14  2002/01/24 18:19:26  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.13  2002/01/17 18:15:54  dj_jl
//  Renamed all map object classes
//
//  Revision 1.12  2002/01/15 18:27:00  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.11  2002/01/12 18:02:48  dj_jl
//  Replaced some C style casts with dynamic casts
//
//  Revision 1.10  2002/01/11 18:19:42  dj_jl
//  Started to use names in progs
//
//  Revision 1.9  2002/01/07 12:25:57  dj_jl
//  Changed copyright year
//
//  Revision 1.8  2001/12/27 17:52:23  dj_jl
//  Removed Entity property type, replaced with Object property Class
//
//  Revision 1.7  2001/12/12 18:57:42  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.6  2001/10/22 17:23:13  dj_jl
//  Floatification of angles
//
//  Revision 1.5  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.4  2001/09/20 16:20:00  dj_jl
//  Start using object-oriented stuff, beautification
//  
//  Revision 1.3  2001/08/30 17:33:17  dj_jl
//  Added sound channels
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
