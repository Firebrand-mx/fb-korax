//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************
//**
//**    Special thinker utilites.
//**
//**************************************************************************

// HEADER FILES ------------------------------------------------------------

// MACROS ------------------------------------------------------------------

// TYPES -------------------------------------------------------------------

// EXTERNAL FUNCTION PROTOTYPES --------------------------------------------

// PUBLIC FUNCTION PROTOTYPES ----------------------------------------------

// PRIVATE FUNCTION PROTOTYPES ---------------------------------------------

// EXTERNAL DATA DECLARATIONS ----------------------------------------------

// PUBLIC DATA DEFINITIONS -------------------------------------------------

// PRIVATE DATA DEFINITIONS ------------------------------------------------

// CODE --------------------------------------------------------------------

//**************************************************************************
//
//  MOVE FLOOR/CEILING
//
//**************************************************************************

//==========================================================================
//
//  T_MovePlane
//
//  Move a plane (floor or ceiling) and check for crushing
//
//==========================================================================

int T_MovePlane(sector_t * sector, float amount, float dest,
	int crush, int floorOrCeiling, int direction)
{
	bool flag;
	float lastpos;

	switch (floorOrCeiling)
	{
	case 0:
		// FLOOR
		amount *= sector->floor.normal.z;
		dest *= sector->floor.normal.z;
		switch (direction)
		{
		case -1:
			// DOWN
			if (sector->floor.dist - amount < dest)
			{
				lastpos = sector->floor.dist;
				sector->floor.dist = dest;
				flag = P_ChangeSector(sector, crush);
				if (flag)
				{
					sector->floor.dist = lastpos;
					P_ChangeSector(sector, crush);
				}
				return RES_PASTDEST;
			}
			else
			{
				lastpos = sector->floor.dist;
				sector->floor.dist -= amount;
				flag = P_ChangeSector(sector, crush);
				if (flag)
				{
					sector->floor.dist = lastpos;
					P_ChangeSector(sector, crush);
					return RES_CRUSHED;
				}
			}
			break;

		case 1:
			// UP
			if (sector->floor.dist + amount > dest)
			{
				lastpos = sector->floor.dist;
				sector->floor.dist = dest;
				flag = P_ChangeSector(sector, crush);
				if (flag)
				{
					sector->floor.dist = lastpos;
					P_ChangeSector(sector, crush);
				}
				return RES_PASTDEST;
			}
			else
			{
				// COULD GET CRUSHED
				lastpos = sector->floor.dist;
				sector->floor.dist += amount;
				flag = P_ChangeSector(sector, crush);
				if (flag)
				{
					sector->floor.dist = lastpos;
					P_ChangeSector(sector, crush);
					return RES_CRUSHED;
				}
			}
			break;
		}
		break;

	case 1:
		// CEILING
		amount *= sector->ceiling.normal.z;
		dest *= sector->ceiling.normal.z;
		switch (direction)
		{
		case -1:
			// DOWN
			if (sector->ceiling.dist - amount > dest)
			{
				lastpos = sector->ceiling.dist;
				sector->ceiling.dist = dest;
				flag = P_ChangeSector(sector, crush);

				if (flag)
				{
					sector->ceiling.dist = lastpos;
					P_ChangeSector(sector, crush);
				}
				return RES_PASTDEST;
			}
			else
			{
				// COULD GET CRUSHED
				lastpos = sector->ceiling.dist;
				sector->ceiling.dist -= amount;
				flag = P_ChangeSector(sector, crush);

				if (flag)
				{
					sector->ceiling.dist = lastpos;
					P_ChangeSector(sector, crush);
					return RES_CRUSHED;
				}
			}
			break;

		case 1:
			// UP
			if (sector->ceiling.dist + amount < dest)
			{
				lastpos = sector->ceiling.dist;
				sector->ceiling.dist = dest;
				flag = P_ChangeSector(sector, crush);
				if (flag)
				{
					sector->ceiling.dist = lastpos;
					P_ChangeSector(sector, crush);
				}
				return RES_PASTDEST;
			}
			else
			{
				lastpos = sector->ceiling.dist;
				sector->ceiling.dist += amount;
				flag = P_ChangeSector(sector, crush);
			}
			break;
		}
		break;
	}
	return RES_OK;
}

//**************************************************************************
//
//  $Log$
//  Revision 1.3  2005/03/01 15:33:57  dj_jl
//  Big update of line specials.
//
//  Revision 1.1  2004/11/16 13:33:23  dj_jl
//  Initial import.
//
//  Revision 1.10  2002/09/07 16:28:26  dj_jl
//  Added Level class.
//
//  Revision 1.9  2002/07/23 16:31:44  dj_jl
//  Beautification.
//
//  Revision 1.8  2002/03/09 17:57:02  dj_jl
//  Got rid of function pointers, made most of the physics functions native.
//
//  Revision 1.7  2002/01/15 08:12:26  dj_jl
//  Replaced some pointers with references
//
//  Revision 1.6  2002/01/07 12:25:58  dj_jl
//  Changed copyright year
//
//  Revision 1.5  2001/10/02 17:42:38  dj_jl
//  Possibility to declare function's code inside class declaration
//
//  Revision 1.4  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.3  2001/09/20 16:20:00  dj_jl
//  Start using object-oriented stuff, beautification
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
