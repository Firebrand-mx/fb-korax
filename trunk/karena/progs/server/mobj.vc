//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

classid PuffType;
Actor PuffSpawned;
Actor linetarget;	// who got hit (or none)

int classFlags[] = {
	MTF_FIGHTER,
	MTF_CLERIC,
	MTF_MAGE
};

float windTab[3] = { 5.0 / 32.0, 10.0 / 32.0, 25.0 / 32.0 };

//==========================================================================
//
//  CopyMThing
//
//==========================================================================

void CopyMThing(mthing_t * from, mthing_t * to)
{
	to->tid = from->tid;
	to->x = from->x;
	to->y = from->y;
	to->height = from->height;
	to->angle = from->angle;
	to->type = from->type;
	to->options = from->options;
	to->special = from->special;
	to->arg1 = from->arg1;
	to->arg2 = from->arg2;
	to->arg3 = from->arg3;
	to->arg4 = from->arg4;
	to->arg5 = from->arg5;
}

//==========================================================================
//
//	Spawn
//
//==========================================================================

Actor Spawn(classid type, TVec position)
{
	Actor A;

	A = Actor(NewMobjThinker(type));
	A.Origin = position;
	A.OnMapSpawn(NULL);
	return A;
}

//==========================================================================
//
//  SpawnPuff
//
//==========================================================================

void SpawnPuff(TVec org)
{
	Actor puff;

	org.z += (Random() - Random()) * 4.0;
	puff = Spawn(PuffType, org);
	if (linetarget && puff.SightSound)
	{
		// Hit thing sound
		puff.PlaySound(puff.SightSound, CHAN_VOICE);
	}
	else if (puff.AttackSound)
	{
		puff.PlaySound(puff.AttackSound, CHAN_VOICE);
	}
	switch (PuffType)
	{
	case PunchPuff:
		puff.Velocity.z = 1.0 * 35.0;
		break;
	case HammerPuff:
		puff.Velocity.z = 8.0 / 10.0 * 35.0;
		break;
	}
	PuffSpawned = puff;
}

//==========================================================================
//
// P_SpawnMapThing
//
// The fields of the mapthing should already be in host byte order.
//
//==========================================================================

void P_SpawnMapThing(mthing_t * mthing, bool spawn_thinkers)
{
	int i;
	int spawnMask;
	Actor A;

	if (mthing->type <= 0)
		return;

	// Count deathmatch start positions
	if (mthing->type == 11)
	{
		if (level->numdeathmatchstarts < MAXDEATHMATCHSTARTS)
		{
			CopyMThing(mthing,
				&level->deathmatchstarts[level->numdeathmatchstarts]);
			level->numdeathmatchstarts++;
		}
		return;
	}
	if (mthing->type == PO_SPAWN_TYPE || mthing->type == PO_SPAWNCRUSH_TYPE)
	{
		// Polyobj StartSpot Pt.
		SpawnPolyobj(mthing->x, mthing->y, mthing->angle,
			(mthing->type == PO_SPAWNCRUSH_TYPE));
		return;
	}
	if (mthing->type == PO_ANCHOR_TYPE)
	{
		// Polyobj Anchor Pt.
		AddAnchorPoint(mthing->x, mthing->y, mthing->angle);
		return;
	}

	// Check for player starts 1 to 4
	if (mthing->type <= 4)
	{
		CopyMThing(mthing,
			&level->playerstarts[mthing->arg1 * MAXPLAYERS + mthing->type -
				1]);
		return;
	}
	// Check for player starts 5 to 8
	if (mthing->type >= 9100 && mthing->type <= 9103)
	{
		mthing->type = 5 + mthing->type - 9100;	// Translate to 5 - 8
		CopyMThing(mthing,
			&level->playerstarts[mthing->arg1 * MAXPLAYERS + mthing->type -
				1]);
		return;
	}

	if (mthing->type >= 1400 && mthing->type < 1410)
	{
		GLevel.PointInSector(vector(mthing->x,
			mthing->y, 0.0))->seqType = mthing->type - 1400;
		return;
	}

	//  Don't spawn thinkers if we are loading a savegame
	if (!spawn_thinkers)
	{
		return;
	}

//[Korax]
#if 0
	// Check current game type with spawn flags
	if (netgame == false)
	{
		spawnMask = MTF_GSINGLE;
	}
	else if (deathmatch)
	{
		spawnMask = MTF_GDEATHMATCH;
	}
	else
	{
		spawnMask = MTF_GCOOP;
	}
	if (!(mthing->options & spawnMask))
	{
		return;
	}

	// Check current skill with spawn flags
	if (gameskill == sk_baby || gameskill == sk_easy)
	{
		spawnMask = MTF_EASY;
	}
	else if (gameskill == sk_hard || gameskill == sk_nightmare)
	{
		spawnMask = MTF_HARD;
	}
	else
	{
		spawnMask = MTF_NORMAL;
	}
	if (!(mthing->options & spawnMask))
	{
		return;
	}

	// Check current character classes with spawn flags
	if (!netgame)
	{
		// Single player
		if (!(mthing->options & classFlags[GetCvar("Class")]))
		{
			// Not for current class
			return;
		}
	}
#endif
//[Korax]
#if 0	//  Because of client/server and in-game joining we can't do this
	else if (!deathmatch)
	{
		// Cooperative
		spawnMask = 0;
		for (i = 0; i < MAXPLAYERS; i++)
		{
			if (GPlayers[i])
			{
				spawnMask |= classFlags[PlayerClass[i]];
			}
		}
		if (!(mthing->options & spawnMask))
		{
			return;
		}
	}
#endif

	// Find which type to spawn
	for (i = 0; i < num_mobj_types; i++)
	{
		if (mthing->type == mobjinfo[i].doomednum)
		{
			A = Actor(NewMobjThinker(mobjinfo[i].class_id));
			A.OnMapSpawn(mthing);
			return;
		}
	}
	// Can't find thing type
	dprint("P_SpawnMapThing: Unknown type %i at (%f, %f)",
		mthing->type, mthing->x, mthing->y);
}

//**************************************************************************
//
//      NOISE ALERT
//
//**************************************************************************

Actor soundtarget;

//==========================================================================
//
//  RecursiveSound
//
//  Called by NoiseAlert. Recursively traverse adjacent sectors, sound
// blocking lines cut off traversal.
//
//==========================================================================

void RecursiveSound(sector_t * sec, int soundblocks)
{
	int i;
	line_t *check;
	sector_t *other;

	// wake up all monsters in this sector
	if (sec->validcount == *validcount &&
		sec->soundtraversed <= soundblocks + 1)
	{
		return;	// already flooded
	}

	sec->validcount = *validcount;
	sec->soundtraversed = soundblocks + 1;
	sec->SoundTarget = soundtarget;

	for (i = 0; i < sec->linecount; i++)
	{
		check = sec->lines[i];
		if (!(check->flags & ML_TWOSIDED))
			continue;

		if (!LineOpenings(check, *check->v1))
		{
			if (!LineOpenings(check, *check->v2))
				continue;	// closed door
		}

		if (GLevel.Sides[check->sidenum[0]].sector == sec)
			other = GLevel.Sides[check->sidenum[1]].sector;
		else
			other = GLevel.Sides[check->sidenum[0]].sector;

		if (check->flags & ML_SOUNDBLOCK)
		{
			if (!soundblocks)
				RecursiveSound(other, 1);
		}
		else
			RecursiveSound(other, soundblocks);
	}
}

//==========================================================================
//
//  NoiseAlert
//
//  If a monster yells at a player, it will alert other monsters to the
// player.
//
//==========================================================================

void NoiseAlert(Actor target, Actor emmiter)
{
	soundtarget = target;
	(*validcount)++;
	RecursiveSound(emmiter.Sector, 0);
}

//**************************************************************************
//
//  $Log$
//  Revision 1.1  2004/11/16 13:33:23  dj_jl
//  Initial import.
//
//  Revision 1.54  2004/03/01 07:08:48  dj_jl
//  Height for player starts
//
//  Revision 1.53  2003/11/12 16:50:47  dj_jl
//  Changed player structure into a class
//
//  Revision 1.52  2003/07/11 16:47:39  dj_jl
//  Made array of players with pointers
//
//  Revision 1.51  2002/11/02 08:24:11  dj_jl
//  New style classes.
//
//  Revision 1.50  2002/09/07 16:28:26  dj_jl
//  Added Level class.
//
//  Revision 1.49  2002/08/28 16:36:39  dj_jl
//  Merged MapObject with Entity, some natives, beautification.
//
//  Revision 1.48  2002/07/23 16:31:44  dj_jl
//  Beautification.
//
//  Revision 1.47  2002/07/23 13:07:30  dj_jl
//  Final touches for switching to floating-point time, beautification.
//
//  Revision 1.46  2002/07/13 08:01:49  dj_jl
//  Moved some functions to the Entity class.
//
//  Revision 1.45  2002/06/29 15:54:34  dj_jl
//  Floatized PainChance.
//
//  Revision 1.44  2002/06/22 07:16:01  dj_jl
//  Added base classes for objects, split them into corresponding files.
//
//  Revision 1.43  2002/06/14 15:47:53  dj_jl
//  Added state names to the states.
//
//  Revision 1.42  2002/05/18 17:00:00  dj_jl
//  Renamed SpawnState to IdleState, other changes.
//
//  Revision 1.41  2002/03/28 18:15:35  dj_jl
//  Renamed mo in player_t to MO.
//
//  Revision 1.40  2002/03/16 17:47:47  dj_jl
//  Got rid of mobj_t and some other legacy.
//
//  Revision 1.39  2002/03/12 19:19:16  dj_jl
//  Pickup classes
//
//  Revision 1.38  2002/03/09 17:57:02  dj_jl
//  Got rid of function pointers, made most of the physics functions native.
//
//  Revision 1.37  2002/03/04 18:31:36  dj_jl
//  Replaced bNoClip with two seperate flags, beautification.
//
//  Revision 1.36  2002/03/02 18:00:15  dj_jl
//  Some smaller changes, beautification.
//
//  Revision 1.35  2002/02/26 17:49:49  dj_jl
//  no message
//
//  Revision 1.34  2002/02/22 18:00:22  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.33  2002/02/16 16:26:55  dj_jl
//  Removed precalculated sound IDs
//
//  Revision 1.32  2002/02/14 19:20:58  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.31  2002/02/09 18:13:46  dj_jl
//  Added flags that determines what line blocking flags to check
//
//  Revision 1.30  2002/02/07 18:50:09  dj_jl
//  Made CheckPosition shared.
//
//  Revision 1.29  2002/02/06 17:28:53  dj_jl
//  Replaced Actor flags with boolean variables.
//
//  Revision 1.28  2002/02/02 19:17:26  dj_jl
//  Replacing pointers with references, beautification.
//
//  Revision 1.27  2002/01/28 18:50:19  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.26  2002/01/25 18:04:35  dj_jl
//  Many global functions made Actor functions
//
//  Revision 1.25  2002/01/24 18:19:26  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.24  2002/01/17 18:15:54  dj_jl
//  Renamed all map object classes
//
//  Revision 1.23  2002/01/15 18:27:00  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.22  2002/01/12 18:00:47  dj_jl
//  Sound names initialized as names
//
//  Revision 1.21  2002/01/11 18:19:42  dj_jl
//  Started to use names in progs
//
//  Revision 1.20  2002/01/07 12:25:57  dj_jl
//  Changed copyright year
//
//  Revision 1.19  2001/12/27 17:52:23  dj_jl
//  Removed Entity property type, replaced with Object property Class
//
//  Revision 1.18  2001/12/12 18:57:42  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.17  2001/12/04 18:40:22  dj_jl
//  Some fixes
//
//  Revision 1.16  2001/12/01 18:14:09  dj_jl
//  Changed MSG_Select, beautification
//
//  Revision 1.15  2001/11/02 18:42:08  dj_jl
//  Damage method
//
//  Revision 1.14  2001/10/27 07:40:58  dj_jl
//  Switched some functions into class members
//
//  Revision 1.13  2001/10/22 17:23:13  dj_jl
//  Floatification of angles
//
//  Revision 1.12  2001/10/18 17:39:34  dj_jl
//  A lots of changes for Alpha 2
//
//  Revision 1.11  2001/10/09 17:41:17  dj_jl
//  Beautification
//
//  Revision 1.10  2001/10/02 17:42:38  dj_jl
//  Possibility to declare function's code inside class declaration
//
//  Revision 1.9  2001/09/27 17:08:19  dj_jl
//  Removed spawn functions, added mobj classes
//
//  Revision 1.8  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.7  2001/09/20 16:20:00  dj_jl
//  Start using object-oriented stuff, beautification
//  
//  Revision 1.6  2001/08/31 17:17:23  dj_jl
//  Removed vector macros
//  
//  Revision 1.5  2001/08/30 17:33:17  dj_jl
//  Added sound channels
//  
//  Revision 1.4  2001/08/29 17:42:13  dj_jl
//  Added sound channel
//  
//  Revision 1.3  2001/07/31 16:59:30  dj_jl
//  Set model when spawning object
//
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
