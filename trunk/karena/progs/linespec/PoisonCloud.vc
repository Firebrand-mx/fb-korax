//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**		##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id$
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class PoisonCloud : Actor;

int LifeCount;
int SpawnChildren;	// [CW] advanced ability
int BobIndex;

bool bCheckFriendlyFire;

//==========================================================================
//
//	GetExplodeParms
//
//==========================================================================

void GetExplodeParms(out int damage, out float distance, out byte damageSelf)
{
	damage = 4;
	distance = 40.0;
}

//==========================================================================
//
//  DoSpecialDamage
//
//==========================================================================

int DoSpecialDamage(EntityEx victim, EntityEx source, int damage)
{
	if (victim.bIsPlayer && !victim.bDormant)
	{
		if (!victim.bInvulnerable &&
			!(bCheckFriendlyFire && PlayerEx(victim.Player).CheckFriendlyFire(source, damage)) &&
			PlayerEx(victim.Player).PoisonCount < 4)
		{
			Actor(victim).PoisonDamage(self, Actor(source), 15 + (P_Random() & 15), false);	// Don't play painsound
			Actor(victim).PoisonPlayer(Actor(source), 50);
			victim.PlaySound('*poison', CHAN_VOICE);
		}
		return -1;
	}
	else if (!victim.bMonster)
	{
		// only damage monsters/players with the poison cloud
		return -1;
	}
	return damage;
}

//==========================================================================
//
//	InitCloud
//
//	FIXME this sucks!
//
//==========================================================================

void InitCloud(EntityEx InstigatedBy)
{
	Velocity.x = 0.00001;	// missile objects must move to impact other objects
	LifeCount = 24 + (P_Random() & 7);
	BobIndex = 0;
	Target = InstigatedBy;
	if (Target)
		PInstigator = KAPlayerBase(Target.Player);
	Radius = 20.0;
	Height = 30.0;
	bColideWithThings = true;
	bColideWithWorld = true;
}

//===========================================================================
//
//  A_PoisonBagDamage
//
//===========================================================================

final void A_PoisonBagDamage()
{
	A_Explode();

	Origin.z += Level.Game.FloatBobOffsets[BobIndex] / 16.0;
	BobIndex = (BobIndex + 1) & 63;
}

//===========================================================================
//
//  A_PoisonBagCheck
//
//===========================================================================

final void A_PoisonBagCheck()
{
	if (--LifeCount <= 0)
	{
		SetState(FindState('Death'));
	}
}

//===========================================================================
//
//  A_SpawnChildren
//
// [CW] Advanced ability (for Cleric's 6th weapon)
//
//===========================================================================

final void A_SpawnChildren()
{
	if (SpawnChildren > 0)
	{
		int i;
		for (i = 0; i < SpawnChildren; i++)
		{
			PoisonCloud pc = PoisonCloud(Spawn(PoisonCloud,
							 Origin + vector((Random() - 0.5) * 256.0, (Random() - 0.5) * 256.0,
							 (Random() - 0.5) * 64.0)));
			if (pc)
			{
				if (!TestLocation())
				{
					SetState(GetStatePlus(FindState('Death'), 1));
					return;
				}
				else
				{
					pc.InitCloud(Actor(Target));
					pc.Obituary = Obituary;
					pc.LifeCount >> 2;
					pc.Velocity.x = 0.00001;
					pc.bCheckFriendlyFire = bCheckFriendlyFire;
					if (!pc.TryMove(pc.Origin + pc.Velocity, false))
						SetState(GetStatePlus(FindState('Death'), 1));
				}
			}
		}
	}
}

states
{
Spawn:
	PSBG D 1
	PSBG D 1 A_Scream
	PSBG DEEEFFFGGGHHHI 2 A_PoisonBagDamage
	PSBG I 1 A_PoisonBagDamage
	PSBG I 1 A_PoisonBagCheck
	Goto Spawn+3
Death:
	PSBG HG 7
	PSBG FD 6
	Stop
}

defaultproperties
{
	Radius = 1.0;
	Height = 1.0;
	Mass = 99999.0;
	RenderStyle = STYLE_Translucent;
	Alpha = 0.333;
	bNoBlockmap = true;
	bNoGravity = true;
	bDropOff = true;
	bColideWithWorld = false;
	bColideWithThings = false;
	bNoDamageThrust = true;
	bDamageInvulnerable = true;
	bHowlVictims = true;
	bNoSplash = true;
	bThruGhost = true;
	bCanBlast = true;
	bMissile = true;
	DeathSound = 'PoisonShroomDeath';
	Obituary = "$ob_poisoncloud";
}
