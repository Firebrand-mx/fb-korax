//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**	        ##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id$
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Actor : EntityEx
	abstract;

const int BASETHRESHOLD			= 100;	// follow a player exlusively for 3 seconds

const float FLOATRANDZ			= 99998.0;

const float TELEFOGHEIGHT		= 32.0;

const float MELEERANGE			= 64.0;
const float MISSILERANGE		= (32.0 * 64.0);

const float BONUSADD			= 0.2;

const float FLOATSPEED			= 140.0;

const float MAXMOVE 			= 1050.0;
const float MAXMOVESTEP			= 15.0;	//MAXMOVE / (35.0 * 2.0)
const float STOPSPEED			= 2.1875;

const float MONS_LOOK_RANGE		= (16.0 * 64.0);
const int MONS_LOOK_LIMIT 		= 64;

state IdleState;
state SeeState;
state PainState;
state MeleeState;
state MissileState;
state CrashState;
state DeathState;
state GibsDeathState;
state IceDeathState;
state BurnDeathState;

name SightSound;
name ActiveSound;
name AttackSound;
name PainSound;
name DeathSound;

bool bSpecial;			// call P_SpecialThing when touched
bool bShootable;		// Can be hit.
bool bAmbush;
bool bJustHit;			// try to attack right back
bool bJustAttacked;		// take at least one step before attacking
bool bSpawnCeiling;		// hang from ceiling instead of floor
bool bPickUp;			// for players to pick up items
bool bMissile;			// don't hit same species, explode on block
bool bNoBlood;			// don't bleed when shot (use puff)
bool bInFloat;			// floating to a height for a move, don't
bool bSkullFly;			// skull in flight
bool bCountKill;		// count towards intermission kill total
bool bIceCorpse;		// a frozen corpse (for blasting)
bool bWindThrust;		// gets pushed around by the wind specials
bool bFloorBounce;		// bounces off the floor
bool bSpawnFloat;		// spawn random float z
bool bNoTeleport;		// does not teleport
bool bRip;			// missile rips through solid targets
bool bPushable;			// can be pushed by other moving mobjs
bool bSlide;			// slides against walls
bool bCannotPush;		// cannot push other pushable mobjs
bool bDropped;			// dropped by a demon
bool bBoss;			// mobj is a major boss
bool bFireDamage;		// does fire damage
bool bNoDamageThrust;		// does not thrust target when damaging
bool bTelestomp;		// mobj can stomp another
bool bFloatBob;			// use float bobbing z movement
bool bActivateImpact;		// an MF_MISSILE mobj can activate
				// SPAC_IMPACT
bool bActivatePushWall;		// mobj can push walls
bool bActivateMCross;		// can activate monster cross lines
bool bActivatePCross;		// can activate projectile cross lines
bool bNonShootable;		// mobj is totally non-shootable,
				// but still considered solid
bool bInvulnerable;		// mobj is invulnerable
bool bDormant;			// thing is dormant
bool bIceDamage;		// does ice damage
bool bSeekerMissile;		// is a seeker (for reflection)
bool bReflective;		// reflects missiles
bool bWaterJump;
bool bBlaster;
bool bDamageInvulnerable;	// These inflictors aren't foiled by invulnerability
bool bNoSplash;			// Things that don't splash
bool bNoMorph;			// Won't morph into a pig.
bool bStaticLight;		// Static light source.
bool bEnemy;			// [FB] A monster enemy for bots to attack

float Speed;
float PainChance;
int SpawnHealth;
int GibsHealth;

int experience;

// Thing being chased/attacked (or none).
Actor Enemy;
// The originator for missiles.
Actor Instigator;

int _Special1;	// Special info
int _Special2;	// Special info
float Special1f;
float Special2f;
class<Actor> SpecialCID;

int MissileDamage;	// For missiles

// Reaction time: if non 0, don't attack yet.
int ReactionCount;

// Used by player to freeze a bit after teleporting.
float ReactionTime;

TVec teleport_pos;

int bombdamage;
float bombdistance;
bool DamageSource;

// Height if not aiming up or down
// ???: use slope for monsters?
float aim_z;
float aim_range;
float aim_slope;
TVec aim_dir;
float aim_topslope;
float aim_bottomslope;	// slopes to top and bottom of target
float aim_range2d;
TVec hit_point;
Actor linetarget;	// who got hit (or none)

float shoot_range;
TVec shoot_origin;
TVec shoot_dir;
int la_damage;
TVec shoot_linestart;
TVec shoot_lineend;

class<Actor> shootPuffType;

TVec LightOffset;
int LightColour;
float LightRadius;
int ExplodeEffect;

// [CW] Death message index; used by those who can damage directly
//		(anything from enviroment to pawns with melee attacks)
//		Messages themselves are members of MainGameInfo.
int deathmsgi;


//------------------ OLD VERSION ----- REMOVE ME LATER -----------------------------------
/*//[CW] Death messages indices; first is used for objects, spawned by player weapon and
// for pawns' melee attacks, second - for objects, spawned by non-player pawns,
// third is for enviromental objects, traps etc.
// Messages themselves are members of MainGameInfo.
int deathmsgi[3];*/
//------------------ OLD VERSION ----- REMOVE ME LATER -----------------------------------

//==========================================================================
//
//	Spawn
//
//==========================================================================

Actor Spawn(class<Actor> type, TVec position)
{
	Actor A;

	A = Actor(NewMobjThinker(type));
	A.Origin = position;
	A.OnMapSpawn(NULL);
	return A;
}

//==========================================================================
//
//	MoveToFreePosition
//
//	[CW]
//
//==========================================================================

bool MoveToFreePosition()
{
	TVec bak_org;
	float test_ang;
	TVec test_dir;
	float test_dist;

	bak_org = Origin;
	test_dir = vector(1.0, 0.0, 0.0);

	dprint("MoveToFreePosition :: Origin = %f, %f, %f", Origin.x, Origin.y, Origin.z);
	dprint("MoveToFreePosition :: START ----------");

	for (test_dist = 0.0; test_dist <= 512.0; test_dist += 64.0)
	{
		dprint("MoveToFreePosition :: test_distance = %f", test_dist);
		for (test_ang = 0.0; test_ang < 360.0; test_ang += 45.0)
		{
			dprint("MoveToFreePosition :: test_angle = %f", test_ang);
			VectorRotateAroundZ(&test_dir, test_ang);
			UnlinkFromWorld();
			Origin = bak_org + test_dir * test_dist;
			LinkToWorld();

			dprint("MoveToFreePosition :: test location = %f,%f,%f", Origin.x, Origin.y, Origin.z);

			if (TestLocation()/*TeleportMove(bak_org + test_dir * test_dist)*/)
			{
				dprint("MoveToFreePosition :: SUCCEED ----------");
				dprint("MoveToFreePosition :: Free Origin = %f, %f, %f", Origin.x, Origin.y, Origin.z);
				return true;
			}

			if (test_dist == 0.0)
				break;
		}
		dprint("MoveToFreePosition :: test location distance failed, next?");
	};

	dprint("MoveToFreePosition :: FAILED ----------");

	UnlinkFromWorld();
	Origin = bak_org;
	LinkToWorld();
	return false;
}

//===========================================================================
//
//  SetInstigator
//
//===========================================================================

void SetInstigator(Entity NewInstigator)
{
	Instigator = Actor(NewInstigator);
}

//===========================================================================
//
//  PlaySightSound
//
//===========================================================================

void PlaySightSound()
{
	if (SightSound)
	{
		PlaySound(SightSound, CHAN_VOICE);
	}
}

//===========================================================================
//
//  SetDropped
//
//===========================================================================

void SetDropped()
{
	bDropped = true;
}

//===========================================================================
//
//  StartFloatBob
//
//===========================================================================

void StartFloatBob(Entity Src)
{
	if (bFloatBob)
	{
		Origin.z = Src.Origin.z - Src.FloorZ;
		SetOrigin2(Origin);
	}
}

//===========================================================================
//
//  ThingDestroy
//
//===========================================================================

bool ThingDestroy()
{
	if (bShootable)
	{
		Damage(none, none, 10000);
		return true;
	}
	return false;
}

//===========================================================================
//
//  ThingDamage
//
//===========================================================================

void ThingDamage(int Amount)
{
	Damage(none, none, Amount);
}

//===========================================================================
//
//  IsTeleportSpot
//
//===========================================================================

bool IsTeleportSpot()
{
	return !!TeleportSpot(self);
}

//===========================================================================
//
//  IsTeleportSpot2
//
//===========================================================================

bool IsTeleportSpot2()
{
	return !!TeleportSpot2(self);
}

//===========================================================================
//
//  CanTeleport
//
//===========================================================================

bool CanTeleport()
{
	return !bNoTeleport;
}

//===========================================================================
//
//  SetPainState
//
//===========================================================================

void SetPainState()
{
	SetState(PainState);
}

//===========================================================================
//
//  IsPointPusher
//
//===========================================================================

bool IsPointPusher()
{
	return !!PointPusher(self);
}

//===========================================================================
//
//  IsPointPuller
//
//===========================================================================

bool IsPointPuller()
{
	return !!PointPuller(self);
}

//===========================================================================
//
//  CanWindThrust
//
//===========================================================================

bool CanWindThrust()
{
	return bWindThrust;
}

//===========================================================================
//
//  GetPlayerViewHeight
//
//===========================================================================

float GetPlayerViewHeight()
{
	return Player(Player).ViewHeight;
}

//===========================================================================
//
//  MoveThing
//
//===========================================================================

bool MoveThing(TVec Pos, bool Fog)
{
	TVec OldOrg = Origin;

	UnlinkFromWorld();
	Origin = Pos;
	LinkToWorld();
	if (TestLocation())
	{
		if (Fog)
		{
			LineSpecialLevelInfo(Level).SpawnTeleportFog(Pos);
			LineSpecialLevelInfo(Level).SpawnTeleportFog(OldOrg);
		}
		return true;
	}
	else
	{
		UnlinkFromWorld();
		Origin = OldOrg;
		LinkToWorld();
		return false;
	}
}

//==========================================================================
//
//  HITDICE
//
//  Most damage in HERETIC and HEXEN defined using HITDICE
//
//==========================================================================

int HITDICE(int a)
{
	return (1 + (P_Random() & 7)) * a;
}

//===========================================================================
//
//  GetFloorType
//
//===========================================================================

VTerrainInfo* GetFloorType()
{
	return TerrainType(Floor->pic);
}

//==========================================================================
//
//  SetOrigin2
//
//==========================================================================

void SetOrigin2(TVec origin)
{
	float space;

	SetOrigin(origin);
	// Set subsector and/or block links.
	LinkToWorld();
	if (origin.z == ONFLOORZ)
	{
		origin.z = FloorZ;
	}
	else if (origin.z == ONCEILINGZ)
	{
		origin.z = CeilingZ - Height;
	}
	else if (origin.z == FLOATRANDZ)
	{
		space = CeilingZ - Height - FloorZ;
		if (space > 48.0)
		{
			space -= 40.0;
			origin.z = space * Random() + FloorZ + 40.0;
		}
		else
		{
			origin.z = FloorZ;
		}
	}
	else if (bFloatBob)
	{
		origin.z = FloorZ + origin.z;	// artifact z passed in as height
	}
	SetOrigin(origin);
	VTerrainInfo* TInfo = GetFloorType();
	if (bFloorClip && TInfo->bLiquid && Origin.z == FloorZ)
	{
		FloorClip = TInfo->FootClip;
	}
	else
	{
		FloorClip = 0.0;
	}
}

//==========================================================================
//
//	OnMapSpawn
//
//==========================================================================

void OnMapSpawn(mthing_t * mthing)
{
	SpawnHealth = Health;
	bCheckLineBlocking = false;
	bCheckLineBlockMonsters = false;
	if (!bMissile)
	{
		bCheckLineBlocking = true;
		/*if (Class != PlayerFighter && Class != PlayerCleric &&
			Class != PlayerMage && Class != PlayerPig)*/
		if (!bPickUp && Class!=PlayerPig)
		{
//[Korax]
			bCheckLineBlockMonsters = true;
	        	experience = SpawnHealth;
		}
	}

	// Set the state, but do not use P_SetMobjState, because action
	// routines can't be called yet.  If the spawnstate has an action
	// routine, it will not be called.
	SetInitialState(IdleState);

	if (mthing)
	{
		float x, y, z;

		x = mthing->x;
		y = mthing->y;
		if (Class == ZCorpseLynchedNoHeart)
		{
			// Special stuff
			Spawn(BloodPool, vector(x, y, ONFLOORZ));
		}

		if (bSpawnCeiling)
		{
			z = ONCEILINGZ;
		}
		else if (bSpawnFloat)
		{
			z = FLOATRANDZ;
		}
		else if (bFloatBob)
		{
			z = mthing->height;
		}
		else
		{
			z = ONFLOORZ;
		}
		SetOrigin2(vector(x, y, z));
		if (z == ONFLOORZ)
		{
			Origin.z += mthing->height;
		}
		else if (z == ONCEILINGZ)
		{
			Origin.z -= mthing->height;
		}
		LinkToWorld();
		TID = mthing->tid;
		Special = mthing->special;
		Args[0] = mthing->arg1;
		Args[1] = mthing->arg2;
		Args[2] = mthing->arg3;
		Args[3] = mthing->arg4;
		Args[4] = mthing->arg5;
		if (bFloatBob)
		{
			// Seed random starting index for bobbing motion
			Health = P_Random();
			Special1f = mthing->height;
		}
		if (StateTime > 0.0)
		{
			StateTime = 0.1 + Random() * StateTime;
		}
		if (bCountKill)
		{
			// Quantize angle to 45 degree increments
			Angles.yaw = itof(45 * (mthing->angle / 45));
			// [FB] Count for the total kills in the map
			Level.Game.level->totalkills++;
		}
		else
		{
			// Scale angle correctly (source is 0..359)
			Angles.yaw = itof(mthing->angle);
		}
		if (mthing->options & HexenLevelInfo::MTF_AMBUSH)
		{
			bAmbush = true;
		}
		if (mthing->options & HexenLevelInfo::MTF_DORMANT)
		{
			SetDormant();
		}
	}
	else
	{
		SetOrigin2(Origin);
	}

	if (bStaticLight && mthing && !TID)
	{
		if (LightColour == 0xffffffff)
		{
			Level.AddStaticLight(Origin + LightOffset, mthing->arg1 ?
				itof(mthing->arg1) * 8.0 : LightRadius);
		}
		else
		{
			Level.AddStaticLightRGB(Origin + LightOffset, mthing->arg1 ?
				itof(mthing->arg1) * 8.0 : LightRadius, LightColour);
		}
	}
}

//==========================================================================
//
//	Destroyed
//
//==========================================================================

void Destroyed()
{
	// Remove from creature queue
	if (bCountKill && bCorpse)
	{
		A_DeQueueCorpse();
	}

	::Destroyed();
}

//==========================================================================
//
//  HitFloorType
//
//==========================================================================

bool HitFloorType()
{
	Actor A;
	int smallsplash = false;
	VTerrainInfo* TInfo;
	VSplashInfo* SInfo;

	if (FloorZ != GetPlanePointZ(&Sector->floor, Origin))
	{
		// don't splash if landing on the edge above water/lava/etc....
		return false;
	}

	// Things that don't splash go here
	if (bNoSplash)
	{
		return false;
	}

	TInfo = GetFloorType();

	// Small splash for small masses
	if (Mass < 10.0)
		smallsplash = true;

	if (TInfo->DamageAmount && bIsPlayer &&
		Level.Game.level->tictime & TInfo->DamageTimeMask)
	{
		Damage(TInfo->DamageType == 'lava' ? HexenLevelInfo(
			Level).GLavaInflictor : none, none, TInfo->DamageAmount);
	}

	SInfo = GetSplashInfo(TInfo->Splash);
	if (!SInfo)
	{
		return TInfo->bLiquid;
	}

	if (smallsplash)
	{
		if (SInfo->SmallClass)
		{
			A = Spawn(class<Actor>(SInfo->SmallClass), Origin);
			A.FloorClip += SInfo->SmallClip;
			if (SInfo->SmallSound)
			{
				A.PlaySound(SInfo->SmallSound, CHAN_VOICE);
			}
		}
	}
	else
	{
		if (SInfo->BaseClass)
		{
			Spawn(class<Actor>(SInfo->BaseClass), Origin);
			if (SInfo->Sound && !SInfo->ChunkClass)
			{
				A.PlaySound(SInfo->Sound, CHAN_VOICE);
			}
		}
		if (SInfo->ChunkClass)
		{
			A = Spawn(class<Actor>(SInfo->ChunkClass), Origin);
			A.Instigator = self;
			A.Velocity.x = (Random() - Random()) * SInfo->ChunkXVelMul * 35.0;
			A.Velocity.y = (Random() - Random()) * SInfo->ChunkYVelMul * 35.0;
			A.Velocity.z = (SInfo->ChunkBaseZVel + Random() *
				SInfo->ChunkZVelMul) * 35.0;
			if (SInfo->Sound)
			{
				A.PlaySound(SInfo->Sound, CHAN_VOICE);
			}
		}
		if (SInfo->Sound && !SInfo->BaseClass && !SInfo->ChunkClass)
		{
			PlaySound(SInfo->Sound, CHAN_BODY);
		}
		if (!SInfo->bNoAlert && bIsPlayer)
		{
			HexenLevelInfo(Level).NoiseAlert(self, self);
		}
	}
	return TInfo->bLiquid;
}

//==========================================================================
//
//  FloorBounceMissile
//
//==========================================================================

void FloorBounceMissile()
{
	if (HitFloorType())
	{
		Remove();
		return;
	}
	Velocity.z = Velocity.z * -0.7;
	Velocity.x = 2.0 * Velocity.x / 3.0;
	Velocity.y = 2.0 * Velocity.y / 3.0;
	if (SightSound)
	{
		PlaySound(SightSound, CHAN_VOICE);
	}
}

//==========================================================================
//
//  FloorBounceActor
//
//  [FB] New variant for soccer ball
//
//==========================================================================

void FloorBounceActor()
{
	Velocity.z = Velocity.z * -0.7;
	Velocity.x = 2.0 * Velocity.x / 3.0;
	Velocity.y = 2.0 * Velocity.y / 3.0;
	if (SightSound)
	{
		PlaySound(SightSound, CHAN_VOICE);
	}
}


//==========================================================================
//
//  Thrust
//
//==========================================================================

void Thrust(float angle, float move)
{
	Velocity.x += move * cos(angle) * 35.0;
	Velocity.y += move * sin(angle) * 35.0;
}

//==========================================================================
//
//  Thrust3d
//
//	[CW] A three-dimensional vector variant of Thrust, that
//		 uses vector angles and single vector length.
//
//==========================================================================

void Thrust3d(float angle2d, float angle3, float move)
{
	Thrust(angle2d, move * cos(angle3));
	Velocity.z += move * sin(angle3) * 35.0;
}

//==========================================================================
//
//  Thrust3d2
//
//	[CW] Variant of Thrust3d, that allows implicit definition
//	     of horizontal and vertical velocities.
//
//==========================================================================

void Thrust3d2(float angle2d, float move2d, float move3)
{
	Thrust(angle2d, move2d);
	Velocity.z += move3 * 35.0;
}

//==========================================================================
//
//  FaceActor
//
//  Returns 1 if 'source' needs to turn clockwise, or 0 if 'source' needs
// to turn counter clockwise.  'delta' is set to the amount 'source'
// needs to turn.
//
//==========================================================================

int FaceActor(Actor target, float *delta)
{
	float diff;
	float angle1;
	float angle2;

	angle1 = Angles.yaw;
	angle2 = atan2(target.Origin.y - Origin.y, target.Origin.x - Origin.x);
	if (angle2 > angle1)
	{
		diff = AngleMod360(angle2 - angle1);
		if (diff > 180.0)
		{
			*delta = 360.0 - diff;
			return 0;
		}
		else
		{
			*delta = diff;
			return 1;
		}
	}
	else
	{
		diff = AngleMod360(angle1 - angle2);
		if (diff > 180.0)
		{
			*delta = 360.0 - diff;
			return 1;
		}
		else
		{
			*delta = diff;
			return 0;
		}
	}
}

//==========================================================================
//
//  MonsterFallingDamage
//
//==========================================================================

void MonsterFallingDamage()
{
	int damage;
	float mom;

	mom = fabs(Velocity.z) / 35.0;
	if (mom > 35.0)
	{
		// automatic death
		damage = 10000;
	}
	else
	{
		damage = ftoi((mom - 23.0) * 6.0);
	}
	damage = 10000;	// always kill 'em
	Damage(none, none, damage);
}

//==========================================================================
//
//  ActiveMinotaur
//
//  Search thinker list for minotaur
//
//==========================================================================

Actor ActiveMinotaur()
{
	Minotaur mo;

	FOREACH(Minotaur, mo)
	{
		if (mo.Health <= 0)
			continue;
		if (!mo.bCountKill)
			continue;	// for morphed minotaurs
		if (mo.bCorpse)
			continue;
		if ((Level.Game.level->tictime - mo.Args[0]) >= ftoi(Player::MAULATORTIME * 35.0))
			continue;
		if (mo.Instigator == self)
			return mo;
	}
	return none;
}

//==========================================================================
//
//  Died
//
//==========================================================================

void Died(Actor source)
{
	int i;

	bShootable = false;
	bNoGravity = false;
	bFloat = false;
	bSkullFly = false;
	bDropOff = true;
	bCorpse = true;
	bNoPassMobj = true;
	Height /= 4.0;

	// [FB] There's no other decent place to put this...
	//  Remove muzzle flash
	if ((Effects & HexenDefs::EF_DLIGHT_MASK) == HexenDefs::EF_DL_MUZZLEFLASH)
	{
		Effects &= ~HexenDefs::EF_DLIGHT_MASK;
	}
	if ((bCountKill || Class == ZBell) && Special)
	{
		// Initiate monster death actions
		if (Class == Sorcerer)
		{
			XLevel.StartACS(Special, 0, 0, 0, 0, self, NULL, 0, false, false);
		}
		else
		{
			Level.ExecuteActionSpecial(Special, Args[0], Args[1], Args[2],
				Args[3], Args[4], NULL, 0, self);
		}
	}
	if (bCountKill)
	{
		Level.Game.level->currentkills++;
		if (Level.Game.deathmatch == HexenDefs::game_sweep || Level.Game.deathmatch == HexenDefs::game_sweepteam)
		{
			// [FB] Update total kills if needed
			for (i = 0; i < MAXPLAYERS; i++)
			{
				if (Level.Game.Players[i])
					Player(Level.Game.Players[i]).TotalKills = (Level.Game.level->totalkills - Level.Game.level->currentkills);
			}
		}
	}
	if (source && source.bIsPlayer)
	{
		// [CW] check for "accuracy" trophy
		if (bCountKill || bIsPlayer)
		{
			if (Length(Player(source.Player).Trophies.shot_position - MobjCentre(self)) >=
					HexenDefs::ACCURATE_SHOT_DISTANCE)
				Player(source.Player).ConfirmTrophy(HexenDefs::trophycl_accuracy);
		}

		// [FB] Increase the player's KillCount
		if (bCountKill)
		{
			source.Player.KillCount++;
			Player(source.Player).KillsCount++;

			//[CW] update player's score
			Player(source.Player).UpdateScore(HexenDefs::scoreevent_Kill);

			//[CW] update kill trophies
			Player(source.Player).UpdateQueuedTrophy(HexenDefs::trophycl_killsatonce, 1);
			Player(source.Player).UpdateQueuedTrophy(HexenDefs::trophycl_killsrow, 1);
		}
	
		// Check for frag changes
		if (bIsPlayer)
		{
			if (source.Player.bIsBot)
			{
				Player(source.Player).Bot.Killed(self);
			}

			if (Player.bIsBot)
			{
				Player(Player).Bot.Died(source);
			}

			if (self == source)
			{
				// Self-frag
				Player.FragsStats[Player.GetPlayerNum()]--;
				Player.Frags--;

				Player(Player).UpdateScore(HexenDefs::scoreevent_SelfFrag);

				//[CW] update death row trophy
				Player(Player).UpdateQueuedTrophy(HexenDefs::trophycl_deathsrow, 1);
			}
			else
			{
				int se = HexenDefs::scoreevent_Frag;

				source.Player.FragsStats[Player.GetPlayerNum()]++;
				source.Player.Frags++;
				Player(source.Player).GiveExperience(500 + (500 * (Player(Player).exp_level - 1) / 10));

				if (MainGameInfo(Level.Game).GameMode)
					se = MainGameInfo(Level.Game).GameMode.GetFragScoreEvent(Player(source.Player), Player(self.Player));

				Player(source.Player).UpdateScore(se);

				//[CW] update frag trophies
				Player(source.Player).UpdateQueuedTrophy(HexenDefs::trophycl_fragsatonce, 1);
				Player(source.Player).UpdateQueuedTrophy(HexenDefs::trophycl_fragsrow, 1);
			}
		}
	}

	if (bIsPlayer)
	{
		//[CW] notify advanced game mode
		if (MainGameInfo(Level.Game).GameMode)
			MainGameInfo(Level.Game).GameMode.NotifyPlayerDeath(Player(Player), source);

		//[CW] update death row trophy and end frags/kills rows
		Player(Player).UpdateQueuedTrophy(HexenDefs::trophycl_deathsrow, 1);
		Player(Player).ConfirmTrophy(HexenDefs::trophycl_fragsatonce);
		Player(Player).ConfirmTrophy(HexenDefs::trophycl_killsatonce);
		Player(Player).ConfirmTrophy(HexenDefs::trophycl_fragsrow);
		Player(Player).ConfirmTrophy(HexenDefs::trophycl_killsrow);

		//[CW] Show scoreboard for died player
		Player(Player).Scoreboard(true);

		if (Player(Player).Morph.bMorphed)
			Player(Player).bRecalculateLevelOnRespawn = true;

		// Player death
		if (!source)
		{
			// Self-frag
			if (Level.Game.deathmatch == HexenDefs::game_dmteam)
			{
				Player.FragsStats[Player.Colour]--;
			}
			else
			{
				Player.FragsStats[Player.GetPlayerNum()]--;
			}
			Player.Frags--;
		}
		bSolid = false;
		bFly = false;
		Player(Player).Powers[pw_flight] = 0.0;
		Player.PlayerState = PST_DEAD;
		Player(Player).SetFOV(HexenDefs::DEFAULT_FOV);
		Player(Player).DropWeapon();
		if (bFireDamage && BurnDeathState)
		{
			// Player flame death
			PlaySound('*burndeath', CHAN_VOICE);
			SetState(BurnDeathState);
			return;
		}
		if (bIceDamage)
		{
			// Player ice death
			Translation = 0;	//no translation
			bIceCorpse  = true;
			SetState(IceDeathState);
			return;
		}
	}
//[Korax]
	if (source && !bIsPlayer)
	{
		if (!source.bIsPlayer)
		{
			source.experience += ftoi(itof(experience) * ((90.0 + 
				itof(P_Random()) / 255.0 * 21.0) / 100.0));  //RPG
		}
		else
		{
			Player(source.Player).GiveExperience(ftoi(itof(experience) * ((90.0 + 
				itof(P_Random()) / 255.0 * 21.0) / 100.0) * (Level.Game.gameskill < 2 ? 
				125.0 : (Level.Game.gameskill < 3 ? 100.0 : 80.0)) / 100.0));
		}
	}
//[Korax]
	if (bFireDamage)
	{
		if (Class == FighterBoss)
 		{
			PlaySound('PlayerFighterBurnDeath', CHAN_VOICE);//Boss
			SetState(S_PLAY_F_FDTH1);
			return;
 		}
 		if (Class == ClericBoss)
		{
			PlaySound('PlayerClericBurnDeath', CHAN_VOICE);//Boss
			SetState(S_PLAY_C_FDTH1);
			return;
		}
		if (Class == MageBoss)
		{
			PlaySound('PlayerMageBurnDeath', CHAN_VOICE);//Boss
			SetState(S_PLAY_M_FDTH1);
			return;
		}
		if (Class == TreeDestructible)
		{
			SetState(S_ZTREEDES_X1);
			Height = 24.0;
			PlaySound('TreeExplode', CHAN_VOICE);
			return;
		}
	}
	if (bIceDamage && IceDeathState)
	{
		bIceCorpse = true;
		SetState(IceDeathState);
		return;
	}

	if (Class == TreeDestructible)
	{
		Height = 24.0;
	}
	if (Health < GibsHealth && GibsDeathState)
	{
		// Extreme death
		SetState(GibsDeathState);
	}
	else
	{	// Normal death
		if ((Class == FireDemon) && (Origin.z <= FloorZ + 2.0) &&
			GibsDeathState)
		{
			// This is to fix the imps' staying in fall state
			SetState(GibsDeathState);
		}
		else
		{
			SetState(DeathState);
		}
	}
	StateTime -= Random() * 0.1;
}

//==========================================================================
//
//  MinotaurSlam
//
//==========================================================================

void MinotaurSlam(Actor source)
{
	float angle;
	float thrust;

	angle = atan2(Origin.y - source.Origin.y, Origin.x - source.Origin.x);
	thrust = 16.0 + Random() * 4.0;
	Velocity.x += thrust * cos(angle) * 35.0;
	Velocity.y += thrust * sin(angle) * 35.0;
	Damage(none, source, HITDICE(4));
	if (bIsPlayer)
	{
		ReactionTime = 0.4 + Random() * 0.2;
	}
	source.Args[4] = 0;	// Stop charging
}

//==========================================================================
//
//  TouchWhirlwind
//
//==========================================================================

void TouchWhirlwind(Actor Other)
{
	float randVal;

	Other.Angles.yaw = AngleMod360(Other.Angles.yaw +
		(Random() - Random()) * 45.0 / 2.0);
	Other.Velocity.x += (Random() - Random()) * 4.0 * 35.0;
	Other.Velocity.y += (Random() - Random()) * 4.0 * 35.0;
	if (Level.Game.level->tictime & 16 && !Other.bBoss)
	{
		randVal = Random() * 4.0;
		if (randVal > 2.5)
		{
			randVal = 2.5;
		}
		Other.Velocity.z += randVal * 35.0;
		if (Other.Velocity.z > 12.0 * 35.0)
		{
			Other.Velocity.z = 12.0 * 35.0;
		}
	}
	if (!(Level.Game.level->tictime & 7))
	{
		Other.Damage(none, Instigator, 6);
	}
}

//==========================================================================
//
//  MorphPlayer
//
//  [CW] Morph player into... err... something
//
//==========================================================================

bool MorphPlayer(int pclass, class<Actor> moclass, bool timed, bool until_death)
{
	Actor fog;
	Actor beastMo;
	int i;
	int bak_level;

	if (Player(Player).Powers[pw_invulnerability])
	{
		// Immune when invulnerable
		return (false);
	}
	if (Player(Player).Morph.bMorphed/*MorphTime*/)
	{
		// Player is already a beast
		return false;
	}

	fog = Spawn(TeleportFog, Origin + vector(0.0, 0.0, TELEFOGHEIGHT));
	fog.PlaySound('Teleport', CHAN_VOICE);

	beastMo = Spawn(/*PlayerPig*/moclass, Origin);
	beastMo._Special1 = Player(Player).ReadyWeapon;
	beastMo.Angles = Angles;
	beastMo.Player = Player;
	beastMo.bIsPlayer = true;
	////////////////////beastMo.Health = beastMo.SpawnHealth;	////Player::MAXMORPHHEALTH;
	Player(Player).HealthBig = beastMo.Health;
	Player.Health = Player(Player).HealthBig > 0xff ? 0xff : Player(Player).HealthBig;
	Player.MO = beastMo;
/*	for (i = 0; i < NUMARMOR; i++)
	{
		Player.ArmorPoints[i] = 0.0;
	}
*/
	Player(Player).ArmorPoints = 0;
	Player.PClass = pclass/*HexenDefs::PCLASS_PIG*/;
	beastMo.bFly = bFly;
	Player(Player).Morph.bMorphed = true;
	Player(Player).Morph.bTimer = timed;
	Player(Player).Morph.bUntilDeath = until_death;
	if (timed)
		Player(Player).Morph.MorphTime = Player::MORPHTIME;
	Player(Player).ActivateMorphWeapon();

	// [CW] If morphed player cannot move from current position try to find more appropriate position or him
	if (Actor(Player.MO).MoveToFreePosition())
	{
		fog = Spawn(TeleportFog, Player.MO.Origin + vector(0.0, 0.0, TELEFOGHEIGHT));
		fog.PlaySound('Teleport', CHAN_VOICE);
	}

	dprint("MorphPlayer: after MTFP: MO.Origin = %f, %f, %f", Player.MO.Origin.x, Player.MO.Origin.y, Player.MO.Origin.z);

	// [CW] Recalc attributes based on the new player's body
	bak_level = Player(Player).exp_level;
	Player(Player).InitiateLevel();
	Player(Player).ActivateLevel(bak_level, false);

	SetState(S_FREETARGMOBJ);

	return true;
}

//==========================================================================
//
//  MorphMonster
//
//==========================================================================

bool MorphMonster()
{
	Actor monster;
	Actor fog;
	int i;

	if (bIsPlayer)
		return false;
	if (!bCountKill)
		return false;
	if (bBoss)
		return false;
	if (bNoMorph)
		return false;

	fog = Spawn(TeleportFog, Origin + vector(0.0, 0.0, TELEFOGHEIGHT));
	fog.PlaySound('Teleport', CHAN_VOICE);

	monster = Spawn(Pig, Origin);
	monster.SpecialCID = class<Actor>(Class);
	monster._Special1 = ftoi(Player::MORPHTIME * 35.0) + P_Random();
	monster.Alpha = Alpha;
	monster.Enemy = Enemy;
	monster.Angles.yaw = Angles.yaw;
	monster.TID = TID;
	monster.Special = Special;
	monster.InsertIntoTIDList(TID);
	for (i = 0; i < 5; i++)
	{
		monster.Args[i] = Args[i];
	}

	RemoveFromTIDList();

	SetState(S_FREETARGMOBJ);

	return true;
}

//==========================================================================
//
//  AutoUseHealth
//
//==========================================================================

void AutoUseHealth(int saveHealth)
{
	int i;
	int count;
	int normalCount;
	int normalSlot = 0;
	int superCount;
	int superSlot = 0;

	normalCount = 0;
	superCount = 0;
	for (i = 0; i < Player(Player).InventorySlotNum; i++)
	{
		if (Player(Player).Inventory[i].type == HexenDefs::arti_health)
		{
			normalSlot = i;
			normalCount = Player(Player).Inventory[i].count;
		}
		else if (Player(Player).Inventory[i].type == HexenDefs::arti_superhealth)
		{
			superSlot = i;
			superCount = Player(Player).Inventory[i].count;
		}
	}
	if ((Level.Game.gameskill == sk_baby) && (normalCount * 25 >= saveHealth))
	{
		// Use quartz flasks
		count = (saveHealth + 24) / 25;
		for (i = 0; i < count; i++)
		{
			Health += 25;
			Player(Player).PlayerRemoveArtifact(normalSlot);
		}
	}
	else if (superCount * 100 >= saveHealth)
	{
		// Use mystic urns
		count = (saveHealth + 99) / 100;
		for (i = 0; i < count; i++)
		{
			Health += 100;
			Player(Player).PlayerRemoveArtifact(superSlot);
		}
	}
	else if ((Level.Game.gameskill == sk_baby)
		&& (superCount * 100 + normalCount * 25 >= saveHealth))
	{
		// Use mystic urns and quartz flasks
		count = (saveHealth + 24) / 25;
		saveHealth -= count * 25;
		for (i = 0; i < count; i++)
		{
			Health += 25;
			Player(Player).PlayerRemoveArtifact(normalSlot);
		}
		count = (saveHealth + 99) / 100;
		for (i = 0; i < count; i++)
		{
			Health += 100;
			// The same as in HERETIC
			Player(Player).PlayerRemoveArtifact(normalSlot);
		}
	}
	Player(Player).HealthBig = Health;
	Player.Health = Player(Player).HealthBig > 0xff ? 0xff : Player(Player).HealthBig;;
}

//==========================================================================
//
//  Damage
//
//  Damages both enemies and players
//  inflictor is the thing that caused the damage - creature or missile,
// can be NULL (slime, etc)
//  source is the thing to target after taking damage - creature or NULL
//  Source and inflictor are the same for melee attacks
//  source can be null for barrel explosions and other environmental stuff
//
//==========================================================================

void Damage(Actor inflictor, Actor source, int damage)
{
	float saved;
	float savedPercent;
	Actor master;
	int i;

	if (!bShootable)
	{
		// Shouldn't happen
		return;
	}
	if (Health <= 0)
	{
		if (inflictor && inflictor.bIceDamage)
		{
			return;
		}
		else if (bIceCorpse)	// frozen
		{
			StateTime = 0.1;
			Velocity.x = 0.0;
			Velocity.y = 0.0;
		}
		return;
	}
	if (bInvulnerable && damage < 10000)
	{
		// mobj is invulnerable
		if (bIsPlayer)
			return;	// for player, no exceptions
		if (!inflictor || !inflictor.bDamageInvulnerable)
			return;
	}
	if (bIsPlayer)
	{
		if (damage < 1000 && ((Player(Player).Cheats & Player::CF_GODMODE)
				|| Player(Player).Powers[pw_invulnerability]))
		{
			return;
		}
	}
	if (bSkullFly)
	{
		Velocity = vector(0.0, 0.0, 0.0);
		SetState(SeeState);
	}
	if (bDormant)
	{
		// Invulnerable, and won't wake up
		return;
	}
	if (bIsPlayer && Level.Game.gameskill == sk_baby)
	{
		// Take half damage in trainer mode
		damage >>= 1;
	}
	// Special damage types
	if (inflictor)
	{
		damage = inflictor.InflictorModifyDamage(self, source, damage);
		if (damage < 0)
		{
			return;
		}
	}
	// Push the target
	if (inflictor && (!source || !source.bIsPlayer) &&
		!inflictor.bNoDamageThrust)
	{
		TVec dir;
		float thrust;

		thrust = itof(damage) / Mass * 656.25;
		dir = Normalise(MobjCentre(self) - MobjCentre(inflictor));
		Velocity += dir * thrust;
	}

	//
	// player specific
	//
	if (bIsPlayer)
	{
		//	End of game hell hack.
		if ((Sector->special & SECSPEC_BASE_MASK) ==
			SECSPEC_DamageSuperHellslimeExit && damage >= Health)
		{
			damage = Health - 1;
		}

		// [CW] Check advanced game Team Factor
		if (source && (source.bIsPlayer || source.Instigator && source.Instigator.bIsPlayer) &&
							MainGameInfo(Level.Game).GameMode)
		{
			int teamfactor = MainGameInfo(Level.Game).GameMode.TeamFactor(self,
										source.bIsPlayer ? source : source.Instigator);
			if (teamfactor == Game::teamfactor_coop)
				return;
		}

		// [FB] Don't do damage to teammates in team game modes
		if ((Level.Game.deathmatch >= HexenDefs::NUMGAMESNOTEAM)
		    && (source && ((source.bIsPlayer) || (source.Instigator
		    && source.Instigator.bIsPlayer))))
		{
			int col = (source.bIsPlayer?source.Player.Colour:source.Instigator.Player.Colour);
			if (col == Player.Colour && damage < 1000)
				return;
		}

		if (!Level.Game.deathmatch && (source && ((source.bIsPlayer) ||
		   (source.Instigator && source.Instigator.bIsPlayer))))
		{
			if (damage < 1000)
				return;
		}

//[Korax]
/*		savedPercent = itof(Player.constitution)+AutoArmorSave[Player.PClass]
			+ Player.ArmorPoints[ARMOR_ARMOR]
			+ Player.ArmorPoints[ARMOR_SHIELD]
			+ Player.ArmorPoints[ARMOR_HELMET]
			+ Player.ArmorPoints[ARMOR_AMULET];
		if (savedPercent)
		{
			// armor absorbed some damage
			if (savedPercent > 100.0)
			{
				savedPercent = 100.0;
			}
			for (i = 0; i < NUMARMOR; i++)
			{
				if (Player.ArmorPoints[i])
				{
					Player.ArmorPoints[i] -= itof(damage) *
						ArmorIncrement[Player.PClass * NUMARMOR + i] / 300.0;
					if (Player.ArmorPoints[i] < 2.0)
					{
						Player.ArmorPoints[i] = 0.0;
					}
				}
			}
			saved = itof(damage) * savedPercent / 100.0;
			if (saved > savedPercent * 2.0)
			{
				saved = savedPercent * 2.0;
			}
			damage -= ftoi(saved);
		}
*/		
//Old Armor handling above
		saved = itof(damage) * itof(40 + Player(Player).constitution) / 100.0;
//		savedPercent = itof(damage) * itof(60-Player.constitution) / 100.0;
		if (savedPercent > itof(Player(Player).ArmorPoints)) 
		{
			saved = (itof(Player(Player).ArmorPoints) * itof(40 + Player(Player).constitution)) / 100.0;
//			savedPercent = itof(Player.ArmorPoints) * itof(60-Player.constitution) / 100.0;
		}
		damage -= ftoi(saved);
		if (damage < 1) // [FB] Always do damage no matter what
		{
			damage = 1;
		}
		Player(Player).ArmorPoints -= ftoi(saved);//Percent
		if (Player(Player).ArmorPoints < 0)
		{
			Player(Player).ArmorPoints = 0; // [FB] No negative armor points
		}
		if (damage >= Player(Player).HealthBig
			&& ((Level.Game.gameskill == sk_baby) || Level.Game.deathmatch) &&
			Player(Player).PClass != HexenDefs::PCLASS_PIG/*!Player(Player).MorphTime*/)
		{
			// Try to use some inventory health
			AutoUseHealth(damage - Health + 1);
		}
		Player(Player).HealthBig -= damage;	// mirror mobj health here for Dave
		Player.Health = Player(Player).HealthBig > 0xff ? 0xff : Player(Player).HealthBig;;
		if (Player(Player).HealthBig < 0)
		{
			Player(Player).HealthBig = 0;
			Player.Health = 0;
		}
		Player(Player).Attacker = source;
		Player(Player).DamageFlash += itof(damage) / 35.0;	// add damage after armor / invuln
		if (Player(Player).DamageFlash > 3.0)
		{
			Player(Player).DamageFlash = 3.0;	// teleport stomp does 10k points...
		}

		// [FB] We need to know how much damage the player took for the hero's shield
		//      so we store it in our recently created damage amount attribute
		Player(Player).dam_am = damage;
	}

	//
	// do the damage
	//
	Health -= damage;
	if (Health <= 0)
	{
		//
		//[CW] process deathmessage; for players only
		//
		if(bIsPlayer)
			Player(Player).DisplayDeathMessage(source, inflictor);

		// Death
		if (inflictor)
		{
			// check for special fire damage or ice damage deaths
			if (inflictor.bFireDamage)
			{
				if (bIsPlayer && Player(Player).PClass != HexenDefs::PCLASS_PIG/*!Player(Player).MorphTime*/)
				{
					// Check for flame death
					if (Health > -50 && damage > 25)
					{
						bFireDamage = true;
					}
				}
				else
				{
					bFireDamage = true;
				}
			}
			else if (inflictor.bIceDamage)
			{
				bIceDamage = true;
			}
		}
		if (Minotaur(source))
		{
			// Minotaur's kills go to his master
			master = source.Instigator;
			// Make sure still alive and not a pointer to fighter head
			if (master && master.bIsPlayer && (master.Player.MO == master))
			{
				source = master;
			}
		}
		if (source && (source.bIsPlayer) &&
			(Player(source.Player).ReadyWeapon == HexenDefs::WP_EIGHTH))
		{
			// Always extreme death from eighth weapon
			Health = -5000;
		}
		Died(source);
		return;
	}
	if ((Random() < PainChance) && !bSkullFly)
	{
		if (inflictor && (inflictor.Class == LightningFloor ||
			inflictor.Class == LightningZap))
		{
			if (P_Random() < 96)
			{
				bJustHit = true;	// fight back!
				SetState(PainState);
			}
			else
			{
				// "electrocute" the target
				bFullBright = true;
				if (bCountKill && P_Random() < 128 &&
					!GetSoundPlayingInfo(self, GetSoundID('PuppyBeat')))
				{
					if ((Class == Centaur) ||
						(Class == CentaurLeader) ||
						(Class == Ettin))
					{
						PlaySound('PuppyBeat', CHAN_VOICE);
					}
				}
			}
		}
		else
		{
			bJustHit = true;	// fight back!
			SetState(PainState);
			if (inflictor && inflictor.Class == PoisonCloud)
			{
				if (bCountKill && P_Random() < 128
					&& !GetSoundPlayingInfo(self, GetSoundID('PuppyBeat')))
				{
					if ((Class == Centaur) ||
						(Class == CentaurLeader) ||
						(Class == Ettin))
					{
						PlaySound('PuppyBeat', CHAN_VOICE);
					}
				}
			}
		}
	}
	//FIXME
	if (!Pawn(self))
	{
		return;
	}
	Pawn(self).ReactionCount = 0;	// we're awake now...
	if (!Pawn(self).Threshold && source && !source.bBoss &&
		!(Class == Bishop) && !(Class == Minotaur))
	{
		// Target actor is not intent on another actor,
		// so make him chase after source
		if ((Class == Centaur && source.Class == CentaurLeader) ||
			(Class == CentaurLeader && source.Class == Centaur))
		{
			return;
		}
		Enemy = source;
		Pawn(self).Threshold = BASETHRESHOLD;
		if (State == IdleState && SeeState)
		{
			SetState(SeeState);
		}
	}
}

//==========================================================================
//
//  InflictorModifyDamage
//
//==========================================================================

int InflictorModifyDamage(Actor victim, Actor source, int damage)
{
	return damage;
}

//==========================================================================
//
//  FallingDamage
//
//==========================================================================

void FallingDamage()
{
	int damage;
	float mom;
	float dist;

	mom = fabs(Velocity.z);
	dist = mom / 35.0 * 16.0 / 23.0;

	if (mom >= 63.0 * 35.0)
	{
		// automatic death
		Damage(none, none, 10000);
		return;
	}
	damage = ftoi(dist * dist / 10.0) - 24;
	if (Velocity.z > -39.0 * 35.0 && damage > Health && Health != 1)
	{
		// No-death threshold
		damage = Health - 1;
	}
	PlaySound('*land', CHAN_BODY);
	Damage(none, none, damage);
}

//==========================================================================
//
//  PoisonPlayer - Sets up all data concerning poisoning
//
//==========================================================================

void PoisonPlayer(Actor poisoner, int poison)
{
	if ((Player(Player).Cheats & Player::CF_GODMODE) || Player(Player).Powers[pw_invulnerability])
	{
		return;
	}
	Player(Player).PoisonCount += poison;
	Player(Player).Poisoner = poisoner;
	if (Player(Player).PoisonCount > 100)
	{
		Player(Player).PoisonCount = 100;
	}
	Player(Player).LastPoisonTime = Level.Game.level->time;
}

//==========================================================================
//
//  PoisonDamage
//
//  Similar to Actor::Damage
//
//==========================================================================

void PoisonDamage(Actor source, int damage, bool playPainSound)
{
	Actor inflictor;

	inflictor = source;
	if (Health <= 0)
	{
		return;
	}
	if (bInvulnerable && damage < 10000)
	{	// mobj is invulnerable
		return;
	}
	if (bIsPlayer && Level.Game.gameskill == sk_baby)
	{
		// Take half damage in trainer mode
		damage >>= 1;
	}
	if (damage < 1000 && ((Player(Player).Cheats & Player::CF_GODMODE)
			|| Player(Player).Powers[pw_invulnerability]))
	{
		return;
	}
	if (damage >= Player(Player).HealthBig && ((Level.Game.gameskill == sk_baby) || Level.Game.deathmatch) &&
		/*!Player(Player).MorphTime*/Player(Player).PClass != HexenDefs::PCLASS_PIG)
	{
		// Try to use some inventory health
		AutoUseHealth(damage - Player(Player).HealthBig + 1);
	}
	Player(Player).HealthBig -= damage;	// mirror mobj health here for Dave
	Player.Health = Player(Player).HealthBig > 0xff ? 0xff : Player(Player).HealthBig;;
	if (Player(Player).HealthBig < 0)
	{
		Player(Player).HealthBig = 0;
		Player.Health = 0;
	}
	Player(Player).Attacker = source;

	//
	// do the damage
	//
	Health -= damage;
	if (Health <= 0)
	{
		// Death
		_Special1 = damage;
		if (bIsPlayer && inflictor && /*!Player(Player).MorphTime*/Player(Player).PClass != HexenDefs::PCLASS_PIG)
		{
			// Check for flame death
			if (inflictor.bFireDamage && (Health > -50) && (damage > 25))
			{
				bFireDamage = true;
			}
			if (inflictor.bIceDamage)
			{
				bIceDamage = true;
			}
		}
		Died(source);
		return;
	}
	if (!(Level.Game.level->tictime & 63) && playPainSound)
	{
		SetState(PainState);
	}
}

//==========================================================================
//
//  BlindPlayer
//
//  [FB] Similar to Actor::Damage
//
//==========================================================================

void BlindPlayer(Actor blinder, int blind)
{
	if ((Player(Player).Cheats & Player::CF_GODMODE) || Player(Player).Powers[pw_invulnerability])
	{
		return;
	}
	Player(Player).BlindCount += blind;
	Player(Player).Blinder = blinder;
	if (Player(Player).BlindCount > 220)
	{
		Player(Player).BlindCount = 220;
	}
	Player(Player).LastBlindTime = Level.Game.level->time;
}

//==========================================================================
//
//  BlindDamage
//
//==========================================================================

void BlindDamage(Actor source, int damage, bool playPainSound)
{
	Actor inflictor;

	inflictor = source;
	if (Health <= 0)
	{
		return;
	}
	if (bInvulnerable && damage < 10000)
	{	// mobj is invulnerable
		return;
	}
	if (bIsPlayer && Level.Game.gameskill == sk_baby)
	{
		// Take half damage in trainer mode
		damage >>= 1;
	}
	if (damage < 1000 && ((Player(Player).Cheats & Player::CF_GODMODE)
			|| Player(Player).Powers[pw_invulnerability]))
	{
		return;
	}
	if (damage >= Player(Player).HealthBig && ((Level.Game.gameskill == sk_baby) || Level.Game.deathmatch) &&
		/*!Player(Player).MorphTime*/Player(Player).PClass != HexenDefs::PCLASS_PIG)
	{
		// Try to use some inventory health
		AutoUseHealth(damage - Player(Player).HealthBig + 1);
	}
	Player(Player).HealthBig -= damage;	// mirror mobj health here for Dave
	Player.Health = Player(Player).HealthBig > 0xff ? 0xff : Player(Player).HealthBig;;
	if (Player(Player).HealthBig < 0)
	{
		Player(Player).HealthBig = 0;
		Player.Health = 0;
	}
	Player(Player).Attacker = source;

	//
	// do the damage
	//
	Health -= damage;
	if (Health <= 0)
	{
		// Death
		_Special1 = damage;
		if (bIsPlayer && inflictor && /*!Player(Player).MorphTime*/Player(Player).PClass != HexenDefs::PCLASS_PIG)
		{
			// Check for flame death
			if (inflictor.bFireDamage && (Health > -50) && (damage > 25))
			{
				bFireDamage = true;
			}
			if (inflictor.bIceDamage)
			{
				bIceDamage = true;
			}
		}
		Died(source);
		return;
	}
	if (playPainSound)
	{
		SetState(PainState);
	}
}

//==========================================================================
//
//  SpawnBloodSplatter
//
//==========================================================================

void SpawnBloodSplatter(TVec org, int damage)
{
	Actor mo;

	MSG_Select(MSG_SV_DATAGRAM);
	if (MSG_CheckSpace(8))
	{
		MSG_WriteByte(HexenDefs::svc_blood);
		MSG_WriteShort(ftoi(org.x));
		MSG_WriteShort(ftoi(org.y));
		MSG_WriteShort(ftoi(org.z));
		MSG_WriteByte(damage > 255 ? 255 : damage);
	}

	mo = Spawn(BloodSplatter, org);
	mo.Instigator = self;
	mo.Velocity.x = (Random() - Random()) * 4.0 * 35.0;
	mo.Velocity.y = (Random() - Random()) * 4.0 * 35.0;
	mo.Velocity.z = 3.0 * 35.0 / 20.0;
}

//===========================================================================
//
//  SpawnBloodSplatter2
//
//===========================================================================

void SpawnBloodSplatter2(TVec org)
{
	Actor mo;

	org.x += (Random() - 0.5) * 8.0;
	org.y += (Random() - 0.5) * 8.0;
	mo = Spawn(AxeBlood, org);
	mo.Instigator = self;
}

//==========================================================================
//
//  SpawnRipperBlood
//
//==========================================================================

void SpawnRipperBlood()
{
	Actor th;
	TVec org;

	org.x = Origin.x + (Random() - Random()) * 16.0;
	org.y = Origin.y + (Random() - Random()) * 16.0;
	org.z = Origin.z + (Random() - Random()) * 16.0;
	th = Spawn(Blood, org);
	th.Velocity.x = Velocity.x / 2.0;
	th.Velocity.y = Velocity.y / 2.0;
	th.StateTime += Random() * 0.1;
}

//============================================================================
//
//  SpawnDirt
//
//  Dirt stuff
//
//============================================================================

void SpawnDirt(float radius)
{
	float angle;
	TVec org;
	 class<Actor> dtype;
	Actor dirt;

	angle = 360.0 * Random();
	org.x = Origin.x + radius * cos(angle);
	org.y = Origin.y + radius * sin(angle);
	org.z = Origin.z + Random() * 2.0 + 1.0;
	switch (P_Random() % 6)
	{
	case 0:
		dtype = Dirt1;
		break;
	case 1:
		dtype = Dirt2;
		break;
	case 2:
		dtype = Dirt3;
		break;
	case 3:
		dtype = Dirt4;
		break;
	case 4:
		dtype = Dirt5;
		break;
	case 5:
		dtype = Dirt6;
		break;
	}
	dirt = Spawn(dtype, org);
	if (dirt)
	{
		dirt.Velocity.z = Random() * 4.0 * 35.0;
	}
}

//==========================================================================
//
//  TeleportToPlayerStarts
//
//==========================================================================

void TeleportToPlayerStarts()
{
	int i;
	int selections = 0;
	float destX;
	float destY;
	float destAngle;

	for (i = 0; i < MAXPLAYERS; i++)
	{
		if (!Level.Game.Players[i])
			continue;
		selections++;
	}
	i = P_Random() % selections;
	destX = Level.PlayerStarts[i].x;
	destY = Level.PlayerStarts[i].y;
	destAngle = itof(45 * (Level.PlayerStarts[i].angle / 45));
	Teleport(vector(destX, destY, ONFLOORZ), destAngle, true, true, false);
}

//==========================================================================
//
//  TeleportToDeathmatchStarts
//
//==========================================================================

void TeleportToDeathmatchStarts()
{
	int i;
	float destX;
	float destY;
	float destAngle;

	if (Level.NumDeathmatchStarts)
	{
		i = P_Random() % Level.NumDeathmatchStarts;
		destX = Level.DeathmatchStarts[i].x;
		destY = Level.DeathmatchStarts[i].y;
		destAngle = itof(45 * (Level.DeathmatchStarts[i].angle / 45));
		Teleport(vector(destX, destY, ONFLOORZ), destAngle, true, true,
			false);
	}
	else
	{
		TeleportToPlayerStarts();
	}
}

//==========================================================================
//
//  TeleportOther
//
//==========================================================================

void TeleportOther()
{
	if (bIsPlayer)
	{
		if (Level.Game.deathmatch)
			TeleportToDeathmatchStarts();
		else
			TeleportToPlayerStarts();
	}
	else
	{
		// If death action, run it upon teleport
		if (bCountKill && Special)
		{
			RemoveFromTIDList();
			Level.ExecuteActionSpecial(Special, Args[0], Args[1], Args[2],
				Args[3], Args[4], NULL, 0, self);
			Special = 0;
		}

		// Send all monsters to deathmatch spots
		TeleportToDeathmatchStarts();
	}
}

//==========================================================================
//
//  TestLocation
//
//  Returns true if the mobj is not blocked by anything at its current
// location, otherwise returns false.
//
//==========================================================================

bool TestLocation()
{
	if (!bColideWithThings && !bColideWithWorld)
		return true;

	if (CheckPosition(Origin))
	{
		// XY is ok, now check Z
		if ((Origin.z < FloorZ) || (Origin.z + Height > CeilingZ))
		{
			// Bad Z
			return false;
		}
		return true;
	}
	return false;
}

//==========================================================================
//
//	Touch
//
//==========================================================================

bool Touch(Entity InOther)
{
	bool solid;
	int damage;
	Actor Other;

	Other = Actor(InOther);
	if (!Other.bSolid && !Other.bSpecial && !Other.bShootable)
		return true;

	//[CW]
	if (Other.IsTouched(self))
		return !Other.bSolid;

	// Check for skulls slamming into things
	if (bSkullFly)
	{
		if (Class == Minotaur)
		{
			// Slamming minotaurs shouldn't move non-creatures
			if (!Other.bCountKill)
			{
				return false;
			}
		}
		damage = ((P_Random() % 8) + 1) * MissileDamage;
		Other.Damage(self, self, damage);
		bSkullFly = false;
		Velocity = vector(0.0, 0.0, 0.0);
		SetState(SeeState);
		return false;
	}
	// Check for blasted thing running into another
	if (bBlasted && Other.bShootable)
	{
		if (!Other.bBoss && Other.bCountKill)
		{
			Other.Velocity.x += Velocity.x;
			Other.Velocity.y += Velocity.y;
			if ((Other.Velocity.x + Other.Velocity.y) > 3.0 * 35.0)
			{
				damage = (ftoi(Mass) / 100) + 1;
				Other.Damage(self, self, damage);
				damage = (ftoi(Other.Mass) / 100) + 1;
				Damage(Other, Other, damage >> 2);
			}
			return false;
		}
	}
	// Check for missile
	if (bMissile)
	{
		// Check for a non-shootable mobj
		if (Other.bNonShootable)
		{
			return true;
		}
		if (bFloorBounce && !MaceFX3(self))
		{
			if (Instigator == Other || !Other.bSolid)
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		if ((Class == MageStaffFX2 || Class == InfernalHandFX) && Other != Instigator)
		{
			// Class bosses not flagged boss so they can be blasted
			// [CW] InfernalHandFX CAN blast Players
			if ((Class == InfernalHandFX || !Other.bIsPlayer) && !Other.bBoss && !ClassBoss(Other))
			{
				Other.Damage(self, Instigator, (Class == InfernalHandFX) ?
												InfernalHandFX(self).BlastDamage : 10);
				return true;
			}
		}
		if (Instigator && Instigator.Class == Other.Class)
		{
			// Don't hit same species as originator
			if (Other == Instigator)
			{
				// Don't missile self
				return true;
			}
			if (!Other.bIsPlayer)
			{
				// Hit same species as originator, explode, no damage
				return false;
			}
		}
		if (!Other.bShootable)
		{
			// Didn't do any damage
			return !Other.bSolid;
		}
		if (bRip)
		{
			if (!Other.bNoBlood && !Other.bReflective && !Other.bInvulnerable)
			{
				// Ok to spawn some blood
				SpawnRipperBlood();
			}
			damage = ((P_Random() & 3) + 2) * MissileDamage;
			Other.Damage(self, Instigator, damage);
			if (Other.bPushable && !bCannotPush)
			{
				// Push thing
				Other.Velocity.x += Velocity.x / 4.0;
				Other.Velocity.y += Velocity.y / 4.0;
			}
//WHAT A FUCK IS THIS???????			numspechit = 0;
			return true;
		}
		// Do damage
		damage = ((P_Random() % 8) + 1) * MissileDamage;
		if (damage)
		{
			if (!Other.bNoBlood && !Other.bReflective &&
				!Other.bInvulnerable &&
				!(Class == TeleportOtherFX1) &&
				!(Class == TeleportOtherFX2) &&
				!(Class == TeleportOtherFX3) &&
				!(Class == TeleportOtherFX4) &&
				!(Class == TeleportOtherFX5) && (P_Random() < 192))
			{
				Other.SpawnBloodSplatter(Origin, damage);
			}
			Other.Damage(self, Instigator, damage);
		}
		return false;
	}
	if (Other.bPushable && !bCannotPush)
	{
		// Push thing
		Other.Velocity.x += Velocity.x / 4.0;
		Other.Velocity.y += Velocity.y / 4.0;
	}
	// Check for special thing
	if (Other.bSpecial)
	{
		solid = Other.bSolid;
		Pickup(Other).TouchSpecial(self);	// Can remove thing
		return !solid;
	}
	return !Other.bSolid;
}

//==========================================================================
//
//	IsTouched
//
//	[CW]
//
//==========================================================================

bool IsTouched(Entity Toucher)
{
	return false;
}

//===========================================================================
//
//	CheckForPushSpecial
//
//===========================================================================

void CheckForPushSpecial(line_t * line, int side)
{
	if (line->special)
	{
		if (bActivatePushWall)
		{
			HexenLevelInfo(Level).ActivateLine(line, self, side, SPAC_PUSH);
		}
		else if (bActivateImpact)
		{
			HexenLevelInfo(Level).ActivateLine(line,
				bMissile ? Instigator : self, side, SPAC_IMPACT);
		}
	}
}

//==========================================================================
//
//	BlockedByLine
//
//==========================================================================

void BlockedByLine(line_t * ld)
{
	if (bBlasted)
	{
		Damage(none, none, ftoi(Mass) >> 5);
	}
	CheckForPushSpecial(ld, 0);
}

//==========================================================================
//
//  PushLine
//
//==========================================================================

void PushLine(tmtrace_t* tmtrace)
{
	if (bColideWithWorld)
	{
		int numSpecHitTemp;
		line_t *ld;
		int side;

		if (bBlasted)
		{
			Damage(none, none, ftoi(Mass) >> 5);
		}
		numSpecHitTemp = tmtrace->NumSpecHit;
		while (numSpecHitTemp > 0)
		{
			numSpecHitTemp--;
			// see if the line was crossed
			ld = tmtrace->SpecHit[numSpecHitTemp];
			side = PointOnPlaneSide(Origin, ld);
			CheckForPushSpecial(ld, side);
		}
	}
}

//==========================================================================
//
//	CrossSpecialLine
//
//==========================================================================

void CrossSpecialLine(line_t *ld, int side)
{
	if (bIsPlayer)
	{
		HexenLevelInfo(Level).ActivateLine(ld, self, side, SPAC_CROSS);
	}
	else if (bActivateMCross)
	{
		HexenLevelInfo(Level).ActivateLine(ld, self, side, SPAC_MCROSS);
	}
	else if (bActivatePCross)
	{
		HexenLevelInfo(Level).ActivateLine(ld, self, side, SPAC_PCROSS);
	}
}

//==========================================================================
//
//	HandleFloorclip
//
//==========================================================================

void HandleFloorclip()
{
	if (bFloorClip)
	{
		VTerrainInfo* TInfo = GetFloorType();
		if (Origin.z == Sector->floorheight && TInfo->bLiquid)
		{
			FloorClip = TInfo->FootClip;
		}
		else
		{
			FloorClip = 0.0;
		}
	}
}

//**************************************************************************
//
//  OBJECT MOVEMENT
//
//**************************************************************************

//==========================================================================
//
//	ApplyFriction
//
//==========================================================================

void ApplyFriction()
{
	if (bSkullFly || bMissile)
	{
		return;
	}
	if (Origin.z > FloorZ && WaterLevel < 2 && !bFly && !bOnMobj)
	{
		// No friction when falling
		if (Class != BlastEffect)
			return;
	}

	if (Origin.z <= FloorZ)
	{
		//  Clip velocity
		float dot = DotProduct(Velocity, Floor->normal);

		if (dot < 0.0)
		{
			Velocity -= dot * Floor->normal;
		}
	}

	if (bCorpse)
	{
		// Don't stop sliding if halfway off a step with some momentum
		if (Velocity.x > 0.25 * 35.0 || Velocity.x < -0.25 * 35.0 ||
			Velocity.y > 0.25 * 35.0 || Velocity.y < -0.25 * 35.0)
		{
			if (FloorZ != GetPlanePointZ(&Sector->floor, Origin))
			{
				return;
			}
		}
	}
	if (Velocity.x > -STOPSPEED && Velocity.x < STOPSPEED &&
		Velocity.y > -STOPSPEED && Velocity.y < STOPSPEED &&
		Velocity.z > -STOPSPEED && Velocity.z < STOPSPEED &&
		(!bIsPlayer || (!Player.ForwardMove && !Player.SideMove)))
	{
		if (bIsPlayer)
		{
			// If in a walking frame, stop moving
			if (StateIsInRange(State, SeeState, none, 4))
			{
				SetState(IdleState);
			}
		}
		Velocity = vector(0.0, 0.0, 0.0);
	}
	else
	{
		Velocity -= Velocity * (GetFriction() * Level.Game.frametime);
	}
}

//==========================================================================
//
//	GetFriction
//
//==========================================================================

float GetFriction()
{
	if (WaterLevel >= 2)
	{
		return FRICTION_WATER;
	}
	if (bFly && !(Origin.z <= FloorZ) && !bOnMobj)
	{
		return FRICTION_FLY;
	}
	if ((Sector->special & SECSPEC_BASE_MASK) == SECSPEC_FrictionLow)
	{
		return FRICTION_LOW;
	}
	VTerrainInfo* TInfo = GetFloorType();
	if (TInfo->Friction)
	{
		return TInfo->Friction;
	}
	if (Sector->special & SECSPEC_FRICTION_MASK)
	{
		return Sector->Friction;
	}
	return FRICTION_NORMAL;
}

//==========================================================================
//
//	HitMobj
//
//==========================================================================

void HitMobj(Entity Other)
{
	float angle;

	if (bMissile)
	{
		if (bFloorBounce)
		{
			if (Actor(Other).bReflective || (!Other.bIsPlayer &&
				!Actor(Other).bCountKill))
			{
				float speed;

				angle = AngleMod360(atan2(Origin.y - Other.Origin.y,
					Origin.x - Other.Origin.x) + Random() * 16.0 - 8.0);
				speed = Length(Velocity);
				speed = speed * 0.75;
				Angles.yaw = angle;
				Velocity.x = speed * cos(angle);
				Velocity.y = speed * sin(angle);
				if (SightSound)
				{
					PlaySound(SightSound, CHAN_VOICE);
				}
			}
			else
			{
				// Struck a player/creature
				ExplodeMissile();
			}
			return;
		}
		if (Actor(Other).bReflective)
		{
			angle = Actor(Other).GetReflectedAngle(self);
			if (angle != -1.0)
			{
				// Reflect the missile along angle
				Angles.yaw = angle;
				Velocity.x = (Speed / 2.0) * cos(angle);
				Velocity.y = (Speed / 2.0) * sin(angle);
//				Velocity.z = -Velocity.z;
				if (bSeekerMissile)
				{
					Enemy = Instigator;
				}
				Instigator = Actor(Other);
				return;
			}
		}
		// Explode a missile
		ExplodeMissile();
	}
	else
	{
		// [FB] Added behaiviour for soccer ball
		if (bFloorBounce)
		{
			float speed;

			angle = AngleMod360(atan2(Origin.y - Other.Origin.y,
				Origin.x - Other.Origin.x) + Random() * 16.0 - 8.0);
			speed = Length(Velocity);
			speed = speed * 0.75;
			Angles.yaw = angle;
			Velocity.x = speed * cos(angle);
			Velocity.y = speed * sin(angle);
			if (SightSound)
			{
				PlaySound(SightSound, CHAN_VOICE);
			}

			// [FB]
			return;
		}

		if (bSlide)
		{
			// Try to slide along it
			// Slide against mobj
//			if (TryMove(vector(Origin.x, ptryy, Origin.z)))
			if (TryMove(vector(Origin.x, Origin.y + Velocity.y * Level.Game.frametime, Origin.z)))
			{
				Velocity.x = 0.0;
			}
//			else if (TryMove(vector(ptryx, Origin.y, Origin.z)))
			else if (TryMove(vector(Origin.x + Velocity.x * Level.Game.frametime, Origin.y, Origin.z)))
			{
				Velocity.y = 0.0;
			}
			else
			{
				Velocity.x = 0.0;
				Velocity.y = 0.0;
			}
		}
		else
		{
			Velocity.x = 0.0;
			Velocity.y = 0.0;
		}
	}
}

//==========================================================================
//
//	GetReflectedAngle
//
//==========================================================================

float GetReflectedAngle(Actor Other)
{
	float angle = atan2(Other.Origin.y - Origin.y,
		Other.Origin.x - Origin.x);

	// Change angle for reflection
	angle = AngleMod360(angle + Random() * 16.0 - 8.0);
	return angle;
}

//==========================================================================
//
//	HitLine
//
//==========================================================================

void HitLine(tmtrace_t* tmtrace)
{
	if (bMissile)
	{
		if (bFloorBounce && !MaceFX3(self) && !StainedGlassShard1(self))
		{
			// Struck a wall
			BounceWall(1.5);
			if (!SorcererBall(self) && !SorcererFX1(self))
			{
				if (SightSound)
				{
					PlaySound(SightSound, CHAN_VOICE);
				}
			}
			return;
		}

		// Explode a missile
		if (tmtrace->CeilingLine && tmtrace->CeilingLine->backsector &&
			tmtrace->CeilingLine->backsector->ceiling.pic == Level.Game.skyflatnum)
		{
			// Hack to prevent missiles exploding against the sky
			if (Class == BloodySkull)
			{
				Velocity = vector(0.0, 0.0, -1.0 * 35.0);
			}
			else if (Class == HolyFX)
			{
				ExplodeMissile();
			}
			else
			{
				Remove();
			}
			return;
		}
		ExplodeMissile();
	}
	else
	{
		// [FB] Added behaiviour for soccer ball
		if (bFloorBounce)
		{
			// Struck a wall
			BounceWall(1.5);
			if (SightSound)
			{
				PlaySound(SightSound, CHAN_VOICE);
			}

			return;
		}

		if (bSlide)
		{
			// Try to slide along it
			// Slide against wall
			SlideMove();
		}
		else
		{
			Velocity.x = 0.0;
			Velocity.y = 0.0;
		}
	}
}

//==========================================================================
//
//	XYMovement
//
//==========================================================================

void XYMovement(float DeltaTime)
{
	float ptryx, ptryy;
	float xmove, ymove;
	int special;

	if (bWindThrust)
	{
		special = Sector->special & SECSPEC_BASE_MASK;
		switch (special)
		{
		case SECSPEC_WindEastSlow:
		case SECSPEC_WindEastMedium:
		case SECSPEC_WindEastFast:
			Thrust(0.0, MainGameInfo(Level.Game).windTab[special - SECSPEC_WindEastSlow]);
			break;
		case SECSPEC_WindNorthSlow:
		case SECSPEC_WindNorthMedium:
		case SECSPEC_WindNorthFast:
			Thrust(90.0, MainGameInfo(Level.Game).windTab[special - SECSPEC_WindNorthSlow]);
			break;
		case SECSPEC_WindSouthSlow:
		case SECSPEC_WindSouthMedium:
		case SECSPEC_WindSouthFast:
			Thrust(270.0, MainGameInfo(Level.Game).windTab[special - SECSPEC_WindSouthSlow]);
			break;
		case SECSPEC_WindWestSlow:
		case SECSPEC_WindWestMedium:
		case SECSPEC_WindWestFast:
			Thrust(180.0, MainGameInfo(Level.Game).windTab[special - SECSPEC_WindWestSlow]);
			break;
		}
	}
	if (Velocity.x > MAXMOVE)
	{
		Velocity.x = MAXMOVE;
	}
	else if (Velocity.x < -MAXMOVE)
	{
		Velocity.x = -MAXMOVE;
	}
	if (Velocity.y > MAXMOVE)
	{
		Velocity.y = MAXMOVE;
	}
	else if (Velocity.y < -MAXMOVE)
	{
		Velocity.y = -MAXMOVE;
	}
	xmove = Velocity.x * DeltaTime;
	ymove = Velocity.y * DeltaTime;
	do
	{
		if (xmove > MAXMOVESTEP || ymove > MAXMOVESTEP)
		{
			ptryx = Origin.x + xmove / 2.0;
			ptryy = Origin.y + ymove / 2.0;
			xmove /= 2.0;
			ymove /= 2.0;
		}
		else
		{
			ptryx = Origin.x + xmove;
			ptryy = Origin.y + ymove;
			xmove = 0.0;
			ymove = 0.0;
		}
		tmtrace_t tmtrace;
		if (!TryMoveEx(&tmtrace, vector(ptryx, ptryy, Origin.z)))
		{
			// Blocked move
			if (tmtrace.BlockingMobj)
			{
				HitMobj(Entity(tmtrace.BlockingMobj));
			}
			else
			{
				HitLine(&tmtrace);
			}
			return;
		}
	}
	while (xmove || ymove);
}

//==========================================================================
//
//  ClipVelocity
//
//  Slide off of the impacting object
//
//==========================================================================

TVec ClipVelocity(TVec in, TVec normal, float overbounce)
{
	return in - normal * (DotProduct(in, normal) * overbounce);
}

//==========================================================================
//
//	HitFloor
//
//==========================================================================

bool HitFloor()
{
	float vdot;

	if (bMissile)
	{
		Origin.z = FloorZ;
		if (bFloorBounce)
		{
			FloorBounceMissile();
			return true;
		}
		else if (Class == HolyFX)
		{
			// The spirit struck the ground
			Velocity.z = 0.0;
			HitFloorType();
			return true;
		}
		else if (Class == MinotaurFloorFire1 || Class == LightningFloor)
		{
			// Minotaur floor fire can go up steps
			return true;
		}
		else
		{
			HitFloorType();
			return ExplodeMissile();
		}
	}

	vdot = DotProduct(Velocity, Floor->normal);
	if (bCountKill)	// Blasted mobj falling
	{
		if (vdot < -23.0 * 35.0)
		{
			MonsterFallingDamage();
		}
	}
	if (Origin.z - Velocity.z * Level.Game.frametime > FloorZ)
	{
		// Spawn splashes, etc.
		HitFloorType();
	}
	Origin.z = FloorZ;
	// [FB] for soccer ball
	if (bFloorBounce)
	{
		FloorBounceActor();
		return true;
	}
	if (vdot < -0.1)
	{
		if (bIceDamage && vdot < -DEFAULT_GRAVITY * 0.25)
		{
			StateTime = 0.1;
			Velocity = vector(0.0, 0.0, 0.0);
			return true;
		}
		if (bIsPlayer)
		{
			Player(Player).JumpTime = 0.2;	// delay any jumping for a short time
			if (vdot < -DEFAULT_GRAVITY * 0.25 && !bFly)
			{
				// squat down
				Player(Player).DeltaViewHeight = vdot / 8.0;
				if (vdot < -23.0 * 35.0)
				{
					FallingDamage();
					HexenLevelInfo(Level).NoiseAlert(self, self);
				}
				else if (vdot < -DEFAULT_GRAVITY * 0.375 && /*!Player(Player).MorphTime*/Player(Player).PClass != HexenDefs::PCLASS_PIG)
				{
					PlaySound('*land', CHAN_BODY);
					PlaySound('*grunt', CHAN_VOICE);
				}
				else if (!GetFloorType()->bLiquid && /*!Player(Player).MorphTime*/Player(Player).PClass != HexenDefs::PCLASS_PIG)
				{
					PlaySound('*land', CHAN_BODY);
				}
//FIXME				Player.centreing = true;
			}
		}
		else if (Class == Pottery1 || Class == Pottery2 || Class == Pottery3)
		{
			Damage(none, none, 25);
		}
		else if (bCountKill)
		{
			if (vdot < -23.0 * 35.0)
			{
				// Doesn't get here
			}
		}
		Velocity -= vdot * Floor->normal;
	}
	if (bSkullFly)
	{
		// The skull slammed into something
		Velocity = ClipVelocity(Velocity, Floor->normal, 2.0);
	}
	if (CrashState && bCorpse && !bIceDamage)
	{
		return SetState(CrashState);
	}
	return true;
}

//==========================================================================
//
//	HitCeiling
//
//==========================================================================

bool HitCeiling()
{
	float vdot;

	vdot = DotProduct(Velocity, Ceiling->normal);
	if (vdot < 0.0)
	{
		Velocity -= vdot * Ceiling->normal;
	}
	Origin.z = CeilingZ - Height;
	if (bMissile)
	{
		if (bFloorBounce)
		{
			// Reverse momentum here for ceiling bounce
			Velocity -= vdot * Ceiling->normal;

			if (SightSound)
			{
				PlaySound(SightSound, CHAN_VOICE);
			}
			return true;
		}
		if (Class == LightningCeiling)
		{
			return true;
		}
		if (Ceiling->pic == Level.Game.skyflatnum)
		{
			if (Class == BloodySkull)
			{
				Velocity = vector(0.0, 0.0, -1.0 * 35.0);
			}
			else if (Class == HolyFX)
			{
				return ExplodeMissile();
			}
			else
			{
				Remove();
				return false;
			}
			return true;
		}
		return ExplodeMissile();
	}
	// [FB] For soccer ball
	if (bFloorBounce)
	{
		// Reverse momentum here for ceiling bounce
		Velocity -= vdot * Ceiling->normal;

		if (SightSound)
		{
			PlaySound(SightSound, CHAN_VOICE);
		}
	}
	if (bSkullFly)
	{
		// the skull slammed into something
		Velocity.z = -Velocity.z;
	}
	return true;
}

//==========================================================================
//
//	ZMovement
//
//==========================================================================

bool ZMovement(float DeltaTime)
{
	float dist;
	float delta;

	//
	// check for smooth step up
	//
	if (bIsPlayer && Origin.z < FloorZ)
	{
		Player(Player).ViewHeight -= FloorZ - Origin.z;
		Player(Player).DeltaViewHeight = (PlayerPawn(self).ViewHeight/*Player::VIEWHEIGHT*/ - Player(Player).ViewHeight) * 4.0;
	}

	//
	// adjust height
	//
	Origin.z += Velocity.z * DeltaTime;
	if (bFloat && Enemy)
	{
		// float down towards enemy if too close
		if (!bSkullFly && !bInFloat)
		{
			dist = DistTo2(Enemy);
			delta = Enemy.Origin.z + Height / 2.0 - Origin.z;
			if (delta < 0.0 && dist < -delta * 3.0)
				Origin.z -= FLOATSPEED * DeltaTime;
			else if (delta > 0.0 && dist < delta * 3.0)
				Origin.z += FLOATSPEED * DeltaTime;
		}
	}
	if (bIsPlayer && bFly && !(Origin.z <= FloorZ) && Level.Game.level->tictime & 2)
	{
		Origin.z += sin(90.0 * 35.0 / 20.0 * Level.Game.level->time);
	}

	//
	// clip movement
	//
	if (Origin.z <= FloorZ + 0.1)
	{
		// Hit the floor
		return HitFloor();
	}

	if (Origin.z + Height > CeilingZ)
	{
		// hit the ceiling
		return HitCeiling();
	}
	return true;
}

//==========================================================================
//
//  ResetBlasted
//
//==========================================================================

void ResetBlasted()
{
	bBlasted = false;
	if (!bIceCorpse)
	{
		bSlide = false;
	}
}

//===========================================================================
//
//  PlayerLandedOnThing
//
//===========================================================================

void PlayerLandedOnThing()
{
	Player(Player).DeltaViewHeight = Velocity.z / 8.0;
	if (Velocity.z < -23.0 * 35.0)
	{
		FallingDamage();
		HexenLevelInfo(Level).NoiseAlert(self, self);
	}
	else if (Velocity.z < -DEFAULT_GRAVITY * 0.375 && /*!Player(Player).MorphTime*/Player(Player).PClass != HexenDefs::PCLASS_PIG)
	{
		PlaySound('*land', CHAN_BODY);
		PlaySound('*grunt', CHAN_VOICE);
	}
	else if (/*!Player(Player).MorphTime*/Player(Player).PClass != HexenDefs::PCLASS_PIG)
	{
		PlaySound('*land', CHAN_BODY);
	}
//FIXME Player.centreing = true;
}

//==========================================================================
//
//	BlasterPhysics
//
//==========================================================================

bool BlasterPhysics(float DeltaTime)
{
	int i;
	float xfrac;
	float yfrac;
	float zfrac;
	float z;
	bool changexy;
	Actor A;

	// Handle movement
	if (Velocity.x || Velocity.y || (Origin.z != FloorZ) || Velocity.z)
	{
		xfrac = Velocity.x * DeltaTime / 8.0;
		yfrac = Velocity.y * DeltaTime / 8.0;
		zfrac = Velocity.z * DeltaTime / 8.0;
		changexy = xfrac || yfrac;
		for (i = 0; i < 8; i++)
		{
			if (changexy)
			{
				if (!TryMove(vector(Origin.x + xfrac, Origin.y + yfrac, Origin.z)))
				{
					// Blocked move
					return ExplodeMissile();
				}
			}
			Origin.z += zfrac;
			if (Origin.z <= FloorZ)
			{
				// Hit the floor
				Origin.z = FloorZ;
				HitFloorType();
				return ExplodeMissile();
			}
			if (Origin.z + Height > CeilingZ)
			{
				// Hit the ceiling
				Origin.z = CeilingZ - Height;
				return ExplodeMissile();
			}
			if (changexy)
			{
				if ((Class == MageWandMissile || Class == MageWandRedMissile || Class == MageWandGreyMissile) 
					&& (P_Random() < 128))
				{
					z = Origin.z - 8.0;
					if (z < FloorZ)
					{
						z = FloorZ;
					}
					if (Class == MageWandMissile) {
						Spawn(MageWandSmoke, vector(Origin.x, Origin.y, z));
					} else if (Class == MageWandGreyMissile) {
						Spawn(MageWandGreySmoke, vector(Origin.x, Origin.y, z));
					} else {
						Spawn(MageWandRedSmoke, vector(Origin.x, Origin.y, z));
					}
				}
				else if (Class != MageWandMissile && !--_Special1)
				{
					_Special1 = 4;
					z = Origin.z - 12.0;
					if (z < FloorZ)
					{
						z = FloorZ;
					}
					A = Spawn(ClericFlameFloor, vector(Origin.x, Origin.y, z));
					if (A)
					{
						A.Angles.yaw = Angles.yaw;
					}
				}
			}
		}
	}
	return true;
}

//==========================================================================
//
//	Physics
//
//==========================================================================

bool Physics(float DeltaTime)
{
	Actor			onmo;
	SectorThinker	SecThink;
	float			scrollx;
	float			scrolly;
	float			height;
	float			waterheight;	// killough 4/4/98: add waterheight

	if (bBlaster)
	{
		return BlasterPhysics(DeltaTime);
	}

	if (Sector->AffectorData && bColideWithWorld)
	{

		// killough 3/7/98: Carry things on floor
		// killough 3/20/98: use new sector list which reflects true members
		// killough 3/27/98: fix carrier bug
		// killough 4/4/98: Underwater, carry things even w/o gravity

		// Move objects only if on floor or underwater,
		// non-floating, and clipped.

		for (SecThink = SectorThinker(Sector->AffectorData); SecThink;
			SecThink = SecThink.NextAffector)
		{
			if (!Scroller(SecThink))
			{
				continue;
			}
			scrollx = Scroller(SecThink).CarryScrollX;
			scrolly = Scroller(SecThink).CarryScrollY;
			if (!scrollx && !scrolly)
			{
				continue;
			}
			if (bNoGravity && (!Sector->heightsec ||
				(Sector->heightsec->bIgnoreHeightSec)))
			{
				continue;
			}
			height = GetPlanePointZ(&Sector->floor, Origin);
			if (Origin.z > height)
			{
				if (!Sector->heightsec || (Sector->heightsec->bIgnoreHeightSec))
				{
					continue;
				}

				waterheight = GetPlanePointZ(&Sector->heightsec->floor, Origin);
				if (waterheight > height && Origin.z >= waterheight)
				{
					continue;
				}
			}

			Velocity.x += scrollx;
			Velocity.y += scrolly;
		}
	}

	CheckWater();
	if (!bFloatBob)
		UpdateVelocity();

	// Handle X and Y momentums
	if (Velocity.x || Velocity.y)
	{
		XYMovement(DeltaTime);
		if (IsDestroyed())
		{
			return false;
		}
	}
	else if (bSkullFly)
	{
		// A flying mobj slammed into something
		bSkullFly = false;
		Velocity = vector(0.0, 0.0, 0.0);
		if (!SetState(SeeState))
		{
			return false;
		}
	}
	else if (bBlasted)
	{
		// Reset to not blasted when momentums are gone
		ResetBlasted();
	}

	if (bFloatBob)
	{
		// Floating item bobbing motion (special1 is height)
		if (Sector->bHasExtrafloors)
		{
			//	Make sure FloorZ is from bottom region.
			Origin.z = ONFLOORZ;
			LinkToWorld();
		}
		Origin.z = FloorZ + Special1f + Level.Game.FloatBobOffsets[(Health++) & 63];
	}
	else if (!bNoPassMobj && !bMissile)
	{
		// Handle Z momentum and gravity
		onmo = Actor(CheckOnmobj());
		if (onmo)
		{
			if (bIsPlayer)
			{
				if (Velocity.z < -DEFAULT_GRAVITY * 0.25 && !bFly)
				{
					PlayerLandedOnThing();
				}
			}
			if (onmo.Origin.z + onmo.Height - Origin.z <= MaxStepHeight)
			{
				if (bIsPlayer)
				{
					Player(Player).ViewHeight -=
						onmo.Origin.z + onmo.Height - Origin.z;
					Player(Player).DeltaViewHeight =
						(PlayerPawn(self).ViewHeight/*Player::VIEWHEIGHT*/ - Player(Player).ViewHeight) * 4.0;
				}
				Origin.z = onmo.Origin.z + onmo.Height;
			}
			bOnMobj = true;
			Velocity.z = 0.0;
		}
		else if ((Origin.z != FloorZ) || Velocity.z)
		{
			if (!ZMovement(DeltaTime))
			{
				return false;
			}
			bOnMobj = false;
		}
	}
	else
	{
		if ((Origin.z != FloorZ) || Velocity.z)
		{
			// Handle Z momentum and gravity
			if (!ZMovement(DeltaTime))
			{
				return false;
			}
		}
	}
	return true;
}

//==========================================================================
//
//	Tick
//
//==========================================================================

void Tick(float deltaTime)
{
	if (!Physics(deltaTime))
	{
		return;
	}

	// Cycle through states, calling action functions at transitions
	if (!AdvanceState(deltaTime))
	{
		// mobj was removed
		return;
	}
}

//==========================================================================
//
//	SetDormant
//
//==========================================================================

void SetDormant()
{
	bDormant = true;
	StateTime = -1.0;
}

//==========================================================================
//
//  HeightClip
//
//  Takes a valid thing and adjusts the thing->FloorZ, thing->CeilingZ, and
// possibly thing->z. This is called for all nearby monsters whenever a
// sector changes height. If the thing doesn't fit, the z will be set to the
// lowest value and false will be returned.
//
//==========================================================================

bool HeightClip()
{
	bool onfloor;

	onfloor = (Origin.z == FloorZ);

	tmtrace_t tmtrace;
	CheckRelPosition(&tmtrace, Origin);
	// what about stranding a monster partially off an edge?

	FloorZ = tmtrace.FloorZ;
	CeilingZ = tmtrace.CeilingZ;
	Floor = tmtrace.Floor;
	Ceiling = tmtrace.Ceiling;

	if (onfloor)
	{
		// walking monsters rise and fall with the floor
		if ((Origin.z - FloorZ < 9.0) || bNoGravity)
		{
			Origin.z = FloorZ;
		}
	}
	else
	{
		// don't adjust a floating monster unless forced to
		if (Origin.z + Height > CeilingZ)
			Origin.z = CeilingZ - Height;
	}

	if (CeilingZ - FloorZ < Height)
		return false;

	return true;
}

//==========================================================================
//
//	SectorChanged
//
//==========================================================================

bool SectorChanged(int CrushChange)
{
	Actor B;

	if (HeightClip())
	{
		return true;
	}

	//	Crunch bodies to giblets
	if (bCorpse && (Health <= 0))
	{
		if (bNoBlood)
		{
			Remove();
		}
		else
		{
			if (State != S_GIBS1)
			{
				SetState(S_GIBS1);
				Height = 0.0;
				Radius = 0.0;
				PlaySound('*splat', CHAN_VOICE);
			}
		}
		return true;
	}

	//	Crunch dropped items
	if (bDropped)
	{
		Remove();
		return true;
	}

	if (!bShootable)
	{
		//	Assume it is bloody gibs or something
		return true;
	}

	if (CrushChange && !(Level.Game.level->tictime & 3))
	{
		Damage(none, none, CrushChange);

		// spray blood in a random direction
		if (!bNoBlood && !bInvulnerable)
		{
			B = Spawn(Blood, Origin + vector(0.0, 0.0, Height / 2.0));
			B.Velocity.x = (Random() - Random()) * 16.0 * 35.0;
			B.Velocity.y = (Random() - Random()) * 16.0 * 35.0;
		}
	}
	return false;	//don't fit
}

//==========================================================================
//
//  PIT_StompThing
//
//==========================================================================

bool PIT_StompThing(Entity Other)
{
	float blockdist;

	if (!Actor(Other).bShootable)
	{
		return true;
	}

	blockdist = Other.Radius + Radius;

	if (fabs(Other.Origin.x - teleport_pos.x) >= blockdist ||
		fabs(Other.Origin.y - teleport_pos.y) >= blockdist)
	{
		// didn't hit it
		return true;
	}

	// don't clip against self
	if (Other == self)
	{
		return true;
	}

	//  Check if allowed to stomp things
	if (!bTelestomp && !XLevel.bAllowMonsterTelefrags)
	{
		return false;
	}

	//Actor(Other).Damage(self, self, 10000);
	Actor(Other).Damage(self, none, 10000);		// [CW] changed to allow telfrag deathmsg usage

	return true;
}

//==========================================================================
//
//  TeleportMove
//
//==========================================================================

bool TeleportMove(TVec pos)
{
	int xl;
	int xh;
	int yl;
	int yh;
	int bx;
	int by;

	// kill anything occupying the position
	teleport_pos = pos;

	// stomp on any things contacted
	xl = MapBlock(pos.x - Radius - XLevel.BlockMapOrgX - MAXRADIUS);
	xh = MapBlock(pos.x + Radius - XLevel.BlockMapOrgX + MAXRADIUS);
	yl = MapBlock(pos.y - Radius - XLevel.BlockMapOrgY - MAXRADIUS);
	yh = MapBlock(pos.y + Radius - XLevel.BlockMapOrgY + MAXRADIUS);

	for (bx = xl; bx <= xh; bx++)
		for (by = yl; by <= yh; by++)
			if (!XLevel.BlockThingsIterator(bx, by, self, 'PIT_StompThing'))
				return false;

	// the move is ok,
	// so link the thing into its new position
	UnlinkFromWorld();
	Origin = pos;
	LinkToWorld();
	if (pos.z == ONFLOORZ)
	{
		Origin.z = FloorZ;
	}

	return true;
}

//==========================================================================
//
//	Teleport
//
//==========================================================================

bool Teleport(TVec pos, float angle, bool DstFog, bool SrcFog, bool KeepDir)
{
	TVec oldOrg;
	float aboveFloor;
	float fogDelta;
	Actor fog;

	oldOrg = Origin;
	aboveFloor = Origin.z - FloorZ;
	if (!TeleportMove(pos))
	{
		return false;
	}
	if (bIsPlayer)
	{
		if (Player(Player).Powers[pw_flight] && aboveFloor)
		{
			Origin.z = Origin.z + aboveFloor;
			if (Origin.z + Height > CeilingZ)
			{
				Origin.z = CeilingZ - Height;
			}
			Player.ViewOrg.z = Origin.z + Player(Player).ViewHeight;
		}
		else
		{
			Player.ViewOrg.z = Origin.z + Player(Player).ViewHeight;
			if (!KeepDir)
			{
				Angles.pitch = 0.0;
			}
		}
	}
	else if (bMissile)
	{
		Origin.z = Origin.z + aboveFloor;
		if (Origin.z + Height > CeilingZ)
		{
			Origin.z = CeilingZ - Height;
		}
	}
	// Spawn teleport fog at source and destination
	fogDelta = bMissile ? 0.0 : TELEFOGHEIGHT;
	if (SrcFog)
	{
		fog = Spawn(TeleportFog, oldOrg + vector(0.0, 0.0, fogDelta));
		fog.PlaySound('Teleport', CHAN_VOICE);
	}
	if (DstFog)
	{
		fog = Spawn(TeleportFog, Origin + vector(20.0 * cos(angle),
			20.0 * sin(angle), fogDelta));
		fog.PlaySound('Teleport', CHAN_VOICE);
	}
	if (!KeepDir)
	{
		if (bIsPlayer && !Player(Player).Powers[pw_speed])
		{
			// Freeze player for about .5 sec
			ReactionTime = 0.5;
		}
		Angles.yaw = angle;
		if (bIsPlayer)
			Player.bFixAngle = true;
	}
	HandleFloorclip();
	if (bMissile)
	{
		Velocity.x = Speed * cos(angle);
		Velocity.y = Speed * sin(angle);
	}
	else if (!KeepDir)	// no fog doesn't alter the player's momentums
	{
		Velocity = vector(0.0, 0.0, 0.0);
	}
	return true;
}

//==========================================================================
//
//  CheckMissileSpawn
//
//  Returns true if the missile is at a valid spawn point, otherwise
// explodes it and returns false.
//
//==========================================================================

bool CheckMissileSpawn()
{
	// move a little forward so an angle can be computed if it
	// immediately explodes
	Origin += Velocity * 0.0142857143;
	if (!TryMove(Origin))
	{
		ExplodeMissile();
		return false;
	}
	return true;
}

//==========================================================================
//
//  SpawnMissileAngle
//
//  Returns NULL if the missile exploded immediately, otherwise returns
// a Actor reference to the missile.
//
//==========================================================================

Actor SpawnMissileAngle(class<Actor> type, float angle, float momz)
{
	TVec org;
	Actor mo;

	org = Origin;
	if (type == MinotaurMissile)
	{
		// Minotaur swing attack missile
		org.z = Origin.z + 40.0;
	}
	else if (type == MinotaurFloorFire1)
	{
		// Minotaur floor fire missile
		org.z = ONFLOORZ + FloorClip;
	}
	else if (type == IceGuyMissile2)
	{
		// Secondary Projectiles of the Ice Guy
		org.z = Origin.z + 3.0;
	}
	else if (type == MageStaffFX2 || type == InfernalHandFX)
	{
		org.z = Origin.z + 40.0;
	}
	else if (IsA('PlayerHeresiarch'))
	{
		org.z = Origin.z + (Height / 2.0);
	}
	else
	{
		org.z = Origin.z + 32.0;
	}
	org.z -= FloorClip;
	mo = Spawn(type, org);
	if (mo.SightSound)
	{
		mo.PlaySound(mo.SightSound, CHAN_VOICE);
	}
	mo.Instigator = self;	// Originator
	mo.Angles.yaw = angle;
	mo.Velocity.x = mo.Speed * cos(angle);
	mo.Velocity.y = mo.Speed * sin(angle);
	mo.Velocity.z = momz;
	return mo.CheckMissileSpawn() ? mo : none;
}

//==========================================================================
//
//  SpawnMissileAngleSpeed
//
//  Returns NULL if the missile exploded immediately, otherwise returns
// a Actor reference to the missile.
//
//==========================================================================

Actor SpawnMissileAngleSpeed(class<Actor> type, float angle,
	float momz, float speed)
{
	TVec org;
	Actor mo;

	org = Origin;
	org.z -= FloorClip;
	mo = Spawn(type, org);
	mo.Instigator = self;	// Originator
	mo.Angles.yaw = angle;
	mo.Velocity.x = speed * cos(angle);
	mo.Velocity.y = speed * sin(angle);
	mo.Velocity.z = momz;
	return mo.CheckMissileSpawn() ? mo : none;
}

//==========================================================================
//
//  SeekerMissile
//
//  Returns true if target was tracked, false if not.
//
//==========================================================================

bool SeekerMissile(float thresh, float turnMax)
{
	int dir;
	float dist;
	float delta;
	float angle;

	if (!Enemy)
	{
		return false;
	}
	if (!Enemy.bShootable)
	{
		// Enemy died
		Enemy = none;
		return false;
	}
	dir = FaceActor(Enemy, &delta);
	if (delta > thresh)
	{
		delta /= 2.0;
		if (delta > turnMax)
		{
			delta = turnMax;
		}
	}
	if (dir)
	{
		// Turn clockwise
		Angles.yaw += delta;
	}
	else
	{
		// Turn counter clockwise
		Angles.yaw -= delta;
	}
	Angles.yaw = AngleMod360(Angles.yaw);
	angle = Angles.yaw;
	Velocity.x = Speed * cos(angle);
	Velocity.y = Speed * sin(angle);
	if (Origin.z + Height < Enemy.Origin.z ||
		Enemy.Origin.z + Enemy.Height < Origin.z)
	{
		// Need to seek vertically
		dist = DistTo2(Enemy);
		dist = dist / Speed;
		if (dist < 1.0)
		{
			dist = 1.0;
		}
		Velocity.z = (Enemy.Origin.z + Enemy.Height / 2.0 -
			Origin.z - Height / 2.0) / dist;
	}
	return true;
}

//==========================================================================
//
//  ExplodeMissile
//
//==========================================================================

bool ExplodeMissile()
{
	Velocity = vector(0.0, 0.0, 0.0);
	if (!SetState(DeathState))
	{
		return false;
	}

//	mo->tics -= P_Random() & 3;
	bMissile = false;

	if (SorcererBall(self))
	{
		PlaySound('SorcererBigBallExplode', CHAN_AUTO, 1.0, ATTN_NONE);
	}
	else if (SorcererFX1(self))
	{
		PlaySound('SorcererHeadScream', CHAN_AUTO, 1.0, ATTN_NONE);
	}
	else if (DeathSound)
	{
		PlaySound(DeathSound, CHAN_VOICE);
	}
	if (!(Effects & HexenDefs::EF_DL_ROCKET) && (Effects & HexenDefs::EF_DLIGHT_MASK))
	{
		MSG_Select(MSG_SV_DATAGRAM);
		if (MSG_CheckSpace(8))
		{
			MSG_WriteByte(HexenDefs::svc_explosion2);
			MSG_WriteByte(Effects & HexenDefs::EF_DLIGHT_MASK);
			MSG_WriteShort(ftoi(Origin.x));
			MSG_WriteShort(ftoi(Origin.y));
			MSG_WriteShort(ftoi(Origin.z));
		}
		Effects &= ~HexenDefs::EF_DLIGHT_MASK;
	}
	if (Effects & HexenDefs::EF_DL_ROCKET)
		Effects &= ~HexenDefs::EF_DL_ROCKET;

	return true;
}

//==========================================================================
//
//  Blast
//
//==========================================================================

void Blast(Actor source, float strength)
{
	float angle;
	float ang;
	Actor A;
	float x;
	float y;
	float z;

	angle = atan2(Origin.y - source.Origin.y, Origin.x - source.Origin.x);
	if (strength < Player::BLAST_FULLSTRENGTH)
	{
		Velocity.x = strength * cos(angle) * 35.0;
		Velocity.y = strength * sin(angle) * 35.0;
		if (bIsPlayer)
		{
			// Players handled automatically
		}
		else
		{
			bSlide = true;
			bBlasted = true;
		}
	}
	else	// full strength blast from artifact
	{
		if (bMissile)
		{
			if (SorcererBall(self))
			{
				// don't blast sorcerer balls
				return;
			}
			else if (MageStaffFX2(self) || InfernalHandFX(self))
			{
				// Reflect to originator
				Enemy = Instigator;
				Instigator = source;
			}
		}
		if (Class == HolyFX)
		{
			if (Enemy == source)
			{
				Enemy = Instigator;
				Instigator = source;
			}
		}
		Velocity.x = Player::BLAST_SPEED * cos(angle) * 35.0;
		Velocity.y = Player::BLAST_SPEED * sin(angle) * 35.0;

		// Spawn blast puff
		ang = atan2(source.Origin.y - Origin.y, source.Origin.x - Origin.x);
		x = Origin.x + (Radius + 1.0) * cos(ang);
		y = Origin.y + (Radius + 1.0) * sin(ang);
		z = Origin.z - FloorClip + Height / 2.0;
		A = Spawn(BlastEffect, vector(x, y, z));
		if (A)
		{
			A.Velocity.x = Velocity.x;
			A.Velocity.y = Velocity.y;
		}

		if (bMissile)
		{
			Velocity.z = 8.0 * 35.0;
			A.Velocity.z = Velocity.z;
		}
		else
		{
			Velocity.z = 1000.0 / Mass * 35.0;
		}
		if (bIsPlayer)
		{
			// Players handled automatically
		}
		else
		{
			bSlide = true;
			bBlasted = true;
		}
	}
}

//**************************************************************************
//
//  RADIUS ATTACK
//
//**************************************************************************

//==========================================================================
//
//  PIT_RadiusAttack
//
//  "bombsource" is the creature that caused the explosion at "bombspot".
//
//==========================================================================

bool PIT_RadiusAttack(Entity Other)
{
	float dist;
	int damage;

	if (!Actor(Other).bShootable)
	{
		return true;
	}
	// [FB] Enable for KA!
	if (Actor(Other).bBoss)
	{
		// Bosses take no damage from PIT_RadiusAttack
		return true;
	}
	if (!DamageSource && Other == Instigator)
	{
		// don't damage the source of the explosion
		return true;
	}
	dist = Length(MobjCentre(Other) - MobjCentre(self)) - Other.Radius;
	if (dist < 0.0)
	{
		dist = 0.0;
	}
	if (dist >= bombdistance)
	{
		// Out of range
		return true;
	}
	if (Other.CanSee(self))
	{
		// OK to damage, target is in direct path
		damage = (bombdamage * ftoi(bombdistance - dist) /
			ftoi(bombdistance)) + 1;
		if (Other.bIsPlayer)
		{
			damage >>= 2;
		}
		Actor(Other).Damage(self, Instigator, damage);
	}
	return true;
}

//==========================================================================
//
//  P_RadiusAttack
//
//  Source is the creature that caused the explosion at spot.
//
//==========================================================================

void P_RadiusAttack(int damage, float distance, bool damageSource)
{
	int x, y, xl, xh, yl, yh;

	yh = MapBlock(Origin.y + distance - XLevel.BlockMapOrgY);
	yl = MapBlock(Origin.y - distance - XLevel.BlockMapOrgY);
	xh = MapBlock(Origin.x + distance - XLevel.BlockMapOrgX);
	xl = MapBlock(Origin.x - distance - XLevel.BlockMapOrgX);
	bombdamage = damage;
	bombdistance = distance;
	DamageSource = damageSource;
	for (y = yl; y <= yh; y++)
	{
		for (x = xl; x <= xh; x++)
		{
			XLevel.BlockThingsIterator(x, y, self, 'PIT_RadiusAttack');
		}
	}
}

//**************************************************************************
//
//  AIMING
//
//**************************************************************************

//==========================================================================
//
//  PTR_AimTraverse
//
//  Sets linetaget and aim_slope when a target is aimed at.
//
//==========================================================================

bool PTR_AimTraverse(intercept_t * in)
{
	line_t *li;
	Actor th;
	float thingtopslope;
	float thingbottomslope;
	float dist;
	float slope;
	opening_t *open;

	if (in->bIsALine)
	{
		//TVec hit_point;

		li = in->line;

		if (!(li->flags & ML_TWOSIDED))
			return false;	// stop

		// Crosses a two sided line.
		// A two sided line will restrict
		// the possible target ranges.
		dist = aim_range * in->frac;
		hit_point = Origin + dist * aim_dir;
		open = LineOpenings(li, hit_point);
		open = FindOpening(open, hit_point.z, hit_point.z);

		if (!open || open->bottom >= open->top)
			return false;	// stop

		dist = aim_range2d * in->frac;
		if (li->frontsector->floorheight != li->backsector->floorheight)
		{
			slope = (open->bottom - aim_z) / dist;
			if (slope > aim_bottomslope)
				aim_bottomslope = slope;
		}

		if (li->frontsector->ceilingheight != li->backsector->ceilingheight)
		{
			slope = (open->top - aim_z) / dist;
			if (slope < aim_topslope)
				aim_topslope = slope;
		}

		if (aim_topslope <= aim_bottomslope)
			return false;	// stop

		return true;	// shot continues
	}

	// shoot a thing
	th = Actor(in->Thing);
	if (th == self)
		return true;	// can't shoot self

	if (!th.bShootable)
		return true;	// corpse or something

	if (th.bIsPlayer && Level.Game.netgame && !Level.Game.deathmatch)
	{
		// don't aim at fellow co-op players
		return true;
	}

	// check angles to see if the thing can be aimed at
	dist = aim_range2d * in->frac;
	thingtopslope = (th.Origin.z + th.Height - aim_z) / dist;

	if (thingtopslope < aim_bottomslope)
		return true;	// shot over the thing

	thingbottomslope = (th.Origin.z - aim_z) / dist;

	if (thingbottomslope > aim_topslope)
		return true;	// shot under the thing

	// this thing can be hit!
	if (thingtopslope > aim_topslope)
		thingtopslope = aim_topslope;

	if (thingbottomslope < aim_bottomslope)
		thingbottomslope = aim_bottomslope;

	aim_slope = (thingtopslope + thingbottomslope) / 2.0;
	linetarget = th;

	return false;	// don't go any farther
}

//==========================================================================
//
//  AimLineAttack
//
//==========================================================================

void AimLineAttack(TAVec * angles, float distance)
{
	float x2;
	float y2;
	float topangle;
	float botangle;

	AngleVector(angles, &aim_dir);
	x2 = Origin.x + distance * aim_dir.x;
	y2 = Origin.y + distance * aim_dir.y;
	aim_z = Origin.z + Height / 2.0 + 8.0 - FloorClip;
	aim_range2d =
		Length(vector(distance * aim_dir.x, distance * aim_dir.y, 0.0));

	// can't shoot outside view angles
	topangle = AngleMod180(-angles->pitch + 30.0);
	botangle = AngleMod180(-angles->pitch - 30.0);
	if (topangle > 89.0)
		topangle = 89.0;
	if (botangle < -89.0)
		botangle = -89.0;
	aim_topslope = tan(topangle);
	aim_bottomslope = tan(botangle);

	aim_range = distance;
	linetarget = none;

	XLevel.PathTraverse(Origin.x, Origin.y, x2, y2,
		PT_ADDLINES | PT_ADDTHINGS, self, 'PTR_AimTraverse');

	if (linetarget)
	{
		angles->pitch = -atan(aim_slope);
	}
}

//**************************************************************************
//
//  SHOOTING
//
//**************************************************************************

//==========================================================================
//
//  ShootHitPlane
//
//==========================================================================

bool ShootHitPlane(sec_plane_t * plane)
{
	float org_dist;
	float hit_dist;

	if (plane->flags & SPF_NOBLOCKSHOOT)
	{
		//  Doesn't block shooting
		return true;
	}
	org_dist = DotProduct(shoot_linestart, plane->normal) - plane->dist;
	if (org_dist < 0.0)
	{
		//  Don't shoot back side
		return true;
	}
	hit_dist = DotProduct(shoot_lineend, plane->normal) - plane->dist;
	if (hit_dist >= 0.0)
	{
		//  Didn't hit plane
		return true;
	}

	//  Hit plane
	if (plane->pic == Level.Game.skyflatnum)
	{
		// don't shoot the sky!
		return false;
	}

	//  If we are shooting floor or ceiling we are adjusting position
	// to spawn puff on floor or ceiling, not on wall
	shoot_lineend -= (shoot_lineend - shoot_linestart) * hit_dist / (hit_dist - org_dist);

	// position a bit closer
	shoot_lineend += 4.0 * plane->normal;

	// Spawn bullet puffs.
	SpawnPuff(shoot_lineend, shootPuffType);

	// don't go any farther
	return false;
}

//==========================================================================
//
//  ShootCheckPlanes
//
//==========================================================================

bool ShootCheckPlanes(sector_t * sec)
{
	sec_region_t *reg;
	sec_region_t *startreg;

	startreg = PointInRegion(sec, shoot_linestart);
	for (reg = startreg; reg; reg = reg->next)
	{
		if (!ShootHitPlane(reg->floor))
		{
			//  Hit floor
			return false;
		}
		if (!ShootHitPlane(reg->ceiling))
		{
			//  Hit ceiling
			return false;
		}
	}
	for (reg = startreg->prev; reg; reg = reg->prev)
	{
		if (!ShootHitPlane(reg->floor))
		{
			//  Hit floor
			return false;
		}
		if (!ShootHitPlane(reg->ceiling))
		{
			//  Hit ceiling
			return false;
		}
	}
	return true;
}

//==========================================================================
//
//  PTR_ShootTraverse
//
//==========================================================================

bool PTR_ShootTraverse(intercept_t * in)
{
	//TVec hit_point;
	line_t *li;
	Actor th;

	if (in->bIsALine)
	{
		sector_t *sec;

		li = in->line;
		hit_point = shoot_origin + (shoot_range * in->frac) * shoot_dir;
		if (li->flags & ML_TWOSIDED && PointOnPlaneSide(shoot_origin, li))
		{
			sec = li->backsector;
		}
		else
		{
			sec = li->frontsector;
		}

		shoot_lineend = hit_point;

		//  Check for shooting floor or ceiling
		if (!ShootCheckPlanes(sec))
		{
			return false;
		}

		shoot_linestart = shoot_lineend;

		//  Execute line special after checking for hitting floor or ceiling
		// when we know that it actally hits line
		if (li->special)
		{
			HexenLevelInfo(Level).ActivateLine(li, self, 0, SPAC_IMPACT);
		}

		if (li->flags & ML_TWOSIDED)
		{
			// crosses a two sided line
			opening_t *open;
			float opentop = 0.0;

			open = LineOpenings(li, hit_point);
			if (open)
			{
				opentop = open->top;
			}
			while (open)
			{
				if (open->bottom <= hit_point.z && open->top >= hit_point.z)
				{
					// shot continues
					return true;
				}
				open = open->next;
			}
			if (li->frontsector->ceiling.pic == Level.Game.skyflatnum &&
				li->backsector->ceiling.pic == Level.Game.skyflatnum &&
				hit_point.z > opentop)
			{
				// it's a sky hack wall
				return false;
			}
		}

		//  Hit line

		// position a bit closer
		hit_point -= 4.0 * shoot_dir;

		// Spawn bullet puffs.
		SpawnPuff(hit_point, shootPuffType);

		// don't go any farther
		return false;
	}

	// shoot a thing
	th = Actor(in->Thing);

	if (th == self)
		return true;	// can't shoot self

	if (!th.bShootable)
		return true;	// corpse or something

	// check angles to see if the thing can be aimed at
	hit_point = shoot_origin + (shoot_range * in->frac) * shoot_dir;

	if (th.Origin.z + th.Height < hit_point.z)
		return true;	// shot over the thing

	if (th.Origin.z > hit_point.z)
		return true;	// shot under the thing

	// hit thing
	// position a bit closer
	hit_point -= 10.0 * shoot_dir;

	SpawnPuff(hit_point, shootPuffType);

	if (la_damage)
	{
		if (!th.bNoBlood && !th.bInvulnerable)
		{
			if (shootPuffType == AxePuff || shootPuffType == AxePuffGlow)
			{
				th.SpawnBloodSplatter2(hit_point);
			}
			if (P_Random() < 192)
			{
				th.SpawnBloodSplatter(hit_point, la_damage);
			}
		}
		if (shootPuffType == FlamePuff2)
		{
			// Cleric FlameStrike does fire damage
			th.Damage(HexenLevelInfo(Level).GLavaInflictor, self, la_damage);
		}
		else
		{
			th.Damage(self, self, la_damage);
		}
	}

	// don't go any farther
	return false;
}

//==========================================================================
//
//  LineAttack
//
//  If damage == 0, it is just a test trace that will leave linetarget set.
//
//==========================================================================

int LineAttack(TVec dir, float distance, int damage, class<Actor> PuffType)
{
	TVec dst;

	la_damage = damage;
	shootPuffType = PuffType;

	shoot_origin = Origin;
	shoot_origin.z += Height * 0.5 + 8.0 - FloorClip;

	shoot_dir = dir;
	shoot_range = distance;

	dst = shoot_origin + shoot_range * shoot_dir;
	shoot_linestart = shoot_origin;
	if (!XLevel.PathTraverse(Origin.x, Origin.y, dst.x, dst.y,
			PT_ADDLINES | PT_ADDTHINGS, self, 'PTR_ShootTraverse'))
	{
		return false;
	}
	shoot_lineend = dst;
	return ShootCheckPlanes(XLevel.PointInSector(dst));
}

//==========================================================================
//
//  SpawnPuff
//
//==========================================================================

void SpawnPuff(TVec org, class<Actor> PuffType)
{
	Actor puff;

	if (!PuffType)
		return;

	org.z += (Random() - Random()) * 4.0;
	puff = Spawn(PuffType, org);
	if (linetarget && puff.SightSound)
	{
		// Hit thing sound
		puff.PlaySound(puff.SightSound, CHAN_VOICE);
	}
	else if (puff.AttackSound)
	{
		puff.PlaySound(puff.AttackSound, CHAN_VOICE);
	}
	if (PuffType == PunchPuff)
	{
		puff.Velocity.z = 1.0 * 35.0;
	}
	else if (PuffType == HammerPuff)
	{
		puff.Velocity.z = 8.0 / 10.0 * 35.0;
	}

	if (PuffType == GoldWandPuff1)
	{
		MSG_Select(MSG_SV_DATAGRAM);
		if (MSG_CheckSpace(8))
		{
			MSG_WriteByte(HexenDefs::svc_explosion2);
			MSG_WriteByte(HexenDefs::EF_DL_WHITE);
			MSG_WriteShort(ftoi(org.x));
			MSG_WriteShort(ftoi(org.y));
			MSG_WriteShort(ftoi(org.z));
		}
	}
	if (PuffType == BlasterPuff1)
	{
		MSG_Select(MSG_SV_DATAGRAM);
		if (MSG_CheckSpace(8))
		{
			MSG_WriteByte(HexenDefs::svc_explosion2);
			MSG_WriteByte(HexenDefs::EF_DL_BLUE);
			MSG_WriteShort(ftoi(org.x));
			MSG_WriteShort(ftoi(org.y));
			MSG_WriteShort(ftoi(org.z));
		}
	}
	if (PuffType == DoomPuff)
	{
		MSG_Select(MSG_SV_DATAGRAM);
		if (MSG_CheckSpace(7))
		{
			MSG_WriteByte(HexenDefs::svc_gun_shot);
			MSG_WriteShort(ftoi(org.x));
			MSG_WriteShort(ftoi(org.y));
			MSG_WriteShort(ftoi(org.z));
		}
	}

	MainGameInfo(Level.Game).PuffSpawned = puff;
}

//==========================================================================
//
//  A_HideThing
//
//==========================================================================

final void A_HideThing()
{
	bHidden = true;
}

//==========================================================================
//
//  A_UnHideThing
//
//==========================================================================

final void A_UnHideThing()
{
	bHidden = false;
}

//===========================================================================
//
//  A_NoGravity
//
//===========================================================================

final void A_NoGravity()
{
	bNoGravity = true;
}

//============================================================================
//
//  A_SetInvulnerable
//
//============================================================================

final void A_SetInvulnerable()
{
	bInvulnerable = true;
}

//============================================================================
//
//  A_UnSetInvulnerable
//
//============================================================================

final void A_UnSetInvulnerable()
{
	bInvulnerable = false;
}

//==========================================================================
//
//  A_Pain
//
//==========================================================================

final void A_Pain()
{
	if (bIsPlayer && /*!Player(Player).MorphTime*/Player(Player).PClass != HexenDefs::PCLASS_PIG)
	{
		if (Health < 25)
		{
			PlaySound('*pain25', CHAN_VOICE);
		}
		else if (Health < 50)
		{
			PlaySound('*pain50', CHAN_VOICE);
		}
		else if (Health < 75)
		{
			PlaySound('*pain75', CHAN_VOICE);
		}
		else
		{
			PlaySound('*pain100', CHAN_VOICE);
		}
	}
	else if (PainSound)
	{
		PlaySound(PainSound, CHAN_VOICE);
	}
}

//============================================================================
//
//  A_FreeTargMobj
//
//============================================================================

final void A_FreeTargMobj()
{
	Velocity = vector(0.0, 0.0, 0.0);
	Origin.z = CeilingZ + 4.0;
	bSolid = false;
	bShootable = false;
	bFloat = false;
	bCountKill = false;
	bSkullFly = false;
	bDropOff = true;
	bNoGravity = true;
	bCorpse = true;
	bNoPassMobj = true;
	Alpha = 0.0;
	Player = none;
	bIsPlayer = false;
	Health = -1000;	// Don't resurrect
}

//============================================================================
//
//  A_Scream
//
//============================================================================

final void A_Scream()
{
	StopSound(CHAN_AUTO);
	if (bIsPlayer)
	{
		if (/*Player(Player).MorphTime*/Player(Player).PClass != HexenDefs::PCLASS_PIG)
		{
			PlaySound(DeathSound, CHAN_VOICE);
		}
		else
		{
			// Handle the different player death screams
			if (Velocity.z <= -39.0 * 35.0)
			{
				// Falling splat
				PlaySound('*splat', CHAN_VOICE);
			}
			else if (Health > -50)
			{
				// Normal death sound
				PlaySound('*death', CHAN_VOICE);
			}
			else if (Health > -100)
			{
				// Crazy death sound
				PlaySound('*crazydeath', CHAN_VOICE);
			}
			else
			{
				// Extreme death sound
				PlaySound('*xdeath', CHAN_VOICE);
			}
		}
	}
	else
	{
		PlaySound(DeathSound, CHAN_VOICE);
	}
}

//============================================================================
//
//  A_Explode
//
//  Handles a bunch of exploding things.
//
//============================================================================

final void A_Explode()
{
	int damage;
	float distance;
	int damageSelf;

	damage = 128;
	distance = 128.0;
	damageSelf = true;
	if (Class == FireBomb)
	{
		// Time Bombs
		Origin.z += 32.0;
		Alpha = 1.0;
	}
	else if (Class == MinotaurFloorFire1)
	{
		// Minotaur floor fire
		damage = 24;
	}
	else if (Class == Bishop)
	{
		// Bishop radius death
		damage = 25 + (P_Random() & 15);
	}
	else if (Class == HammerMissile)
	{
		// Fighter Hammer
		damage = 128;
		damageSelf = false;
		if (Instigator && Instigator.bIsPlayer)
		{
			damage = damage * Player(Instigator.Player).intelligence / 10;
		}
	}
	else if (Class == FighterSwordMissile)
	{
		// Fighter Runesword
		damage = 64;
		damageSelf = false;
		if (Instigator && Instigator.bIsPlayer)
		{
			damage = damage * Player(Instigator.Player).intelligence / 10;
		}
	}
	else if (Class == CircleFlame)
	{
		// Cleric Flame secondary flames
		damage = 20;
		damageSelf = false;
		if (Instigator && Instigator.bIsPlayer)
		{
			damage = damage * Player(Instigator.Player).intelligence / 10;
		}
	}
	else if (SorcererBall(self))
	{
		// Sorcerer balls
		distance = 255.0;
		damage = 255;
		Args[0] = 1;	// don't play bounce
	}
	else if (Class == SorcererFX1)
	{
		// Sorcerer spell 1
		damage = 30;
	}
	else if (Class == SorcererFX4)
	{
		// PlayerHeresiarch'es fire
		if (Instigator && Instigator.bIsPlayer)
		{
			damage = SorcererFX4(self).ExplodeDamage;
			damageSelf = false;
		}
		else
		{
			// Sorcerer spell 4
			damage = 20;
		}
	}
	else if (Class == TreeDestructible)
	{
		damage = 10;
	}
	else if (Class == DragonFX2)
	{
		damage = 80;
		damageSelf = false;
	}
	else if (Class == MageStaffFX)
	{
		damage = 64;
		distance = 192.0;
		damageSelf = false;
		if (Instigator && Instigator.bIsPlayer)
		{
			damage = damage * Player(Instigator.Player).intelligence / 10;
		}
	}
	else if (Class == MageStaffFX2)
	{
		damage = 80;
		distance = 192.0;
		damageSelf = false;
		if (Instigator && Instigator.bIsPlayer)
		{
			damage = damage * Player(Instigator.Player).intelligence / 10;
		}
	}
	else if (Class == ZXmasTree || Class == ZShrub2)
	{
		damage = 30;
		distance = 64.0;
	}
	else if (Class == MorningStarMissile)
	{
		damage = 80;		
		if (Instigator && Instigator.bIsPlayer)
		{
			damage = damage * Player(Instigator.Player).intelligence / 10;
		}
	}
	else if (Class == WElectricBall)
	{
		damage = 120;
		distance = 192.0;
		damageSelf = false;
		if (Instigator && Instigator.bIsPlayer)
		{
			damage = damage * Player(Instigator.Player).intelligence / 10;
		}
	}
	else if (Class == InfernalHandFX)
	{
		damageSelf = false;
		damage = InfernalHandFX(self).ExplodeDamage;
		distance = InfernalHandFX(self).ExplodeDistance;
	}
	else if (Class == PoisonCloud)
	{
		damage = 4;
		distance = 40.0;
	}

	P_RadiusAttack(damage, distance, damageSelf);
	if (Class != PoisonCloud && Origin.z <= FloorZ + distance)
	{
		HitFloorType();
	}

	if ((Effects & HexenDefs::EF_DL_ROCKET) && (Effects & HexenDefs::EF_DLIGHT_MASK))
	{
		//  Spawn explosion effects - dynamic light and particles
		MSG_Select(MSG_SV_DATAGRAM);
		if (MSG_CheckSpace(7))
		{
			MSG_WriteByte(HexenDefs::svc_explosion);
			MSG_WriteShort(ftoi(Origin.x));
			MSG_WriteShort(ftoi(Origin.y));
			MSG_WriteShort(ftoi(Origin.z + Height * 0.5));
		}

		//  Clear old dynamic light effect
		Effects &= ~HexenDefs::EF_DLIGHT_MASK;
	}
	else if (ExplodeEffect)
	{
		MSG_Select(MSG_SV_DATAGRAM);
		if (MSG_CheckSpace(8))
		{
			MSG_WriteByte(HexenDefs::svc_explosion2);
			MSG_WriteByte(ExplodeEffect);
			MSG_WriteShort(ftoi(Origin.x));
			MSG_WriteShort(ftoi(Origin.y));
			MSG_WriteShort(ftoi(Origin.z));
		}
	}
}

//============================================================================
//
//  A_NoBlocking
//
//============================================================================

final void A_NoBlocking()
{
	bSolid = false;
}

//============================================================================
//
//  A_AddPlayerCorpse
//
//============================================================================

final void A_AddPlayerCorpse()
{
	if (HexenLevelInfo(Level).bodyqueslot >= /*HexenLevelInfo::BODYQUESIZE*/HexenLevelInfo(Level).BodyQueSize)
	{
		// Too many player corpses - remove an old one
		HexenLevelInfo(Level).bodyque[HexenLevelInfo(Level).bodyqueslot % /*HexenLevelInfo::BODYQUESIZE*/HexenLevelInfo(Level).BodyQueSize].Remove();
	}
	HexenLevelInfo(Level).bodyque[HexenLevelInfo(Level).bodyqueslot % /*HexenLevelInfo::BODYQUESIZE*/HexenLevelInfo(Level).BodyQueSize] = self;
	HexenLevelInfo(Level).bodyqueslot++;
}

//============================================================================
//
//  A_CheckBurnGone
//
//============================================================================

final void A_CheckBurnGone()
{
	if (_Special2 == 666)
	{
		SetState(S_PLAY_FDTH20);
	}
}

//============================================================================
//
//  A_QueueCorpse
//
//  Throw another corpse on the queue.
//
//============================================================================

final void A_QueueCorpse()
{
	Actor corpse;

	if (HexenLevelInfo(Level).corpseQueueSlot >= /*HexenLevelInfo::CORPSEQUEUESIZE*/HexenLevelInfo(Level).CorpseQueSize)
	{
		// Too many corpses - remove an old one
		corpse = HexenLevelInfo(Level).corpseQueue[HexenLevelInfo(Level).corpseQueueSlot % /*HexenLevelInfo::CORPSEQUEUESIZE*/HexenLevelInfo(Level).CorpseQueSize];
		if (corpse)
			corpse.Remove();
	}
	HexenLevelInfo(Level).corpseQueue[HexenLevelInfo(Level).corpseQueueSlot % /*HexenLevelInfo::CORPSEQUEUESIZE*/HexenLevelInfo(Level).CorpseQueSize] = self;
	HexenLevelInfo(Level).corpseQueueSlot++;
}

//============================================================================
//
//  A_DeQueueCorpse
//
//  Remove a mobj from the queue (for resurrection)
//
//============================================================================

final void A_DeQueueCorpse()
{
	int slot;

	for (slot = 0; slot < /*HexenLevelInfo::CORPSEQUEUESIZE*/HexenLevelInfo(Level).CorpseQueSize; slot++)
	{
		if (HexenLevelInfo(Level).corpseQueue[slot] == self)
		{
			HexenLevelInfo(Level).corpseQueue[slot] = none;
			break;
		}
	}
}

//============================================================================
//
//  A_PigPain
//
//============================================================================

final void A_PigPain()
{
	A_Pain();
	if (Origin.z <= FloorZ)
	{
		Velocity.z = 3.5 * 35.0;
	}
}

__states__
{
	S_FREETARGMOBJ('ACLO', 4, 1050.0 / 35.0, none) = A_FreeTargMobj
	S_ZTREEDES_X1('TRDT', 7 | FF_FULLBRIGHT, 5.0 / 35.0, S_ZTREEDES_X2) = none
	S_ZTREEDES_X2('TRDT', 8 | FF_FULLBRIGHT, 5.0 / 35.0, S_ZTREEDES_X3) = none
	S_ZTREEDES_X3('TRDT', 9 | FF_FULLBRIGHT, 5.0 / 35.0, S_ZTREEDES_X4) = none
	S_ZTREEDES_X4('TRDT', 10 | FF_FULLBRIGHT, 5.0 / 35.0, S_ZTREEDES_X5) = none
	S_ZTREEDES_X5('TRDT', 11 | FF_FULLBRIGHT, 5.0 / 35.0, S_ZTREEDES_X6) = none
	S_ZTREEDES_X6('TRDT', 12 | FF_FULLBRIGHT, 5.0 / 35.0, S_ZTREEDES_X7) = A_Explode
	S_ZTREEDES_X7('TRDT', 13 | FF_FULLBRIGHT, 5.0 / 35.0, S_ZTREEDES_X8) = none
	S_ZTREEDES_X8('TRDT', 14, 5.0 / 35.0, S_ZTREEDES_X9) = none
	S_ZTREEDES_X9('TRDT', 15, 5.0 / 35.0, S_ZTREEDES_X10) = none
	S_ZTREEDES_X10('TRDT', 16, -1.0, none) = none
	S_GIBS1('GIBS', 0, -1.0, none) = none
	S_PLAY_F_FDTH1('FDTH', 0 | FF_FULLBRIGHT, 5.0 / 35.0, S_PLAY_F_FDTH2) = none
	S_PLAY_F_FDTH2('FDTH', 1 | FF_FULLBRIGHT, 4.0 / 35.0, S_PLAY_FDTH3) = none
	S_PLAY_C_FDTH1('FDTH', 2 | FF_FULLBRIGHT, 5.0 / 35.0, S_PLAY_C_FDTH2) = none
	S_PLAY_C_FDTH2('FDTH', 3 | FF_FULLBRIGHT, 4.0 / 35.0, S_PLAY_FDTH3) = none
	S_PLAY_M_FDTH1('FDTH', 4 | FF_FULLBRIGHT, 5.0 / 35.0, S_PLAY_M_FDTH2) = none
	S_PLAY_M_FDTH2('FDTH', 5 | FF_FULLBRIGHT, 4.0 / 35.0, S_PLAY_FDTH3) = none
	S_PLAY_H_FDTH1('HDTH', 0 | FF_FULLBRIGHT, 5.0 / 35.0, S_PLAY_H_FDTH2) = none
	S_PLAY_H_FDTH2('HDTH', 1 | FF_FULLBRIGHT, 4.0 / 35.0, S_PLAY_FDTH3) = none
	S_PLAY_D_FDTH1('DDTH', 0 | FF_FULLBRIGHT, 5.0 / 35.0, S_PLAY_D_FDTH2) = none
	S_PLAY_D_FDTH2('DDTH', 1 | FF_FULLBRIGHT, 4.0 / 35.0, S_PLAY_FDTH3) = none
	S_PLAY_FDTH3('FDTH', 6 | FF_FULLBRIGHT, 5.0 / 35.0, S_PLAY_FDTH4) = none
	S_PLAY_FDTH4('FDTH', 7 | FF_FULLBRIGHT, 4.0 / 35.0, S_PLAY_FDTH5) = A_Scream
	S_PLAY_FDTH5('FDTH', 8 | FF_FULLBRIGHT, 5.0 / 35.0, S_PLAY_FDTH6) = none
	S_PLAY_FDTH6('FDTH', 9 | FF_FULLBRIGHT, 4.0 / 35.0, S_PLAY_FDTH7) = none
	S_PLAY_FDTH7('FDTH', 10 | FF_FULLBRIGHT, 5.0 / 35.0, S_PLAY_FDTH8) = none
	S_PLAY_FDTH8('FDTH', 11 | FF_FULLBRIGHT, 4.0 / 35.0, S_PLAY_FDTH9) = none
	S_PLAY_FDTH9('FDTH', 12 | FF_FULLBRIGHT, 5.0 / 35.0, S_PLAY_FDTH10) = none
	S_PLAY_FDTH10('FDTH', 13 | FF_FULLBRIGHT, 4.0 / 35.0, S_PLAY_FDTH11) = none
	S_PLAY_FDTH11('FDTH', 14 | FF_FULLBRIGHT, 5.0 / 35.0, S_PLAY_FDTH12) = none
	S_PLAY_FDTH12('FDTH', 15 | FF_FULLBRIGHT, 4.0 / 35.0, S_PLAY_FDTH13) = none
	S_PLAY_FDTH13('FDTH', 16 | FF_FULLBRIGHT, 5.0 / 35.0, S_PLAY_FDTH14) = none
	S_PLAY_FDTH14('FDTH', 17 | FF_FULLBRIGHT, 4.0 / 35.0, S_PLAY_FDTH15) = none
	S_PLAY_FDTH15('FDTH', 18 | FF_FULLBRIGHT, 5.0 / 35.0, S_PLAY_FDTH16) = A_NoBlocking
	S_PLAY_FDTH16('FDTH', 19 | FF_FULLBRIGHT, 4.0 / 35.0, S_PLAY_FDTH17) = none
	S_PLAY_FDTH17('FDTH', 20 | FF_FULLBRIGHT, 5.0 / 35.0, S_PLAY_FDTH18) = none
	S_PLAY_FDTH18('FDTH', 21 | FF_FULLBRIGHT, 4.0 / 35.0, S_PLAY_FDTH19) = none
	S_PLAY_FDTH19('ACLO', 4, 35.0 / 35.0, S_PLAY_FDTH19) = A_CheckBurnGone
	S_PLAY_FDTH20('ACLO', 4, 8.0 / 35.0, none) = none
}

defaultproperties
{
	Health = 1000;
	GibsHealth = -1000;
	ReactionCount = 8;
	Radius = 20.0;
	Height = 16.0;
	Mass = 100.0;
	MaxStepHeight = 24.0;
	SoundClass = 'fighter';
	LightOffset = vector(0.0, 0.0, 0.0);
	LightColour = 0xffffffff;
	LightRadius = 128.0;
}
