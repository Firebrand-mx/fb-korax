//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**		##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id: PlayerTeam.vc 508 2006-07-10 19:02:43Z firebrand_kh $
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class PlayerTeam : Object;

MainGameInfo	Game;

int		Position;
int		Score;
int		Colour;	// team definition
int		Frags;	// player kills
int		Kills;	// monster kills
int		Goals;
int		FlagCaptures;
int		playercount;
Player	Players[MAXPLAYERS];


//==========================================================================
//
//	EnlistPlayer
//
//==========================================================================

void EnlistPlayer(Player pl)
{
	int i;

	// first check if player already has reference to this team
	if (pl.Team == self)
	{
		dprint("PlayerTeam::EnlistPlayer : already in team, skip...");
		return;
	}

	for (i = 0; i < MAXPLAYERS; i++)
	{
		// We should also check whether player is listed in team's player table,
		// in case player was reborn and his Team reference was just erased.
		// Due program logic (at least I hope so) this may happen
		// only if player was reborn; since he is already enlisted,
		// we simply need to re-assign Team reference for him.
		if (Players[i] == pl)
		{
			dprint("PlayerTeam::EnlistPlayer : reattach team reference, done...");
			pl.Team = self;
			return;
		}

		if (!Players[i])
		{
			if (pl.Team)
			{
				dprint("PlayerTeam::EnlistPlayer : discard player from previous team...");
				pl.Team.DiscardPlayer(pl);
			}
			pl.Team = self;
			Players[i] = pl;
			playercount++;
			dprint("playercount now = %i", playercount);
			dprint("PlayerTeam::EnlistPlayer : add player to current team as no %i, done...", i);

			// This should be taken into account:
			// player, who changes team, looses his score!!
			//
			dprint("PlayerTeam::EnlistPlayer : reset player's score");
			pl.TeamPosition = Position;
			pl.UpdateScore(HexenDefs::scoreevent_PlayerReset);

			if (Game.GameType >= HexenDefs::NUMGAMESNOTEAM)
			{
				pl.Level.bprint("%s joins %s team", pl.PlayerName, Game.ColourNames[Colour]);
			}
			else
			{
				pl.Level.bprint("%s enters the game", pl.PlayerName);
			}
			return;
		}
	}
}


//==========================================================================
//
//	DiscardPlayer
//
//==========================================================================

void DiscardPlayer(Player pl)
{
	int i;

	// first check if player is in team
	if (pl.Team != self)
	{
		Error("PlayerTeam::DiscardPlayer : player is not enlisted in this team.");
		return;
	}

	// push player down the competition table
	dprint("PlayerTeam::DiscardPlayer : pushing player down the table");
	dprint("PlayerTeam::DiscardPlayer : player position was %i", pl.PlayerPosition);
	pl.UpdateScore(HexenDefs::scoreevent_PlayerDiscard);
	dprint("PlayerTeam::DiscardPlayer : player position now is %i", pl.PlayerPosition);

	pl.Team = none;
	Players[pl.PlayerPosition] = none;
	playercount--;
	dprint("playercount now = %i", playercount);

	dprint("PlayerTeam::DiscardPlayer : removed player from team");

	if (Game.GameType >= HexenDefs::NUMGAMESNOTEAM)
	{
		pl.Level.bprint("%s has left %s team", pl.PlayerName, Game.ColourNames[Colour]);
	}

	// if there's no players, team is gone...
	if (!playercount)
	{
		UpdateScore(HexenDefs::scoreevent_TeamDiscard);
		for (i = 0; i < HexenDefs::MAXTEAMSINGAME; i++)
		{
			if (Game.Teams[i] == self)
			{
				Game.Teams[i] = none;
				break;
			}
		}

		if (Game.GameType >= HexenDefs::NUMGAMESNOTEAM)
		   pl.Level.bprint("team %s is no longer in competition", Game.ColourNames[Colour]);

		Game.Teams[Position] = none;
		Destroy();
	}
}

//==========================================================================
//
//	GetPlayerCount
//
//==========================================================================

int GetPlayerCount()
{
	dprint("playercount is = %i", playercount);
	return playercount;
}

//==========================================================================
//
//  UpdateScore
//
//  [CW] Updates current team's score.
//	 Scoring event list is defined in 'hexndefs.vc'.
//
//==========================================================================

void UpdateScore(int event)
{
	int i;
	int mod = 0;
	bool force_update = false;

	switch(event)
	{
	case HexenDefs::scoreevent_TeamDiscard:
		i = Game.GetTeamCount();
		if (i > 1)
			mod = Game.Teams[--i].Score - Score - 1;
		else
			mod = -Score;
		force_update = true;
		break;
	case HexenDefs::scoreevent_TeamReset:
		Frags = 0;
		Kills = 0;
		Goals = 0;
		FlagCaptures = 0;
		mod = -Score;	// this should always set score to 0
		force_update = true;
		break;
	case HexenDefs::scoreevent_Frag:
		Frags++;
		if (Game.GameType != HexenDefs::game_football &&
			Game.GameType != HexenDefs::game_ctf)
			mod = 1;
		break;
	case HexenDefs::scoreevent_Kill:
		Kills++;
		break;
	case HexenDefs::scoreevent_FtbGoal:
	case HexenDefs::scoreevent_FtbOpSelfGoal:
		Goals++;
		mod = 1;
		break;
	case HexenDefs::scoreevent_SelfFrag:
		Frags--;
		if (Game.GameType != HexenDefs::game_football &&
			Game.GameType != HexenDefs::game_ctf)
			mod = -1;
		break;
	case HexenDefs::scoreevent_TeamFrag:
		Frags--;
		if (Game.GameType != HexenDefs::game_football &&
			Game.GameType != HexenDefs::game_ctf)
			mod = -1;
		break;
	case HexenDefs::scoreevent_CtfCapture:
		FlagCaptures++;
		mod = 1;
		break;
	}

	if (mod || force_update)
	{
		Score += mod;

		UpdateCompetition();

		if (Game.GameType >= HexenDefs::NUMGAMESNOTEAM &&
				Game.GetTeamCount() > 1)
			CompetitionAnnouncements(Score - mod);
	}
}

//==========================================================================
//
//  CompetitionAnnouncements
//
//  [CW]
//
//==========================================================================

void CompetitionAnnouncements(int oldScore)
{
	int i;

	// [CW] NOTE: following agorythm works good only for 2 teams in game;
	//      If there will be more than 2 teams, we should modify this.

	if (Score > oldScore)
	{
		// Is this player a new and only leader?
		if (Position == 0)
		{
			if (Game.Teams[1] && Game.Teams[1].Score >= oldScore ||
					Score > 0 && !Game.bCompetitionOpened)
			{
				// [FB] Announce new leader!
				Game.BroadcastLocalSound(HexenDefs::lsid_gen_an_Blue_Leads + Colour, true, 0.0);
				Game.BroadcastLocalSound(HexenDefs::lsid_gen_an_Blue_Lost_Lead + Game.Teams[1].Colour, true, 1.0);
				Game.Level.bprint(va("%s team leads!", Game.ColourNames[Colour]));
			}
		}
		// Is he tied for the lead then?
		else
		{
			if (Score == Game.Teams[0].Score)
			{
				// [FB] Tied for the lead!
				Game.BroadcastLocalSound(HexenDefs::lsid_gen_an_teams_are_tied, true, HexenDefs::STANDART_LSQ_DELAY);
				Game.Level.bprint(va("teams are tied!", Game.ColourNames[Colour]));
			}
		}
	}
	// Score may drop down in case of self-frag or similar events
	else if (Score < oldScore)
	{
		// Is he tied for the lead?
		if (Position == 0)
		{
			if (Game.Teams[1] && Game.Teams[1].Score == Score)
			{
				// [CW] NOTE: this works good only for 2 teams in game;
				//      If there will be more than 2 teams, we should modify this.
				// [FB] Tied for the lead!
				Game.BroadcastLocalSound(HexenDefs::lsid_gen_an_teams_are_tied, true, HexenDefs::STANDART_LSQ_DELAY);
				Game.Level.bprint(va("teams are tied!", Game.ColourNames[Colour]));
			}
		}
		// Was he a single leader or tied?
		else if (Game.Teams[0].Score <= oldScore)
		{
			// [FB] Announce new leader!
			Game.BroadcastLocalSound(HexenDefs::lsid_gen_an_Blue_Leads + Colour, true, 0.0);
			Game.BroadcastLocalSound(HexenDefs::lsid_gen_an_Blue_Lost_Lead + Game.Teams[1].Colour, true, 1.0);
			Game.Level.bprint(va("%s team leads!", Game.ColourNames[Game.Teams[0].Colour]));
		}
	}
}

//==========================================================================
//
//  UpdateCompetition
//
//  [CW] Updates team's position in general game table.
//
//==========================================================================

void UpdateCompetition()
{
	bool bPositionShifted;
	int i, j, k;
	PlayerTeam plteam2;

	for (i = 0; i < HexenDefs::MAXTEAMSINGAME; i++)
	{
		if(Game.Teams[i] == self)
			break;
	}
	
	Position = i;

	// first see if previous players has lower score now
	if (i != 0)
	{
		j = i-1;
		while (j >= 0)
		{
			plteam2 = Game.Teams[j];
			if (plteam2.Score < Score)
			{
				bPositionShifted = true;
				Game.Teams[j] = self;
				Game.Teams[i] = plteam2;
				Position = j;
				plteam2.Position = i;
				// update each team player's TeamPosition data
				for (k = 0; k < MAXPLAYERS; k++)
				{
					if (plteam2.Players[k])
						plteam2.Players[k].TeamPosition = i;
				}
				i = j;
			}
			else
				break;
			j--;
		}
	}
	// secondly (in other case) see if next players has higher score (in case score gone down)
	if (!bPositionShifted && i != HexenDefs::MAXTEAMSINGAME - 1)
	{
		j = i+1;
		while (j < HexenDefs::MAXTEAMSINGAME && Game.Teams[j])
		{
			plteam2 = Game.Teams[j];
			if (plteam2.Score > Score)
			{
				Game.Teams[j] = self;
				Game.Teams[i] = plteam2;
				Position = j;
				plteam2.Position = i;
				// update each team player's TeamPosition data
				for (k = 0; k < MAXPLAYERS; k++)
				{
					if (plteam2.Players[k])
						plteam2.Players[k].TeamPosition = i;
				}
				i = j;
			}
			else
				break;
			j++;
		}
	}
	
	// update each team player's TeamPosition data
	for (i = 0; i < MAXPLAYERS; i++)
	{
		if (Players[i])
			Players[i].TeamPosition = Position;
	}
}


defaultproperties
{
}
