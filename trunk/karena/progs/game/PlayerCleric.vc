//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class PlayerCleric : PlayerPawn;

//==========================================================================
//
//	StopMoving
//
//==========================================================================

void StopMoving()
{
	// If in a walking frame, stop moving
	if (State == S_CPLAY_RUN1 || State == S_CPLAY_RUN2 ||
		State == S_CPLAY_RUN3 || State == S_CPLAY_RUN4)
	{
		SetState(IdleState);
	}
}

__states__
{
	S_CPLAY('CLER', 0, -1.0, none) { }
	S_CPLAY_RUN1('CLER', 0, 4.0 / 35.0, S_CPLAY_RUN2) { }
	S_CPLAY_RUN2('CLER', 1, 4.0 / 35.0, S_CPLAY_RUN3) { }
	S_CPLAY_RUN3('CLER', 2, 4.0 / 35.0, S_CPLAY_RUN4) { }
	S_CPLAY_RUN4('CLER', 3, 4.0 / 35.0, S_CPLAY_RUN1) { }
	S_CPLAY_ATK1('CLER', 4, 6.0 / 35.0, S_CPLAY_ATK2) { }
	S_CPLAY_ATK2('CLER', 5, 6.0 / 35.0, S_CPLAY_ATK3) { }
	S_CPLAY_ATK3('CLER', 6, 6.0 / 35.0, S_CPLAY) { }
	S_CPLAY_PAIN('CLER', 7, 4.0 / 35.0, S_CPLAY_PAIN2) { }
	S_CPLAY_PAIN2('CLER', 7, 4.0 / 35.0, S_CPLAY) { A_Pain(); }
	S_CPLAY_DIE1('CLER', 8, 6.0 / 35.0, S_CPLAY_DIE2) { }
	S_CPLAY_DIE2('CLER', 10, 6.0 / 35.0, S_CPLAY_DIE3) { A_Scream(); }
	S_CPLAY_DIE3('CLER', 11, 6.0 / 35.0, S_CPLAY_DIE4) { }
	S_CPLAY_DIE4('CLER', 11, 6.0 / 35.0, S_CPLAY_DIE5) { }
	S_CPLAY_DIE5('CLER', 12, 6.0 / 35.0, S_CPLAY_DIE6) { A_NoBlocking(); }
	S_CPLAY_DIE6('CLER', 13, 6.0 / 35.0, S_CPLAY_DIE7) { }
	S_CPLAY_DIE7('CLER', 14, 6.0 / 35.0, S_CPLAY_DIE8) { }
	S_CPLAY_DIE8('CLER', 15, 6.0 / 35.0, S_CPLAY_DIE9) { }
	S_CPLAY_DIE9('CLER', 16, -1.0, none) { A_AddPlayerCorpse(); }
	S_CPLAY_XDIE1('CLER', 17, 5.0 / 35.0, S_CPLAY_XDIE2) { A_Scream(); }
	S_CPLAY_XDIE2('CLER', 18, 5.0 / 35.0, S_CPLAY_XDIE3) { }
	S_CPLAY_XDIE3('CLER', 19, 5.0 / 35.0, S_CPLAY_XDIE4) { A_NoBlocking(); }
	S_CPLAY_XDIE4('CLER', 20, 5.0 / 35.0, S_CPLAY_XDIE5) { }
	S_CPLAY_XDIE5('CLER', 21, 5.0 / 35.0, S_CPLAY_XDIE6) { }
	S_CPLAY_XDIE6('CLER', 22, 5.0 / 35.0, S_CPLAY_XDIE7) { }
	S_CPLAY_XDIE7('CLER', 23, 5.0 / 35.0, S_CPLAY_XDIE8) { }
	S_CPLAY_XDIE8('CLER', 24, 5.0 / 35.0, S_CPLAY_XDIE9) { }
	S_CPLAY_XDIE9('CLER', 25, 5.0 / 35.0, S_CPLAY_XDIE10) { }
	S_CPLAY_XDIE10('CLER', 26, -1.0, none) { A_AddPlayerCorpse(); }
	S_CPLAY_ICE('CLER', 27, 5.0 / 35.0, S_CPLAY_ICE2) { A_FreezeDeath(); }
	S_CPLAY_ICE2('CLER', 27, 1.0 / 35.0, S_CPLAY_ICE2) { A_FreezeDeathChunks(); }
}

defaultproperties
{
	Health = 100;
	GibsHealth = -50;
	Radius = 16.0;
	Height = 64.0;
	Mass = 100.0;
	PainChance = 1.0;
	bPickUp = true;
	IdleState = S_CPLAY;
	SeeState = S_CPLAY_RUN1;
	MissileState = S_CPLAY_ATK1;
	AttackEndState = S_CPLAY_ATK3;
	PainState = S_CPLAY_PAIN;
	DeathState = S_CPLAY_DIE1;
	GibsDeathState = S_CPLAY_XDIE1;
	IceDeathState = S_CPLAY_ICE;
	BurnDeathState = S_PLAY_C_FDTH1;
	SoundClass = 'cleric';
	InitialStrength = 10;
	InitialWisdom = 10;
	InitialDexterity = 10;
	InitialConstitution = 10;
	InitialIntelligence = 10;
}

//**************************************************************************
//
//  $Log$
//  Revision 1.3  2006/03/12 19:37:09  dj_jl
//  States as objects, added state variable type.
//
//  Revision 1.2  2005/11/19 15:23:21  dj_jl
//  Renamed sounds.
//
//  Revision 1.1  2004/11/16 13:33:22  dj_jl
//  Initial import.
//
//  Revision 1.1  2002/10/26 16:32:26  dj_jl
//  New style of defining classes.
//
//**************************************************************************
