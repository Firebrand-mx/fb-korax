//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**		##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id$
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class MageWhirlWind : Projectile;

float SoundTimer;		// Timer for active sound

//===========================================================================
//
//  RoughCheckThing
//
//===========================================================================

bool RoughCheckThing(Entity Other)
{
	float angle;
	Actor link = Actor(Other);	
	if (!(link.bCountKill || link.bIsPlayer) || link == Instigator ||
		link.bDormant)
	{
		return false;
	}
	if (!link.bShootable)
	{
		return false;
	}
	if (Level.Game.netgame && !Level.Game.deathmatch && link.bIsPlayer)
	{
		return false;
	}
	if (CanSee(link))
	{
		angle = AngleMod360(atan2(
			link.Origin.y - Instigator.Origin.y,
			link.Origin.x - Instigator.Origin.x) -
			Instigator.Angles.yaw);

		if (angle > 226.0 * 360.0 / 256.0 ||
			angle < 30.0 * 360.0 / 256.0)
		{
			return true;
		}
	}
	return false;
}

//==========================================================================
//
//  InflictorModifyDamage
//
//==========================================================================

int InflictorModifyDamage(Actor victim, Actor source, int damage)
{
	TouchWhirlwind(victim);
	return -1;
}

//===========================================================================
//
//  ExplodeMissile
//
//===========================================================================

bool ExplodeMissile()
{
	SoundTimer += 1.0 / 35.0;
	if (SoundTimer < 60.0 / 35.0)
	{
		return false;
	}
	::ExplodeMissile();
}

//==========================================================================
//
//  A_WhirlwindSeek
//
//==========================================================================

final void A_WhirlwindSeek()
{
	Health -= 3;
	if (Health < 0)
	{
		Velocity = vector(0.0, 0.0, 0.0);
		SetState(DeathState);
		bMissile = false;
		return;
	}
	SoundTimer -= 3.0 / 35.0;
	if (SoundTimer < 0.0)
	{
		SoundTimer = 58.0 / 35.0 + Random() * 31.0 / 35.0;
		PlaySound('WhirlWind3', CHAN_WEAPON);
	}
	if(!Enemy && (P_Random() < 50))
	{
		Enemy = Actor(RoughMonsterSearch(10));
	}
	if (Enemy && Enemy.Alpha < 1.0)
	{
		return;
	}
	SeekerMissile(10.0, 30.0);
}

__states__
{
	S_MWIND_1('FX07', 3, 3.0 / 35.0, S_MWIND_2) = none
	S_MWIND_2('FX07', 4, 3.0 / 35.0, S_MWIND_3) = none
	S_MWIND_3('FX07', 5, 3.0 / 35.0, S_MWIND_4) = none
	S_MWIND_4('FX07', 6, 3.0 / 35.0, S_MWIND_5) = none
	S_MWIND_5('FX07', 0, 3.0 / 35.0, S_MWIND_6) = A_WhirlwindSeek
	S_MWIND_6('FX07', 1, 3.0 / 35.0, S_MWIND_7) = A_WhirlwindSeek
	S_MWIND_7('FX07', 2, 3.0 / 35.0, S_MWIND_5) = A_WhirlwindSeek
	S_MWINDD_1('FX07', 6, 4.0 / 35.0, S_MWINDD_2) = none
	S_MWINDD_2('FX07', 5, 4.0 / 35.0, S_MWINDD_3) = none
	S_MWINDD_3('FX07', 4, 4.0 / 35.0, S_MWINDD_4) = none
	S_MWINDD_4('FX07', 3, 4.0 / 35.0, none) = none
}

defaultproperties
{
	Radius = 16.0;
	Height = 74.0;
	Speed = 350.0;
	MissileDamage = 1;
	Alpha = 0.666;
	IdleState = S_MWIND_1;
	DeathState = S_MWINDD_1;
	SoundTimer = 50.0 / 35.0;
}
