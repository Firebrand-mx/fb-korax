//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Leaf1 : Fragment;

state RestartState;
int RestartCount;

//============================================================================
//
//  A_LeafThrust
//
//============================================================================

void A_LeafThrust()
{
	if (Random() > 0.375)
	{
		return;
	}
	Velocity.z += (Random() * 2.0 + 1.0) * 35.0;
}

//============================================================================
//
//  A_LeafCheck
//
//============================================================================

void A_LeafCheck()
{
	RestartCount++;
	if (RestartCount >= 20)
	{
		SetState(none);
		return;
	}
	if (Random() > 0.25)
	{
		if (!Velocity.x && !Velocity.y)
		{
			Thrust(Instigator.Angles.yaw, Random() * 2.0 + 1.0);
		}
		return;
	}
	SetState(RestartState);
	Velocity.z = (Random() * 2.0 + 1.0) * 35.0;
	Thrust(Instigator.Angles.yaw, Random() * 2.0 + 2.0);
	bMissile = true;
}

__states__
{
	S_LEAF1_1('LEF1', 0, 4.0 / 35.0, S_LEAF1_2) { }
	S_LEAF1_2('LEF1', 1, 4.0 / 35.0, S_LEAF1_3) { }
	S_LEAF1_3('LEF1', 2, 4.0 / 35.0, S_LEAF1_4) { }
	S_LEAF1_4('LEF1', 3, 4.0 / 35.0, S_LEAF1_5) { A_LeafThrust(); }
	S_LEAF1_5('LEF1', 4, 4.0 / 35.0, S_LEAF1_6) { }
	S_LEAF1_6('LEF1', 5, 4.0 / 35.0, S_LEAF1_7) { }
	S_LEAF1_7('LEF1', 6, 4.0 / 35.0, S_LEAF1_8) { }
	S_LEAF1_8('LEF1', 7, 4.0 / 35.0, S_LEAF1_9) { A_LeafThrust(); }
	S_LEAF1_9('LEF1', 8, 4.0 / 35.0, S_LEAF1_10) { }
	S_LEAF1_10('LEF1', 0, 4.0 / 35.0, S_LEAF1_11) { }
	S_LEAF1_11('LEF1', 1, 4.0 / 35.0, S_LEAF1_12) { }
	S_LEAF1_12('LEF1', 2, 4.0 / 35.0, S_LEAF1_13) { A_LeafThrust(); }
	S_LEAF1_13('LEF1', 3, 4.0 / 35.0, S_LEAF1_14) { }
	S_LEAF1_14('LEF1', 4, 4.0 / 35.0, S_LEAF1_15) { }
	S_LEAF1_15('LEF1', 5, 4.0 / 35.0, S_LEAF1_16) { }
	S_LEAF1_16('LEF1', 6, 4.0 / 35.0, S_LEAF1_17) { A_LeafThrust(); }
	S_LEAF1_17('LEF1', 7, 4.0 / 35.0, S_LEAF1_18) { }
	S_LEAF1_18('LEF1', 8, 4.0 / 35.0, none) { }
	S_LEAF_X1('LEF3', 3, 10.0 / 35.0, S_LEAF_X1) { A_LeafCheck(); }
}

defaultproperties
{
	Radius = 2.0;
	Height = 4.0;
	Mass = 12.5;
	bDropOff = false;
	bNoGravity = false;
	bNoSplash = true;
	IdleState = S_LEAF1_1;
	RestartState = S_LEAF1_8;
	DeathState = S_LEAF_X1;
}
