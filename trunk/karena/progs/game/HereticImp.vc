//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class HereticImp : Pawn
	__mobjinfo__(15009);

int XCrashState;
int Special1;

//==========================================================================
//
//  A_ImpMeAttack
//
//==========================================================================

void A_ImpMeAttack(void)
{
	if (!Enemy)
	{
		return;
	}
	PlaySound(AttackSound, CHAN_WEAPON);
	if (CheckMeleeRange())
	{
		Enemy.Damage(self, self, 5 + (P_Random() & 7));
	}
}

//==========================================================================
//
//  A_ImpMsAttack
//
//==========================================================================

void A_ImpMsAttack(void)
{
	if (!Enemy || Random() > 0.25)
	{
		SetState(SeeState);
		return;
	}
	bSkullFly = true;
	PlaySound(AttackSound, CHAN_WEAPON);
	A_FaceTarget();
	Velocity = Normalise(MobjCenter(Enemy) - Origin) * 12.0 * 35.0;
}

//==========================================================================
//
//  A_ImpDeath
//
//==========================================================================

void A_ImpDeath(void)
{
	bSolid = false;
	bFloorClip = true;
	if (Origin.z <= FloorZ)
	{
		SetState(CrashState);
	}
}

//==========================================================================
//
//  A_ImpXDeath1
//
//==========================================================================

void A_ImpXDeath1(void)
{
	bSolid = false;
	bNoGravity = true;
	bFloorClip = true;
	Special1 = 666;	// Flag the crash routine
}

//==========================================================================
//
//  A_ImpXDeath2
//
//==========================================================================

void A_ImpXDeath2(void)
{
	bNoGravity = false;
	if (Origin.z <= FloorZ)
	{
		SetState(CrashState);
	}
}

//==========================================================================
//
//  A_ImpExplode
//
//==========================================================================

void A_ImpExplode(void)
{
	Actor mo;

	mo = Spawn(HereticImpChunk1, Origin);
	mo.Velocity.x = (Random() - Random()) * 4.0 * 35.0;
	mo.Velocity.y = (Random() - Random()) * 4.0 * 35.0;
	mo.Velocity.z = 9.0 * 35.0;
	mo = Spawn(HereticImpChunk2, Origin);
	mo.Velocity.x = (Random() - Random()) * 4.0 * 35.0;
	mo.Velocity.y = (Random() - Random()) * 4.0 * 35.0;
	mo.Velocity.z = 9.0 * 35.0;
	if (Special1 == 666)
	{
		// Extreme death crash
		SetState(XCrashState);
	}
}

__states__
{
	//	Idle
	S_IMP_LOOK1('IMPX', 0, 10.0 / 35.0, S_IMP_LOOK2) { A_Look(); }
	S_IMP_LOOK2('IMPX', 1, 10.0 /35.0, S_IMP_LOOK3) { A_Look(); }
	S_IMP_LOOK3('IMPX', 2, 10.0 / 35.0, S_IMP_LOOK4) { A_Look(); }
	S_IMP_LOOK4('IMPX', 1, 10.0 / 35.0, S_IMP_LOOK1) { A_Look(); }
	//	Flying
	S_IMP_FLY1('IMPX', 0, 3.0 / 35.0, S_IMP_FLY2) { A_Chase(); }
	S_IMP_FLY2('IMPX', 0, 3.0 / 35.0, S_IMP_FLY3) { A_Chase(); }
	S_IMP_FLY3('IMPX', 1, 3.0 / 35.0, S_IMP_FLY4) { A_Chase(); }
	S_IMP_FLY4('IMPX', 1, 3.0 / 35.0, S_IMP_FLY5) { A_Chase(); }
	S_IMP_FLY5('IMPX', 2, 3.0 / 35.0, S_IMP_FLY6) { A_Chase(); }
	S_IMP_FLY6('IMPX', 2, 3.0 / 35.0, S_IMP_FLY7) { A_Chase(); }
	S_IMP_FLY7('IMPX', 1, 3.0 / 35.0, S_IMP_FLY8) { A_Chase(); }
	S_IMP_FLY8('IMPX', 1, 3.0 / 35.0, S_IMP_FLY1) { A_Chase(); }
	//	Melee
	S_IMP_MEATK1('IMPX', 3, 6.0 / 35.0, S_IMP_MEATK2) { A_FaceTarget(); }
	S_IMP_MEATK2('IMPX', 4, 6.0 / 35.0, S_IMP_MEATK3) { A_FaceTarget(); }
	S_IMP_MEATK3('IMPX', 5, 6.0 / 35.0, S_IMP_MEATK4) { A_ImpMeAttack(); }
	S_IMP_MEATK4('IMPX', 5, 6.0 / 35.0, S_IMP_FLY1) { }
	//	Skull-fly attack
	S_IMP_MSATK1_1('IMPX', 0, 10.0 / 35.0, S_IMP_MSATK1_2) { A_FaceTarget(); }
	S_IMP_MSATK1_2('IMPX', 1, 6.0 / 35.0, S_IMP_MSATK1_3) { A_ImpMsAttack(); }
	S_IMP_MSATK1_3('IMPX', 2, 6.0 / 35.0, S_IMP_MSATK1_4) { }
	S_IMP_MSATK1_4('IMPX', 1, 6.0 / 35.0, S_IMP_MSATK1_5) { }
	S_IMP_MSATK1_5('IMPX', 0, 6.0 / 35.0, S_IMP_MSATK1_6) { }
	S_IMP_MSATK1_6('IMPX', 1, 6.0 / 35.0, S_IMP_MSATK1_3) { }
	//	Pain
	S_IMP_PAIN1('IMPX', 6, 3.0 / 35.0, S_IMP_PAIN2) { }
	S_IMP_PAIN2('IMPX', 6, 3.0 / 35.0, S_IMP_FLY1) { A_Pain(); }
	//	Deaths
	S_IMP_DIE1('IMPX', 6, 4.0 / 35.0, S_IMP_DIE2) { A_ImpDeath(); }
	S_IMP_DIE2('IMPX', 7, 5.0 / 35.0, S_IMP_DIE3) { A_ImpDeath(); }
	S_IMP_DIE3('IMPX', 7, 5.0 / 35.0, S_IMP_DIE2) { A_ImpDeath(); }
	S_IMP_XDIE1('IMPX', 18, 5.0 / 35.0, S_IMP_XDIE2) { A_ImpXDeath1(); }
	S_IMP_XDIE2('IMPX', 19, 5.0 / 35.0, S_IMP_XDIE3) { }
	S_IMP_XDIE3('IMPX', 20, 5.0 / 35.0, S_IMP_XDIE4) { }
	S_IMP_XDIE4('IMPX', 21, 5.0 / 35.0, S_IMP_XDIE5) { A_ImpXDeath2(); }
	S_IMP_XDIE5('IMPX', 22, 5.0 / 35.0, S_IMP_XDIE5) { }
	S_IMP_CRASH1('IMPX', 8, 7.0 / 35.0, S_IMP_CRASH2) { A_ImpExplode(); }
	S_IMP_CRASH2('IMPX', 9, 7.0 / 35.0, S_IMP_CRASH3) { A_Scream(); }
	S_IMP_CRASH3('IMPX', 10, 7.0 / 35.0, S_IMP_CRASH4) { A_QueueCorpse(); }
	S_IMP_CRASH4('IMPX', 11, -1.0, S_NULL) { }
	S_IMP_XCRASH1('IMPX', 23, 7.0 / 35.0, S_IMP_XCRASH2) { A_Scream(); }
	S_IMP_XCRASH2('IMPX', 24, 7.0 / 35.0, S_IMP_XCRASH3) { A_QueueCorpse(); }
	S_IMP_XCRASH3('IMPX', 25, -1.0, S_NULL) { }
}

defaultproperties
{
	Health = 40;
	GibsHealth = -20;
	Radius = 16.0;
	Height = 36.0;
	Mass = 50.0;
	StepSpeed = 10.0;
	PainChance = 0.78125;
	bNoGravity = true;
	bFloat = true;
	bSpawnFloat = true;
	bFloorClip = false;
	bEnemy = true;
	IdleState = S_IMP_LOOK1;
	SeeState = S_IMP_FLY1;
	MeleeState = S_IMP_MEATK1;
	MissileState = S_IMP_MSATK1_1;
	PainState = S_IMP_PAIN1;
	DeathState = S_IMP_DIE1;
	GibsDeathState = S_IMP_XDIE1;
	CrashState = S_IMP_CRASH1;
	XCrashState = S_IMP_XCRASH1;
	SightSound = 'ImpSight';
	ActiveSound = 'ImpActive';
	AttackSound = 'ImpAttack1';
	PainSound = 'ImpPain';
	DeathSound = 'ImpDeath';
}

//**************************************************************************
//
//  $Log$
//  Revision 1.2  2005/10/16 22:44:08  firebrand_kh
//  Fixed frames duration to be the same as in the original Heretic game
//
//  Revision 1.1  2005/09/30 15:50:13  firebrand_kh
//  Initial Import
//
//  Revision 1.2  2004/12/27 12:23:12  dj_jl
//  Multiple small changes for version 1.16
//
//  Revision 1.1  2002/10/26 16:32:22  dj_jl
//  New style of defining classes.
//
//**************************************************************************
