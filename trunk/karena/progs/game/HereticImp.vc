//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**		##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id$
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class HereticImp : Pawn
	__mobjinfo__(15009);

//==========================================================================
//
//  A_ImpMeAttack
//
//==========================================================================

final void A_ImpMeAttack()
{
	if (!Target)
	{
		return;
	}
	PlaySound(AttackSound, CHAN_WEAPON);
	if (CheckMeleeRange())
	{
		Target.Damage(self, self, 5 + (P_Random() & 7));
	}
}

//==========================================================================
//
//  A_ImpMsAttack
//
//==========================================================================

final void A_ImpMsAttack()
{
	if (!Target || Random() > 0.25)
	{
		SetState(SeeState);
		return;
	}
	bSkullFly = true;
	PlaySound(AttackSound, CHAN_WEAPON);
	A_FaceTarget();
	Velocity = Normalise(Target.GetCentre() - Origin) * 12.0 * 35.0;
}

//==========================================================================
//
//  A_ImpDeath
//
//==========================================================================

final void A_ImpDeath()
{
	bSolid = false;
	bFloorClip = true;
	if (Origin.z <= FloorZ)
	{
		SetState(CrashState);
	}
}

//==========================================================================
//
//  A_ImpXDeath1
//
//==========================================================================

final void A_ImpXDeath1()
{
	bSolid = false;
	bNoGravity = true;
	bFloorClip = true;
	_Special1 = 666;	// Flag the crash routine
}

//==========================================================================
//
//  A_ImpXDeath2
//
//==========================================================================

final void A_ImpXDeath2()
{
	bNoGravity = false;
	if (Origin.z <= FloorZ)
	{
		SetState(CrashState);
	}
}

//==========================================================================
//
//  A_ImpExplode
//
//==========================================================================

final void A_ImpExplode()
{
	Actor mo;

	mo = Spawn(HereticImpChunk1, Origin);
	mo.Velocity.x = (Random() - Random()) * 4.0 * 35.0;
	mo.Velocity.y = (Random() - Random()) * 4.0 * 35.0;
	mo.Velocity.z = 9.0 * 35.0;
	mo = Spawn(HereticImpChunk2, Origin);
	mo.Velocity.x = (Random() - Random()) * 4.0 * 35.0;
	mo.Velocity.y = (Random() - Random()) * 4.0 * 35.0;
	mo.Velocity.z = 9.0 * 35.0;
	if (_Special1 == 666)
	{
		// Extreme death crash
		SetState(FindState('XCrash'));
	}
}

states
{
Spawn:
	IMPX ABCB 10 A_Look
	Loop
See:
	IMPX AABBCCBB 3 A_Chase
	Loop
Melee:
	IMPX DE 6 A_FaceTarget
	IMPX F 6 A_ImpMeAttack
	IMPX F 6
	Goto See
Missile:
	IMPX A 10 A_FaceTarget
	IMPX B 6 A_ImpMsAttack
	IMPX CBAB 6
	Goto Missile+2
Pain:
	IMPX G 3
	IMPX G 3 A_Pain
	Goto See
Death:
	IMPX G 4 A_ImpDeath
	IMPX H 5
	Wait
XDeath:
	IMPX S 5 A_ImpXDeath1
	IMPX TU 5
	IMPX V 5 A_ImpXDeath2
	IMPX W 5
	Wait
Crash:
	IMPX I 7 A_ImpExplode
	IMPX J 7 A_Scream
	IMPX K 7 A_QueueCorpse
	IMPX L -1
	Stop
XCrash:
	IMPX X 7
	IMPX Y 7 A_QueueCorpse
	IMPX Z -1
	Stop
Ice:
	IMPX "[" 5 A_FreezeDeath
	IMPX "[" 1 A_FreezeDeathChunks
	Wait
}

defaultproperties
{
	Health = 40;
	GibsHealth = -20;
	Radius = 16.0;
	Height = 36.0;
	Mass = 50.0;
	StepSpeed = 10.0;
	PainChance = 0.78125;
	bNoGravity = true;
	bFloat = true;
	bSpawnFloat = true;
	bFloorClip = false;
	SightSound = 'ImpSight';
	ActiveSound = 'ImpActive';
	AttackSound = 'ImpAttack1';
	PainSound = 'ImpPain';
	DeathSound = 'ImpDeath';
	Obituary = "$ob_gargoyle";
	HitObituary = "$ob_gargoylehit";
}
