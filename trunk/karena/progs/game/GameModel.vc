//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**		##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id: GameModel.vc 508 2006-07-10 19:02:43Z firebrand_kh $
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************
//
// Class GameModel, parent class for advanced game models
//

class GameModel : Object
	abstract;

// team factors
enum
{
	teamfactor_any,			// do not influence pawn relations at all
	teamfactor_coop,
	teamfactor_neutral,
	teamfactor_enemy
};

// generic events
enum
{
	event_playablestatebegins,
	num_genericevents,
	event_custom				= 150
};

struct acsnotifier_t
{
	bool	enabled;
	int		script;
};

acsnotifier_t	AcsNotifiersGeneric[num_genericevents];


MainGameInfo		Game;
HexenLevelInfo		Level;

int		State;		// current game state


//==========================================================================
//
//	Init
//
//==========================================================================

void Init(MainGameInfo game)
{
	Game = game;
}

//==========================================================================
//
//	AllowedTeams
//
//==========================================================================

int AllowedTeams()
{
	return HexenDefs::MAXPLAYERTEAMS;
}

//==========================================================================
//
//	BeginState
//
//	ACS callable
//
//==========================================================================

void BeginState(int newstate)
{
	dprint("Game::BeginState : possibly unknown state is set");
}

//==========================================================================
//
//	EndCurrentState
//
//	ACS callable
//
//==========================================================================

void EndCurrentState(int nextstate)
{
	BeginState(nextstate);
}

//==========================================================================
//
//	ConfirmAddTeam
//
//==========================================================================

bool ConfirmAddTeam()	//???????? need this?
{
	return false;
}

//==========================================================================
//
//	ConfirmAddPlayer
//
//==========================================================================

bool ConfirmAddPlayer()	//???????? need this?
{
	return false;
}

//==========================================================================
//
//	TeamFactor
//
//==========================================================================

int TeamFactor(EntityEx a1, EntityEx a2)
{
	return teamfactor_any;
}

//==========================================================================
//
//	NotifyUpdateTeams
//
//==========================================================================

void NotifyUpdateTeams()
{
}

//==========================================================================
//
//	NotifySpawnPlayer
//
//==========================================================================

void NotifyPlayerSpawn(Player pl)
{
}

//==========================================================================
//
//	NotifyPlayerDeath
//
//==========================================================================

void NotifyPlayerDeath(Player pl, EntityEx source)
{
}

//==========================================================================
//
//	GetFragScoreEvent
//
//==========================================================================

int GetFragScoreEvent(Player plFragger, Player plFragged)
{
	return HexenDefs::scoreevent_Frag;
}

//==========================================================================
//
//	HandleEvent
//
//	ACS callable
//
//==========================================================================

void HandleEvent(int Event, EntityEx A, int arg1, int arg2, int arg3, int arg4)
{
	int notifyACSArgs[3];

	switch (Event)
	{
	case event_playablestatebegins:
		break;
		
	default:
		dprint("Game::HandleEvent : unknown event %i", Event);
	}
	
	NotifyACS(Event, notifyACSArgs[0], notifyACSArgs[1], notifyACSArgs[2]);
}

//==========================================================================
//
//	SetGameObject
//
//	ACS callable
//
//==========================================================================

void SetGameObject(EntityEx A, int object, int arg1, int arg2, int arg3)
{
}

//==========================================================================
//
//	SetGameObjective
//
//	ACS callable
//
//==========================================================================

void SetGameObjective(int objective, int arg2, int arg3, int arg4, int arg5)
{
}

//==========================================================================
//
//	SetACSNotifier
//
//	ACS callable
//
//==========================================================================

void SetACSNotifier(int event, int script)
{
	if (event >= 0 && event < num_genericevents)
	{
		AcsNotifiersGeneric[event].enabled = true;
		AcsNotifiersGeneric[event].script = script;
	}
}

//==========================================================================
//
//	NotifyACS
//
//==========================================================================

void NotifyACS(int Event, int Arg1, int Arg2, int Arg3)
{
	dprint("GameModel::NotifyACS : Event = %i", Event);
	if (Event >= 0 && Event < num_genericevents &&
		AcsNotifiersGeneric[Event].enabled)
	{
		Level.ExecuteActionSpecial(LNSPEC_ACSExecute,
				AcsNotifiersGeneric[Event].script,
				0,
				Arg1,
				Arg2,
				Arg3,
				NULL, 0, none);
	}
}

//==========================================================================
//
//	End
//
//==========================================================================

void End()
{
	Game.GameModel = none;
	Destroy();
}

defaultproperties
{
	State = -1;
}
