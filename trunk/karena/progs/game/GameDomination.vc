//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**		##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id: GameDomination.vc 508 2006-07-10 19:02:43Z firebrand_kh $
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class GameDomination : KArenaGameModel;


enum
{
	state_preparegame,
	state_gameplay,		// no actual game states here
	state_finished
};


array<DominationSigil>	DomSigils;


//==========================================================================
//
//	AllowedTeams
//
//==========================================================================

int AllowedTeams()
{
	return 2;
}

//==========================================================================
//
//	BeginState
//
//	ACS callable
//
//==========================================================================

void BeginState(int newstate)
{
	int i, count;

	dprint("BeginState: %i", newstate);

	switch(newstate)
	{
	case state_preparegame:
		if (!PrepareGame())
		{
			dprint("GameDomination : failed to prepare game, delay start");
			State = -1;
			return;
		}

		dprint("GameDomination : starting game!");
		
		HandleEvent(event_playablestatebegins, none, 0,0,0,0);
		
		for (i = 0; i < MAXPLAYERS; i++)
		{
			if (Game.Teams[0] && Game.Teams[0].Players[i])
			   Game.Teams[0].Players[i].UpdateScore(HexenDefs::scoreevent_PlayerReset);
			if (Game.Teams[1] && Game.Teams[1].Players[i])
			   Game.Teams[1].Players[i].UpdateScore(HexenDefs::scoreevent_PlayerReset);
		}
		if (Game.Teams[0])
			Game.Teams[0].UpdateScore(HexenDefs::scoreevent_TeamReset);
		if (Game.Teams[1])
			Game.Teams[1].UpdateScore(HexenDefs::scoreevent_TeamReset);
		EndCurrentState(state_gameplay);
		return;

	case state_gameplay:
		if (!Game.Teams[0] || !Game.Teams[1])
		{
			dprint("GameDomination::BeginState : state_gameplay : not enouph teams, ending game");
			EndCurrentState(state_finished);
			return;
		}

		for (i = 0; i < DomSigils.Num; i++)
		{
			count++;
			if (DomSigils[i])
				break;			// 1 is enouph
		}
		
		if (!count)
		{
			dprint("GameDomination::BeginState : state_gameplay : not enouph domination sigils, ending game");
			EndCurrentState(state_finished);
			return;
		}		
		
		Game.bcentreprint("go for it!");
		
		break;

	case state_finished:
		//
		// do something here?
		//
		break;
	};

	State = newstate;
}

//==========================================================================
//
//	EndCurrentState
//
//	ACS callable
//
//==========================================================================

void EndCurrentState(int nextstate)
{
	if (nextstate == state_finished)
	{
		int i;
		for (i = 0; i < DomSigils.Num; i++)
		{
			if (DomSigils[i])
				DomSigils[i].SetTeam(none);
		}
		Cleanup();
	}
	BeginState(nextstate);
}

//==========================================================================
//
//	IsInPlayableState
//
//==========================================================================

bool IsInPlayableState()
{
	return (State >= 0 && State == state_gameplay);
}

//==========================================================================
//
//	TeamFactor
//
//==========================================================================

int TeamFactor(EntityEx a1, EntityEx a2)
{
	if (a1.IsA('DominationSigil') && a2.Player && DominationSigil(a1).Team == Player(a2.Player).Team ||
			a2.IsA('DominationSigil') && a1.Player && DominationSigil(a2).Team == Player(a1.Player).Team)
		return teamfactor_coop;
	return teamfactor_any;
}

//==========================================================================
//
//	OnUpdateTeams
//
//==========================================================================

void OnUpdateTeams()
{
	dprint("GameDomination::NotifyUpdateTeams : State = %i, Teams[0] = %i, Teams[1] = %i", State, Game.Teams[0], Game.Teams[1]);
	if (!IsInPlayableState() && (Game.Teams[0] && Game.Teams[1]))
		BeginState(state_preparegame);
	else if (IsInPlayableState() && (!Game.Teams[0] || !Game.Teams[1]))
		EndCurrentState(state_finished);
}

//==========================================================================
//
//	Cleanup
//
//==========================================================================

void Cleanup()
{
	DomSigils.Num = 0;
}

//==========================================================================
//
//	PrepareGame
//
//==========================================================================

bool PrepareGame()
{
	if (!Game.Teams[0] || !Game.Teams[1])
	{
		dprint("GameDomination : not enough teams");
		return false;
	}

	Cleanup();

	DominationSigil ds;
	foreach Level.AllThinkers(DominationSigil, ds)
	{
		DomSigils.Num = DomSigils.Num + 1;
		DomSigils[DomSigils.Num - 1] = ds;
	}

	if (!DomSigils.Num)
	{
		dprint("GameDomination : not enough sigils");
		return false;
	}

	return true;
}

defaultproperties
{
}
