//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**		##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id$
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class ShardMissile : Projectile;

bool bShardSpawnLeft;
bool bShardSpawnRight;
bool bShardSpawnUp;
bool bShardSpawnDown;

//==========================================================================
//
//  DoSpecialDamage
//
//==========================================================================

int DoSpecialDamage(EntityEx victim, EntityEx source, int damage)
{
	switch (_Special2)
	{
	case 3:
		damage <<= 3;
		break;
	case 2:
		damage <<= 2;
		break;
	case 1:
		damage <<= 1;
		break;
	}
	return damage;
}

//==========================================================================
//
//  A_ShedShard
//
//==========================================================================

final void A_ShedShard()
{
	ShardMissile mo;
	int spermcount = _Special2;

	if (spermcount <= 0)
		return;	// No sperm left
	_Special2 = 0;
	spermcount--;

	// every so many calls, spawn a new missile in it's set directions
	if (bShardSpawnLeft)
	{
		mo = ShardMissile(SpawnMissileAngleSpeed(ShardMissile,
			Angles.yaw + (45.0 / 9.0), 0.0, itof(20 + 2 * spermcount) * 35.0));
		if (mo)
		{
			mo.bShardSpawnLeft = true;
			mo._Special2 = spermcount;
			mo.Velocity.z = Velocity.z;
			mo.Target = Target;
			mo.Args[0] = (spermcount == 3) ? 2 : 0;
			mo.MissileDamage = MissileDamage;
		}
	}
	if (bShardSpawnRight)
	{
		mo = ShardMissile(SpawnMissileAngleSpeed(ShardMissile,
			Angles.yaw - (45.0 / 9.0), 0.0, itof(20 + 2 * spermcount) * 35.0));
		if (mo)
		{
			mo.bShardSpawnRight = true;
			mo._Special2 = spermcount;
			mo.Velocity.z = Velocity.z;
			mo.Target = Target;
			mo.Args[0] = (spermcount == 3) ? 2 : 0;
			mo.MissileDamage = MissileDamage;
		}
	}
	if (bShardSpawnUp)
	{
		mo = ShardMissile(SpawnMissileAngleSpeed(ShardMissile, Angles.yaw,
			0.0, itof(15 + 2 * spermcount) * 35.0));
		if (mo)
		{
			mo.Velocity.z = Velocity.z;
			mo.Origin.z += 8.0;
			if (spermcount & 1)	// Every other reproduction
			{
				mo.bShardSpawnLeft = true;
				mo.bShardSpawnRight = true;
			}
			mo.bShardSpawnUp = true;
			mo._Special2 = spermcount;
			mo.Target = Target;
			mo.Args[0] = (spermcount == 3) ? 2 : 0;
			mo.MissileDamage = MissileDamage;
		}
	}
	if (bShardSpawnDown)
	{
		mo = ShardMissile(SpawnMissileAngleSpeed(ShardMissile, Angles.yaw,
			0.0, itof(15 + 2 * spermcount) * 35.0));
		if (mo)
		{
			mo.Velocity.z = Velocity.z;
			mo.Origin.z -= 4.0;
			if (spermcount & 1)	// Every other reproduction
			{
				mo.bShardSpawnLeft = true;
				mo.bShardSpawnRight = true;
			}
			mo.bShardSpawnDown = true;
			mo._Special2 = spermcount;
			mo.Target = Target;
			mo.Args[0] = (spermcount == 3) ? 2 : 0;
			mo.MissileDamage = MissileDamage;
		}
	}
}

states
{
Spawn:
	SHRD A 2 Bright
	SHRD A 3 Bright A_ShedShard
	SHRD BC 3 Bright
	Loop
Death:
	SHEX ABCDE 5 Bright
	Stop
}

defaultproperties
{
	Radius = 13.0;
	Height = 8.0;
	Speed = 875.0;
	MissileDamage = 1;
	DamageType = 'Ice';
	DeathSound = 'MageShardsExplode';
	DLightColour = RGB(74, 77, 196);
	DLightRadius = 90.0;
	Obituary = "$ob_frost";
}
