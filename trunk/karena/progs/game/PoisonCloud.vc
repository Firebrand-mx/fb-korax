//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**		##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id$
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class PoisonCloud : Effect;

int LifeCount;
int BobIndex;

//==========================================================================
//
//  InflictorModifyDamage
//
//==========================================================================

int InflictorModifyDamage(Actor victim, Actor source, int damage)
{
	if (victim.bIsPlayer)
	{
		if (Player(victim.Player).PoisonCount < 4)
		{
			victim.PoisonDamage(source, 15 + (P_Random() & 15), false);	// Don't play painsound
			victim.PoisonPlayer(source, 50);
			victim.PlaySound('*poison', CHAN_VOICE);
		}
		return -1;
	}
	else if (!victim.bCountKill)
	{
		// only damage monsters/players with the poison cloud
		return -1;
	}
	return damage;
}

//==========================================================================
//
//	InitMeCloud
//
//==========================================================================

void InitMeCloud(Actor InstigatedBy)
{
	LifeCount = 24 + (P_Random() & 7);
	BobIndex = 0;
	Instigator = InstigatedBy;
	Radius = 20.0;
	Height = 10.0;
	bColideWithThings = true;
	bColideWithWorld = true;
}

//==========================================================================
//
//	InitCloud
//
//	FIXME this sucks!
//
//==========================================================================

void InitCloud(Actor InstigatedBy)
{
	InitMeCloud(InstigatedBy);
	Velocity.x = 0.00001;	// missile objects must move to impact other objects
}

//============================================================================
//
//  A_Explode
//
//============================================================================

void A_Explode()
{
	P_RadiusAttack(4, 40.0, true);
}

//===========================================================================
//
//  A_PoisonBagDamage
//
//===========================================================================

void A_PoisonBagDamage()
{
	A_Explode();

	Origin.z += Level.Game.FloatBobOffsets[BobIndex] / 16.0;
	BobIndex = (BobIndex + 1) & 63;
}

//===========================================================================
//
//  A_PoisonBagCheck
//
//===========================================================================

void A_PoisonBagCheck()
{
	if (!--LifeCount)
	{
		SetState(DeathState);
	}
}

__states__
{
	S_POISONCLOUD1('PSBG', 3, 2.0 / 35.0, S_POISONCLOUD2) { }
	S_POISONCLOUD2('PSBG', 3, 2.0 / 35.0, S_POISONCLOUD3) { A_Scream(); }
	S_POISONCLOUD3('PSBG', 3, 2.0 / 35.0, S_POISONCLOUD4) { A_PoisonBagDamage(); }
	S_POISONCLOUD4('PSBG', 4, 2.0 / 35.0, S_POISONCLOUD5) { A_PoisonBagDamage(); }
	S_POISONCLOUD5('PSBG', 4, 2.0 / 35.0, S_POISONCLOUD6) { A_PoisonBagDamage(); }
	S_POISONCLOUD6('PSBG', 4, 2.0 / 35.0, S_POISONCLOUD7) { A_PoisonBagDamage(); }
	S_POISONCLOUD7('PSBG', 5, 2.0 / 35.0, S_POISONCLOUD8) { A_PoisonBagDamage(); }
	S_POISONCLOUD8('PSBG', 5, 2.0 / 35.0, S_POISONCLOUD9) { A_PoisonBagDamage(); }
	S_POISONCLOUD9('PSBG', 5, 2.0 / 35.0, S_POISONCLOUD10) { A_PoisonBagDamage(); }
	S_POISONCLOUD10('PSBG', 6, 2.0 / 35.0, S_POISONCLOUD11) { A_PoisonBagDamage(); }
	S_POISONCLOUD11('PSBG', 6, 2.0 / 35.0, S_POISONCLOUD12) { A_PoisonBagDamage(); }
	S_POISONCLOUD12('PSBG', 6, 2.0 / 35.0, S_POISONCLOUD13) { A_PoisonBagDamage(); }
	S_POISONCLOUD13('PSBG', 7, 2.0 / 35.0, S_POISONCLOUD14) { A_PoisonBagDamage(); }
	S_POISONCLOUD14('PSBG', 7, 2.0 / 35.0, S_POISONCLOUD15) { A_PoisonBagDamage(); }
	S_POISONCLOUD15('PSBG', 7, 2.0 / 35.0, S_POISONCLOUD16) { A_PoisonBagDamage(); }
	S_POISONCLOUD16('PSBG', 8, 2.0 / 35.0, S_POISONCLOUD17) { A_PoisonBagDamage(); }
	S_POISONCLOUD17('PSBG', 8, 1.0 / 35.0, S_POISONCLOUD18) { A_PoisonBagDamage(); }
	S_POISONCLOUD18('PSBG', 8, 1.0 / 35.0, S_POISONCLOUD4) { A_PoisonBagCheck(); }
	S_POISONCLOUD_X1('PSBG', 7, 7.0 / 35.0, S_POISONCLOUD_X2) { }
	S_POISONCLOUD_X2('PSBG', 6, 7.0 / 35.0, S_POISONCLOUD_X3) { }
	S_POISONCLOUD_X3('PSBG', 5, 6.0 / 35.0, S_POISONCLOUD_X4) { }
	S_POISONCLOUD_X4('PSBG', 3, 6.0 / 35.0, none) { }
}

defaultproperties
{
	Radius = 1.0;
	Height = 1.0;
	Mass = 99999.0;
	Translucency = 66;
	bDropOff = true;
	bColideWithWorld = false;
	bColideWithThings = false;
	bNoDamageThrust = true;
	bDamageInvulnerable = true;
	IdleState = S_POISONCLOUD1;
	DeathState = S_POISONCLOUD_X1;
	DeathSound = 'PoisonShroomDeath';

	//[CW]
	deathmsgi[0] = 13;
	deathmsgi[2] = 69;
}
