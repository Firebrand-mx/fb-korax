//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**		##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id$
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class WeaponWitchavenSSword : Weapon;

//int NoMoreManaState;
float SwordRange;

//==========================================================================
//
//  A_WSSwordAttack
//
//==========================================================================

final void A_WSSwordAttack()
{
	Actor pmo = Actor(Owner);
	float power;
	int damage;
	int i;
	int useMana;
	TAVec angles;
	TVec vforward;
	class<Actor> PuffType;

	damage = 25; //15 + (P_Random() & 15) + (P_Random() & 7);
	if (str_mod)
	{
		if(!active_damage)
		{
			damage = damage * Player(Owner.Player).strength / 10;
		}
		else // [FB] PI Damage
		{
			damage = (damage * Player(Owner.Player).strength / 10) * ftoi(3.1415);
		}
	}
	power = 0.0;
// [KORAX]
/*	if (IsWeaponManaUsable())
	{*/
		damage <<= 1;
		power = 6.0;
		PuffType = AxePuff;
		useMana = 1;
/*	}
	else
	{
		PuffType = AxePuff;
		useMana = 0;
	}*/

	for (i = 0; i < 16; i++)
	{
		angles = pmo.Angles;
		angles.yaw = AngleMod360(angles.yaw + itof(i) * (45.0 / 16.0));
		vforward = pmo.AimLineAttack(angles, SwordRange);
		if (pmo.linetarget)
		{
			if (pmo.LineAttack(vforward, SwordRange, damage, PuffType))
			{
				pmo.PlaySound('FighterHammerMiss', CHAN_WEAPON);
			}
			if (pmo.linetarget.bCountKill || pmo.linetarget.bIsPlayer)
			{
				pmo.linetarget.Thrust(angles.yaw, power);
			}
			Player(Owner.Player).AdjustPlayerAngle();
			useMana++;
			break;
		}
		angles = pmo.Angles;
		angles.yaw = AngleMod360(angles.yaw - itof(i) * (45.0 / 16.0));
		vforward = pmo.AimLineAttack(angles, SwordRange);
		if (pmo.linetarget)
		{
			if (pmo.LineAttack(vforward, SwordRange, damage, PuffType))
			{
				pmo.PlaySound('FighterHammerMiss', CHAN_WEAPON);
			}
			if (pmo.linetarget.bCountKill || pmo.linetarget.bIsPlayer)
			{
				pmo.linetarget.Thrust(angles.yaw, power);
			}
			Player(Owner.Player).AdjustPlayerAngle();
			useMana++;
			break;
		}
	}
	if (i == 16)
	{
		// didn't find any creatures, so try to strike any walls
		angles = pmo.Angles;
		vforward = pmo.AimLineAttack(angles, MELEERANGE);
		PuffType = HammerPuff;
		if (pmo.LineAttack(vforward, MELEERANGE, damage, PuffType))
		{
			pmo.PlaySound('FighterHammerMiss', CHAN_WEAPON);
		}
	}

//[KORAX]
	if (useMana == 2)
	{
		UseWeaponMana();
/*		if (!IsWeaponManaUsable())
		{
			SetState(NoMoreManaState);
		}*/
	}
}

__states__
{
//[KORAX]
/*
	S_WSSWORDREADY('WSSW', 0, 1.0 / 35.0, S_WSSWORDREADY) = A_WeaponReady
	S_WSSWORDDOWN('WSSW', 0, 1.0 / 35.0, S_WSSWORDDOWN) = A_Lower
	S_WSSWORDUP('WSSW', 0, 1.0 / 35.0, S_WSSWORDUP) = A_Raise
	S_WSSWORDATK_1('WSSW', 1, 4.0 / 35.0, S_WSSWORDATK_2) = none
	S_WSSWORDATK_2('WSSW', 2, 3.0 / 35.0, S_WSSWORDATK_3) = none
	S_WSSWORDATK_3('WSSW', 3, 2.0 / 35.0, S_WSSWORDATK_4) = none
	S_WSSWORDATK_4('WSSW', 4, 1.0 / 35.0, S_WSSWORDATK_5) = A_WSSwordAttack
	S_WSSWORDATK_5('WSSW', 5, 2.0 / 35.0, S_WSSWORDATK_6) = none
	S_WSSWORDATK_6('WSSW', 5, 1.0 / 35.0, S_WSSWORDATK_7) = none
	S_WSSWORDATK_7('WSSW', 6, 2.0 / 35.0, S_WSSWORDATK_8) = none
	S_WSSWORDATK_8('WSSW', 4, 7.0 / 35.0, S_WSSWORDATK_9) = none
	S_WSSWORDATK_9('WSSW', 0, 1.0 / 35.0, S_WSSWORDATK_10) = none
	S_WSSWORDATK_10('WSSW', 0, 1.0 / 35.0, S_WSSWORDATK_11, 0, 52) = none
	S_WSSWORDATK_11('WSSW', 0, 1.0 / 35.0, S_WSSWORDATK_12, 0, 44) = none
	S_WSSWORDATK_12('WSSW', 0, 1.0 / 35.0, S_WSSWORDATK_13, 0, 36) = none
	S_WSSWORDATK_13('WSSW', 0, 1.0 / 35.0, S_WSSWORDREADY) = none
	// SECOND STRIKE (NO MANA)
	S_WSSWORDATK2_1('WSSW', 8, 4.0 / 35.0, S_WSSWORDATK2_2) = none
	S_WSSWORDATK2_2('WSSW', 8, 4.0 / 35.0, S_WSSWORDATK2_3) = none
	S_WSSWORDATK2_3('WSSW', 9, 3.0 / 35.0, S_WSSWORDATK2_4) = none
	S_WSSWORDATK2_4('WSSW', 9, 3.0 / 35.0, S_WSSWORDATK2_5) = none
	S_WSSWORDATK2_5('WSSW', 10, 2.0 / 35.0, S_WSSWORDATK2_6) = none
	S_WSSWORDATK2_6('WSSW', 10, 2.0 / 35.0, S_WSSWORDATK2_7) = none
	S_WSSWORDATK2_7('WSSW', 11, 1.0 / 35.0, S_WSSWORDATK2_8) = A_WSSwordAttack
	S_WSSWORDATK2_8('WSSW', 11, 1.0 / 35.0, S_WSSWORDATK2_9) = none
	S_WSSWORDATK2_9('WSSW', 12, 2.0 / 35.0, S_WSSWORDATK2_10) = none
	S_WSSWORDATK2_10('WSSW', 12, 2.0 / 35.0, S_WSSWORDATK2_11) = none
	S_WSSWORDATK2_11('WSSW', 13, 1.0 / 35.0, S_WSSWORDATK2_12) = none
	S_WSSWORDATK2_12('WSSW', 13, 2.0 / 35.0, S_WSSWORDATK2_13) = none
	S_WSSWORDATK2_13('WSSW', 14, 1.0 / 35.0, S_WSSWORDATK2_14) = none
	S_WSSWORDATK2_14('WSSW', 14, 2.0 / 35.0, S_WSSWORDATK_1) = A_ReFire
*/
//[KORAX]
	// MANA STATES
	S_WSSWORDREADY_G('WSWF', 0 | FF_FULLBRIGHT, 2.0 / 35.0, S_WSSWORDREADY_G1) = A_WeaponReady
	S_WSSWORDREADY_G1('WSWF', 0 | FF_FULLBRIGHT, 2.0 / 35.0, S_WSSWORDREADY_G2) = A_WeaponReady
	S_WSSWORDREADY_G2('WSWF', 1 | FF_FULLBRIGHT, 2.0 / 35.0, S_WSSWORDREADY_G3) = A_WeaponReady
	S_WSSWORDREADY_G3('WSWF', 1 | FF_FULLBRIGHT, 2.0 / 35.0, S_WSSWORDREADY_G4) = A_WeaponReady
	S_WSSWORDREADY_G4('WSWF', 2 | FF_FULLBRIGHT, 2.0 / 35.0, S_WSSWORDREADY_G5) = A_WeaponReady
	S_WSSWORDREADY_G5('WSWF', 2 | FF_FULLBRIGHT, 2.0 / 35.0, S_WSSWORDREADY_G6) = A_WeaponReady
	S_WSSWORDREADY_G6('WSWF', 3 | FF_FULLBRIGHT, 2.0 / 35.0, S_WSSWORDREADY_G7) = A_WeaponReady
	S_WSSWORDREADY_G7('WSWF', 3 | FF_FULLBRIGHT, 2.0 / 35.0, S_WSSWORDREADY_G) = A_WeaponReady
	S_WSSWORDDOWN_G('WSWF', 0 | FF_FULLBRIGHT, 1.0 / 35.0, S_WSSWORDDOWN_G) = A_Lower
	S_WSSWORDUP_G('WSWF', 0 | FF_FULLBRIGHT, 1.0 / 35.0, S_WSSWORDUP_G) = A_Raise
	S_WSSWORDATK_G1('WSWF', 4 | FF_FULLBRIGHT, 3.0 / 35.0, S_WSSWORDATK_G2, 0, 31) = none
	S_WSSWORDATK_G2('WSWF', 4 | FF_FULLBRIGHT, 3.0 / 35.0, S_WSSWORDATK_G3) = none
	S_WSSWORDATK_G3('WSWF', 5 | FF_FULLBRIGHT, 2.0 / 35.0, S_WSSWORDATK_G4) = none
	S_WSSWORDATK_G4('WSWF', 5 | FF_FULLBRIGHT, 2.0 / 35.0, S_WSSWORDATK_G5) = none
	S_WSSWORDATK_G5('WSWF', 6 | FF_FULLBRIGHT, 1.0 / 35.0, S_WSSWORDATK_G6) = none
	S_WSSWORDATK_G6('WSWF', 6 | FF_FULLBRIGHT, 1.0 / 35.0, S_WSSWORDATK_G7) = none
	S_WSSWORDATK_G7('WSWF', 7| FF_FULLBRIGHT, 1.0 / 35.0, S_WSSWORDATK_G8) = A_WSSwordAttack
	S_WSSWORDATK_G8('WSWF', 7 | FF_FULLBRIGHT, 1.0 / 35.0, S_WSSWORDATK_G9, -5, 0) = none
	S_WSSWORDATK_G9('WSWF', 8 | FF_FULLBRIGHT, 1.0 / 35.0, S_WSSWORDATK_G10) = none
	S_WSSWORDATK_G10('WSWF', 8 | FF_FULLBRIGHT, 1.0 / 35.0, S_WSSWORDATK_G11, -10, 0) = none
	S_WSSWORDATK_G11('WSWF', 9 | FF_FULLBRIGHT, 1.0 / 35.0, S_WSSWORDATK_G12) = none
	S_WSSWORDATK_G12('WSWF', 9 | FF_FULLBRIGHT, 1.0 / 35.0, S_WSSWORDATK_G13, -15, 0) = none
	S_WSSWORDATK_G13('WSWF', 9 | FF_FULLBRIGHT, 2.0 / 35.0, S_WSSWORDATK_G14, -20, 0) = A_ReFire
	S_WSSWORDATK_G14('WSWF', 0 | FF_FULLBRIGHT, 1.0 / 35.0, S_WSSWORDATK_G15, 0, 52) = none
	S_WSSWORDATK_G15('WSWF', 1 | FF_FULLBRIGHT, 1.0 / 35.0, S_WSSWORDATK_G16, 0, 44) = none
	S_WSSWORDATK_G16('WSWF', 2 | FF_FULLBRIGHT, 1.0 / 35.0, S_WSSWORDATK_G17, 0, 36) = none
	S_WSSWORDATK_G17('WSWF', 3 | FF_FULLBRIGHT, 1.0 / 35.0, S_WSSWORDREADY_G) = none
	// SECOND STRIKE (MANA CHARGED)
	S_WSSWORDATK2_G1('WSWF', 10 | FF_FULLBRIGHT, 3.0 / 35.0, S_WSSWORDATK2_G2) = none
	S_WSSWORDATK2_G2('WSWF', 10 | FF_FULLBRIGHT, 3.0 / 35.0, S_WSSWORDATK2_G3) = none
	S_WSSWORDATK2_G3('WSWF', 11 | FF_FULLBRIGHT, 2.0 / 35.0, S_WSSWORDATK2_G4) = none
	S_WSSWORDATK2_G4('WSWF', 11 | FF_FULLBRIGHT, 2.0 / 35.0, S_WSSWORDATK2_G5) = none
	S_WSSWORDATK2_G5('WSWF', 12 | FF_FULLBRIGHT, 2.0 / 35.0, S_WSSWORDATK2_G6, 0, -2) = none
	S_WSSWORDATK2_G6('WSWF', 12 | FF_FULLBRIGHT, 2.0 / 35.0, S_WSSWORDATK2_G7, 0, -2) = none
	S_WSSWORDATK2_G7('WSWF', 13 | FF_FULLBRIGHT, 1.0 / 35.0, S_WSSWORDATK2_G8, 0, 10) = A_WSSwordAttack
	S_WSSWORDATK2_G8('WSWF', 13 | FF_FULLBRIGHT, 1.0 / 35.0, S_WSSWORDATK2_G9, -20, 10) = none
	S_WSSWORDATK2_G9('WSWF', 14 | FF_FULLBRIGHT, 2.0 / 35.0, S_WSSWORDATK2_G10, 0, 89) = none
	S_WSSWORDATK2_G10('WSWF', 14 | FF_FULLBRIGHT, 2.0 / 35.0, S_WSSWORDATK2_G11, -15, 89) = none
	S_WSSWORDATK2_G11('WSWF', 15 | FF_FULLBRIGHT, 1.0 / 35.0, S_WSSWORDATK2_G12) = none
	S_WSSWORDATK2_G12('WSWF', 15 | FF_FULLBRIGHT, 1.0 / 35.0, S_WSSWORDATK2_G13, -10, 0) = none
	S_WSSWORDATK2_G13('WSWF', 16 | FF_FULLBRIGHT, 2.0 / 35.0, S_WSSWORDATK2_G14, -5, 0) = none
	S_WSSWORDATK2_G14('WSWF', 16 | FF_FULLBRIGHT, 2.0 / 35.0, S_WSSWORDATK_G1) = none
}

//[KORAX]
/*
//==========================================================================
//
//	GetUpState
//
//==========================================================================

int GetUpState()
{
	if (IsWeaponManaUsable())
	{
		return S_WSSWORDUP_G;
	}
	else
	{
		return UpState;
	}
}

//==========================================================================
//
//	GetDownState
//
//==========================================================================

int GetDownState()
{
	if (IsWeaponManaUsable())
	{
		return S_WSSWORDDOWN_G;
	}
	else
	{
		return DownState;
	}
}

//==========================================================================
//
//	GetReadyState
//
//==========================================================================

int GetReadyState()
{
	if (IsWeaponManaUsable())
	{
		return S_WSSWORDREADY_G;
	}
	else
	{
		return ReadyState;
	}
}

//==========================================================================
//
//	GetAttackState
//
//==========================================================================

int GetAttackState()
{
	if (IsWeaponManaUsable())
	{
		// Fire Sword
		return S_WSSWORDATK2_G1;
	}
	else
	{
		return Player.Refire ? HoldAttackState : AttackState;
	}
}

//==========================================================================
//
//	GotMana
//
//==========================================================================

void GotMana(int InMana)
{
	if (InMana == HexenDefs::MANA_1 && IsWeaponManaUsable())
	{
		SetState(S_WSSWORDREADY_G);
	}
}
*/
//[KORAX]

/*SECOND*/
defaultproperties
{
	Mana = HexenDefs::MANA_1;
	manause = 5;
	//needsnomana = true;
	UpState = S_WSSWORDUP_G;
	DownState = S_WSSWORDDOWN_G;
	ReadyState = S_WSSWORDREADY_G;
	AttackState = S_WSSWORDATK2_G1;
	HoldAttackState = S_WSSWORDATK_G1;
//	NoMoreManaState = S_WSSWORDATK_5;
	SwordRange = 3.0 * MELEERANGE / 2.0;
	wis_mod = true;
	int_mod = false;
	dex_mod = true;
	str_mod = true;
	PickUpMessage = "SHORT SWORD";

	deathmsgi = 15;
}
