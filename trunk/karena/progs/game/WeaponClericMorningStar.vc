//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class WeaponClericMorningStar : Weapon;

int NoMoreManaState;
float MStarRange;

//==========================================================================
//
//  A_CMSAttack
//
//==========================================================================

void A_CMSAttack()
{
	Actor Owner = Player.MO;
	float power;
	int damage;
	int i;
	int useMana;
	TAVec angles;
	TVec vforward;
	classid PuffType;

	damage = 56; //40 + (P_Random() & 15) + (P_Random() & 7);
	if (str_mod)
	{
		if(!active_damage)
		{
			damage = damage * Player.strength / 10;
		}
		else // [FB] PI Damage
		{
			damage = (damage * Player.intelligence / 10) * ftoi(3.1415);
		}
	}
	power = 0.0;
	if (IsWeaponManaUsable())
	{
		damage <<= 1;
		power = 6.0;
		PuffType = MorningStarPuffGlow;
		useMana = 1;
	}
	else
	{
		PuffType = AxePuff;
		useMana = 0;
	}
	for (i = 0; i < 16; i++)
	{
		angles = Owner.Angles;
		angles.yaw = AngleMod360(angles.yaw + itof(i) * (45.0 / 16.0));
		Owner.AimLineAttack(&angles, MStarRange);
		if (Owner.linetarget)
		{
			AngleVector(&angles, &vforward);
			if (Owner.LineAttack(vforward, MStarRange, damage, PuffType))
			{
				Owner.PlaySound('FighterHammerMiss', CHAN_WEAPON);
			}
			if (Owner.linetarget.bCountKill || Owner.linetarget.bIsPlayer)
			{
				Owner.linetarget.Thrust(angles.yaw, power);
			}
			Player.AdjustPlayerAngle();
			useMana++;
			break;
		}
		angles = Owner.Angles;
		angles.yaw = AngleMod360(angles.yaw - itof(i) * (45.0 / 16.0));
		Owner.AimLineAttack(&angles, MStarRange);
		if (Owner.linetarget)
		{
			AngleVector(&angles, &vforward);
			if (Owner.LineAttack(vforward, MStarRange, damage, PuffType))
			{
				Owner.PlaySound('FighterHammerMiss', CHAN_WEAPON);
			}
			if (Owner.linetarget.bCountKill || Owner.linetarget.bIsPlayer)
			{
				Owner.linetarget.Thrust(angles.yaw, power);
			}
			Player.AdjustPlayerAngle();
			useMana++;
			break;
		}
	}
	if (i == 16)
	{
		// didn't find any creatures, so try to strike any walls
		angles = Owner.Angles;
		Owner.AimLineAttack(&angles, MELEERANGE);
		AngleVector(&angles, &vforward);
		if (Owner.LineAttack(vforward, MELEERANGE, damage, PuffType))
		{
			Owner.PlaySound('FighterHammerMiss', CHAN_WEAPON);
		}
	}

	if (useMana == 2)
	{
		UseWeaponMana();
		if (!IsWeaponManaUsable())
		{
			SetState(NoMoreManaState);
		}
	}
}

__states__
{
	S_CMSREADY1('WMST', 0, 1.0 / 35.0, S_CMSREADY2) { A_WeaponReady(); }
	S_CMSREADY2('WMST', 0, 1.0 / 35.0, S_CMSREADY3) { A_WeaponReady(); }
	S_CMSREADY3('WMSB', 0, 1.0 / 35.0, S_CMSREADY4) { A_WeaponReady(); }
	S_CMSREADY4('WMSB', 0, 1.0 / 35.0, S_CMSREADY1) { A_WeaponReady(); }
	S_CMSDOWN('WMST', 0, 1.0 / 35.0, S_CMSDOWN) { A_Lower(); }
	S_CMSUP('WMSB', 0, 1.0 / 35.0, S_CMSUP) { A_Raise(); }
	S_CMSATK_1('WMST', 1, 6.0 / 35.0, S_CMSATK_2) { SX = 0.0; }
	S_CMSATK_2('WMST', 2, 3.0 / 35.0, S_CMSATK_3) { SX = 0.0; }
	S_CMSATK_3('WMST', 3, 3.0 / 35.0, S_CMSATK_4) { SX = 0.0; }
	S_CMSATK_4('WMST', 4, 2.0 / 35.0, S_CMSATK_5) { }
	S_CMSATK_5('WMST', 4, 3.0 / 35.0, S_CMSATK_6) { SX = -25.0; }
	S_CMSATK_6('WMST', 5, 2.0 / 35.0, S_CMSATK_7) { A_CMSAttack(); }
	S_CMSATK_7('WMST', 6, 3.0 / 35.0, S_CMSATK_8) { }
	S_CMSATK_8('WMSB', 0, 1.0 / 35.0, S_CMSATK_9) { SY = 60.0; A_ReFire(); }
	S_CMSATK_9('WMST', 0, 1.0 / 35.0, S_CMSATK_10) { SY = 52.0; }
	S_CMSATK_10('WMSB', 0, 1.0 / 35.0, S_CMSATK_11) { SY = 44.0; }
	S_CMSATK_11('WMST', 0, 1.0 / 35.0, S_CMSREADY1) { SY = 36.0; }
}

//==========================================================================
//
//	GetUpState
//
//==========================================================================

int GetUpState()
{
	if (IsWeaponManaUsable())
	{
		return S_CMSUP;
	}
	else
	{
		return UpState;
	}
}

//==========================================================================
//
//	GetDownState
//
//==========================================================================

int GetDownState()
{
	if (IsWeaponManaUsable())
	{
		return S_CMSDOWN;
	}
	else
	{
		return DownState;
	}
}

//==========================================================================
//
//	GetReadyState
//
//==========================================================================

int GetReadyState()
{
	if (IsWeaponManaUsable())
	{
		return S_CMSREADY1;
	}
	else
	{
		return ReadyState;
	}
}

//==========================================================================
//
//	GetAttackState
//
//==========================================================================

int GetAttackState()
{
	if (IsWeaponManaUsable())
	{
		// Glowing axe
		return S_CMSATK_1;
	}
	else
	{
		return Player.Refire ? HoldAttackState : AttackState;
	}
}

//==========================================================================
//
//	GotMana
//
//==========================================================================

void GotMana(int InMana)
{
	if (InMana == MANA_1 && IsWeaponManaUsable())
	{
		SetState(S_CMSREADY1);
	}
}

/*THIRD*/
defaultproperties
{
	Mana = MANA_2;
	manause = 8;
	//needsnomana = true;
	UpState = S_CMSUP;
	DownState = S_CMSDOWN;
	ReadyState = S_CMSREADY1;
	AttackState = S_CMSATK_1;
	HoldAttackState = S_CMSATK_1;
	NoMoreManaState = S_CMSATK_5;
	PSpriteSY = 0.0;
	MStarRange = MELEERANGE * 3.0;
	wis_mod = true;
	int_mod = false;
	dex_mod = true;
	str_mod = true;
	PickUpMessage = "MORNING STAR";
}

//**************************************************************************
//
//  $Log$
//  Revision 1.4  2006/02/15 23:37:46  dj_jl
//  Moved all server progs global variables to classes.
//
//  Revision 1.3  2005/12/11 21:37:29  dj_jl
//  Made path traversal callbacks class members.
//
//  Revision 1.2  2005/08/12 23:04:25  firebrand_kh
//  Fixed weapons to work with the PI Damage artifact
//
//  Revision 1.1  2005/08/12 16:12:26  firebrand_kh
//  Initial Import
//
//  Revision 1.2  2005/07/27 21:00:06  firebrand_kh
//  Balanced weapon damage rates & mana usage
//
//  Revision 1.1  2004/11/16 13:33:22  dj_jl
//  Initial import.
//
//  Revision 1.2  2003/11/12 16:50:47  dj_jl
//  Changed player structure into a class
//
//  Revision 1.1  2002/10/26 16:32:27  dj_jl
//  New style of defining classes.
//
//**************************************************************************
