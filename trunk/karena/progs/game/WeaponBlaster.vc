//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**		##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id$
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class WeaponBlaster : Weapon;

//===========================================================================
//
//  A_FireBlasterPL1
//
//===========================================================================

void A_FireBlasterPL1()
{
	int damage;
	float bulletslope;
	TVec dir;
	TAVec angles;

	Player.MO.PlaySound('GoldWandFire', CHAN_WEAPON);
	UseWeaponMana();
//	dir = Aim(Player.MO, Player.MO.Angles.yaw, 16.0 * 64.0);
	angles = Player.MO.Angles;
	Actor(Player.MO).AimLineAttack(&angles, 3.0 * MELEERANGE / 2.0);
	damage = 42; //30 + (P_Random() & 25);
	if (int_mod)
	{
		if(!active_damage)
		{
			damage = damage * Player(Player).strength / 10;
		}
		else // [FB] PI Damage
		{
			damage = (damage * Player(Player).strength / 10) * ftoi(3.1415);
		}
	}
	AngleVector(&angles, &dir);
	if (Player(Player).Refire)
	{
		VectorRotateAroundZ(&dir, (Random() - Random()) * 45.0 / 8.0);
	}
	Actor(Player.MO).LineAttack(dir, MISSILERANGE, damage, BlasterPuff1);
	Player.MO.PlaySound('BlasterFire', CHAN_WEAPON);
}

//===========================================================================
//
//  A_FireBlasterPL2
//
//===========================================================================

void A_FireBlasterPL2()
{
	Actor A;

	UseWeaponMana();
	A = Player(Player).SpawnPlayerMissile(BlasterFX1);
	if (A)
	{
		A.bBlaster = true;
		if (int_mod)
		{
			if(!active_damage)
			{
				A.MissileDamage = A.MissileDamage * Player(Player).strength / 10;
			}
			else // [FB] PI Damage
			{
				A.MissileDamage = (A.MissileDamage * Player(Player).strength / 10) * ftoi(3.1415);
			}
		}
	}
	Player.MO.PlaySound('BlasterFire', CHAN_WEAPON);
}

__states__
{
	S_BLASTERREADY('BLSR', 0, 1.0 / 35.0, S_BLASTERREADY) { A_WeaponReady(); }
	S_BLASTERREADY2('WRIP', 0, 1.0 / 35.0, S_BLASTERREADY2) { A_WeaponReady(); }
	S_BLASTERDOWN('BLSR', 0, 1.0 / 35.0, S_BLASTERDOWN) { A_Lower(); }
	S_BLASTERDOWN2('WRIP', 0, 1.0 / 35.0, S_BLASTERDOWN2) { A_Lower(); }
	S_BLASTERUP('BLSR', 0, 1.0 / 35.0, S_BLASTERUP) { A_Raise(); }
	S_BLASTERUP2('WRIP', 0, 1.0 / 35.0, S_BLASTERUP2) { A_Raise(); }
	S_BLASTERATK1_1('BLSR', 1, 3.0 / 35.0, S_BLASTERATK1_2) { }
	S_BLASTERATK1_2('BLSR', 2, 3.0 / 35.0, S_BLASTERATK1_3) { }
	S_BLASTERATK1_3('BLSR', 3, 2.0 / 35.0, S_BLASTERATK1_4) { A_FireBlasterPL1(); }
	S_BLASTERATK1_4('BLSR', 2, 2.0 / 35.0, S_BLASTERATK1_5) { }
	S_BLASTERATK1_5('BLSR', 1, 2.0 / 35.0, S_BLASTERATK1_6) { }
	S_BLASTERATK1_6('BLSR', 0, 0.0 / 35.0, S_BLASTERREADY) { A_ReFire(); }
	S_BLASTERATK2_1('WRIP', 1, 0.0 / 35.0, S_BLASTERATK2_2) { }
	S_BLASTERATK2_2('WRIP', 2, 0.0 / 35.0, S_BLASTERATK2_3) { }
	S_BLASTERATK2_3('WRIP', 3, 3.0 / 35.0, S_BLASTERATK2_4) { A_FireBlasterPL2(); }
	S_BLASTERATK2_4('WRIP', 2, 4.0 / 35.0, S_BLASTERATK2_5) { }
	S_BLASTERATK2_5('WRIP', 1, 4.0 / 35.0, S_BLASTERATK2_6) { }
	S_BLASTERATK2_6('WRIP', 0, 0.0 / 35.0, S_BLASTERREADY2) { A_ReFire(); }
}

/*FOURTH*/
defaultproperties
{
	Mana = HexenDefs::MANA_3;
	manause = 15;
	wis_mod = true;
	int_mod = true;
	dex_mod = false;
	str_mod = false;

	UpState = S_BLASTERUP;
	DownState = S_BLASTERDOWN;
	ReadyState = S_BLASTERREADY;
	AttackState = S_BLASTERATK1_1;
	HoldAttackState = S_BLASTERATK1_3;
	PSpriteSY = 15.0;
	PickUpMessage = "DRAGON'S CLAW";

	bInstantRanged = true;
	deathmsgi = 20;
}
