//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class WeaponFighterHammer : Weapon;

bool bThrowHammer;
float HammerRange;

//============================================================================
//
//  A_FHammerAttack
//
//============================================================================

void A_FHammerAttack(void)
{
	bThrowHammer = true;
}

//============================================================================
//
//  A_FHammerThrow
//
//============================================================================

void A_FHammerThrow(void)
{
	if (!bThrowHammer)
	{
		return;
	}
	UseWeaponMana();
	Player.SpawnPlayerMissile(HammerMissile);
}

__states__
{
	S_FHAMMERREADY('FHMR', 0, 1.0 / 35.0, S_FHAMMERREADY) { A_WeaponReady(); }
	S_FHAMMERDOWN('FHMR', 0, 1.0 / 35.0, S_FHAMMERDOWN) { A_Lower(); }
	S_FHAMMERUP('FHMR', 0, 1.0 / 35.0, S_FHAMMERUP) { A_Raise(); }
	S_FHAMMERATK_1('FHMR', 1, 6.0 / 35.0, S_FHAMMERATK_2) { SX = 5.0; }
	S_FHAMMERATK_2('FHMR', 2, 3.0 / 35.0, S_FHAMMERATK_3) { SX = 5.0; A_FHammerAttack(); }
	S_FHAMMERATK_3('FHMR', 3, 3.0 / 35.0, S_FHAMMERATK_4) { SX = 5.0; }
	S_FHAMMERATK_4('FHMR', 4, 2.0 / 35.0, S_FHAMMERATK_5) { SX = 5.0; }
	S_FHAMMERATK_5('FHMR', 4, 10.0 / 35.0, S_FHAMMERATK_6) { SX = 5.0; SY = 150.0; A_FHammerThrow(); }
	S_FHAMMERATK_6('FHMR', 0, 1.0 / 35.0, S_FHAMMERATK_7) { SY = 60.0; }
	S_FHAMMERATK_7('FHMR', 0, 1.0 / 35.0, S_FHAMMERATK_8) { SY = 55.0; }
	S_FHAMMERATK_8('FHMR', 0, 1.0 / 35.0, S_FHAMMERATK_9) { SY = 50.0; }
	S_FHAMMERATK_9('FHMR', 0, 1.0 / 35.0, S_FHAMMERATK_10) { SY = 45.0; }
	S_FHAMMERATK_10('FHMR', 0, 1.0 / 35.0, S_FHAMMERATK_11) { SY = 40.0; }
	S_FHAMMERATK_11('FHMR', 0, 1.0 / 35.0, S_FHAMMERATK_12) { SY = 35.0; }
	S_FHAMMERATK_12('FHMR', 0, 1.0 / 35.0, S_FHAMMERREADY) { }
}

/*SIXTH*/
defaultproperties
{
	Mana = MANA_2;
	manause = 20;
	//needsnomana = true;
	UpState = S_FHAMMERUP;
	DownState = S_FHAMMERDOWN;
	ReadyState = S_FHAMMERREADY;
	AttackState = S_FHAMMERATK_1;
	HoldAttackState = S_FHAMMERATK_1;
	PSpriteSY = -10.0;
	HammerRange = MELEERANGE + MELEERANGE / 2.0;
	wis_mod = true;
	int_mod = true;
	dex_mod = true;
	str_mod = true;
	PickUpMessage = "HAMMER OF RETRIBUTION";
}

//**************************************************************************
//
//  $Log$
//  Revision 1.2  2005/07/27 21:00:06  firebrand_kh
//  Balanced weapon damage rates & mana usage
//
//  Revision 1.1  2004/11/16 13:33:22  dj_jl
//  Initial import.
//
//  Revision 1.2  2003/11/12 16:50:47  dj_jl
//  Changed player structure into a class
//
//  Revision 1.1  2002/10/26 16:32:27  dj_jl
//  New style of defining classes.
//
//**************************************************************************
