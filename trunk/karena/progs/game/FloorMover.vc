//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class FloorMover : SectorMover;

int		Type;
float	Speed;
int		Direction;
int		Crush;
float	FloorDestDist;
int		NewSpecial;
int		Texture;
int		TextureChange;

float	ResetTime;
float	OrgDist;
float	Delay;
float	PauseTime;
float	StepTime;
float	PerStepTime;

//==========================================================================
//
//	Init
//
//==========================================================================

void Init(sector_t* InSector, int Arg1, int Arg2, int Arg3, int Arg4,
	int Arg5, int InType, line_t* Line)
{
	sector_t*		ModelSec;
	float			DestHeight;
	float			CeilHeight;
	TVec			Spot;
	TVec			Spot2;

	Sector = InSector;
	Sector->FloorData = self;

	Type = InType;
	Crush = 0;
	Speed = itof(Arg2) * 35.0 / 8.0;
	if (Type == FLOOREV_LowerTimes8Instant ||
		Type == FLOOREV_RaiseTimes8Instant)
	{
		Speed = 35.0 * 2000.0;
	}
	Spot = *Sector->lines[0]->v1;
	switch (Type)
	{
	case FLOOREV_LowerToHighest:
		Direction = -1;
		DestHeight = Level.FindHighestFloorSurrounding(Sector, &Spot);
		Spot.z = DestHeight;
		FloorDestDist = DotProduct(Sector->floor.normal, Spot);
		if (FloorDestDist != Sector->floor.dist)
		{
			Spot.z = DestHeight + itof(Arg3) - 128.0;
			FloorDestDist = DotProduct(Sector->floor.normal, Spot);
		}
		break;

	case FLOOREV_RaiseToHighest:
		Direction = 1;
		DestHeight = Level.FindHighestFloorSurrounding(Sector, &Spot);
		Spot.z = DestHeight;
		FloorDestDist = DotProduct(Sector->floor.normal, Spot);
		break;

	case FLOOREV_LowerToLowest:
		Direction = -1;
		DestHeight = Level.FindLowestFloorSurrounding(Sector, &Spot);
		Spot.z = DestHeight;
		FloorDestDist = DotProduct(Sector->floor.normal, Spot);
		break;

	case FLOOREV_LowerToNearest:
		Direction = -1;
		DestHeight = Level.FindNextLowestFloor(Sector, &Spot);
		Spot.z = DestHeight;
		FloorDestDist = DotProduct(Sector->floor.normal, Spot);
		break;

	case FLOOREV_RaiseToNearest:
		Direction = 1;
		DestHeight = Level.FindNextHighestFloor(Sector, &Spot);
		Spot.z = DestHeight;
		FloorDestDist = DotProduct(Sector->floor.normal, Spot);
		break;

	case FLOOREV_RaiseToLowestCeiling:
		Direction = 1;
		DestHeight = Level.FindLowestCeilingSurrounding(Sector, &Spot);
		Spot.z = DestHeight;
		FloorDestDist = DotProduct(Sector->floor.normal, Spot);
		CeilHeight = Level.FindLowestCeilingPoint(Sector, &Spot2);
		if ((FloorDestDist - Sector->floor.normal.x * Spot2.x -
			Sector->floor.normal.y * Spot2.y) / Sector->floor.normal.z >
			CeilHeight)
		{
			Spot2.z = CeilHeight;
			FloorDestDist = DotProduct(Sector->floor.normal, Spot2);
		}
		break;

	case FLOOREV_LowerByValue:
		Direction = -1;
		DestHeight = GetPlanePointZ(&Sector->floor, Spot) - itof(Arg3);
		Spot.z = DestHeight;
		FloorDestDist = DotProduct(Sector->floor.normal, Spot);
		break;

	case FLOOREV_RaiseByValue:
		Direction = 1;
		DestHeight = GetPlanePointZ(&Sector->floor, Spot) + itof(Arg3);
		Spot.z = DestHeight;
		FloorDestDist = DotProduct(Sector->floor.normal, Spot);
		break;

	case FLOOREV_LowerByValueTimes8:
	case FLOOREV_LowerTimes8Instant:
		Direction = -1;
		DestHeight = GetPlanePointZ(&Sector->floor, Spot) - itof(Arg3) * 8.0;
		Spot.z = DestHeight;
		FloorDestDist = DotProduct(Sector->floor.normal, Spot);
		break;

	case FLOOREV_RaiseByValueTimes8:
	case FLOOREV_RaiseTimes8Instant:
		Direction = 1;
		DestHeight = GetPlanePointZ(&Sector->floor, Spot) + itof(Arg3) * 8.0;
		Spot.z = DestHeight;
		FloorDestDist = DotProduct(Sector->floor.normal, Spot);
		break;

	case FLOOREV_MoveToValueTimes8:
		Level.FindHighestFloorPoint(Sector, &Spot);
		DestHeight = itof(Arg3) * 8.0;
		if (Arg4)
		{
			DestHeight = -DestHeight;
		}
		Spot.z = DestHeight;
		FloorDestDist = DotProduct(Sector->floor.normal, Spot);
		if (FloorDestDist > Sector->floor.dist)
		{
			Direction = 1;
		}
		else
		{
			Direction = -1;
		}
		break;

	case FLOOREV_RaiseByTexture:
		Direction = 1;
		DestHeight = GetPlanePointZ(&Sector->floor, Spot) +
			Level.FindShortestTextureAround(Sector);
		Spot.z = DestHeight;
		FloorDestDist = DotProduct(Sector->floor.normal, Spot);
		break;

	case FLOOREV_LowerToLowestChange:
		Direction = -1;
		DestHeight = Level.FindLowestFloorSurrounding(Sector, &Spot);
		Spot.z = DestHeight;
		FloorDestDist = DotProduct(Sector->floor.normal, Spot);
		Texture = Sector->floor.pic;
		// jff 1/24/98 make sure NewSpecial gets initialised
		// in case no surrounding sector is at DestHeight
		// --> should not affect compatibility <--
		NewSpecial = Sector->special & ~SECSPEC_SECRET_MASK; 
		ModelSec = Level.FindModelFloorSector(Sector, DestHeight);
		if (ModelSec)
		{
			Texture = ModelSec->floor.pic;
			NewSpecial = ModelSec->special & ~SECSPEC_SECRET_MASK;
		}
		break;

	case FLOOREV_RaiseToNearestChange:
		Direction = 1;
		DestHeight = Level.FindNextHighestFloor(Sector, &Spot);
		Spot.z = DestHeight;
		FloorDestDist = DotProduct(Sector->floor.normal, Spot);
		XLevel.SetFloorPic(Sector, Line->frontsector->floor.pic);
		// NO MORE DAMAGE, IF APPLICABLE
		Sector->special &= SECSPEC_SECRET_MASK;
		break;

	case FLOOREV_RaiseByValueChange:
		Direction = 1;
		DestHeight = GetPlanePointZ(&Sector->floor, Spot) + itof(Arg3);
		Spot.z = DestHeight;
		FloorDestDist = DotProduct(Sector->floor.normal, Spot);
		XLevel.SetFloorPic(Sector, Line->frontsector->floor.pic);
		Sector->special = (Sector->special & SECSPEC_SECRET_MASK) |
			(Line->frontsector->special & ~SECSPEC_SECRET_MASK);
		break;

	case FLOOREV_RaiseByValueChange2:
		Direction = 1;
		DestHeight = GetPlanePointZ(&Sector->floor, Spot) + itof(Arg3) * 8.0;
		Spot.z = DestHeight;
		FloorDestDist = DotProduct(Sector->floor.normal, Spot);
		XLevel.SetFloorPic(Sector, Line->frontsector->floor.pic);
		break;

	case FLOOREV_RaiseAndCrush:
		Crush = Arg3;	// arg[2] = crushing value
		Direction = 1;
		DestHeight = Level.FindLowestCeilingSurrounding(Sector, &Spot);
		Spot.z = DestHeight - 8.0;
		FloorDestDist = DotProduct(Sector->floor.normal, Spot);
		CeilHeight = Level.FindLowestCeilingPoint(Sector, &Spot2);
		if ((FloorDestDist - Sector->floor.normal.x * Spot2.x -
			Sector->floor.normal.y * Spot2.y) / Sector->floor.normal.z >
			CeilHeight)
		{
			Spot2.z = CeilHeight - 8.0;
			FloorDestDist = DotProduct(Sector->floor.normal, Spot2);
		}
		break;

	case FLOOREV_Generic:
		Direction = (Arg5 & 8) ? 1 : -1;
		Crush = (Arg4 & 16) ? 20 : 0;
		switch (Arg4)
		{
		case 1:
			DestHeight = Level.FindHighestFloorSurrounding(Sector, &Spot);
			break;
		case 2:
			DestHeight = Level.FindLowestFloorSurrounding(Sector, &Spot);
			break;
		case 3:
			if (Direction == 1)
				DestHeight = Level.FindNextHighestFloor(Sector, &Spot);
			else
				DestHeight = Level.FindNextLowestFloor(Sector, &Spot);
			break;
		case 4:
			DestHeight = Level.FindLowestCeilingSurrounding(Sector, &Spot);
			break;
		case 5:
			DestHeight = Level.FindLowestCeilingPoint(Sector, &Spot);
			 break;
		case 6:
			DestHeight = GetPlanePointZ(&Sector->floor, Spot) +
				itof(Direction) * Level.FindShortestTextureAround(Sector);
			 break;
		default:
			DestHeight = GetPlanePointZ(&Sector->floor, Spot) +
				itof(Direction * Arg3);
			break;
		}
		Spot.z = DestHeight;
		FloorDestDist = DotProduct(Sector->floor.normal, Spot);

		if (Arg5 & 3)
		{
			if (Arg5 & 4)
			{
				// Numeric model change
				ModelSec = (Arg4 == 4 || Arg4 == 5) ?
					Level.FindModelCeilingSector(Sector, DestHeight) :
					Level.FindModelFloorSector(Sector, DestHeight);
				if (ModelSec)
				{
					Texture = ModelSec->floor.pic;
					switch (Arg5 & 3)
					{
					case 1:
						NewSpecial = 0;
						Type = FLOOREV_GenericChange0;
						break;
					case 2:
						NewSpecial = Sector->special & ~SECSPEC_SECRET_MASK;
						Type = FLOOREV_GenericChangeT;
						break;
					case 3:
						Type = FLOOREV_GenericChange;
						break;
					}
				}
			}
			else if (Line)
			{
				// Trigger model change
				Texture = Line->frontsector->floor.pic;
				switch (Arg5 & 3)
				{
				case 1:
					NewSpecial = 0;
					Type = FLOOREV_GenericChange0;
					break;
				case 2:
					NewSpecial = Sector->special & ~SECSPEC_SECRET_MASK;
					Type = FLOOREV_GenericChangeT;
					break;
				case 3:
					Type = FLOOREV_GenericChange;
					break;
				}
			}
		}
		break;
	}
	SectorStartSequence(Sector, GetSeqTrans(Sector->seqType, SEQ_Platform), 0);
}

//==========================================================================
//
//	InitStair
//
//==========================================================================

void InitStair(sector_t* InSector, int Arg1, int Arg2, int Arg3, int Arg4,
	int Arg5, bool Generic, float InHeight)
{
	Sector = InSector;
	Sector->FloorData = self;

	Type = FLOOREV_RaiseBuildStep;
	if (Generic)
	{
		Direction = Arg4 & 1 ? 1 : -1;
	}
	else
	{
		Direction = 1;
	}
	Speed = itof(Arg2) * 35.0 / 8.0;
	//jff 2/27/98 fix uninitialised crush field
	Crush = (Arg2 == 32) ? 10 : -1;
	FloorDestDist = DotProduct(Sector->floor.normal,
		vector(0.0, 0.0, InHeight));

	//	Delay between steps.
	if (!Generic)
	{
		Delay = itof(Arg4) / 35.0;
		StepTime = itof(Arg3) / Speed;
		PerStepTime = StepTime;
	}

	//	Reset.
	ResetTime = itof(Arg5) / 35.0;
	OrgDist = Sector->floor.dist;

	SectorStartSequence(Sector, GetSeqTrans(Sector->seqType, SEQ_Platform), 0);
}

//==========================================================================
//
//	InitDonut
//
//==========================================================================

void InitDonut(sector_t* InSector, sector_t* OtherSector, int Arg2)
{
	float		DestHeight;
	TVec		Spot;

	Sector = InSector;
	Sector->FloorData = self;

	Type = FLOOREV_Donut;
	Crush = false;
	Direction = 1;
	Speed = itof(Arg2) * 35.0 / 8.0;
	Texture = OtherSector->floor.pic;
	NewSpecial = 0;
	DestHeight = Level.FindHighestFloorPoint(OtherSector, &Spot);
	Spot.z = DestHeight;
	FloorDestDist = DotProduct(Sector->floor.normal, Spot);
	SectorStartSequence(Sector, GetSeqTrans(Sector->seqType, SEQ_Platform), 0);
}

//==========================================================================
//
//	InitDonut2
//
//==========================================================================

void InitDonut2(sector_t* InSector, sector_t* OtherSector, int Arg3)
{
	float		DestHeight;
	TVec		Spot;

	Sector = InSector;
	InSector->FloorData = self;

	Type = FLOOREV_LowerToNearest;
	Crush = false;
	Direction = -1;
	Speed = itof(Arg3) * 35.0 / 8.0;
	DestHeight = Level.FindHighestFloorPoint(OtherSector, &Spot);
	Spot.z = DestHeight;
	FloorDestDist = DotProduct(Sector->floor.normal, Spot);
	SectorStartSequence(Sector, GetSeqTrans(Sector->seqType, SEQ_Platform), 0);
}

//==========================================================================
//
//	CrushStop
//
//==========================================================================

bool CrushStop(int InTag)
{
	if (Type != FLOOREV_RaiseAndCrush)
	{
		return false;
	}
	if (Sector->tag != InTag)
	{
		return false;
	}

	// Completely remove the crushing floor
	SectorStopSequence(Sector);
	Finished();
	return true;
}

//==========================================================================
//
//	Tick
//
//  MOVE A FLOOR TO IT'S DESTINATION (UP OR DOWN)
//
//==========================================================================

void Tick(float deltaTime)
{
	int res;

	//	Handle resetting stairs.
	if (Type == FLOOREV_RaiseBuildStep)
	{
		if (ResetTime)
		{
			ResetTime -= deltaTime;
			if (ResetTime <= 0.0)
			{
				ResetTime = 0.0;
				Direction = -Direction;
				FloorDestDist = OrgDist;
				//	Clear all delay variables.
				PauseTime = 0.0;
				Delay = 0.0;
				StepTime = 0.0;
				PerStepTime = 0.0;
			}
		}
		if (PauseTime)
		{
			PauseTime -= deltaTime;
			if (PauseTime <= 0.0)
			{
				PauseTime = 0.0;
			}
			return;
		}
		else if (StepTime)
		{
			StepTime -= deltaTime;
			if (StepTime <= 0.0)
			{
				PauseTime = Delay;
				StepTime = PerStepTime;
			}
		}

		if (ResetTime && Sector->floor.dist == FloorDestDist)
		{
			//	Reached dest, waiting for reset.
			return;
		}
	}

	res = MovePlane(Sector, Speed * deltaTime, FloorDestDist, Crush, 0,
		Direction, false);

	if (res == RES_PASTDEST)
	{
		SectorStopSequence(Sector);
		if (Type == FLOOREV_RaiseBuildStep && ResetTime)
		{
			return;
		}
		if ((Direction == 1 && Type == FLOOREV_Donut) ||
			(Direction == -1 && Type == FLOOREV_LowerToLowestChange) ||
			Type == FLOOREV_GenericChange0 ||
			Type == FLOOREV_GenericChangeT)
		{
			Sector->special = (Sector->special & SECSPEC_SECRET_MASK) |
				NewSpecial;
			XLevel.SetFloorPic(Sector, Texture);
		}
		else if (Type == FLOOREV_GenericChange)
		{
			XLevel.SetFloorPic(Sector, Texture);
		}
		if (TextureChange)
		{
			XLevel.SetFloorPic(Sector, Sector->floor.pic - TextureChange);
		}
		Finished();
	}
}

defaultproperties
{
}
