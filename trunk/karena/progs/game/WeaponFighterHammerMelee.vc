//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class WeaponFighterHammerMelee : WeaponFighterHammer;

//============================================================================
//
//  A_FHammerAttack
//
//============================================================================

void A_FHammerAttack()
{
	Actor Owner = Player.MO;
	int damage;
	float power;
	int i;
	TAVec angles;
	TVec vforward;

	damage = 60 + (P_Random() & 63);
	if (str_mod)
	{
		if(!active_damage)
		{
			damage = damage * Player.strength / 10;
		}
		else // [FB] PI Damage
		{
			damage = (damage * Player.intelligence / 10) * ftoi(3.1415);
		}
	}
	power = 10.0;
	for (i = 0; i < 16; i++)
	{
		angles = Owner.Angles;
		angles.yaw = AngleMod360(angles.yaw + itof(i) * (45.0 / 32.0));
		Owner.AimLineAttack(&angles, HammerRange);
		if (Owner.linetarget)
		{
			AngleVector(&angles, &vforward);
			if (Owner.LineAttack(vforward, HammerRange, damage, HammerPuff))
			{
				Owner.PlaySound('FighterHammerMiss', CHAN_WEAPON);
			}
			Player.AdjustPlayerAngle();
			if (Owner.linetarget.bCountKill || Owner.linetarget.bIsPlayer)
			{
				Owner.linetarget.Thrust(angles.yaw, power);
			}
			break;
		}
		angles = Owner.Angles;
		angles.yaw = AngleMod360(angles.yaw - itof(i) * (45.0 / 32.0));
		Owner.AimLineAttack(&angles, HammerRange);
		if (Owner.linetarget)
		{
			AngleVector(&angles, &vforward);
			if (Owner.LineAttack(vforward, HammerRange, damage, HammerPuff))
			{
				Owner.PlaySound('FighterHammerMiss', CHAN_WEAPON);
			}
			Player.AdjustPlayerAngle();
			if (Owner.linetarget.bCountKill || Owner.linetarget.bIsPlayer)
			{
				Owner.linetarget.Thrust(angles.yaw, power);
			}
			break;
		}
	}
	if (i == 16)
	{
		// didn't find any targets in meleerange, so set to throw out a hammer
		MainGameInfo(Player.Level.Game).PuffSpawned = none;
		angles = Owner.Angles;
		Owner.AimLineAttack(&angles, HammerRange);
		AngleVector(&angles, &vforward);
		if (Owner.LineAttack(vforward, HammerRange, damage, HammerPuff))
		{
			Owner.PlaySound('FighterHammerMiss', CHAN_WEAPON);
		}
	}
	bThrowHammer = false;
}

//============================================================================
//
//  A_FHammerThrow
//
//============================================================================

void A_FHammerThrow()
{
}

/*THIRD*/
defaultproperties
{
	Mana = HexenDefs::MANA_NONE;
	UpState = S_FHAMMERUP;
	DownState = S_FHAMMERDOWN;
	ReadyState = S_FHAMMERREADY;
	AttackState = S_FHAMMERATK_1;
	HoldAttackState = S_FHAMMERATK_1;
	PSpriteSY = -10.0;
	HammerRange = MELEERANGE + MELEERANGE / 2.0;
	wis_mod = false;
	int_mod = false;
	dex_mod = true;
	str_mod = true;
	PickUpMessage = "HALF HAMMER OF RETRIBUTION";
}

//**************************************************************************
//
//  $Log$
//  Revision 1.6  2006/02/17 19:17:51  dj_jl
//  Moved common defs to classes.
//
//  Revision 1.5  2006/02/15 23:37:46  dj_jl
//  Moved all server progs global variables to classes.
//
//  Revision 1.4  2005/12/11 21:37:29  dj_jl
//  Made path traversal callbacks class members.
//
//  Revision 1.3  2005/08/12 23:04:25  firebrand_kh
//  Fixed weapons to work with the PI Damage artifact
//
//  Revision 1.2  2005/07/27 21:00:06  firebrand_kh
//  Balanced weapon damage rates & mana usage
//
//  Revision 1.1  2004/11/16 13:33:22  dj_jl
//  Initial import.
//
//  Revision 1.2  2003/11/12 16:50:47  dj_jl
//  Changed player structure into a class
//
//  Revision 1.1  2002/10/26 16:32:27  dj_jl
//  New style of defining classes.
//
//**************************************************************************
