//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**	        ##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id: KArenaGameModel.vc 508 2006-07-10 19:02:43Z firebrand_kh $
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class KArenaGameModel : GameModel
	abstract;

// generic events
enum
{
	event_colourtranslation = num_basegenericevents,
	num_kagenericevents
};

// team factors
enum
{
	teamfactor_any,			// do not influence pawn relations at all
	teamfactor_coop,
	teamfactor_neutral,
	teamfactor_enemy
};

array<GameObjective> Objectives;

MainGameInfo		Game;


//==========================================================================
//
//	Init
//
//==========================================================================

void Init()
{
	::Init();
	AcsNotifiersGeneric.Num = num_kagenericevents;
}

//==========================================================================
//
//	AllowedTeams
//
//==========================================================================

int AllowedTeams()
{
	return 1;
}

//==========================================================================
//
//	AllowAllies
//
//==========================================================================

int AllowAllies()
{
	return true;
}

//==========================================================================
//
//	ConfirmAddTeam
//
//==========================================================================

bool ConfirmAddTeam()	//???????? need this?
{
	return false;
}

//==========================================================================
//
//	TeamFactor
//
//==========================================================================

int TeamFactor(EntityEx a1, EntityEx a2)
{
	return teamfactor_any;
}

//==========================================================================
//
//	OnSpecialActorTouched
//
//==========================================================================

void OnSpecialActorTouched(Actor a, EntityEx toucher)
{
	// Check for objectives completion
	if (a.bObjective)
	{
		int i;
		GameObjective Objective;
		
		for (i = 0; i < Objectives.Num; i++)
		{
			Objective = Objectives[i];
			if (Objective && !Objective.bCompleted && !Objective.bConditionCompleted && Objective.bEnabled)
			{
				if (Objective.Target == a)
				{
					// Objectives that require being at position
					if (Objective.Action == GameObjective::obja_MOVE_TO || Objective.Action == GameObjective::obja_STAY_AT)
					{
						if (toucher.Player && Player(toucher.Player).Team &&
							(Objective.Team == GameObjective::objt_TEAM_ALL || Player(toucher.Player).Team.T2 == Objective.Team))
						{
							Objective.ConsiderCompleted(false);
						}
					}
				}
				else if (Objective.Destination == a)
				{
					// TODO
				}
			}
		}
	}
}

//==========================================================================
//
//	OnUpdateTeams
//
//==========================================================================

void OnUpdateTeams()
{
}

//==========================================================================
//
//	GetFragScoreEvent
//
//==========================================================================

int GetFragScoreEvent(Player plFragger, Player plFragged)
{
	return HexenDefs::scoreevent_Frag;
}

//==========================================================================
//
//	HandleEvent
//
//	ACS callable
//
//==========================================================================

void HandleEvent(int Event, EntityEx A, int arg1, int arg2, int arg3, int arg4)
{
	int notifyACSArgs[3];

	switch (Event)
	{
	case event_colourtranslation:
		notifyACSArgs[0] = arg1;	// should be team index
		notifyACSArgs[1] = arg2;	// should be object tag
		break;
		
	default:
		::HandleEvent(Event, A, arg1, arg2, arg3, arg4);
		return;
	}
	
	NotifyACS(Event, notifyACSArgs[0], notifyACSArgs[1], notifyACSArgs[2]);
}

//==========================================================================
//
//	PrepareColoredDecorations
//
//	[CW] Utility method for assigning teams to colored decor.
//		 Recommended to call this from overriden PrepareGame method.
//
//==========================================================================

void PrepareColoredDecorations()
{
	int teams, teams_ready, i_debug;
	ColoredDecoration cd;

	teams = AllowedTeams();
	teams_ready = Game.GetTeamCount();

	foreach Level.AllThinkers(ColoredDecoration, cd)
	{
		i_debug++;

		if (cd.Args[0] >= teams)
		{
			dprint("GameModel : colored decoration with TID = %i belongs to unsupported Team and will be disabled",
				cd.TID);
			cd.Deactivate(none);
			continue;
		}

		if (cd.Args[0] < teams_ready)
		{
			cd.Team = Game.Teams[cd.Args[0]];
			cd.SetTranslation();
		}
		else
		{
			dprint("GameModel : colored decoration with TID = %i belongs to inactive Team and will be disabled until Team %i enters to the game",
				cd.TID);
			cd.Deactivate(none);
		}
	}

	dprint("GameModel : processed %i colored decorations total", i_debug);
}

//==========================================================================
//
//	End
//
//==========================================================================

void End()
{	
	int i;
	for (i = 0; i < MAXPLAYERS; i++)
	{
		if (Game.Players[i] && !Game.Players[i].bIsBot)
		{
			Player(Game.Players[i]).level_ender_counter = 2.0;
		}
	}

	::End();
}

//==========================================================================
//
//	SetPlayerExperienceLoss
//
//==========================================================================

void SetPlayerExperienceLoss(bool bOn)
{
	int i;
	for (i = 0; i < MAXPLAYERS; i++)
	{
		if (Game.Players[i])
		{
			Player(Game.Players[i]).bLockExperience = !bOn;
		}
	}
}

//==========================================================================
//
//	AddObjective
//
//==========================================================================

void AddObjective(GameObjective Objective, bool Enabled)
{
	int i;

	Objective.GameModel = self;
	Objective.bEnabled = Enabled;

	Objective.ConsiderOpened();

	for (i = 0; i < Objectives.Num; i++)
	{
		if (Objectives[i] && Objectives[i].Prerequisite == Objective.Tag)
		{
			Objectives[i].ConsiderOpened();
		}
	}

	Objectives.Num = Objectives.Num + 1;
	Objectives[Objectives.Num - 1] = Objective;
}

//==========================================================================
//
//	DestroyObjective
//
//==========================================================================

void DestroyObjective(int Tag)
{
	int i;

	for (i = 0; i < Objectives.Num; i++)
	{
		if (Objectives[i] && Objectives[i].Tag == Tag)
		{
			Objectives[i].Destroy();
			Objectives[i] = none;
		}
	}

	for (i = 0; i < Objectives.Num; i++)
	{
		if (Objectives[i] && Objectives[i].Prerequisite == Tag)
		{
			Objectives[i].ConsiderOpened();
		}
	}
}

//==========================================================================
//
//	EnableObjective
//
//==========================================================================

void EnableObjective(int Tag)
{
	int i;

	for (i = 0; i < Objectives.Num; i++)
	{
		if (Objectives[i] && Objectives[i].Tag == Tag)
		{
			Objectives[i].bEnabled = true;
			Objectives[i].ConsiderOpened();
		}
	}

	for (i = 0; i < Objectives.Num; i++)
	{
		if (Objectives[i] && Objectives[i].Prerequisite == Tag)
		{
			Objectives[i].ConsiderOpened();
		}
	}
}

//==========================================================================
//
//	DisableObjective
//
//==========================================================================

void DisableObjective(int Tag)
{
	int i;

	for (i = 0; i < Objectives.Num; i++)
	{
		if (Objectives[i] && Objectives[i].Tag == Tag)
		{
			Objectives[i].bEnabled = false;
		}
	}

	for (i = 0; i < Objectives.Num; i++)
	{
		if (Objectives[i] && Objectives[i].Prerequisite == Tag)
		{
			Objectives[i].ConsiderOpened();
		}
	}
}


//==========================================================================
//
//	SetObjectivePrerequisite
//
//==========================================================================

void SetObjectivePrerequisite(int Tag, int PrerequisiteTag)
{
	int i;

	for (i = 0; i < Objectives.Num; i++)
	{
		if (Objectives[i] && Objectives[i].Tag == Tag)
		{
			Objectives[i].Prerequisite = PrerequisiteTag;
			Objectives[i].ConsiderOpened();
		}
	}
}

//==========================================================================
//
//	SetObjectiveCompletion
//
//==========================================================================

void SetObjectiveCompletion(int Tag, bool IgnorePrerequisite)
{
	int i;

	for (i = 0; i < Objectives.Num; i++)
	{
		if (Objectives[i] && Objectives[i].Tag == Tag)
		{
			Objectives[i].ConsiderCompleted(IgnorePrerequisite);
		}
	}

	for (i = 0; i < Objectives.Num; i++)
	{
		if (Objectives[i] && Objectives[i].Prerequisite == Tag)
		{
			Objectives[i].ConsiderOpened();
		}
	}
}

defaultproperties
{
}
