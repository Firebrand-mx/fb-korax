//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**		##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id$
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class WeaponFighterPunch : WeaponEx;

state Attack2State;
int PunchCount;

//==========================================================================
//
//  A_FPunchAttack
//
//==========================================================================

final void A_FPunchAttack()
{
	Actor			pmo = Actor(Owner);
	int				damage;
	float			power;
	TAVec			angles;
	TVec			vforward;
	class<Actor>	PuffType;
	EntityEx		AimTarget;

	damage = 25; //40 + (P_Random() & 15);
	if (str_mod)
	{
		if(!active_damage)
		{
			damage = damage * Player(Owner.Player).strength / 10;
		}
		else // [FB] PI Damage
		{
			damage = (damage * Player(Owner.Player).strength / 10) * ftoi(3.1415);
		}
	}
	power = 2.0;
	PuffType = PunchPuff;
	AimTarget = pmo.AimEx(vforward, 2.0 * MELEERANGE, 45.0 / 16.0, 16,
		MELEERANGE);
	if (AimTarget)
	{
		VectorAngles(&vforward, &angles);
		PunchCount++;
		if (PunchCount == 3)
		{
			damage <<= 1;
			power = 6.0;
			PuffType = HammerPuff;
		}
		if (pmo.LineAttack(vforward, 2.0 * MELEERANGE, damage, PuffType))
		{
			if (PuffType == HammerPuff)
			{
				pmo.PlaySound('FighterHammerMiss', CHAN_WEAPON);
			}
			else
			{
				pmo.PlaySound('FighterPunchMiss', CHAN_WEAPON);
			}
		}
		if (AimTarget.bMonster || AimTarget.bIsPlayer)
		{
			AimTarget.Thrust(angles.yaw, power);
		}
		Player(Owner.Player).AdjustPlayerAngle(AimTarget);
	}
	else
	{
		// didn't find any creatures, so try to strike any walls
		PunchCount = 0;

		if (pmo.LineAttack(vforward, MELEERANGE, damage, PuffType))
		{
			pmo.PlaySound('FighterPunchMiss', CHAN_WEAPON);
		}
	}

	if (PunchCount == 3)
	{
		PunchCount = 0;
		Owner.Player.SetViewState(ps_weapon, Attack2State);
		pmo.PlaySound('*fistgrunt', CHAN_VOICE);
	}
}

__states__
{
	S_PUNCHREADY('FPCH', 0, 1.0 / 35.0, S_PUNCHREADY) = A_WeaponReady
	S_PUNCHDOWN('FPCH', 0, 1.0 / 35.0, S_PUNCHDOWN) = A_Lower
	S_PUNCHUP('FPCH', 0, 1.0 / 35.0, S_PUNCHUP) = A_Raise
	S_PUNCHATK1_1('FPCH', 1, 5.0 / 35.0, S_PUNCHATK1_2, 5, 40) = none
	S_PUNCHATK1_2('FPCH', 2, 4.0 / 35.0, S_PUNCHATK1_3, 5, 40) = none
	S_PUNCHATK1_3('FPCH', 3, 4.0 / 35.0, S_PUNCHATK1_4, 5, 40) = A_FPunchAttack
	S_PUNCHATK1_4('FPCH', 2, 4.0 / 35.0, S_PUNCHATK1_5, 5, 40) = none
	S_PUNCHATK1_5('FPCH', 1, 5.0 / 35.0, S_PUNCHREADY, 5, 40) = A_ReFire
	S_PUNCHATK2_1('FPCH', 3, 4.0 / 35.0, S_PUNCHATK2_2, 5, 40) = none
	S_PUNCHATK2_2('FPCH', 4, 4.0 / 35.0, S_PUNCHATK2_3, 5, 40) = none
	S_PUNCHATK2_3('FPCH', 4, 1.0 / 35.0, S_PUNCHATK2_4, 15, 50) = none
	S_PUNCHATK2_4('FPCH', 4, 1.0 / 35.0, S_PUNCHATK2_5, 25, 60) = none
	S_PUNCHATK2_5('FPCH', 4, 1.0 / 35.0, S_PUNCHATK2_6, 35, 70) = none
	S_PUNCHATK2_6('FPCH', 4, 1.0 / 35.0, S_PUNCHATK2_7, 45, 80) = none
	S_PUNCHATK2_7('FPCH', 4, 1.0 / 35.0, S_PUNCHATK2_8, 55, 90) = none
	S_PUNCHATK2_8('FPCH', 4, 1.0 / 35.0, S_PUNCHATK2_9, 65, 100) = none
	S_PUNCHATK2_9('FPCH', 4, 10.0 / 35.0, S_PUNCHREADY, 0, 150) = none
}

defaultproperties
{
	WeaponType = HexenDefs::WP_FIRST;
	UpState = S_PUNCHUP;
	DownState = S_PUNCHDOWN;
	ReadyState = S_PUNCHREADY;
	AttackState = S_PUNCHATK1_1;
	Attack2State = S_PUNCHATK2_1;
	HoldAttackState = S_PUNCHATK1_1;
	PSpriteSY = 0.0;
	wis_mod = false;
	int_mod = false;
	dex_mod = true;
	str_mod = true;
	Obituary = "$ob_fpunch";
}
