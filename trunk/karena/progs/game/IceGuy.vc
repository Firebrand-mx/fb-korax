//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**		##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id$
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class IceGuy : Pawn
	__mobjinfo__(8020)
	__scriptid__(20);

//==========================================================================
//
//  A_IceGuyLook
//
//==========================================================================

final void A_IceGuyLook()
{
	float dist;
	float an;
	class<Actor> tp;

	A_Look();
	if (Random() < 0.25)
	{
		dist = Radius * (Random() * 2.0 - 1.0);
		an = AngleMod360(Angles.yaw + 90.0);

		if (Random() < 0.5)
			tp = IceGuyWisp2;
		else
			tp = IceGuyWisp1;
		Spawn(tp, Origin + vector(dist * cos(an), dist * sin(an), 60.0));
	}
}

//==========================================================================
//
//  A_IceGuyChase
//
//==========================================================================

final void A_IceGuyChase()
{
	float dist;
	float an;
	Actor A;
	class<Actor> tp;

	A_Chase();
	if (Random() < 0.5)
	{
		dist = Radius * (Random() * 2.0 - 1.0);
		an = AngleMod360(Angles.yaw + 90.0);

		if (Random() < 0.5)
			tp = IceGuyWisp2;
		else
			tp = IceGuyWisp1;
		A = Spawn(tp, Origin + vector(dist * cos(an), dist * sin(an), 60.0));
		if (A)
		{
			A.Velocity = Velocity;
			A.Target = self;
		}
	}
}

//==========================================================================
//
//	A_IceGuyAttack
//
//==========================================================================

final void A_IceGuyAttack()
{
	float an;

	if (!Target)
	{
		return;
	}
	an = AngleMod360(Angles.yaw + 90.0);
	SpawnMissileXYZ(Origin + vector(Radius / 2.0 * cos(an),
		Radius / 2.0 * sin(an), 40.0), Target, IceGuyMissile);

	an = AngleMod360(Angles.yaw - 90.0);
	SpawnMissileXYZ(Origin + vector(Radius / 2.0 * cos(an),
		Radius / 2.0 * sin(an), 40.0), Target, IceGuyMissile);

	PlaySound(AttackSound, CHAN_WEAPON);
}

states
{
Spawn:
	ICEY A 10 A_IceGuyLook
	Loop
Dormant:
	ICEY A -1
	Goto Spawn
See:
	ICEY ABCD 4 A_Chase
	Loop
Missile:
	ICEY EF 3 A_FaceTarget
	ICEY G 8 Bright A_IceGuyAttack
	ICEY F 4 A_FaceTarget
	Goto See
Pain:
	ICEY A 1 A_Pain
	Goto See
Death:
	ICEY A 1 A_IceGuyDie
	Stop
}

//==========================================================================
//
//	SetDormant
//
//==========================================================================

void SetDormant()
{
	bDormant = true;
	SetState(FindState('Dormant'));
	StateTime = -1.0;
}

defaultproperties
{
	Health = 120;
	Radius = 22.0;
	Height = 75.0;
	Mass = 150.0;
	Speed = 14.0 * 35.0;
	PainChance = 0.5625;
	bNoBlood = true;
	DamageType = 'Ice';
	bFloorClip = false;
	bNoIceDeath = true;
	SightSound = 'IceGuySight';
	ActiveSound = 'IceGuyActive';
	AttackSound = 'IceGuyAttack';
	RangedObituary = "$ob_wendigo";
}
