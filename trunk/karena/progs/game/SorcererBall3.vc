//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class SorcererBall3 : SorcererBall;

//============================================================================
//
//  A_CastSorcererSpell
//
//	Reinforcements
//
//============================================================================

void A_CastSorcererSpell()
{
	EntityEx mo;
	float ang1, ang2;

	// Put sorcerer into throw spell animation
	if (Target.Health > 0)
		Target.SetState(Sorcerer::S_SORC_ATTACK4);

	ang1 = AngleMod360(Angles.yaw - 45.0);
	ang2 = AngleMod360(Angles.yaw + 45.0);
	if (Health < (default.Health / 3))
	{
		// Spawn 2 at a time
		mo = Actor(Target).SpawnMissileAngle(SorcererFX3, ang1, 4.0,
			PlayerHeresiarch(Target) ? Target.Height / 2.0 : 32.0);
		if (mo)
			mo.Target = Target;
		mo = Actor(Target).SpawnMissileAngle(SorcererFX3, ang2, 4.0,
			PlayerHeresiarch(Target) ? Target.Height / 2.0 : 32.0);
		if (mo)
			mo.Target = Target;
	}
	else
	{
		if (P_Random() < 128)
			ang1 = ang2;
		mo = Actor(Target).SpawnMissileAngle(SorcererFX3, ang1, 4.0,
			PlayerHeresiarch(Target) ? Target.Height / 2.0 : 32.0);
		if (mo)
			mo.Target = Target;
	}

	Target.Args[3] = Sorcerer::SORC_STOPPED;
}

states
{
Spawn:
	SBMG ABCDEFGHIJKLMNOP 2 A_SorcBallOrbit
	Loop
Pain:
	SBMG A 5 A_SorcBallPop
	SBMG B 2 A_BounceCheck
	Wait
Death:
	SBS3 D 5 A_Explode
	SBS3 E 5
	SBS3 FGH 6
	Stop
}

defaultproperties
{
	Mass = 100.0;
	BallAngleOffset = 240.0;
}
