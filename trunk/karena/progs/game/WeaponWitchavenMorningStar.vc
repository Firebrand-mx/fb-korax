//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**		##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id$
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class WeaponWitchavenMorningStar : KArenaWeapon;

bool bThrowFireball;
float MorningSRange;

//============================================================================
//
//  A_WMorningSAttack
//
//============================================================================

final void A_WMorningSAttack()
{
	Actor		pmo = Actor(Owner);
	int			damage;
	float		power;
	TAVec		angles;
	TVec		vforward;
	EntityEx	AimTarget;

	damage = 50; //25 + (P_Random() & 63);
	if (str_mod)
	{
		if(!active_damage)
		{
			damage = damage * Player(Owner.Player).strength / 10;
		}
		else // [FB] PI Damage
		{
			damage = (damage * Player(Owner.Player).strength / 10) * ftoi(3.1415);
		}
	}
	power = 3.5;
	AimTarget = pmo.AimEx(vforward, MorningSRange, 45.0 / 32.0, 16, MorningSRange);
	if (AimTarget)
	{
		VectorAngles(&vforward, &angles);
		if (pmo.LineAttack(vforward, MorningSRange, damage, HammerPuff))
		{
			pmo.PlaySound('FighterHammerMiss', CHAN_WEAPON);
		}
		Player(Owner.Player).AdjustPlayerAngle(AimTarget);
		if (AimTarget.bMonster || AimTarget.bIsPlayer)
		{
			AimTarget.Thrust(angles.yaw, power);
		}
	}
	else
	{
		// didn't find any targets in meleerange, so set to throw out a fireball
		if (pmo.LineAttack(vforward, MorningSRange, damage, HammerPuff))
		{
			pmo.PlaySound('FighterHammerMiss', CHAN_WEAPON);
		}
	}
	bThrowFireball = true;
}

//============================================================================
//
//  A_WFireballThrow
//
//============================================================================

final void A_WFireballThrow()
{
	if (!bThrowFireball)
	{
		return;
	}
	UseWeaponMana();
	Actor(Owner).SpawnPlayerMissile_2(self, MorningStarMissile);
}

states
{
Ready:
	WMSR ACBC 1 A_WeaponReady
	Loop
Deselect:
	WMSR A 1 A_Lower
	Loop
Select:
	WMSR A 1 A_Raise
	Loop
Fire:
	WMSR D 6
	WMSR EF 3
	WMSR G 2
	WMSR H 3 A_WMorningSAttack
	WMSR I 2 A_WFireballThrow
	WMSR JKLM 3
	WMSR M 3 Offset(25, 0) A_WMorningSAttack
	WMSR N 2
	WMSR N 3 Offset(35, 0)
	Goto Ready
}

/*THIRD*/
defaultproperties
{
	Slot = 3;
	SelectionOrder = 5600;
	AmmoType1 = ItemManaGreen;
	AmmoUse1 = 20;
	//needsnomana = true;
	PSpriteSY = 0.0;
	MorningSRange = MELEERANGE * 3.0;
	BotCombatDist = 256.0 + MISSILERANGE;
	wis_mod = true;
	int_mod = true;
	dex_mod = true;
	str_mod = true;
	bBotChooseMelee = false;
	bBotChooseMedium = true;
	bBotChooseRanged = true;
	bBotProjectile = true;
	PickupMessage = "MORNING STAR";
	MeleeObituary = "$ob_morningstar";
	RangedObituary = "$ob_morningstar";
	refire_tics = 34.0;
	fire_tics = 14.0;
}
