//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**		##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id$
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class WeaponWitchavenMorningStar : Weapon;

bool bThrowFireball;
float MorningSRange;

//============================================================================
//
//  A_WMorningSAttack
//
//============================================================================

final void A_WMorningSAttack()
{
	Actor pmo = Actor(Owner);
	int damage;
	float power;
	int i;
	TAVec angles;
	TVec vforward;

	damage = 50; //25 + (P_Random() & 63);
	if (str_mod)
	{
		if(!active_damage)
		{
			damage = damage * Player(Owner.Player).strength / 10;
		}
		else // [FB] PI Damage
		{
			damage = (damage * Player(Owner.Player).strength / 10) * ftoi(3.1415);
		}
	}
	power = 3.5;
	for (i = 0; i < 16; i++)
	{
		angles = pmo.Angles;
		angles.yaw = AngleMod360(angles.yaw + itof(i) * (45.0 / 32.0));
		vforward = pmo.AimLineAttack(angles, MorningSRange);
		if (pmo.linetarget)
		{
			if (pmo.LineAttack(vforward, MorningSRange, damage, HammerPuff))
			{
				pmo.PlaySound('FighterHammerMiss', CHAN_WEAPON);
			}
			Player(Owner.Player).AdjustPlayerAngle();
			if (pmo.linetarget.bCountKill || pmo.linetarget.bIsPlayer)
			{
				pmo.linetarget.Thrust(angles.yaw, power);
			}
			break;
		}
		angles = pmo.Angles;
		angles.yaw = AngleMod360(angles.yaw - itof(i) * (45.0 / 32.0));
		vforward = pmo.AimLineAttack(angles, MorningSRange);
		if (pmo.linetarget)
		{
			if (pmo.LineAttack(vforward, MorningSRange, damage, HammerPuff))
			{
				pmo.PlaySound('FighterHammerMiss', CHAN_WEAPON);
			}
			Player(Owner.Player).AdjustPlayerAngle();
			if (pmo.linetarget.bCountKill || pmo.linetarget.bIsPlayer)
			{
				pmo.linetarget.Thrust(angles.yaw, power);
			}
			break;
		}
	}
	if (i == 16)
	{
		// didn't find any targets in meleerange, so set to throw out a fireball
		angles = pmo.Angles;
		vforward = pmo.AimLineAttack(angles, MorningSRange);
		if (pmo.LineAttack(vforward, MorningSRange, damage, HammerPuff))
		{
			pmo.PlaySound('FighterHammerMiss', CHAN_WEAPON);
		}
	}
	bThrowFireball = true;
}

//============================================================================
//
//  A_WFireballThrow
//
//============================================================================

final void A_WFireballThrow()
{
	Actor mo;
	PlayerPawn playPawn;

	if (!bThrowFireball)
	{
		return;
	}
	UseWeaponMana();
	Player(Owner.Player).SpawnPlayerMissile(MorningStarMissile);
}

__states__
{
	S_WMORNINGREADY1('WMSR', 0, 1.0 / 35.0, S_WMORNINGREADY2) = A_WeaponReady
	S_WMORNINGREADY2('WMSR', 2, 1.0 / 35.0, S_WMORNINGREADY3) = A_WeaponReady
	S_WMORNINGREADY3('WMSR', 1, 1.0 / 35.0, S_WMORNINGREADY4) = A_WeaponReady
	S_WMORNINGREADY4('WMSR', 2, 1.0 / 35.0, S_WMORNINGREADY1) = A_WeaponReady
	S_WMORNINGDOWN('WMSR', 0, 1.0 / 35.0, S_WMORNINGDOWN) = A_Lower
	S_WMORNINGUP('WMSR', 0, 1.0 / 35.0, S_WMORNINGUP) = A_Raise
	S_WMORNINGATK_1('WMSR', 3, 6.0 / 35.0, S_WMORNINGATK_2) = none
	S_WMORNINGATK_2('WMSR', 4, 3.0 / 35.0, S_WMORNINGATK_3) = none
	S_WMORNINGATK_3('WMSR', 5, 3.0 / 35.0, S_WMORNINGATK_4) = none
	S_WMORNINGATK_4('WMSR', 6, 2.0 / 35.0, S_WMORNINGATK_5) = none
	S_WMORNINGATK_5('WMSR', 7, 3.0 / 35.0, S_WMORNINGATK_6) = A_WMorningSAttack
	S_WMORNINGATK_6('WMSR', 8, 2.0 / 35.0, S_WMORNINGATK_7) = A_WFireballThrow
	S_WMORNINGATK_7('WMSR', 9, 3.0 / 35.0, S_WMORNINGATK_8) = none
	S_WMORNINGATK_8('WMSR', 10, 3.0 / 35.0, S_WMORNINGATK_9) = none
	S_WMORNINGATK_9('WMSR', 11, 3.0 / 35.0, S_WMORNINGATK_10) = none
	S_WMORNINGATK_10('WMSR', 12, 3.0 / 35.0, S_WMORNINGATK_11) = none
	S_WMORNINGATK_11('WMSR', 12, 3.0 / 35.0, S_WMORNINGATK_12, 25, 0) = A_WMorningSAttack
	S_WMORNINGATK_12('WMSR', 13, 2.0 / 35.0, S_WMORNINGATK_13) = none
	S_WMORNINGATK_13('WMSR', 13, 3.0 / 35.0, S_WMORNINGREADY1, 35, 0) = none
}

/*THIRD*/
defaultproperties
{
	Mana = HexenDefs::MANA_2;
	manause = 20;
	//needsnomana = true;
	UpState = S_WMORNINGUP;
	DownState = S_WMORNINGDOWN;
	ReadyState = S_WMORNINGREADY1;
	AttackState = S_WMORNINGATK_1;
	HoldAttackState = S_WMORNINGATK_1;
	PSpriteSY = 0.0;
	MorningSRange = MELEERANGE * 3.0;
	wis_mod = true;
	int_mod = true;
	dex_mod = true;
	str_mod = true;
	PickUpMessage = "MORNING STAR";

	deathmsgi = 16;
}
