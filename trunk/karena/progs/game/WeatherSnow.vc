//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**		##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id: WeatherSnow.vc 1001 2007-08-18 09:07:16Z dj_jl $
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class WeatherSnow : Sequencer;

float FarHDistance;
float FarVDistance;
float OriginSpacing;
int Amount;
int ParticleType;
int ParticleType2;
TVec Spread;
TVec InitialVelocity;
TVec VelocityRange;
TVec InitialAcceleration;
float AppliedGravity;
int Colour;
float ParticleDuration;
float ParticleRamp;
int Pattern;

bool bInitialFallSequence;	// tells if a commencement of weather should be
							// simulated explicitly; otherwise weather effect
							// appears as if it was happening for some time already

private float ZDistancePassed; // how much of distance first particles
						// passed since the weather commenced; used to determine at
						// which height new particles can appear in player's sight


//==========================================================================
//
//	Continue
//
//==========================================================================

void Continue()
{
	int i;
	float x,y,mx,my;
	TVec Origin;

	for (i = 0; i < MAXPLAYERS; i++)
	{
		Player pl = Player(Level.Game.Players[i]);
		if (!pl)
		{
			continue;
		}
		if (pl.bIsBot)
		{
			continue;
		}
		if (!pl.bSpawned)
		{
			continue;
		}
		if (!pl.Camera)
		{
			continue;
		}

		x = pl.Camera.Origin.x - FarHDistance;
		y = pl.Camera.Origin.y - FarHDistance;
		mx = pl.Camera.Origin.x + FarHDistance;
		my = pl.Camera.Origin.y + FarHDistance;

		for (Origin.x = x; Origin.x < mx; Origin.x += OriginSpacing)
		{
			for (Origin.y = y; Origin.y < my; Origin.y += OriginSpacing)
			{
				pl.ParticleEffectEx(
						Amount,
						ParticleType,
						ParticleType2,
						vector(Origin.x, Origin.y, 0.0),
						Spread,
						pl.Camera.Origin.z + FarHDistance,
						(bInitialFallSequence ? -ZDistancePassed : -99999.0),
						InitialVelocity,
						VelocityRange,
						InitialAcceleration,
						AppliedGravity,
						Colour,
						ParticleDuration,
						ParticleRamp,
						Pattern);
			}
		}
	}

	if (ZDistancePassed < 99999.0)
	{
		ZDistancePassed += InitialVelocity.z * time_limit +
						(InitialAcceleration.z + AppliedGravity) * time_limit * time_limit / 2.0;
	}
}

defaultproperties
{
	time_limit = 0.2;

	bInitialFallSequence = true;

	FarHDistance = 512.0;
	FarVDistance = 256.0;
	OriginSpacing = 256.0;
	Amount = 8;
	ParticleType = HexenLevelInfo::pt_weather_snow;
	ParticleType2 = 0;
	Spread = vector(512.0, 512.0, 512.0);
	InitialVelocity = vector(0.0, 0.0, 32.0);
	VelocityRange = vector(0.0, 0.0, 1.0);
	InitialAcceleration = vector(0.0, 0.0, 0.0);
	AppliedGravity = 2.0;
	Colour = RGB(220, 220, 220);
	// [CW] real duration is calculated for each particle in HexenLevelInfo::ParticleEffectEx
	ParticleDuration = 0.0;
	ParticleRamp = 0.0;
	Pattern = HexenLevelInfo::pt_pattern_none;
}
