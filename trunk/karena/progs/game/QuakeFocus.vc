//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class QuakeFocus : Actor;

//
// Quake variables
//
int Richters;		// Intensity on richter scale (2..9)
int QuakeDuration;	// Duration in tics
float DamageRadius;	// Radius for damage
float TremorRadius;	// Radius for tremor

//==========================================================================
//
//	A_Quake
//
//==========================================================================

final void A_Quake()
{
	float an;
	Player pl;
	Actor victim;
	int playnum;
	float dist;

	if (QuakeDuration-- > 0)
	{
		for (playnum = 0; playnum < MAXPLAYERS; playnum++)
		{
			pl = Player(Level.Game.Players[playnum]);
			if (!pl || !pl.bSpawned)
				continue;

			victim = Actor(pl.MO);
			dist = DistTo(victim);
			if (dist < TremorRadius)	// In tremor radius
			{
				pl.LocalQuakeHappening = Richters;
			}
			// Check if in damage radius
			if (dist < DamageRadius && victim.Origin.z <= victim.FloorZ)
			{
				if (Random() < 0.1953125)
				{
					victim.Damage(none, none, HITDICE(1));
				}
				// Thrust player around
				an = victim.Angles.yaw + Random() * 256.0;
				victim.Thrust(an, itof(Richters) / 2.0);
			}
		}
	}
	else
	{
		for (playnum = 0; playnum < MAXPLAYERS; playnum++)
		{
			if (Level.Game.Players[playnum])
				Player(Level.Game.Players[playnum]).LocalQuakeHappening = 0;
		}
		SetState(none);
	}
}

//==========================================================================
//
//  A_ContMobjSound
//
//==========================================================================

final void A_ContMobjSound()
{
	PlaySound('world/quake', CHAN_VOICE);
}

states
{
Spawn:
	TNT1 A 2 A_Quake
	TNT1 A 1 A_ContMobjSound
	TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 2 A_Quake
	Loop
}

defaultproperties
{
	bHidden = true;
	bNoBlockmap = true;
}
