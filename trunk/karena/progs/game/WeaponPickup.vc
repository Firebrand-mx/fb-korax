//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class WeaponPickup : Pickup
	abstract;

int WeaponClass;
int WeaponType;

//==========================================================================
//
//  TouchSpecial
//
//==========================================================================


void TouchSpecial(Actor Toucher)
{
	PlayerPawn P;
	bool remove;
	bool gaveMana;
	bool gaveWeapon;

	if (!Toucher.bPickUp)
	{
		// Can't be picked up by toucher
		return;
	}
	if (Toucher.Health <= 0)
	{
		// Toucher is dead
		return;
	}
	P = PlayerPawn(Toucher);
	if (!P)
	{
		//	Shouldn't happen
		return;
	}
	remove = true;

	if ((WeaponType > WP_FOURTH && P.Player.exp_level < 2) ||
	    (WeaponType == WP_EIGHTH && P.Player.exp_level < 3))
	{
		centerprint(P.Player, "YOU CAN'T USE THE %s",
		            P.Player.GetWeaponPickupText(WeaponType));
		return;
	}

//[Korax]	
	/*if (P.Player.PClass != WeaponClass)
	{
		// Wrong class, but try to pick up for mana
		if (netgame && !deathmatch)
		{
			// Can't pick up weapons for other classes in coop netplay
			return;
		}
		if (WeaponType == WP_SECOND)
		{
			if (!P.Player.GiveMana(MANA_1, 25))
			{
				return;
			}
		}
		else
		{
			if (!P.Player.GiveMana(MANA_2, 25))
			{
				return;
			}
		}
	}
	else if (netgame && !deathmatch)
	{
		// Cooperative net-game
		if (P.Player.WeaponOwned[WeaponType])
		{
			return;
		}
		P.Player.WeaponOwned[WeaponType] = true;
		if (WeaponType == WP_SECOND)
		{
			P.Player.GiveMana(MANA_1, 25);
		}
		else
		{
			P.Player.GiveMana(MANA_2, 25);
		}
		P.Player.PendingWeapon = WeaponType;
		remove = false;
	}
	else*/
	{
		// Deathmatch or single player game
		/*if (WeaponType == WP_SECOND)
		{
			gaveMana = P.Player.GiveMana(MANA_1, 25);
		}
		else
		{
			gaveMana = P.Player.GiveMana(MANA_2, 25);
		}*/
		if (P.Player.WeaponOwned[WeaponType])
		{
			gaveWeapon = false;
			gaveMana = P.Player.GiveMana(whatmana[WeaponType],25);
		}
		else
		{
			gaveWeapon = true;
			P.Player.WeaponOwned[WeaponType] = true;
			if (WeaponType > P.Player.ReadyWeapon)
			{
				// Only switch to more powerful weapons
				P.Player.PendingWeapon = WeaponType;
			}
			gaveMana = P.Player.GiveMana(whatmana[WeaponType],25/*manaadding[P.Player.PClass*NUMWEAPONS+WeaponType]*/);
		}
		if (!gaveWeapon && !gaveMana)
		{
			// Player didn't need the weapon or any mana
			return;
		}
	}

	cprint(P.Player, P.Player.GetWeaponPickupText(WeaponType));
	if (Special)
	{
		ExecuteLineSpecial(Special, &Args[0], NULL, 0, P);
		Special = 0;
	}

	if (remove)
	{
		if (deathmatch && !bDropped)
		{
			HideSpecial();
		}
		else
		{
			Remove();
		}
	}

	P.Player.BonusFlash += BONUSADD;
	P.PlaySound('PickupWeapon', CHAN_ITEM);
}

defaultproperties
{
	bFloatBob = true;
}

//**************************************************************************
//
//  $Log$
//  Revision 1.2  2005/07/29 13:39:47  firebrand_kh
//  Changed level requirements for the weapon pickups
//
//  Revision 1.1  2004/11/16 13:33:22  dj_jl
//  Initial import.
//
//  Revision 1.2  2003/11/12 16:50:47  dj_jl
//  Changed player structure into a class
//
//  Revision 1.1  2002/10/26 16:32:27  dj_jl
//  New style of defining classes.
//
//**************************************************************************
