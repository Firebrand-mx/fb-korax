//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class WeaponGauntlets : Weapon;

//===========================================================================
//
//  A_GauntletAttack
//
//===========================================================================

void A_GauntletAttack()
{
	float angle;
	int damage;
	float slope;
	int randVal;
	float dist;
	TAVec angles;
	TVec dir;

	SX = Random() * 4.0 - 2.0;
	SY = WEAPONTOP + Random() * 4.0;
	angles = Player.MO.Angles;
	damage = 17; //10 + (P_Random() & 15);
	if (str_mod)
	{
		if(!active_damage)
		{
			damage = damage * Player.strength / 10;
		}
		else // [FB] PI Damage
		{
			damage = (damage * Player.intelligence / 10) * ftoi(3.1415);
		}
	}
	dist = MELEERANGE + 0.00001;
	angles.yaw = AngleMod360(angles.yaw +
		(Random() - Random()) * 45.0 / 8.0);
	Player.MO.AimLineAttack(&angles, dist);
	AngleVector(&angles, &dir);
	Player.MO.LineAttack(dir, dist, damage, GauntletPuff1);
	if (!Player.MO.linetarget)
	{
		if (P_Random() > 64)
		{
			Player.ExtraLight = !Player.ExtraLight;
		}
		// didn't find any creatures, so try to strike any walls
		angles = Player.MO.Angles;
		Player.MO.AimLineAttack(&angles, MELEERANGE);
		AngleVector(&angles, &dir);
		Player.MO.LineAttack(dir, MELEERANGE, damage, GauntletPuff1);
		Player.MO.PlaySound('GauntletFull', CHAN_WEAPON);
		return;
	}
	randVal = P_Random();
	if (randVal < 64)
	{
		Player.ExtraLight = 0;
	}
	else if (randVal < 160)
	{
		Player.ExtraLight = 1;
	}
	else
	{
		Player.ExtraLight = 2;
	}
	if (!Player.Refire)
		Player.MO.PlaySound('GauntletHit', CHAN_WEAPON);
	else
		Player.MO.PlaySound('GauntletUse', CHAN_WEAPON);
	// turn to face target
	angle = atan2(Player.MO.linetarget.Origin.y - Player.MO.Origin.y,
		Player.MO.linetarget.Origin.x - Player.MO.Origin.x);
	if (AngleMod360(angle - Player.MO.Angles.yaw) > 180.0)
	{
		if (AngleMod360(angle - Player.MO.Angles.yaw) < 360.0 - 90.0 / 20.0)
			Player.MO.Angles.yaw = AngleMod360(angle + 90.0 / 21.0);
		else
			Player.MO.Angles.yaw = AngleMod360(Player.MO.Angles.yaw - 90.0 / 20.0);
	}
	else
	{
		if (AngleMod360(angle - Player.MO.Angles.yaw) > 90.0 / 20.0)
			Player.MO.Angles.yaw = AngleMod360(angle - 90.0 / 21.0);
		else
			Player.MO.Angles.yaw = AngleMod360(Player.MO.Angles.yaw + 90.0 / 20.0);
	}
	Player.MO.bJustAttacked = true;
}

__states__
{
	S_GAUNTLETREADY('CGAU', 0, 1.0 / 35.0, S_GAUNTLETREADY) { A_WeaponReady(); }
	S_GAUNTLETDOWN('CGAU', 0, 1.0 / 35.0, S_GAUNTLETDOWN) { A_Lower(); }
	S_GAUNTLETUP('CGAU', 0, 1.0 / 35.0, S_GAUNTLETUP) { Player.MO.PlaySound('GauntletActive', CHAN_WEAPON);A_Raise(); }
	S_GAUNTLETATK1_1('CGAU', 1, 4.0 / 35.0, S_GAUNTLETATK1_2) { }
	S_GAUNTLETATK1_2('CGAU', 2, 4.0 / 35.0, S_GAUNTLETATK1_3) { }
	S_GAUNTLETATK1_3('CGAU', 3 | FF_FULLBRIGHT, 4.0 / 35.0, S_GAUNTLETATK1_4) { A_GauntletAttack(); }
	S_GAUNTLETATK1_4('CGAU', 4 | FF_FULLBRIGHT, 4.0 / 35.0, S_GAUNTLETATK1_5) { A_GauntletAttack(); }
	S_GAUNTLETATK1_5('CGAU', 5 | FF_FULLBRIGHT, 4.0 / 35.0, S_GAUNTLETATK1_6) { A_GauntletAttack(); }
	S_GAUNTLETATK1_6('CGAU', 2, 4.0 / 35.0, S_GAUNTLETATK1_7) { A_ReFire(); }
	S_GAUNTLETATK1_7('CGAU', 1, 4.0 / 35.0, S_GAUNTLETREADY) { A_Light0(); }
}

defaultproperties
{
	Mana = HexenDefs::MANA_NONE;
	UpState = S_GAUNTLETUP;
	DownState = S_GAUNTLETDOWN;
	ReadyState = S_GAUNTLETREADY;
	AttackState = S_GAUNTLETATK1_1;
	HoldAttackState = S_GAUNTLETATK1_3;
	PSpriteSY = 15.0;
	wis_mod = false;
	int_mod = false;
	dex_mod = true;
	str_mod = true;
}

//**************************************************************************
//
//  $Log$
//  Revision 1.6  2006/02/17 19:17:51  dj_jl
//  Moved common defs to classes.
//
//  Revision 1.5  2006/02/15 23:37:46  dj_jl
//  Moved all server progs global variables to classes.
//
//  Revision 1.4  2005/12/11 21:37:29  dj_jl
//  Made path traversal callbacks class members.
//
//  Revision 1.3  2005/08/12 23:04:25  firebrand_kh
//  Fixed weapons to work with the PI Damage artifact
//
//  Revision 1.2  2005/07/27 21:00:06  firebrand_kh
//  Balanced weapon damage rates & mana usage
//
//  Revision 1.1  2004/11/16 13:33:22  dj_jl
//  Initial import.
//
//  Revision 1.2  2003/11/12 16:49:44  dj_jl
//  Changed player structure into a class
//
//  Revision 1.1  2002/10/26 16:32:23  dj_jl
//  New style of defining classes.
//
//**************************************************************************
