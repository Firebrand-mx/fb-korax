//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class WeaponGoldWand : Weapon;

//===========================================================================
//
//  A_FireGoldWandPL1
//
//===========================================================================

void A_FireGoldWandPL1()
{
	TAVec angles;
	int damage;
	TVec dir;

	UseWeaponMana();
	damage = 10; //7 + (P_Random() & 7);
	if (int_mod)
	{
		if(!active_damage)
		{
			damage = damage * Player.strength / 10;
		}
		else // [FB] PI Damage
		{
			damage = (damage * Player.intelligence / 10) * ftoi(3.1415);
		}
	}
	angles = Player.MO.Angles;
	Player.MO.AimLineAttack(&angles, MISSILERANGE);
	AngleVector(&angles, &dir);
//	dir = Aim(Player.MO, Player.MO.Angles.yaw, 16.0 * 64.0);
	if (Player.Refire)
	{
		VectorRotateAroundZ(&dir, (Random() - Random()) * 45.0 / 8.0);
	}
	Player.MO.LineAttack(dir, MISSILERANGE, damage, GoldWandPuff1);

	Player.MO.PlaySound('GoldWandFire', CHAN_WEAPON);
}

//===========================================================================
//
//  A_FireGoldWandPL2
//
//===========================================================================

void A_FireGoldWandPL2()
{
	int i;
	int damage;
	float momz;
	TAVec angles;
	TVec dir;
	Actor mo;

	UseWeaponMana();
	angles = Player.MO.Angles;
	Player.MO.AimLineAttack(&angles, MISSILERANGE);
	AngleVector(&angles, &dir);
//	dir = Aim(Player.MO, Player.MO.Angles.yaw, 16.0 * 64.0);
//	VectorAngles(&dir, &angles);
	mo = Player.SpawnPlayerMissileAngle(GoldWandMissile2,
		AngleMod360(angles.yaw - (45.0 / 8.0))/*, angles.pitch*/);
	if (mo && int_mod)
	{
		if(!active_damage)
		{
			mo.MissileDamage = mo.MissileDamage * Player.intelligence / 10;
		}
		else // [FB] PI Damage
		{
			mo.MissileDamage = (mo.MissileDamage * Player.intelligence / 10) * ftoi(3.1415);
		}

	}
	mo = Player.SpawnPlayerMissileAngle(GoldWandMissile2,
		AngleMod360(angles.yaw + (45.0 / 8.0))/*, angles.pitch*/);
	if (mo && int_mod)
	{
		mo.MissileDamage = mo.MissileDamage *Player.intelligence/10;
	}
	VectorRotateAroundZ(&dir, -45.0 / 8.0);
	for (i = 0; i < 5; i++)
	{
		damage = 20; //12 + (P_Random() & 7);
		if (int_mod)
		{
			if(!active_damage)
			{
				damage = damage * Player.strength / 10;
			}
			else // [FB] PI Damage
			{
				damage = (damage * Player.intelligence / 10) * ftoi(3.1415);
			}
		}
		Player.MO.LineAttack(dir, MISSILERANGE, damage, GoldWandPuff2);
		VectorRotateAroundZ(&dir, (45.0 / 8.0) / 2.0);
	}
	Player.MO.PlaySound('GoldWandFire', CHAN_WEAPON);
}

__states__
{
	S_GOLDWANDREADY('GWND', 0, 1.0 / 35.0, S_GOLDWANDREADY) { A_WeaponReady(); }
	S_GOLDWANDDOWN('GWND', 0, 1.0 / 35.0, S_GOLDWANDDOWN) { A_Lower(); }
	S_GOLDWANDUP('GWND', 0, 1.0 / 35.0, S_GOLDWANDUP) { A_Raise(); }
	S_GOLDWANDATK1_1('GWND', 1, 3.0 / 35.0, S_GOLDWANDATK1_2) { }
	S_GOLDWANDATK1_2('GWND', 2, 5.0 / 35.0, S_GOLDWANDATK1_3) { A_FireGoldWandPL1(); }
	S_GOLDWANDATK1_3('GWND', 3, 3.0 / 35.0, S_GOLDWANDATK1_4) { }
	S_GOLDWANDATK1_4('GWND', 3, 0.0 / 35.0, S_GOLDWANDREADY) { A_ReFire(); }
	S_GOLDWANDATK2_1('GWND', 1, 3.0 / 35.0, S_GOLDWANDATK2_2) { }
	S_GOLDWANDATK2_2('GWND', 2, 4.0 / 35.0, S_GOLDWANDATK2_3) { A_FireGoldWandPL2(); }
	S_GOLDWANDATK2_3('GWND', 3, 3.0 / 35.0, S_GOLDWANDATK2_4) { }
	S_GOLDWANDATK2_4('GWND', 3, 0.0 / 35.0, S_GOLDWANDREADY) { A_ReFire(); }
}

defaultproperties
{
	UpState = S_GOLDWANDUP;
	DownState = S_GOLDWANDDOWN;
	ReadyState = S_GOLDWANDREADY;
	AttackState = S_GOLDWANDATK1_1;
	HoldAttackState = S_GOLDWANDATK1_1;
	PSpriteSY = 5.0;
	Mana = MANA_1;
	manause = 2;
	wis_mod = true;
	int_mod = true;
	dex_mod = false;
	str_mod = false;
	PickUpMessage = "GOLD WAND";
}

//**************************************************************************
//
//  $Log$
//  Revision 1.6  2006/02/15 23:37:46  dj_jl
//  Moved all server progs global variables to classes.
//
//  Revision 1.5  2005/12/11 21:37:29  dj_jl
//  Made path traversal callbacks class members.
//
//  Revision 1.4  2005/08/12 23:04:25  firebrand_kh
//  Fixed weapons to work with the PI Damage artifact
//
//  Revision 1.3  2005/08/08 18:16:51  firebrand_kh
//  Took out model definitions
//
//  Revision 1.2  2005/07/27 21:00:06  firebrand_kh
//  Balanced weapon damage rates & mana usage
//
//  Revision 1.1  2004/11/16 13:33:22  dj_jl
//  Initial import.
//
//  Revision 1.2  2003/11/12 16:49:44  dj_jl
//  Changed player structure into a class
//
//  Revision 1.1  2002/10/26 16:32:23  dj_jl
//  New style of defining classes.
//
//**************************************************************************
