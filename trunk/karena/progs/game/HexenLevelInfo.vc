//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**		##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id$
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class HexenLevelInfo : LineSpecialLevelInfo;

// [KORAX]
// [CW] Action specials, recommended to use only through map ACS
//	(in order not to mix these with common line specials,
//	their ids should be greater than 255)
enum
{
	ACTSPEC_Thing_Thrust3d			= 256,
	ACTSPEC_AdvancedGame_BeginState,
	ACTSPEC_AdvancedGame_EndState,
	ACTSPEC_AdvancedGame_HandleEvent,
	ACTSPEC_AdvancedGame_SetGameObject,
	ACTSPEC_IsConditionTrue,
	ACTSPEC_RunACSConditional,
	ACTSPEC_Last
};

// [CW] Conditions for ACTSPEC_RunACSConditional
enum
{
	CNDT_AdvancedGame_StateIs		// Is current Game State equal to ...
};

const int MAX_MINOTAUR_SPOTS = 8; // [FB] Limit the number of Minotaur Spots in a level

//
// Map things flags
//
const int
	MTF_EASY			= 0x0001,	// Skill flags.
	MTF_NORMAL			= 0x0002,
	MTF_HARD			= 0x0004,
	MTF_AMBUSH			= 0x0008,	// Deaf monsters/do not react to sound.
	MTF_DORMANT			= 0x0010,	// The thing is dormant
	MTF_FIGHTER			= 0x0020,	// Thing appearing in player classes
	MTF_CLERIC			= 0x0040,
	MTF_MAGE			= 0x0080,
	MTF_GSINGLE			= 0x0100,	// Appearing in game modes
	MTF_GCOOP			= 0x0200,
	MTF_GDEATHMATCH		= 0x0400;

const int BODYQUESIZE 			= 64;
const int CORPSEQUEUESIZE		= 128;
int BodyQueSize;
int CorpseQueSize;

const int
	STROBEBRIGHT		= 5,
	FASTDARK			= 15,
	SLOWDARK			= 35;

Actor GLavaInflictor;

Actor bodyque[BODYQUESIZE];
int bodyqueslot;

int MinotaurSpotCount;
TVec MinotaurSpot[MAX_MINOTAUR_SPOTS];
float MinotaurSpot_angle[MAX_MINOTAUR_SPOTS];

// Corpse queue for monsters
Actor corpseQueue[CORPSEQUEUESIZE];
int corpseQueueSlot;

//============================================================================
//
//  SpawnSpecials
//
//============================================================================

void SpawnSpecials()
{
	::SpawnSpecials();

	InitLava();
}

//==========================================================================
//
//  FindLine
//
//==========================================================================

line_t* FindLine(int lineTag, int *searchPosition)
{
	int i;

	for (i = *searchPosition + 1; i < MainGameInfo(Game).TaggedLineCount; i++)
	{
		if (MainGameInfo(Game).TaggedLines[i].lineTag == lineTag)
		{
			*searchPosition = i;
			return MainGameInfo(Game).TaggedLines[i].line;
		}
	}
	*searchPosition = -1;
	return NULL;
}

//==========================================================================
//
//  PolyThrustMobj
//
//==========================================================================

void PolyThrustMobj(Entity Other, TVec thrustDir, polyobj_t * po)
{
	float force;
	PolyobjThinker pe;

	if (!Actor(Other).bShootable && !Other.bIsPlayer)
	{
		return;
	}

	pe = PolyobjThinker(po->SpecialData);
	if (pe)
	{
		force = pe.thrust_force;
		if (force < 1.0)
		{
			force = 1.0;
		}
		else if (force > 128.0)
		{
			force = 128.0;
		}
	}
	else
	{
		force = 1.0;
	}

	Other.Velocity += force * thrustDir;
	if (po->bCrush)
	{
		TVec testPos;

		testPos = Other.Origin + force * thrustDir * Game.frametime;
		if (!Other.CheckPosition(testPos))
		{
			Actor(Other).Damage(none, none, 3);
		}
	}
}

//==========================================================================
//
//  PolyBusy
//
//==========================================================================

bool PolyBusy(int polyobj)
{
	polyobj_t *poly;

	poly = XLevel.GetPolyobj(polyobj);
	if (!poly->SpecialData)
	{
		return false;
	}
	else
	{
		return true;
	}
}

//==========================================================================
//
//	ThingCount
//
//==========================================================================

int ThingCount(int type, int tid)
{
	int count;
	int searcher;
	Actor Ent;
	classid moType;

	if (!(type + tid))
	{
		// Nothing to count
		return 0;
	}
	moType = FindClassFromScriptId(type);
	if (!moType)
	{
		return 0;
	}
	count = 0;
	searcher = -1;
	if (tid)
	{
		// Count TID things
		for (Ent = Actor(FindMobjFromTID(tid, &searcher)); Ent != none;
			Ent = Actor(FindMobjFromTID(tid, &searcher)))
		{
			if (type == 0)
			{
				// Just count TIDs
				count++;
			}
			else if (moType == Ent.Class)
			{
				if (Ent.bCountKill && Ent.Health <= 0)
				{
					// Don't count dead monsters
					continue;
				}
				count++;
			}
		}
	}
	else
	{
		// Count only types
		FOREACH(Actor, Ent)
		{
			if (Ent.Class != moType)
			{
				// Doesn't match
				continue;
			}
			if (Ent.bCountKill && Ent.Health <= 0)
			{
				// Don't count dead monsters
				continue;
			}
			count++;
		}
	}
	return count;
}

//==========================================================================
//
//  ExecuteActionSpecial
//
//==========================================================================

bool ExecuteActionSpecial(int Special, int Arg1, int Arg2, int Arg3,
	int Arg4, int Arg5, line_t* Line, int Side, Entity E)
{
	bool buttonSuccess;
	Actor A;

	A = Actor(E);
	buttonSuccess = false;
	switch (Special)
	{
	case LNSPEC_QuakeTremor:
		buttonSuccess = A_LocalQuake(Arg1, Arg2, Arg3, Arg4, Arg5);
		break;
	case LNSPEC_UsePuzzleItem:
		buttonSuccess = EV_LineSearchForPuzzleItem(Arg1, Arg2, Arg3, Arg4, 
			Arg5, A);
		break;

	case ACTSPEC_Thing_Thrust3d:
		if(Arg1 > 0)
		{
			buttonSuccess = EV_Thing3dThrust(Arg1, Arg2, Arg3, Arg4, Arg5, none);
		}
		else if(A)
		{
			buttonSuccess = EV_Thing3dThrust(0, Arg2, Arg3, Arg4, Arg5, A);
		}
		break;
	case ACTSPEC_AdvancedGame_BeginState:
		if (MainGameInfo(Game).GameMode)
		{
			buttonSuccess = true;
			MainGameInfo(Game).GameMode.BeginState(Arg1);
		}
		break;
	case ACTSPEC_AdvancedGame_EndState:
		if (MainGameInfo(Game).GameMode)
		{
			buttonSuccess = true;
			MainGameInfo(Game).GameMode.EndCurrentState(Arg1);
		}
		break;
	case ACTSPEC_AdvancedGame_HandleEvent:
		if (MainGameInfo(Game).GameMode)
		{
			buttonSuccess = true;
			MainGameInfo(Game).GameMode.HandleGameEvent(A, Arg1, Arg2, Arg3, Arg4, Arg5);
		}
		break;
	case ACTSPEC_AdvancedGame_SetGameObject:
		if(Arg1 > 0)
		{
			buttonSuccess = EV_SetAdvancedGameObject(Arg1, Arg2, Arg3, Arg4, Arg5, none);
		}
		else if(A)
		{
			buttonSuccess = EV_SetAdvancedGameObject(0, Arg2, Arg3, Arg4, Arg5, A);
		}
		break;
	case ACTSPEC_IsConditionTrue:
		buttonSuccess = EV_IsConditionTrue(Arg1, Arg2);
		break;
	case ACTSPEC_RunACSConditional:
		buttonSuccess = EV_RunACSConditional(Arg1, Arg2, Arg3, Arg4, Arg5);
		break;

	// Inert Line specials
	default:
		buttonSuccess = ::ExecuteActionSpecial(Special, Arg1, Arg2, Arg3,
			Arg4, Arg5, Line, Side, E);
		break;
	}
	return buttonSuccess;
}

//==========================================================================
//
//  CheckActivation
//
//==========================================================================

bool CheckActivation(int activationType, line_t * line, Actor A)
{
	int lineActivation;

	lineActivation = GET_SPAC(line->flags);
	if (lineActivation == SPAC_PTOUCH &&
		(activationType == SPAC_PCROSS || activationType == SPAC_IMPACT))
	{
		lineActivation = activationType;
	}
	else if (lineActivation == SPAC_USETHROUGH)
	{
		lineActivation = SPAC_USE;
	}
	else if (line->special == LNSPEC_Teleport &&
		lineActivation == SPAC_CROSS && activationType == SPAC_PCROSS &&
		A && A.bMissile)
	{
		// Let missiles use regular player teleports
		lineActivation = SPAC_PCROSS;
	}
	if (lineActivation != activationType)
	{
		return false;
	}
	if (!A.bIsPlayer && !A.bMissile)
	{
		if (lineActivation != SPAC_MCROSS)
		{
			// currently, monsters can only activate the MCROSS activation type
			return false;
		}
		if (line->flags & ML_SECRET)
			return false;	// never open secret doors
	}
	return true;
}

//============================================================================
//
//  ActivateLine
//
//============================================================================

bool ActivateLine(line_t* Line, Actor A, int Side, int ActivationType)
{
	int lineActivation;
	bool repeat;
	bool buttonSuccess;

	if (!CheckActivation(ActivationType, Line, A))
	{
		return false;
	}

	lineActivation = GET_SPAC(Line->flags);
	if (lineActivation == SPAC_PTOUCH)
	{
		lineActivation = ActivationType;
	}
	repeat = Line->flags & ML_REPEAT_SPECIAL;
	buttonSuccess = ExecuteActionSpecial(Line->special, Line->arg1,
		Line->arg2, Line->arg3, Line->arg4, Line->arg5, Line, Side, A);
	if ((lineActivation == SPAC_USE || lineActivation == SPAC_IMPACT ||
		lineActivation == SPAC_USETHROUGH) && buttonSuccess)
	{
		P_ChangeSwitchTexture(Line, repeat,
			Line->special == LNSPEC_ExitNormal ||
			Line->special == LNSPEC_ExitSecret ||
			Line->special == LNSPEC_TeleportNewMap ||
			Line->special == LNSPEC_TeleportEndGame
			? 'switches/exitbutn' : 'switches/normbutn');
	}
	if (!repeat && buttonSuccess)
	{
		// clear the special on non-retriggerable lines
		Line->special = 0;
	}
	return true;
}

//============================================================================
//
//	CheckLock
//
//============================================================================

bool CheckLock(Entity A, int lock)
{
	if (!A.bIsPlayer)
	{
		return false;
	}
	if (!lock)
	{
		return true;
	}
	if (!(Player(A.Player).Keys & (1 << (lock - 1))))
	{
		A.Player.centreprint("YOU NEED THE %s", MainGameInfo(Game).TextKeyMessages[lock - 1]);
		A.PlaySound('DoorLocked', CHAN_ITEM);
		return false;
	}
	return true;
}

//==========================================================================
//
//  EV_Thing3dThrust
//
//  [CW] A three-dimensional vector variant of ThingThrust action special
//
//==========================================================================

bool EV_Thing3dThrust(int tid, int angle2d, int angle3, int move, int move2, Actor a)
{
	if (tid)
	{
		Actor A;
		int searcher;

		searcher = -1;
		for (A = Actor(FindMobjFromTID(tid, &searcher)); A;
			A = Actor(FindMobjFromTID(tid, &searcher)))
		{
			if (A)
			{
			      if (angle3)
			         A.Thrust3d(itof(angle2d), itof(angle3), itof(move));
			      else
			         A.Thrust3d2(itof(angle2d), itof(move), itof(move2));
			   return true;
			}
		}
	}
	else if (a)
	{
		if (angle3)
			a.Thrust3d(itof(angle2d), itof(angle3), itof(move));
		else
			a.Thrust3d2(itof(angle2d), itof(move), itof(move2));
		return true;
	}
	return false;
}

//===========================================================================
// Quake variables
//
//      Arg1     Intensity on richter scale (2..9)
//      Arg2     Duration in tics
//      Arg3     Radius for damage, in tile units (64 pixels)
//      Arg4     Radius for tremor in tile units (64 pixels)
//      Arg5     TID of map thing for focus of quake
//
//===========================================================================

//===========================================================================
//
//	A_LocalQuake
//
//===========================================================================

bool A_LocalQuake(int Arg1, int Arg2, int Arg3, int Arg4, int Arg5)
{
	QuakeFocus focus;
	Actor target;
	int lastfound = 0;
	int success = false;

	// Find all quake foci
	do
	{
		target = Actor(FindMobjFromTID(Arg5, &lastfound));
		if (target)
		{
			focus = QuakeFocus(Spawn(QuakeFocus, target.Origin));
			if (focus)
			{
				focus.Richters = Arg1;
				focus.QuakeDuration = Arg2 >> 1;	// decremented every 2 tics
				focus.DamageRadius = itof(Arg3) * 64.0;
				focus.TremorRadius = itof(Arg4) * 64.0;
				success = true;
			}
		}
	}
	while (target);

	return success;
}

//==========================================================================
//
// EV_LineSearchForPuzzleItem
//
//==========================================================================

bool EV_LineSearchForPuzzleItem(int Arg1, int Arg2, int Arg3, int Arg4,
	int Arg5, Actor A)
{
	int i;
	int type, arti;

	if (!A)
		return false;
	if (!A.bIsPlayer)
		return false;

	// Search player's inventory for puzzle items
	for (i = 0; i < Player(A.Player).ArtifactCount; i++)
	{
		arti = Player(A.Player).Inventory[i].type;
		type = arti - HexenDefs::arti_firstpuzzitem;
		if (type < 0)
			continue;
		if (type == Arg1)
		{
			// A puzzle item was found for the line
			if (Player(A.Player).UseArtifact(arti))
			{
				// A puzzle item was found for the line
				Player(A.Player).PlayerRemoveArtifact(i);
				if (arti < HexenDefs::arti_firstpuzzitem)
				{
					A.PlaySound('UseArtifact', CHAN_ITEM);
				}
				else
				{
					A.PlaySound('PuzzleSuccess', CHAN_ITEM);
				}
				Player(A.Player).ArtifactFlash = 4;
				return true;
			}
		}
	}
	return false;
}

//**************************************************************************
//
//  Advanced game mode specials
//
//**************************************************************************

//==========================================================================
//
//	EV_SetAdvancedGameObject
//
//	[CW]
//
//==========================================================================

bool EV_SetAdvancedGameObject(int tid, int Arg2, int Arg3, int Arg4, int Arg5, Actor a)
{
	if (!MainGameInfo(Game).GameMode)
		return false;

	if (tid)
	{
		Actor A;
		int searcher;

		searcher = -1;
		for (A = Actor(FindMobjFromTID(tid, &searcher)); A;
			A = Actor(FindMobjFromTID(tid, &searcher)))
		{
			if (A)
			{
			   MainGameInfo(Game).GameMode.SetGameObject(A, Arg2, Arg3, Arg4, Arg5);
			   return true;
			}
		}
	}
	else if (a)
	{
		MainGameInfo(Game).GameMode.SetGameObject(a, Arg2, Arg3, Arg4, Arg5);
		return true;
	}
	return false;
}

//==========================================================================
//
//	EV_IsConditionTrue
//
//==========================================================================

bool EV_IsConditionTrue(int Condition, int cParam)
{
	switch (Condition)
	{

	case CNDT_AdvancedGame_StateIs:
		if (MainGameInfo(Game).GameMode && MainGameInfo(Game).GameMode.State == cParam)
			return true;
	}

	return false;
}

//==========================================================================
//
//	EV_RunACSConditional
//
//	[CW]
//
//	Runs determined ACS if defined condition is true.
//	(this is currently unused but I suggest keep it for a while just in case)
//
//==========================================================================

bool EV_RunACSConditional(int numACS, int mapACS, int Condition, int cParam, int Arg)
{
	bool runACS;

	if (EV_IsConditionTrue(Condition, cParam))
		runACS = StartACS(numACS, mapACS, Arg, 0, 0, none, NULL, 0, false, false);
	else
		runACS = false;

	return runACS;
}

//==========================================================================
//
// SpawnMapThing
//
// The fields of the mapthing should already be in host byte order.
//
//==========================================================================

void SpawnMapThing(mthing_t * mthing)
{
	int spawnMask;
	Actor A;
	classid moClass;

	if (mthing->type <= 0)
		return;

	// [FB] Check for minotaur spots
	if (mthing->type == 15005)	// [FB] Minotaur Spot
	{
		AddMinotaurSpot(mthing->x, mthing->y, itof(45 * (mthing->angle / 45)));
		return;
	}

	// Count deathmatch start positions
	if (mthing->type == 11)
	{
		if (NumDeathmatchStarts < MAXDEATHMATCHSTARTS)
		{
			CopyMThing(mthing, &DeathmatchStarts[NumDeathmatchStarts]);
			NumDeathmatchStarts++;
		}
		return;
	}

	// Check for player starts 1 to 4
	if (mthing->type <= 4)
	{
		CopyMThing(mthing, &PlayerStarts[mthing->arg1 * MAXPLAYERS +
			mthing->type - 1]);
		return;
	}
	// Check for player starts 5 to 8
	if (mthing->type >= 9100 && mthing->type <= 9103)
	{
		mthing->type = 5 + mthing->type - 9100;	// Translate to 5 - 8
		CopyMThing(mthing, &PlayerStarts[mthing->arg1 * MAXPLAYERS +
			mthing->type - 1]);
		return;
	}

	if (mthing->type >= 1400 && mthing->type < 1410)
	{
		XLevel.PointInSector(vector(mthing->x,
			mthing->y, 0.0))->seqType = mthing->type - 1400;
		return;
	}

//[Korax]
#if 0
	// Check current game type with spawn flags
	if (netgame == false)
	{
		spawnMask = MTF_GSINGLE;
	}
	else if (deathmatch)
	{
		spawnMask = MTF_GDEATHMATCH;
	}
	else
	{
		spawnMask = MTF_GCOOP;
	}
	if (!(mthing->options & spawnMask))
	{
		return;
	}

	// Check current skill with spawn flags
	if (gameskill == sk_baby || gameskill == sk_easy)
	{
		spawnMask = MTF_EASY;
	}
	else if (gameskill == sk_hard || gameskill == sk_nightmare)
	{
		spawnMask = MTF_HARD;
	}
	else
	{
		spawnMask = MTF_NORMAL;
	}
	if (!(mthing->options & spawnMask))
	{
		return;
	}

	// Check current character classes with spawn flags
	if (!netgame)
	{
		// Single player
		if (!(mthing->options & classFlags[GetCvar("Class")]))
		{
			// Not for current class
			return;
		}
	}
#endif
//[Korax]
#if 0	//  Because of client/server and in-game joining we can't do this
	else if (!deathmatch)
	{
		// Cooperative
		spawnMask = 0;
		for (i = 0; i < MAXPLAYERS; i++)
		{
			if (GPlayers[i])
			{
				spawnMask |= classFlags[PlayerClass[i]];
			}
		}
		if (!(mthing->options & spawnMask))
		{
			return;
		}
	}
#endif

	// Find which type to spawn
	moClass = FindClassFromEditorId(mthing->type);
	if (moClass)
	{
		A = Actor(NewMobjThinker(moClass));
		A.OnMapSpawn(mthing);
	}
	else
	{
		// Can't find thing type
		dprint("SpawnMapThing: Unknown type %i at (%f, %f)",
			mthing->type, mthing->x, mthing->y);
	}
}

//==========================================================================
//
//  AddMinotaurSpot
//
//  [FB] Count how many minotaur spots this level has
//
//==========================================================================

void AddMinotaurSpot(float x, float y, float angle)
{
	if (MinotaurSpotCount == MAX_MINOTAUR_SPOTS)
	{
		Error("Too many minotaur spots.");
	}
	MinotaurSpot[MinotaurSpotCount].x = x;
	MinotaurSpot[MinotaurSpotCount].y = y;
	MinotaurSpot[MinotaurSpotCount].z = -99999.0;	//FIXME
	MinotaurSpot_angle[MinotaurSpotCount] = angle;
	MinotaurSpotCount++;
}

//==========================================================================
//
//  InitLava
//
//==========================================================================

void InitLava()
{
	GLavaInflictor = Actor(NewMobjThinker(LavaInflictor));
}

//==========================================================================
//
//  P_Massacre
//
//  Kills all monsters.
//
//==========================================================================

int P_Massacre()
{
	int count;
	Actor mo;

	count = 0;
	FOREACH(Actor, mo)
	{
		if (mo.bCountKill && mo.Health > 0)
		{
			mo.bNonShootable = false;
			mo.bInvulnerable = false;
			mo.bShootable = true;
			mo.Damage(none, none, 10000);
			count++;
		}
	}
	return count;
}

//==========================================================================
//
//	Spawn
//
//==========================================================================

Actor Spawn(classid type, TVec position)
{
	Actor A;

	A = Actor(NewMobjThinker(type));
	A.Origin = position;
	A.OnMapSpawn(NULL);
	return A;
}

//==========================================================================
//
//	SpawnTeleportFog
//
//==========================================================================

void SpawnTeleportFog(TVec Org)
{
	Actor fogAct;

	fogAct = Spawn(TeleportFog, Org + vector(0.0, 0.0, Actor::TELEFOGHEIGHT));
	fogAct.PlaySound('Teleport', CHAN_VOICE);
}

defaultproperties
{
	BodyQueSize = 32;
	CorpseQueSize = 64;
}
