//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**		    ##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id$
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class HexenLevelInfo : LineSpecialLevelInfo;

// [KORAX]
// [CW] Action specials, recommended to use only through map ACS
//	(in order not to mix these with common line specials,
//	their ids should be greater than 255)
enum
{
	ACTSPEC_Thing_Thrust3d			= 256,
	ACTSPEC_AdvancedGame_BeginState = 750,
	ACTSPEC_AdvancedGame_EndState,
	ACTSPEC_AdvancedGame_HandleEvent,
	ACTSPEC_AdvancedGame_SetACSNotifier,
	ACTSPEC_IsConditionTrue,
	ACTSPEC_RunACSConditional,
	ACTSPEC_Last
};

// [CW] Conditions for ACTSPEC_RunACSConditional
enum
{
	CNDT_AdvancedGame_StateIs		// Is current Game State equal to ...
};

enum
{
	pt_chunks = pt_explode2 + 1,
	pt_chunks2
};

const int MAX_MINOTAUR_SPOTS = 8; // [FB] Limit the number of Minotaur Spots in a level

const int BODYQUESIZE 			= 64;
const int CORPSEQUEUESIZE		= 128;
int BodyQueSize;
int CorpseQueSize;

EntityEx bodyque[BODYQUESIZE];
int bodyqueslot;

// Corpse queue for monsters
EntityEx corpseQueue[CORPSEQUEUESIZE];
int corpseQueueSlot;

enum
{
	pt_ice_chunk
};

//============================================================================
//
//  SpawnSpecials
//
//============================================================================

void SpawnSpecials()
{
	::SpawnSpecials();

	MainGameInfo(Game).InitLevel(self);
	Purge();
}

//============================================================================
//
//  Purge
//
//============================================================================

void Purge()
{
	EntityEx ee;
	foreach AllThinkers(EntityEx, ee)
	{
		if (MainGameInfo(Game).GameType != HexenDefs::game_ctf &&
					ee.IsA('CTFBanner') ||
				MainGameInfo(Game).GameType != HexenDefs::game_domination &&
					ee.IsA('DominationSigil') ||
				MainGameInfo(Game).GameType != HexenDefs::game_football &&
					(ee.IsA('SoccerBall') || ee.IsA('SoccerBallSpot') || ee.IsA('KickOffSpot')))
		{
			dprint("HexenLevelInfo::Purge : destroyed %n", GetClassName(ee.Class));
			ee.Destroy();
		}
	}
}

//==========================================================================
//
//  ExecuteActionSpecial
//
//==========================================================================

int ExecuteActionSpecial(int Special, int Arg1, int Arg2, int Arg3,
	int Arg4, int Arg5, line_t* Line, int Side, Entity E)
{
	bool buttonSuccess;
	EntityEx A;

	A = EntityEx(E);
	buttonSuccess = false;
	switch (Special)
	{
	case ACTSPEC_Thing_Thrust3d:
		if(Arg1 > 0)
		{
			buttonSuccess = EV_Thing3dThrust(Arg1, Arg2, Arg3, Arg4, Arg5, none);
		}
		else if(A)
		{
			buttonSuccess = EV_Thing3dThrust(0, Arg2, Arg3, Arg4, Arg5, A);
		}
		break;
	case ACTSPEC_AdvancedGame_BeginState:
		if (MainGameInfo(Game).GameModel)
		{
			buttonSuccess = true;
			MainGameInfo(Game).GameModel.BeginState(Arg1);
		}
		break;
	case ACTSPEC_AdvancedGame_EndState:
		if (MainGameInfo(Game).GameModel)
		{
			buttonSuccess = true;
			MainGameInfo(Game).GameModel.EndCurrentState(Arg1);
		}
		break;
	case ACTSPEC_AdvancedGame_HandleEvent:
		if (MainGameInfo(Game).GameModel)
		{
			buttonSuccess = true;
			MainGameInfo(Game).GameModel.HandleEvent(Arg1, A, Arg2, Arg3, Arg4, Arg5);
		}
		break;
	case ACTSPEC_IsConditionTrue:
		buttonSuccess = EV_IsConditionTrue(Arg1, Arg2);
		break;
	case ACTSPEC_RunACSConditional:
		buttonSuccess = EV_RunACSConditional(Arg1, Arg2, Arg3, Arg4, Arg5);
		break;
	case ACTSPEC_AdvancedGame_SetACSNotifier:
		if (MainGameInfo(Game).GameModel)
		{
			buttonSuccess = true;
			MainGameInfo(Game).GameModel.SetACSNotifier(Arg1, Arg2);
		}
		break;

	// Inert Line specials
	default:
		buttonSuccess = ::ExecuteActionSpecial(Special, Arg1, Arg2, Arg3,
			Arg4, Arg5, Line, Side, E);
		break;
	}
	return buttonSuccess;
}

//==========================================================================
//
//  CheckActivation
//
//==========================================================================

bool CheckActivation(int activationType, line_t * line, EntityEx A)
{
	int lineActivation;

	lineActivation = GET_SPAC(line->flags);
	if (lineActivation == SPAC_PTOUCH &&
		(activationType == SPAC_PCROSS || activationType == SPAC_IMPACT))
	{
		lineActivation = activationType;
	}
	else if (lineActivation == SPAC_USETHROUGH)
	{
		lineActivation = SPAC_USE;
	}
	else if (line->special == LNSPEC_Teleport &&
		lineActivation == SPAC_CROSS && activationType == SPAC_PCROSS &&
		A && A.bMissile)
	{
		// Let missiles use regular player teleports
		lineActivation = SPAC_PCROSS;
	}
	if (lineActivation != activationType)
	{
		return false;
	}
	if (!A.bIsPlayer && !A.bMissile)
	{
		if (lineActivation != SPAC_MCROSS)
		{
			// currently, monsters can only activate the MCROSS activation type
			return false;
		}
		if (line->flags & ML_SECRET)
			return false;	// never open secret doors
	}
	return true;
}

//==========================================================================
//
//  EV_Thing3dThrust
//
//  [CW] A three-dimensional vector variant of ThingThrust action special
//
//==========================================================================

bool EV_Thing3dThrust(int tid, int angle2d, int angle3, int move, int move2, EntityEx a)
{
	if (tid)
	{
		EntityEx A;
		int searcher;

		searcher = -1;
		for (A = EntityEx(FindMobjFromTID(tid, &searcher)); A;
			A = EntityEx(FindMobjFromTID(tid, &searcher)))
		{
			if (A)
			{
			      if (angle3)
			         Actor(A).Thrust3d(itof(angle2d), itof(angle3), itof(move));
			      else
			         Actor(A).Thrust3d2(itof(angle2d), itof(move), itof(move2));
			   return true;
			}
		}
	}
	else if (a)
	{
		if (angle3)
			Actor(a).Thrust3d(itof(angle2d), itof(angle3), itof(move));
		else
			Actor(a).Thrust3d2(itof(angle2d), itof(move), itof(move2));
		return true;
	}
	return false;
}

//**************************************************************************
//
//  Advanced game model specials
//
//**************************************************************************

//==========================================================================
//
//	EV_IsConditionTrue
//
//==========================================================================

bool EV_IsConditionTrue(int Condition, int cParam)
{
	switch (Condition)
	{

	case CNDT_AdvancedGame_StateIs:
		if (MainGameInfo(Game).GameModel && MainGameInfo(Game).GameModel.State == cParam)
			return true;
	}

	return false;
}

//==========================================================================
//
//	EV_RunACSConditional
//
//	[CW]
//
//	Runs determined ACS if defined condition is true.
//	(this is currently unused but I suggest keep it for a while just in case)
//
//==========================================================================

bool EV_RunACSConditional(int numACS, int mapACS, int Condition, int cParam, int Arg)
{
	bool runACS;

	if (EV_IsConditionTrue(Condition, cParam))
		runACS = XLevel.StartACS(numACS, mapACS, Arg, 0, 0, none, NULL, 0, false, false);
	else
		runACS = false;

	return runACS;
}

//==========================================================================
//
//  GetClassSpawnFlags
//
//==========================================================================

int GetPClassSpawnFlags()
{
	if (!Game.netgame)
	{
		// Single player
		return MainGameInfo(Game).classFlags[GetCvar('class')];
	}
#ifdef FIXME	//  Because of client/server and in-game joining we can't do this
	else if (!deathmatch)
	{
		// Cooperative
		int spawnMask = 0;
		for (i = 0; i < MAXPLAYERS; i++)
		{
			if (GPlayers[i])
			{
				spawnMask |= classFlags[PlayerClass[i]];
			}
		}
		return spawnMask;
	}
#endif
	return 0;
}

//==========================================================================
//
//  UpdateParticle
//
//==========================================================================

void UpdateParticle(particle_t * p, float DeltaTime)
{
	float grav;

	grav = DeltaTime * p->gravity /*sv_gravity.value * 0.05*/;
	p->accel.z -= grav;
	
	switch (p->type)
	{
	case pt_ice_chunk:
		p->vel.x -= p->vel.x * DeltaTime;
		p->vel.y -= p->vel.y * DeltaTime;
		p->vel.z += p->accel.z * DeltaTime;
		break;
	}

	::UpdateParticle(p, DeltaTime);
}

defaultproperties
{
	ExtPlayersBase = 9100;
}
