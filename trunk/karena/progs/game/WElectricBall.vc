//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**		##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id$
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class WElectricBall : Effect;

int time;
int BobIndex;

//==========================================================================
//
//	InitME
//
//==========================================================================

void InitMe(Actor InstigatedBy)
{
	time = 24 + (P_Random() & 7);
	BobIndex = 0;
	Target = InstigatedBy;
	Radius = 30.0;
	Height = 30.0;
	bColideWithThings = true;
	bColideWithWorld = true;
}

//==========================================================================
//
//	Init
//
//==========================================================================

void Init(Actor InstigatedBy)
{
	InitMe(InstigatedBy);
	Velocity.x = 0.00001;	// missile objects must move to impact other objects
}

//==========================================================================
//
//	GetExplodeParms
//
//==========================================================================

void GetExplodeParms(out int damage, out float distance, out byte damageSelf)
{
	damage = 120;
	distance = 192.0;
	damageSelf = false;
	if (Target && Target.bIsPlayer)
	{
		damage = damage * Player(Target.Player).intelligence / 10;
	}
}

//==========================================================================
//
//  A_Damage
//
//==========================================================================

final void A_Damage()
{
	RadiusAttack(Target, 4, 40.0, false);
	Origin.z += Level.Game.FloatBobOffsets[BobIndex] / 16.0;
	BobIndex = (BobIndex + 1) & 63;
}

//============================================================================
//
//  A_Ticker
//
//============================================================================

final void A_Ticker()
{
	if (!--time)
	{
		SetState(FindState('Death'));
	}
}

states
{
Spawn:
	WELH ABCDE 4 Bright A_Damage
	WELH F 4 Bright A_Ticker
	Loop
Death:
	WELH GH 4 Bright
	WELH I 4 Bright A_Explode
	WELH J 3 Bright
	Stop
}

defaultproperties
{
	Radius = 30.0;
	Height = 30.0;
	Health = 200;
	PainChance = 0.234375;
	Mass = 99999.0;
	bDropOff = true;
	bColideWithWorld = false;
	bColideWithThings = false;
	//bNoDamageThrust = true;
	bShootable = true;
	bReflective = true;
	DeathSound = 'DragonFireballExplode';
}
