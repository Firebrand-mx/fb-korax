//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class ThrowingBomb : Projectile;

state LastThrowState;
state LandedState;

//===========================================================================
//
//  A_CheckThrowBomb
//
//===========================================================================

final void A_CheckThrowBomb()
{
	if (fabs(Velocity.x) < 1.5 * 35.0 &&
		fabs(Velocity.y) < 1.5 * 35.0 &&
		Velocity.z < 2.0 * 35.0 && State == LastThrowState)
	{
		SetState(LandedState);
		Origin.z = FloorZ;
		Velocity.z = 0.0;
		BounceType = BOUNCE_None;
		bMissile = false;
	}
	if (!--Health)
	{
		SetState(DeathState);
	}
}

__states__
{
	S_THROWINGBOMB1('THRW', 0, 4.0 / 35.0, S_THROWINGBOMB2) = A_CheckThrowBomb
	S_THROWINGBOMB2('THRW', 1, 3.0 / 35.0, S_THROWINGBOMB3) = A_CheckThrowBomb
	S_THROWINGBOMB3('THRW', 2, 3.0 / 35.0, S_THROWINGBOMB4) = A_CheckThrowBomb
	S_THROWINGBOMB4('THRW', 3, 3.0 / 35.0, S_THROWINGBOMB5) = A_CheckThrowBomb
	S_THROWINGBOMB5('THRW', 4, 3.0 / 35.0, S_THROWINGBOMB6) = A_CheckThrowBomb
	S_THROWINGBOMB6('THRW', 5, 3.0 / 35.0, S_THROWINGBOMB1) = A_CheckThrowBomb
	S_THROWINGBOMB7('THRW', 6, 6.0 / 35.0, S_THROWINGBOMB8) = A_CheckThrowBomb
	S_THROWINGBOMB8('THRW', 5, 4.0 / 35.0, S_THROWINGBOMB9) = A_CheckThrowBomb
	S_THROWINGBOMB9('THRW', 7, 6.0 / 35.0, S_THROWINGBOMB10) = A_CheckThrowBomb
	S_THROWINGBOMB10('THRW', 5, 4.0 / 35.0, S_THROWINGBOMB11) = A_CheckThrowBomb
	S_THROWINGBOMB11('THRW', 6, 6.0 / 35.0, S_THROWINGBOMB12) = A_CheckThrowBomb
	S_THROWINGBOMB12('THRW', 5, 3.0 / 35.0, S_THROWINGBOMB12) = A_CheckThrowBomb
	S_THROWINGBOMB_X1('CFCF', 16 | FF_FULLBRIGHT, 4.0 / 35.0, S_THROWINGBOMB_X2) = A_NoGravity
	S_THROWINGBOMB_X2('CFCF', 17 | FF_FULLBRIGHT, 3.0 / 35.0, S_THROWINGBOMB_X3) = A_Scream
	S_THROWINGBOMB_X3('CFCF', 18 | FF_FULLBRIGHT, 4.0 / 35.0, S_THROWINGBOMB_X4) = A_Explode
	S_THROWINGBOMB_X4('CFCF', 19 | FF_FULLBRIGHT, 3.0 / 35.0, S_THROWINGBOMB_X5) = none
	S_THROWINGBOMB_X5('CFCF', 20 | FF_FULLBRIGHT, 4.0 / 35.0, S_THROWINGBOMB_X6) = none
	S_THROWINGBOMB_X6('CFCF', 22 | FF_FULLBRIGHT, 3.0 / 35.0, S_THROWINGBOMB_X7) = none
	S_THROWINGBOMB_X7('CFCF', 23 | FF_FULLBRIGHT, 4.0 / 35.0, S_THROWINGBOMB_X8) = none
	S_THROWINGBOMB_X8('CFCF', 25 | FF_FULLBRIGHT, 3.0 / 35.0, none) = none
}

defaultproperties
{
	Health = 48;
	Radius = 8.0;
	Height = 10.0;
	Speed = 420.0;
	BounceType = BOUNCE_Hexen;
	bFireDamage = true;
	bNoGravity = false;
	bNoTeleport = false;
	bActivateImpact = false;
	bActivatePCross = false;
	IdleState = S_THROWINGBOMB1;
	LastThrowState = S_THROWINGBOMB6;
	LandedState = S_THROWINGBOMB7;
	DeathState = S_THROWINGBOMB_X1;
	SightSound = 'FlechetteBounce';
	DeathSound = 'FlechetteExplode';
}
