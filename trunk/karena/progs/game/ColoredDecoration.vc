//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**	        ##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id: ColoredDecoration.vc 696 2007-01-13 21:44:38Z dj_jl $
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class ColoredDecoration : Actor
	abstract;

bool 		TransSet;
//////int 		TeamArg; 	// [FB] An argument to use for detecting team 0 or 1
PlayerTeam	Team;		// Which team this Decoration belongs to
						// (theoretically can be changed during game for
						// some weird gameplay effect... (: )

//// [FB] These methods should be here for switchable colored decorations
//==========================================================================
//
//	Activate
//
//==========================================================================

bool Activate(EntityEx Activator)
{
	SetState(FindState('Active'));
	bDynamicLight = true;
	DLightRadius = Args[/* 0*/ 1] ? itof(Args[/* 0*/ 1]) * 8.0 : LightRadius; // [CW] Args[0] is used for TEAM INDEX

	return true;
}

//==========================================================================
//
//	Deactivate
//
//==========================================================================

bool Deactivate(EntityEx Activator)
{
	SetState(FindState('Inactive'));
	bDynamicLight = false;

	return true;
}
////

//==========================================================================
//
//	SetTranslation
//
//	[FB] Set the team colour for this Banner
//
//==========================================================================

void SetTranslation()
{
	GameCTF CTF = GameCTF(MainGameInfo(Level.Game).GameModel);

	if (!Team)
		return;

	if (CTF && CTF.IsInPlayableState())
	{
		// [CW] Huh, another change
		/* //
		// [CW] I am changing how it works; moved actual translation setting to
		//		LevelInfo class, mainly because not only Banner, but Colored Decor
		//		uses this as well.
		//
		//HexenLevelInfo(Level).SetTeamTranslation(Team.Index, TID);*/
		CTF.HandleEvent(GameCTF::event_colortranslation, none, Team.Index, TID, 0, 0);

		DLightColour = RGB((Team.Colour >> 16) & 0xFF, (Team.Colour >> 8) & 0xFF, Team.Colour & 0xFF);
		Activate(none);
		TransSet = true;
	}
	GameFootball FB = GameFootball(MainGameInfo(Level.Game).GameModel);

	if (FB && FB.IsInPlayableState())
	{
		FB.HandleEvent(GameFootball::event_colortranslation, none, Team.Index, TID, 0, 0);

		DLightColour = RGB((Team.Colour >> 16) & 0xFF, (Team.Colour >> 8) & 0xFF, Team.Colour & 0xFF);
		Activate(none);
		TransSet = true;
	}
}

//==========================================================================
//
//	Tick
//
//==========================================================================

void Tick(float deltaTime)
{
	if (!TransSet)
		SetTranslation();

	::Tick(deltaTime);
}

defaultproperties
{
	DLightColour = RGB(255, 255, 255);
	bDynamicLight = true;
}
