//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**		##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id$
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Weapon : ViewEntity
	abstract;

const float MELEERANGE			= 64.0;
const float MISSILERANGE		= (32.0 * 64.0);

const float LOWERSPEED			= 6.0;
const float RAISESPEED			= 6.0;

const float WEAPONBOTTOM		= 128.0;
const float WEAPONTOP			= 32.0;

int Mana;
int manause;
bool needsnomana;
state UpState;
state DownState;
state ReadyState;
state AttackState;
state HoldAttackState;
state FlashState;
float PSpriteSY;		// Y-adjustment value for full screen
bool dex_mod;
bool str_mod;
bool int_mod;
bool wis_mod;
bool active_damage; 	// [FB] TRUE if PI Damage is active
string PickUpMessage;

state GetUpState()
{
	return UpState;
}

state GetDownState()
{
	return DownState;
}

state GetReadyState()
{
	return ReadyState;
}

//==========================================================================
//
//	GetAttackState
//
//==========================================================================

state GetAttackState()
{
	return Player(Player).Refire ? HoldAttackState : AttackState;
}

void GotMana(int InMana)
{
}

// FIXME
void SnoutSniff()
{
}

//==========================================================================
//
//  IsWeaponManaUsable
//
//==========================================================================

bool IsWeaponManaUsable()
{
	if (Mana == HexenDefs::NUMMANA) 
	{
		    return Player(Player).Mana[HexenDefs::MANA_1] >= Player(Player).GetWeaponManaUse(self)
			&& Player(Player).Mana[HexenDefs::MANA_2] >= Player(Player).GetWeaponManaUse(self)
			&& Player(Player).Mana[HexenDefs::MANA_3] >= Player(Player).GetWeaponManaUse(self);
	}
	else 
	{
		return Player(Player).Mana[Mana] >= Player(Player).GetWeaponManaUse(self);
	}
}

//==========================================================================
//
//  UseWeaponMana
//
//==========================================================================

void UseWeaponMana()
{
	if (Mana == HexenDefs::NUMMANA)
	{
		Player(Player).Mana[HexenDefs::MANA_1] -= Player(Player).GetWeaponManaUse(self);
		Player(Player).Mana[HexenDefs::MANA_2] -= Player(Player).GetWeaponManaUse(self);
		Player(Player).Mana[HexenDefs::MANA_3] -= Player(Player).GetWeaponManaUse(self);
	}
	else 
	{
		Player(Player).Mana[Mana] -= Player(Player).GetWeaponManaUse(self);
	}
	if (Player(Player).Mana[Mana] < 0)
	{
		Player(Player).Mana[Mana] = 0;
	}	
}

//===========================================================================
//
//  A_GunFlash
//
//===========================================================================

void A_GunFlash()
{
	Actor(Player.MO).SetState(Actor(Player.MO).MissileState);
	Player(Player).SetPsprite(ps_flash, FlashState);
}


//==========================================================================
//
//  A_Light0
//
//==========================================================================

void A_Light0()
{
	Player(Player).ExtraLight = 0;
	Player.MO.Effects &= ~HexenDefs::EF_DLIGHT_MASK;
}

//===========================================================================
//
//  A_Light1
//
//===========================================================================

void A_Light1()
{
	Player(Player).ExtraLight = 1;
}

//===========================================================================
//
//  A_Light2
//
//===========================================================================

void A_Light2()
{
	Player(Player).ExtraLight = 2;
}

//==========================================================================
//
//  A_WeaponReady
//
//  The player can fire the weapon or change to another weapon at this time.
//
//==========================================================================

void A_WeaponReady()
{
	float angle;

	// Change player from attack state
	if (StateIsInRange(Player.MO.State, Actor(Player.MO).MissileState,
		PlayerPawn(Player.MO).AttackEndState, 3))
	{
		Player.MO.SetState(Actor(Player.MO).IdleState);
	}
	// Put the weapon away if the player has a pending weapon or has died.
	if (Player(Player).PendingWeapon != HexenDefs::wp_nochange || !Player.Health)
	{
		Player(Player).SetPsprite(ps_weapon, GetDownState());
		return;
	}

	// Check for fire. 
	if (Player.Buttons & BT_ATTACK)
	{
		Player.bAttackDown = true;
		Player(Player).FireWeapon();
		return;
	}
	else
	{
		Player.bAttackDown = false;
	}

	if (Player.PClass != HexenDefs::PCLASS_PIG/*!Player(Player).MorphTime*/)
	{
		// Bob the weapon based on movement speed.
		angle = AngleMod360(180.0 * Player.Level.Game.level->time);
		SX = 1.0 + Player(Player).Bob * cos(angle);
		if (angle >= 180.0)
		{
			angle -= 180.0;
		}
		SY = WEAPONTOP + Player(Player).Bob * sin(angle);
	}
}

//==========================================================================
//
//  A_Lower
//
//==========================================================================

void A_Lower()
{
	if (/*Player(Player).MorphTime*/Player.PClass == HexenDefs::PCLASS_PIG)
	{
		SY = WEAPONBOTTOM;
	}
	else
	{
		//	FIXME!!
		if (Player.Level.Game.frametime < 1.0 / 35.0)
			SY += LOWERSPEED;
		else
			SY += LOWERSPEED * 35.0 * Player.Level.Game.frametime;
	}
	if (SY < WEAPONBOTTOM)
	{
		// Not lowered all the way yet
		return;
	}
	if (Player.PlayerState == PST_DEAD)
	{
		// Player is dead, so don't bring up a pending weapon
		SY = WEAPONBOTTOM;
		return;
	}
	if (!Player.Health)
	{
		// Player is dead, so keep the weapon off screen
		Player(Player).SetPsprite(ps_weapon, none);
		return;
	}
	Player(Player).SetWeapon(Player(Player).PendingWeapon);
	Player(Player).BringUpWeapon();
}

//==========================================================================
//
//  A_Raise
//
//==========================================================================

void A_Raise()
{
	//	FIXME!!
	if (Player.Level.Game.frametime < 1.0 / 35.0)
		SY -= RAISESPEED;
	else
		SY -= RAISESPEED * 35.0 * Player.Level.Game.frametime;
	if (SY > WEAPONTOP)
	{
		// Not raised all the way yet
		return;
	}
	SY = WEAPONTOP;
	Player(Player).SetPsprite(ps_weapon, GetReadyState());
}

//==========================================================================
//
//  A_ReFire
//
//  The player can re fire the weapon without lowering it entirely.
//
//==========================================================================

void A_ReFire()
{
	if ((Player.Buttons & BT_ATTACK) &&
		Player(Player).PendingWeapon == HexenDefs::wp_nochange && Player.Health)
	{
		Player(Player).Refire++;
		Player(Player).FireWeapon();
	}
	else
	{
		Player(Player).Refire = 0;
		Player(Player).CheckMana();
	}
}

//==========================================================================
//
//  SetFOV
//
//==========================================================================

void SetFOV(int FOV)
{
	Player.SelectClientMsg(MSG_SV_CLIENT);
	MSG_WriteByte(HexenDefs::svc_fov);
	MSG_WriteByte(FOV);
}

//===========================================================================
//
//  GunShot (Used for the pistol)
//
//===========================================================================

void GunShot(Actor A, int accurate, TVec dir)
{
	int damage;

	//  Make a copy of angles because inacurate shoot will modify them
	if (!accurate)
	{
		TAVec angles;

		VectorAngles(&dir, &angles);
		angles.yaw = AngleMod360(angles.yaw +
			(Random() - Random()) * 45.0 / 8.0);
		AngleVector(&angles, &dir);
	}

	damage = 10;//5 * (P_Random() % 3 + 1);

	if (int_mod)
	{
		if(!active_damage)
		{
			damage = damage * Player(Player).strength / 10;
		}
		else // [FB] PI Damage
		{
			damage = (damage * Player(Player).intelligence / 10) * ftoi(3.1415);
		}
	}

	A.LineAttack(dir, MISSILERANGE, damage, DoomPuff);
}

//===========================================================================
//
//  GunShot2 (Used for the chaingun)
//
//===========================================================================

void GunShot2(Actor A, int accurate, TVec dir)
{
	int damage;

	//  Make a copy of angles because inacurate shoot will modify them
	if (!accurate)
	{
		TAVec angles;

		VectorAngles(&dir, &angles);
		angles.yaw = AngleMod360(angles.yaw +
			(Random() - Random()) * 45.0 / 8.0);
		AngleVector(&angles, &dir);
	}

	damage = 14;//7 * (P_Random() % 3 + 1);

	if (int_mod)
	{
		if(!active_damage)
		{
			damage = damage * Player(Player).strength / 10;
		}
		else // [FB] PI Damage
		{
			damage = (damage * Player(Player).intelligence / 10) * ftoi(3.1415);
		}
	}

	A.LineAttack(dir, MISSILERANGE, damage, DoomPuff);
}

/*__states__
{
	S_LIGHTDONE('FPCH', 0, 0.0 / 35.0, none) { A_Light0(); }
}*/

defaultproperties
{
}
