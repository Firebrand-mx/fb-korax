//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**	        ##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id: template.vc 508 2006-07-10 19:02:43Z firebrand_kh $
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class ScoreBoardScreen : Widget;

const int
	SHADE_LEFT		= 24,
	SHADE_TOP		= 40,
	SHADE_WIDTH		= 592,
	SHADE_HEIGHT		= 400,

	PORTRAIT_HEIGHT		= 25,

	TABLE_LEFT_X		= 48,
	TABLE_DATA_LEFT_X	= 96,
	TABLE_GEN_HEAD_Y	= 48,
	TABLE_HEAD_Y		= 88,
	TABLE_TOP_Y		= 122,
	TABLE_HEADER_MARGIN_TOP = 10,
	TABLE_HEADER_MARGIN_BOTTOM = 10,
	TABLE_STRING_DELTA	= 14,
	TABLE_ENTRY_DELTA	= 28,
	TABLE_COL2		= 240,
	TABLE_COL3		= 302,
	TABLE_COL4		= 386,
	TABLE_COL5		= 446,
	TABLE_COL6		= 494,
	TABLE_VALINDENT4	= 16,
	TABLE_VALINDENT5	= 12,
	TABLE_VALINDENT6	= 18;

ClientGameBase ClGame;

//int colourmark[HexenDefs::MAXPLAYERTEAMS];

//[CW] may be those should be put into some shared resources module
//string colournames[HexenDefs::MAXPLAYERTEAMS];
string gamemodenames[HexenDefs::NUMGAMES];
string playerclassnames[HexenDefs::NUMCLASSES];

int pic_portraits[8];
int pic_portraits_heights[8];


//==========================================================================
//
//  StartMap
//
//==========================================================================

void StartMap()
{
	//	initialise pics
	int i;
	picinfo_t info;

	for (i = 0; i < 8; i++)
	{
		pic_portraits[i] = R_RegisterPic(StrToName(va("icon0%d", i)));
		R_GetPicInfo(pic_portraits[i], &info);
		pic_portraits_heights[i] = info.height;
	}
}

//==========================================================================
//
//  OnDraw
//
//==========================================================================

void OnDraw()
{
	int j, y;
	int gamemode;
	string current_team;
	int current_team_idx;
	int current_player_inteam_idx;
	bool team_player_skipped;
	string tmp;
	KArenaPlayerReplicationInfo RepInfo;
	int pclass;
	// [FB] For calculating current time and time limit
	int timer;
	int c_hours;
	int c_minutes;
	int c_seconds;
/*	int l_hours;
	int l_minutes;*/

	SetFont('smallfont');
	ShadeRect(SHADE_LEFT, SHADE_TOP, SHADE_WIDTH, SHADE_HEIGHT, 0.6);

	// Game mode & settings
	gamemode = GetCvar('deathmatch');

	SetTextAlign(hleft, vtop);
	DrawText(TABLE_LEFT_X, TABLE_GEN_HEAD_Y, va("game mode:   %s", gamemodenames[gamemode]), CR_BRICK);

	// [FB] Calculate time from the WorldTimer
	timer = ftoi(ClGame.cl.WorldTimer);
	c_hours = timer / 3600;
	timer -= c_hours * 3600;
	c_minutes = timer / 60;
	timer -= c_minutes * 60;
	c_seconds = timer;
/*	l_hours = GetCvar('TimeLimit') / 3600;
	l_minutes = GetCvar('TimeLimit') / 60;*/
	if (GetCvar('ScoreLimit'))
	{
		DrawText(TABLE_LEFT_X, TABLE_GEN_HEAD_Y + 10, va("max. score:   %d",
				 GetCvar('ScoreLimit')), CR_BRICK);
	}
	if (GetCvar('TimeLimit'))
	{
		DrawText(TABLE_LEFT_X, TABLE_GEN_HEAD_Y + 20, va("time / time limit:   %d:%d:%d / %d:0",
				 c_hours, c_minutes, c_seconds, GetCvar('TimeLimit')), CR_BRICK);
	}

	/*--------------------------------------
		General Scoring Table
	--------------------------------------*/

	/* Table Head		*/
	DrawText(TABLE_LEFT_X, TABLE_HEAD_Y + TABLE_STRING_DELTA, "player", CR_BLUE);
	DrawText(TABLE_COL2, TABLE_HEAD_Y + TABLE_STRING_DELTA, "score", CR_GREEN);
	DrawText(TABLE_COL3, TABLE_HEAD_Y + TABLE_STRING_DELTA, "ctrl", CR_ORANGE);

	// Those are mode dependent
	DrawText(TABLE_COL4, TABLE_HEAD_Y + TABLE_STRING_DELTA, "frags", CR_RED);
	DrawText(TABLE_COL5, TABLE_HEAD_Y + TABLE_STRING_DELTA, "kills", CR_RED);
	DrawText(TABLE_COL6, TABLE_HEAD_Y + TABLE_STRING_DELTA, "deaths", CR_RED);

	y = TABLE_TOP_Y;
	
	//current_team = -1;
	current_team_idx = 0;
	current_player_inteam_idx = 0;

	while(current_team_idx < HexenDefs::MAXTEAMSINGAME)
	{
		RepInfo = none;
		team_player_skipped = false;

		foreach ClGame.GLevel.LevelInfo.AllThinkers(KArenaPlayerReplicationInfo, RepInfo)
		{
			if (RepInfo.teampos != current_team_idx ||
				RepInfo.playerpos < current_player_inteam_idx)
			{
				continue;
			}
			
			if (RepInfo.playerpos > current_player_inteam_idx)
			{
				team_player_skipped = true;
				continue;
			}
		
			// Insert team string if a new team encountered
			if (gamemode >= HexenDefs::NUMGAMESNOTEAM && strcmp(RepInfo.teamname, current_team))
			{
				if (current_team /* != -1*/)
				{
					y += TABLE_HEADER_MARGIN_TOP;
				}
				R_FillRect(SHADE_LEFT + 8, y - 2, SHADE_WIDTH - 16, 13, RepInfo.teamcolour);
				DrawText(TABLE_LEFT_X, y, va("%s team,   score:   %d", RepInfo.teamname,
						 Player(ClGame.cl).teamscores[current_team_idx]));
				y += TABLE_HEADER_MARGIN_BOTTOM;
				current_team = RepInfo.teamname;
			}

			// Mark current client with special background colour
/*			if (ClGame.cl.ClientNum == RepInfo.PlayerNum)
			{
				if (gamemode < HexenDefs::NUMGAMESNOTEAM)
				{
					R_FillRect(SHADE_LEFT + 8, y + 6, SHADE_WIDTH - 16, PORTRAIT_HEIGHT, RepInfo.translation);
						//colourmark[RepInfo.team]);
				}
			}*/

			pclass = RepInfo.plclass == HexenDefs::PCLASS_SPECTATOR ? RepInfo.bclass : RepInfo.plclass;

			// Player's class portrait
			DrawPic(TABLE_LEFT_X + 20, y + PORTRAIT_HEIGHT - ((PORTRAIT_HEIGHT - pic_portraits_heights[pclass]) >> 1),
					pic_portraits[pclass], , RepInfo.translation);
			y += 6;
			// Player's name
			DrawText(TABLE_DATA_LEFT_X, y, RepInfo.PlayerName, ClGame.cl.ClientNum == RepInfo.PlayerNum ? CR_YELLOW : RepInfo.teamfont/*GetTeamFontColour(RepInfo.teamcolour)*/);

			// Level + class
			switch (RepInfo.level)
			{
				case 1: tmp = "st"; break;
				case 2: tmp = "nd"; break;
				case 3: tmp = "rd"; break;
				default: tmp = "th";
			}
			DrawText(TABLE_DATA_LEFT_X, y + TABLE_STRING_DELTA, va("%d%s %s",
					 RepInfo.level, tmp, playerclassnames[pclass]), ClGame.cl.ClientNum == RepInfo.PlayerNum ? CR_YELLOW : GetClassFontColour(pclass));

			y += TABLE_STRING_DELTA >> 1;

			// Player's score
			DrawText(TABLE_COL2, y, va("%d", RepInfo.score), GetClassFontColour(RepInfo.teamcolour), ClGame.cl.ClientNum == RepInfo.PlayerNum ? CR_YELLOW : CR_UNTRANSLATED);

			// Player is human/cpu
			if (RepInfo.IsBot)
			{
				DrawText(TABLE_COL3, y, "bot", ClGame.cl.ClientNum == RepInfo.PlayerNum ? CR_YELLOW : CR_ORANGE);
			}
			else
			{
				DrawText(TABLE_COL3, y, "hum", ClGame.cl.ClientNum == RepInfo.PlayerNum ? CR_YELLOW : CR_ORANGE);
			}

			// Those are mode dependent
			DrawText(TABLE_COL4 + TABLE_VALINDENT4, y, va("%d", RepInfo.Frags), ClGame.cl.ClientNum == RepInfo.PlayerNum ? CR_YELLOW : CR_UNTRANSLATED);
			DrawText(TABLE_COL5 + TABLE_VALINDENT5, y, va("%d", RepInfo.KillCount), ClGame.cl.ClientNum == RepInfo.PlayerNum ? CR_YELLOW : CR_UNTRANSLATED);
			DrawText(TABLE_COL6 + TABLE_VALINDENT6, y, va("%d", RepInfo.deaths), ClGame.cl.ClientNum == RepInfo.PlayerNum ? CR_YELLOW : CR_UNTRANSLATED);

			y += TABLE_ENTRY_DELTA - (TABLE_STRING_DELTA >> 1);
			current_player_inteam_idx++;
		}

		if (!team_player_skipped)
		{
			current_team_idx++;
			current_player_inteam_idx = 0;
		}
	}
}

/* //==========================================================================
//
//  GetTeamFontColour
//
//==========================================================================

int GetTeamFontColour(int teamcolour)
{
	switch(teamcolour)
	{
		case 0:
			return CR_BLUE;
			break;
		case 1:
			return CR_RED;
			break;
		case 2:
			return CR_GOLD;
			break;
		case 3:
			return CR_GREEN;
			break;
		case 4:
			return CR_DARKGREEN;
			break;
		case 5:
			return CR_DARKGRAY;
			break;
		case 6:
			return CR_DARKBROWN;
			break;
		case 7:
			return CR_PURPLE;
			break;
		default:
			return CR_UNTRANSLATED;
			break;
	}
}*/

//==========================================================================
//
//  GetClassFontColour
//
//==========================================================================

int GetClassFontColour(int cls)
{
	switch(cls)
	{
		case 0:
			return CR_GREEN;
			break;
		case 1:
			return CR_BLUE;
			break;
		case 2:
			return CR_RED;
			break;
		case 3:
			return CR_DARKGREEN;
			break;
		case 4:
			return CR_GRAY;
			break;
		case 5:
			return CR_TAN;
			break;
		case 6:
			return CR_BROWN;
			break;
		case 7:
			return CR_PURPLE;
			break;
		default:
			return CR_UNTRANSLATED;
			break;
	}
}

defaultproperties
{
	Focusable = true;
	Width = 640;
	Height = 480;

	/* colourmark[0] = 0xff0000aa;
	colourmark[1] = 0xffaa0000;
	colourmark[2] = 0xffaaaa00;
	colourmark[3] = 0xff55aa00;
	colourmark[4] = 0xff008800;
	colourmark[5] = 0xff888888;
	colourmark[6] = 0xff884400;
	colourmark[7] = 0xff880088;

	colournames[0] = "blue";
	colournames[1] = "red";
	colournames[2] = "gold";
	colournames[3] = "lime";
	colournames[4] = "green";
	colournames[5] = "gray";
	colournames[6] = "brown";
	colournames[7] = "magenta";*/

	gamemodenames[HexenDefs::game_unused] = "unused game mode";
	gamemodenames[HexenDefs::game_dm] = "deathmatch";
	gamemodenames[HexenDefs::game_dmteam] = "team deathmatch";
	gamemodenames[HexenDefs::game_kth] = "kill the heresiarch";
	gamemodenames[HexenDefs::game_sweep] = "castle sweep";
	gamemodenames[HexenDefs::game_sweepteam] = "team castle sweep";
	gamemodenames[HexenDefs::game_survival] = "survival";
	gamemodenames[HexenDefs::game_ctf] = "capture the flag";
	gamemodenames[HexenDefs::game_domination] = "domination";
	gamemodenames[HexenDefs::game_football] = "football";
	gamemodenames[HexenDefs::game_xmas] = "castle sweep";

	playerclassnames[0] = "fighter";
	playerclassnames[1] = "cleric";
	playerclassnames[2] = "mage";
	playerclassnames[3] = "heretic";
	playerclassnames[4] = "marine";
	playerclassnames[5] = "hero";
	playerclassnames[6] = "pig";
	playerclassnames[7] = "heresiarch";
}
