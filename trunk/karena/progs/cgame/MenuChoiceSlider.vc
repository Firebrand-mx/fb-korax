//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class MenuChoiceSlider : MenuChoice;

string Text;

float Value;
float ValueDelta;
float MinValue;
float MaxValue;

int pic_M_SLDLT;
int pic_M_SLDMD1;
int pic_M_SLDMD2;
int pic_M_SLDRT;
int pic_M_SLDKB;

float GetInitialValue(void)
{
	return 0.0;
}

bool SetNewValue(float newValue)
{
	return true;
}

void InitWindow()
{
	::InitWindow();

	Value = GetInitialValue();
	if (Value < MinValue)
		Value = MinValue;
	if (Value > MaxValue)
		Value = MaxValue;

	pic_M_SLDLT = R_RegisterPic('m_sldlt', PIC_PATCH);
	pic_M_SLDMD1 = R_RegisterPic('m_sldmd1', PIC_PATCH);
	pic_M_SLDMD2 = R_RegisterPic('m_sldmd2', PIC_PATCH);
	pic_M_SLDRT = R_RegisterPic('m_sldrt', PIC_PATCH);
	pic_M_SLDKB = R_RegisterPic('m_sldkb', PIC_PATCH);
}

void DrawWindow(GC gc)
{
	int i;
	int xx;

	T_SetFont(font_small);
	if (bSelected)
	{
		T_SetFont(font_yellow);
	}
	T_SetAlign(hright, vtop);
	gc.DrawText(0, 0, Text);

	xx = 0;
	gc.DrawIcon(xx, 0, pic_M_SLDLT);
	xx += 32;
	for (i = 0; i < 12; i++)
	{
		gc.DrawIcon(xx, 0, i & 1 ? pic_M_SLDMD1 : pic_M_SLDMD2);
		xx += 8;
	}
	gc.DrawIcon(xx, 0, pic_M_SLDRT);
	xx = 30 + ftoi((Value - MinValue) * 100.0 / (MaxValue - MinValue));
	gc.DrawIcon(xx, 7, pic_M_SLDKB);
}

bool Key(int key)
{
	float newValue;

	switch (key)
	{
	case K_LEFTARROW:
		newValue = Value - ValueDelta;
		if (newValue < MinValue)
		{
			newValue = MinValue;
		}
		if (SetNewValue(newValue))
		{
			Value = newValue;
			LocalSound('menu/change');
		}
		return true;

	case K_RIGHTARROW:
		newValue = Value + ValueDelta;
		if (newValue > MaxValue)
		{
			newValue = MaxValue;
		}
		if (SetNewValue(newValue))
		{
			Value = newValue;
			LocalSound('menu/change');
		}
		return true;
	}
	return ::Key(key);
}

defaultproperties
{
	Height = 20;
	Value = 0.0;
	ValueDelta = 1.0;
	MinValue = 0.0;
	MaxValue = 1.0;
}

//**************************************************************************
//
//  $Log$
//  Revision 1.3  2006/04/09 10:42:56  dj_jl
//  For some builtins changed string arguments to names.
//
//  Revision 1.2  2005/11/19 15:23:21  dj_jl
//  Renamed sounds.
//
//  Revision 1.1  2004/11/16 13:33:19  dj_jl
//  Initial import.
//
//  Revision 1.1  2002/10/26 16:32:24  dj_jl
//  New style of defining classes.
//
//**************************************************************************
