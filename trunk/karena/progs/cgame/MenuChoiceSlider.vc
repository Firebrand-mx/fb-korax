//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**		##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id$
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class MenuChoiceSlider : MenuChoice;

string Text;

float Value;
float ValueDelta;
float MinValue;
float MaxValue;

int pic_M_SLDLT;
int pic_M_SLDMD1;
int pic_M_SLDMD2;
int pic_M_SLDRT;
int pic_M_SLDKB;

delegate bool ValueChanging(Object Sender, float NewValue);

//==========================================================================
//
//  SetOrigin
//
//==========================================================================

void SetOrigin(int x, int y)
{
	SetPos(x - 160, y);
}

float GetInitialValue()
{
	return 0.0;
}

bool SetNewValue(float NewValue)
{
	if (ValueChanging)
	{
		return ValueChanging(self, NewValue);
	}
	return true;
}

void SetInitialValue(float AValue)
{
	Value = AValue;
	if (Value < MinValue)
		Value = MinValue;
	if (Value > MaxValue)
		Value = MaxValue;
}

void OnCreate()
{
	::OnCreate();

	SetInitialValue(GetInitialValue());

	pic_M_SLDLT = R_RegisterPic('m_sldlt');
	pic_M_SLDMD1 = R_RegisterPic('m_sldmd1');
	pic_M_SLDMD2 = R_RegisterPic('m_sldmd2');
	pic_M_SLDRT = R_RegisterPic('m_sldrt');
	pic_M_SLDKB = R_RegisterPic('m_sldkb');
}

void OnDraw()
{
	int i;
	int xx;

	SetFont(font_small);
	if (IsFocus())
	{
		SetFont(font_yellow);
	}
	SetTextAlign(hright, vtop);
	DrawText(160, 0, Text);

	xx = 160;
	DrawPic(xx, 0, pic_M_SLDLT);
	xx += 32;
	for (i = 0; i < 12; i++)
	{
		DrawPic(xx, 0, i & 1 ? pic_M_SLDMD1 : pic_M_SLDMD2);
		xx += 8;
	}
	DrawPic(xx, 0, pic_M_SLDRT);
	xx = 160 + 30 + ftoi((Value - MinValue) * 100.0 / (MaxValue - MinValue));
	DrawPic(xx, 7, pic_M_SLDKB);
}

bool OnKeyDown(int key)
{
	float newValue;

	switch (key)
	{
	case K_LEFTARROW:
		newValue = Value - ValueDelta;
		if (newValue < MinValue)
		{
			newValue = MinValue;
		}
		if (SetNewValue(newValue))
		{
			Value = newValue;
			LocalSound('menu/change');
		}
		return true;

	case K_RIGHTARROW:
		newValue = Value + ValueDelta;
		if (newValue > MaxValue)
		{
			newValue = MaxValue;
		}
		if (SetNewValue(newValue))
		{
			Value = newValue;
			LocalSound('menu/change');
		}
		return true;
	}
	return ::OnKeyDown(key);
}

defaultproperties
{
	Height = 20;
	CursorXOffs = 160;
	Value = 0.0;
	ValueDelta = 1.0;
	MinValue = 0.0;
	MaxValue = 1.0;
}
