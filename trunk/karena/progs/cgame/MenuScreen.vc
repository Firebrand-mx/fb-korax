//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class MenuScreen : MenuObject;

const int MAX_MENU_ITEMS		= 32;

ClientGame ClGame;

MenuObject Items[MAX_MENU_ITEMS];
int NumItems;
int CursorPos;
int CursorPrev;

classid Choices[MAX_MENU_ITEMS];
int ChoicesStartX;
int ChoicesStartY;

classid SelectorType;
MenuObject Selector;

string Title;
int TitleX;
int TitleY;

void ChildAdded(Window Child)
{
	if (MenuObject(Child))
	{
		if (NumItems >= MAX_MENU_ITEMS)
		{
			FatalError("Too many menu items");
		}
		Items[NumItems++] = MenuObject(Child);
	}
	::ChildAdded(Child);
}

void CreateTitle()
{
	MenuTitleText newTitle;

	if (Title)
	{
		newTitle = MenuTitleText(NewChild(MenuTitleText));
		newTitle.SetPos(TitleX, TitleY);
		newTitle.Text = Title;
	}
}

void CreateChoices()
{
	MenuChoice newChoice;
	int currentY;
	int i;

	currentY = ChoicesStartY;
	for (i = 0; i < MAX_MENU_ITEMS; i++)
	{
		if (Choices[i])
		{
			newChoice = MenuChoice(NewChild(Choices[i]));
			newChoice.SetPos(ChoicesStartX, currentY);
			currentY += newChoice.Height;
		}
	}
}

void CreateSelector()
{
	if (SelectorType)
	{
		Selector = MenuObject(NewChild(SelectorType));
	}
}

void CursorMoved()
{
	if (CursorPrev == CursorPos)
		return;

	if (CursorPrev >= 0 && CursorPrev < NumItems)
	{
		Items[CursorPrev].FocusLost();
		Items[CursorPrev].bSelected = false;
	}

	if (CursorPos >= 0 && CursorPos < NumItems)
	{
		Items[CursorPos].FocusReceived();
		Items[CursorPos].bSelected = true;
	}

	if (Selector)
	{
		Selector.SetPos(Items[CursorPos].X, Items[CursorPos].Y);
	}
}

void SetDefaultChoice()
{
	int i;

	// default cursor position
	CursorPos = 0;
	CursorPrev = 0;

	// force first available item to have focus
	for (i = 0; i < NumItems; i++)
	{
		if (Items[i].IsSensitive())
		{
			CursorPrev = -1;
			CursorPos = i;
			CursorMoved();
			break;
		}
	}
}

void InitWindow()
{
	::InitWindow();
	CreateTitle();
	CreateChoices();
	CreateSelector();
	SetDefaultChoice();
}

void CyclePrevChoice()
{
	CursorPrev = CursorPos;
	do
	{
		if (!CursorPos)
			CursorPos = NumItems - 1;
		else
			CursorPos--;
	}
	while (!Items[CursorPos].IsSensitive() && CursorPrev != CursorPos);
	CursorMoved();
}

void CycleNextChoice()
{
	CursorPrev = CursorPos;
	do
	{
		if (CursorPos == NumItems - 1)
			CursorPos = 0;
		else
			CursorPos++;
	}
	while (!Items[CursorPos].IsSensitive() && CursorPrev != CursorPos);
	CursorMoved();
}

bool Key(int key)
{
	if (Items[CursorPos].Key(key))
	{
		return true;
	}

	switch (key)
	{
	case K_DOWNARROW:
		CycleNextChoice();
		LocalSound('menu/cursor');
		return true;

	case K_UPARROW:
		CyclePrevChoice();
		LocalSound('menu/cursor');
		return true;

	case K_ESCAPE:
	case K_MOUSE2:
		ClGame.PopMenu();
		return true;
	}

	return false;
}

//==========================================================================
//
//	DrawWindow
//
//  Fade all the screen buffer, so that the menu is more readable,
// especially now that we use the small hufont in the menus...
//
//==========================================================================

void DrawWindow(GC gc)
{
	R_ShadeRect(0, 0, 320, 200, GetCvar('menu_darkening'));
}

defaultproperties
{
	TitleX = 160;
	TitleY = 24;
}
