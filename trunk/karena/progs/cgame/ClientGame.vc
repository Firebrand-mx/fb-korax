//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ######  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**		##    ######    ##### ###   ##    ##
//**	      ##  ##  ##   ##  #####  ####  ##  ##  ##
//**	     ##    ## ##   ## ##      ##### ## ##    ##
//**	     ######## #####   #####   ## ##### ########
//**	     ##    ## ######  ##      ##  #### ##    ##
//**	     ##    ## ##  ###  #####  ##   ### ##    ##
//**
//**    $Id$
//**
//**    Copyright (C) 2004-2006 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class ClientGame : ClientGameBaseEx;

enum
{
	MB_None,
	MB_Control,
	MB_Quit,
	MB_EndGame
};

const int MAX_MENU_STACK		= 32;

TitleScreen			GTitle;
StatusBarScreen		GSBar;
ScoreBoardScreen	GScBoard;	// [CW]
IntermissionScreen	GImission;
FinaleScreen		GFinale;

MenuScreenTeamSelect	TeamSelectScreen;	//[CW]

LocalSoundQueue		Announcer;		// [CW]

MenuScreen menu_stack[MAX_MENU_STACK];
int menu_sp;

MenuScreen CurrentMenuScreen;

MenuControlKey CurrentCtl;
int ControlColumn;	// menu column for controls

int MenuPClass;
name MenuStartMap;
class<MenuScreen> SkillMenuType;

//
//  MESSAGE BOX
//
bool messageToPrint;
int msgBoxX;
int msgBoxY;
int msgBoxW;
int msgBoxH;
string messageString;	// ...and here is the message string!
bool messageNeedsInput;	// timed message = no input from user
int messageType;

int pic_bordt;
int pic_bordb;
int pic_bordl;
int pic_bordr;
int pic_bordtl;
int pic_bordtr;
int pic_bordbl;
int pic_bordbr;

bool IsInGame;

//==========================================================================
//
//  RootWindowCreated
//
//==========================================================================

void RootWindowCreated()
{
	//[CW]
	CreateCvar('BodyQueSize', "32", CVAR_ARCHIVE);
	CreateCvar('CorpseQueSize', "64", CVAR_ARCHIVE);
	CreateCvar('BotsAutoSpawn', "0", CVAR_ARCHIVE);
	CreateCvar('TargetNameHint', "1", CVAR_ARCHIVE | CVAR_USERINFO);

	GTitle = TitleScreen(GRoot.NewChild(TitleScreen));
	GSBar = StatusBarScreen(GRoot.NewChild(StatusBarScreen));
	GScBoard = ScoreBoardScreen(GRoot.NewChild(ScoreBoardScreen));		// [CW]
	GImission = IntermissionScreen(GRoot.NewChild(IntermissionScreen));
	GFinale = FinaleScreen(GRoot.NewChild(FinaleScreen));
	Announcer = LocalSoundQueue(SpawnObject(LocalSoundQueue));
	GTitle.ClGame = self;
	GSBar.ClGame = self;
	GSBar.Hide();

	/* scoreboard by [CW]	*/
	GScBoard.ClGame = self;
	GScBoard.Hide();

	GImission.ClGame = self;
	GImission.Hide();
	GFinale.ClGame = self;
	GFinale.Hide();
}

//==========================================================================
//
//  Connected
//
//==========================================================================

void Connected()
{
	GTitle.Hide();
	GTitle.StopDemoLoop();
	GSBar.Show();
	GImission.Hide();
	GFinale.Hide();

	IsInGame = true;
}

//==========================================================================
//
//  Disconnected
//
//==========================================================================

void Disconnected()
{
	GTitle.Show();
	GSBar.Hide();
	GScBoard.Hide();	// [CW]
	GImission.Hide();
	GFinale.Hide();

	IsInGame = false;
}

//==========================================================================
//
//  DemoPlaybackStarted
//
//==========================================================================

void DemoPlaybackStarted()
{
	GTitle.Hide();
	GSBar.Show();
	GImission.Hide();
	GFinale.Hide();
}

//==========================================================================
//
//  DemoPlaybackStopped
//
//==========================================================================

void DemoPlaybackStopped()
{
	GTitle.Show();
	GSBar.Hide();
	GScBoard.Hide();	// [CW]
	GImission.Hide();
	GFinale.Hide();
}

//==========================================================================
//
//  OnHostEndGame
//
//==========================================================================

void OnHostEndGame()
{
	GTitle.OnHostEndGame();
}

//==========================================================================
//
//  OnHostError
//
//==========================================================================

void OnHostError()
{
	GTitle.OnHostError();
}

//==========================================================================
//
//  StatusBarStartMap
//
//==========================================================================

void StatusBarStartMap()
{
	GSBar.cl = Player(cl);
	GSBar.Show();
	GSBar.StartMap();
	GScBoard.StartMap();	// [CW]
	GImission.Hide();
	GFinale.Hide();
}

//==========================================================================
//
//  StatusBarDrawer
//
//==========================================================================

void StatusBarDrawer(int sb_view)
{
	GSBar.SB_Drawer(sb_view);
}

//==========================================================================
//
//  StatusBarUpdateWidgets
//
//==========================================================================

void StatusBarUpdateWidgets()
{
	GSBar.SB_UpdateWidgets();

	if (Announcer)
		Announcer.Continue(time - oldtime);
}

//==========================================================================
//
//  IintermissionStart
//
//==========================================================================

void IintermissionStart()
{
	GSBar.Hide();
	GScBoard.Hide();	// [CW]
	GImission.Show();
	GImission.Start();
	GFinale.Hide();
}

//==========================================================================
//
//  StartFinale
//
//==========================================================================

void StartFinale(name FinaleType)
{
	GSBar.Hide();
	GScBoard.Hide();	// [CW]
	GImission.Hide();
	GFinale.Show();
	GFinale.StartFinale(FinaleType);
}

//===========================================================================
//
//  FinaleResponder
//
//===========================================================================

bool FinaleResponder(event_t * event)
{
	return false;
}

//==========================================================================
//
//  DeactivateMenu
//
//==========================================================================

void DeactivateMenu()
{
	ForceMenuOff();
}

//==========================================================================
//
//  MenuResponder
//
//==========================================================================

bool MenuResponder(event_t * event)
{
	if (!CurrentMenuScreen)
	{
		// Pop-up menu?
		if (event->type == ev_keydown && event->data1 == K_ESCAPE)
		{
			//PushMenuScreen(SpawnMenu(MenuScreenMain));
			SpawnMainMenu();
			return true;
		}
		return false;
	}

	if (event->type != ev_keydown)
	{
		return false;
	}
	return CurrentMenuScreen.Key(event->data1);
}

//==========================================================================
//
//  MenuActive
//
//==========================================================================

bool MenuActive()
{
	return CurrentMenuScreen != none;
}

//==========================================================================
//
//	SetMenu
//
//==========================================================================

void SetMenu(string Name)
{
	if (!stricmp(Name, "Main"))
	{
		//PushMenuScreen(SpawnMenu(MenuScreenMain));
		SpawnMainMenu();
		return;
	}
	/*if (!stricmp(Name, "Save"))
	{
		PushMenuScreen(SpawnMenu(MenuScreenSaveGame));
		return;
	}
	if (!stricmp(Name, "Load"))
	{
		PushMenuScreen(SpawnMenu(MenuScreenLoadGame));
		return;
	}*/
	if (!stricmp(Name, "PSetup"))
	{
		PushMenuScreen(SpawnMenu(MenuScreenPlayerSetup));
		return;
	}
	if (!stricmp(Name, "Options"))
	{
		PushMenuScreen(SpawnMenu(MenuScreenOptions));
		return;
	}
	if (!stricmp(Name, "Controls"))
	{
		PushMenuScreen(SpawnMenu(MenuScreenControls));
		return;
	}
	if (!stricmp(Name, "Controls2"))
	{
		PushMenuScreen(SpawnMenu(MenuScreenControls2));
		return;
	}
	if (!stricmp(Name, "Mouse"))
	{
		PushMenuScreen(SpawnMenu(MenuScreenMouseOptions));
		return;
	}
	if (!stricmp(Name, "Resolution"))
	{
		PushMenuScreen(SpawnMenu(MenuScreenScreenResolution));
		return;
	}
	if (!stricmp(Name, "Video"))
	{
		PushMenuScreen(SpawnMenu(MenuScreenVideoOptions));
		return;
	}
	if (!stricmp(Name, "Sound"))
	{
		PushMenuScreen(SpawnMenu(MenuScreenSoundOptions));
		return;
	}
	if (!stricmp(Name, "Help"))
	{
		PushMenuScreen(SpawnMenu(MenuScreenHelp));
		return;
	}
	if (!stricmp(Name, "Quit"))
	{
		menu_quit();
		return;
	}
	//PushMenuScreen(SpawnMenu(MenuScreenMain));
	SpawnMainMenu();
}

//==========================================================================
//
//  SpawnMenu
//
//==========================================================================

MenuScreen SpawnMenu(class<MenuScreen> CID)
{
	MenuScreen m;

	m = MenuScreen(GRoot.NewChild(CID));
	m.ClGame = self;
	return m;
}

//==========================================================================
//
//	SpawnMainMenu
//
//	[CW]
//
//==========================================================================

void SpawnMainMenu()
{
	MenuScreenMain mm = MenuScreenMain(SpawnMenu(MenuScreenMain));
	mm.InitWindow();
	PushMenuScreen(mm);
}

//**************************************************************************
//**
//**    Menu stack handling
//**
//**************************************************************************

//==========================================================================
//
//  PushMenuScreen
//
//==========================================================================

void PushMenuScreen(MenuScreen menu)
{
	int i;

	// avoid stacking menus invoked by hotkeys
	for (i = 0; i < menu_sp; i++)
	{
		if (menu_stack[i].Class == menu.Class)
		{
			int j;

			for (j = i; j < menu_sp; j++)
			{
				menu_stack[j].Destroy();
			}
			menu_sp = i;
			CurrentMenuScreen = none;
			break;
		}
	}

	if (menu_sp >= MAX_MENU_STACK)
		FatalError("PushMenu: menu stack overflow");

	menu_stack[menu_sp++] = menu;

	if (!CurrentMenuScreen)
	{
/*		if (cl.paused)
		{
			S_ResumeSound();
		}
		C_ClearNotify();*/
		CmdBuf_AddText("HideConsole\n");
		LocalSound('menu/activate');
	}
	else
	{
		CurrentMenuScreen.Hide();
	}

	CurrentMenuScreen = menu;
}

//==========================================================================
//
//  PopMenu
//
//==========================================================================

void PopMenu()
{
	menu_sp--;

	if (menu_sp < 0)
		FatalError("PopMenu: menu stack underflow");

	//[CW]
	if (CurrentMenuScreen == TeamSelectScreen)
		TeamSelectScreen.OnCancel();

	menu_stack[menu_sp].Destroy();
	if (menu_sp)
	{
		CurrentMenuScreen = menu_stack[menu_sp - 1];
		CurrentMenuScreen.Show();
		CurrentMenuScreen.Raise();
		LocalSound('menu/backup');
	}
	else
	{
		CurrentMenuScreen = none;
		LocalSound('menu/clear');
	}
}

//==========================================================================
//
//  ForceMenuOff
//
//==========================================================================

void ForceMenuOff()
{
	int i;

	//[CW]
	if (TeamSelectScreen && CurrentMenuScreen == TeamSelectScreen)
		TeamSelectScreen.OnCancel();

	for (i = 0; i < menu_sp; i++)
	{
		menu_stack[i].Destroy();
	}
	menu_sp = 0;
	CurrentMenuScreen = none;
}

//==========================================================================
//
//  MessageBoxStartMessage
//
//==========================================================================

void MessageBoxStartMessage(string text, int type, bool input)
{
	messageToPrint = true;
	messageString = text;
	messageType = type;
	messageNeedsInput = input;

	T_SetFont(font_small);
	msgBoxW = (T_TextWidth(messageString) + 16) & ~15;
	msgBoxH = (T_TextHeight(messageString) + 16) & ~15;
	if (msgBoxW > 304)
		msgBoxW = 304;
	if (msgBoxH > 184)
		msgBoxH = 184;
	msgBoxX = (640 - msgBoxW) / 2;
	msgBoxY = (480 - msgBoxH) / 2;

	CmdBuf_AddText("HideConsole\n");
}

//==========================================================================
//
//  MessageBoxDrawer
//
//==========================================================================

void MessageBoxDrawer()
{
	// Horiz. & Vertically centre string and print it.
	if (messageToPrint)
	{
		R_FillRectWithFlat(msgBoxX, msgBoxY, msgBoxW, msgBoxH, 'f_019');
		DrawBorder(msgBoxX, msgBoxY, msgBoxW, msgBoxH);
		T_SetFont(font_small);
		T_SetAlign(hcentre, vcentre);
		T_DrawText(320, 240, messageString);
	}
}

//==========================================================================
//
//  MessageBoxResponder
//
//==========================================================================

bool MessageBoxResponder(event_t * event)
{
	// Take care of any messages that need input
	if (messageToPrint && event->type == ev_keydown)
	{
		if (messageNeedsInput &&
			event->data1 != K_SPACE &&
			event->data1 != K_n &&
			event->data1 != K_y &&
			event->data1 != K_ESCAPE &&
			event->data1 != K_MOUSE1 && event->data1 != K_MOUSE2)
		{
			return true;
		}

		messageToPrint = false;
		switch (messageType)
		{
		case MB_None:
			break;
		case MB_Control:
			ControlResponse(event->data1);
			break;
		case MB_Quit:
		case MB_EndGame:
			QuitResponse(messageType, event->data1);
			break;
			break;
		}

//      S_StartSound(sfx1_swtchx);
		return true;
	}
	return false;
}

//==========================================================================
//
//  MessageBoxActive
//
//==========================================================================

bool MessageBoxActive()
{
	return messageToPrint;
}

//==========================================================================
//
//  menu_quit
//
//==========================================================================

void menu_quit()
{
	LocalSound('Chat');
	MessageBoxStartMessage("ARE YOU SURE YOU WANT TO QUIT?", MB_Quit, true);
}

//==========================================================================
//
//  QuitResponse
//
//==========================================================================

void QuitResponse(int type, int ch)
{
	if (ch != K_y)
		return;

	switch (type)
	{
	case MB_Quit:
		CmdBuf_AddText("Quit\n");
		break;
	case MB_EndGame:
		CmdBuf_AddText("Disconnect\n");
		break;
	};
}

//==========================================================================
//
//  ControlResponse
//
//==========================================================================

void ControlResponse(int key)
{
	string kb_down;
	string kb_up;
	int key1;
	int key2;

	if (key != K_ESCAPE)
	{
		kb_down = CurrentCtl.CommandOn;
		kb_up = CurrentCtl.CommandOff;
		IN_GetBindingKeys(kb_down, &key1, &key2);
		if (ControlColumn == 0)
		{
			IN_SetBinding(key1, "", "");
			IN_SetBinding(key, kb_down, kb_up);
		}
		if (ControlColumn == 1)
		{
			IN_SetBinding(key2, "", "");
			IN_SetBinding(key, kb_down, kb_up);
		}
	}
}

//==========================================================================
//
//  NewGame
//
//==========================================================================

void NewGame(int SkillLevel)
{
	SetCvar('Skill', SkillLevel);
	SetCvar('Class', MenuPClass);

	CmdBuf_AddText("Disconnect\n");
	CmdBuf_AddText("MaxPlayers 1\n");
	CmdBuf_AddText("Map %n\n", MenuStartMap);

	ForceMenuOff();
}

//==========================================================================
//
//  InitBorder
//
//==========================================================================

void InitBorder()
{
	pic_bordt = R_RegisterPic('bordt');
	pic_bordb = R_RegisterPic('bordb');
	pic_bordl = R_RegisterPic('bordl');
	pic_bordr = R_RegisterPic('bordr');
	pic_bordtl = R_RegisterPic('bordtl');
	pic_bordtr = R_RegisterPic('bordtr');
	pic_bordbl = R_RegisterPic('bordbl');
	pic_bordbr = R_RegisterPic('bordbr');
}

//==========================================================================
//
//  DrawBorder
//
//  Draws border
//
//==========================================================================

void DrawBorder(int x, int y, int w, int h)
{
	int i;

	if (!pic_bordb)
	{
		InitBorder();
	}

	for (i = 0; i < w; i += 16)
		R_DrawPic(x + i, y - 4, pic_bordt);

	for (i = 0; i < w; i += 16)
		R_DrawPic(x + i, y + h, pic_bordb);

	for (i = 0; i < h; i += 16)
		R_DrawPic(x - 4, y + i, pic_bordl);

	for (i = 0; i < h; i += 16)
		R_DrawPic(x + w, y + i, pic_bordr);

	// Draw beveled edge.
	R_DrawPic(x - 4, y - 4, pic_bordtl);
	R_DrawPic(x + w, y - 4, pic_bordtr);
	R_DrawPic(x - 4, y + h, pic_bordbl);
	R_DrawPic(x + w, y + h, pic_bordbr);
}

//==========================================================================
//
//  DrawViewBorder
//
//==========================================================================

void DrawViewBorder(int x, int y, int w, int h)
{
	R_FillRectWithFlat(0, 0, 640, 480/* - 39*/, 'f_022');
	DrawBorder(x, y, w, h);
}

//==========================================================================
//
//  TeamSelect
//
//==========================================================================

void TeamSelect(int maxTeams, int activeTeams, int curSelection,
	int Col1, int Col2, int Col3, int Col4)
{
	bool created;
	created = false;

	if (TeamSelectScreen == none)
	{
		TeamSelectScreen = MenuScreenTeamSelect(SpawnMenu(MenuScreenTeamSelect));
		created = true;
	}
	TeamSelectScreen.maxTeams = maxTeams;
	TeamSelectScreen.activeTeams = activeTeams;

	TeamSelectScreen.Teams[0] = Col1;
	TeamSelectScreen.Teams[1] = Col2;
	TeamSelectScreen.Teams[2] = Col3;
	TeamSelectScreen.Teams[3] = Col4;

	if (created)
	{
		TeamSelectScreen.curSelection = curSelection;
		TeamSelectScreen.Ready = true;
		TeamSelectScreen.CreateChoices();
		PushMenuScreen(TeamSelectScreen);
	}
	else
		TeamSelectScreen.ReInit();
}

//==========================================================================
//
//  PlayAnouncerSound
//
//==========================================================================

void PlayAnouncerSound(int sound, bool put_in_queue, float delay)
{
	name sndName;

	switch(sound)
	{
	case HexenDefs::lsid_kth_an_awaiting: sndName = 'KTH_AwaitingForHeresiarch'; break;
	case HexenDefs::lsid_kth_an_ishere: sndName = 'KTH_HeresiarchIsHere'; break;
	case HexenDefs::lsid_kth_an_hasreborn: sndName = 'KTH_HeresiarchIsReborn'; break;
	case HexenDefs::lsid_kth_an_isdown: sndName = 'KTH_HeresiarchIsDown'; break;
	case HexenDefs::lsid_kth_mus_death: sndName = 'KTH_HeresiarchMusDeath'; break;
	case HexenDefs::lsid_kth_mus_birth: sndName = 'KTH_HeresiarchMusBirth'; break;

	default: sndName = 'misc/chat'; break;
	}

	if (put_in_queue && Announcer)
		Announcer.QueueSound(sndName, delay);
	else
	{
		LocalSound(sndName);
	}
}

//==========================================================================
//
//  ShowScoreBoard
//
//==========================================================================

void ShowScoreBoard(bool Show)
{
	if (Show)
		GScBoard.Show();
	else
		GScBoard.Hide();
}

//==========================================================================
//
//  UpdateParticle
//
//==========================================================================

void UpdateParticle(particle_t * p, float DeltaTime)
{
	float time1, time2, time3;
	float dvel;
	float grav;
	int c;
	
	time1 = DeltaTime * 5.0;
	time2 = DeltaTime * 10.0;	// 15;
	time3 = DeltaTime * 15.0;

	dvel = DeltaTime * 4.0;
	grav = DeltaTime * 1.0 * 0.05; //frametime * sv_gravity.value * 0.05;

	switch (p->type)
	{
	case HexenDefs::pt_static:
		break;

	case HexenDefs::pt_explode:
		p->ramp += time2;
		if (p->ramp >= 16.0)
			p->die = -1.0;
		else
			p->colour = HexenDefs.default.ramp1[ftoi(p->ramp)];
		p->vel.x += p->vel.x * dvel;
		p->vel.y += p->vel.y * dvel;
		p->vel.z += p->vel.z * dvel;
		p->vel.z -= grav;
		break;

	case HexenDefs::pt_explode2:
		p->ramp += time3;
		if (p->ramp >= 16.0)
			p->die = -1.0;
		else
			p->colour = HexenDefs.default.ramp2[ftoi(p->ramp)];
		p->vel.x -= p->vel.x * DeltaTime;
		p->vel.y -= p->vel.y * DeltaTime;
		p->vel.z -= p->vel.z * DeltaTime;
		p->vel.z -= grav;
		break;

	case HexenDefs::pt_chunks:
		p->ramp += time1;
		if (p->ramp >= 16.0)
			p->die = -1.0;
		else
		c = P_Random() >> 1; 
		p->colour = RGB(c, c, c);
		p->vel.x += p->vel.x * dvel / 2.0;
		p->vel.y += p->vel.y * dvel / 2.0;
		p->vel.z += p->vel.z * dvel / 2.0;
		p->vel.z -= grav;
		break;

	case HexenDefs::pt_chunks2:
		p->ramp += time2;
		if (p->ramp >= 16.0)
			p->die = -1.0;
		else
		c = P_Random() >> 1;
		p->colour = RGB(c, c, c);
		p->vel.x -= p->vel.x * DeltaTime / 2.0;
		p->vel.y -= p->vel.y * DeltaTime / 2.0;
		p->vel.z -= p->vel.z * DeltaTime / 2.0;
		p->vel.z -= grav;
		break;
	}
}

defaultproperties
{
	sb_height = 39;
}
