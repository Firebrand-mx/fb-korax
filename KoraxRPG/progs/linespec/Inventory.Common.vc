//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id: Inventory.Common.vc 3974 2009-01-24 20:04:35Z dj_jl $
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

//==========================================================================
//
//	OnMapSpawn
//
//==========================================================================

void OnMapSpawn(mthing_t* mthing)
{
	if (!mthing)
	{
		//	Non-placed items are dropped by default.
		bDropped = true;
	}
	if (MaxAmount == DefMaxAmount)
	{
		MaxAmount = LineSpecialGameInfo(Level.Game).InvDefaultMaxAmount;
	}
	::OnMapSpawn(mthing);
}

//==========================================================================
//
//	Destroyed
//
//==========================================================================

void Destroyed()
{
	if (Role == ROLE_Authority)
	{
		if (Owner)
		{
			EntityEx(Owner).RemoveInventory(self);
		}
		Inventory = none;
	}
	::Destroyed();
}

//==========================================================================
//
//	Tick
//
//==========================================================================

void Tick(float DeltaTime)
{
	::Tick(DeltaTime);
	if (DropTime)
	{
		DropTime -= DeltaTime;
		if (DropTime <= 0.0)
		{
			DropTime = 0.0;
			bSpecial = default.bSpecial;
			bSolid = default.bSolid;
		}
	}
}

//==========================================================================
//
//	BecomeItem
//
//==========================================================================

final void BecomeItem()
{
	UnlinkFromWorld();
	bNoSector = true;
	bNoBlockmap = true;
	LinkToWorld();
	SetTID(0);
	bSpecial = false;
	SetState(FindState('Held'));
}

//==========================================================================
//
//	BecomePickup
//
//==========================================================================

final void BecomePickup()
{
	if (Owner)
	{
		EntityEx(Owner).RemoveInventory(self);
	}
	UnlinkFromWorld();
	bNoSector = false;
	bNoBlockmap = false;
	LinkToWorld();
	bSpecial = default.bSpecial;
	SetState(IdleState);
}

//==========================================================================
//
//	AttachToOwner
//
//==========================================================================

void AttachToOwner(EntityEx NewOwner)
{
	BecomeItem();
	NewOwner.AddInventory(self);
}

//==========================================================================
//
//	DetachedFromOwner
//
//	Event called when item is being removed from Owner's inventory.
//
//==========================================================================

void DetachedFromOwner()
{
}

//==========================================================================
//
//	TouchSpecial
//
//==========================================================================

final void TouchSpecial(EntityEx Toucher)
{
	if (!Toucher.bPickUp)
	{
		// Can't be picked up by toucher
		return;
	}
	if (Toucher.Health <= 0)
	{
		// Toucher is dead
		return;
	}

	//	Make sure that if it's a voodoo doll touching item it's given to the
	// actual player actor.
	if (Toucher.bIsPlayer)
	{
		Toucher = EntityEx(Toucher.Player.MO);
	}

	if (!TryPickup(Toucher))
	{
		return;
	}

	if (!bQuiet)
	{
		Toucher.Player.cprint(GetPickupMessage());
		PlayPickupSound(Toucher);
		PlayerEx(Toucher.Player).BonusFlash += BONUSADD;
	}

	DoPickupSpecial(Toucher);
	if (bCountItem)
	{
		Toucher.Player.ItemCount++;
		Level.CurrentItems++;
	}
}

//==========================================================================
//
//	TryPickup
//
//==========================================================================

bool TryPickup(EntityEx Toucher)
{
	EntityEx NewToucher = Toucher;
	bPickupGood = false;
	if (Toucher.Inventory && Toucher.Inventory.HandlePickup(self))
	{
		if (!bPickupGood)
		{
			return false;
		}
		GoAwayAndDie();
	}
	else if (MaxAmount == 0)
	{
		//	A special case: Items with max amount of 0 can be picked up if
		// they are autoactivate-able.
		if (!bAutoActivate)
		{
			return false;
		}

		//	Put it in the inventory long enoung to be used.
		Toucher.AddInventory(self);
		bool UseGood = Use(true);
		Toucher.RemoveInventory(self);

		if (UseGood || bAlwaysPickup)
		{
			GoAwayAndDie();
		}
		else
		{
			return false;
		}
	}
	else
	{
		Inventory Copy = CreateCopy(Toucher);
		if (!Copy)
		{
			return false;
		}
		//	Some powerups cannot activate absolutely, for example,
		// PowerMorph; fail the pickup if so.
		if (Copy.bInitEffectFailed)
		{
			if (Copy != self)
			{
				Copy.Destroy();
			}
			else
			{
				bInitEffectFailed = false;
			}
			return false;
		}
		//	Handle owner-changing powerups
		if (Copy.bCreateCopyMoved)
		{
			NewToucher = EntityEx(Copy.Owner);
			Copy.Owner = none;
			Copy.bCreateCopyMoved = false;
		}
		Copy.AttachToOwner(NewToucher);
		if (bAutoActivate && Copy.Use(true))
		{
			Copy.Amount--;
			if (Copy.Amount <= 0)
			{
				Copy.bSpecial = false;
				Copy.SetState(Copy.FindState('HoldAndDestroy'));
			}
		}
	}
	GiveQuest(Toucher);
	return true;
}

//==========================================================================
//
//	HandlePickup
//
//	Called for each item in touchers inventory. Returns true if pickup
// should be interrupted. Sets bPickupGood to true if pickup should be
// considered successful.
//
//==========================================================================

bool HandlePickup(Inventory Item)
{
	if (Item.Class == Class)
	{
		if (Amount < MaxAmount)
		{
			Amount += Item.Amount;
			if (Amount > MaxAmount)
			{
				Amount = MaxAmount;
			}
			Item.bPickupGood = true;
		}
		return true;
	}

	if (Inventory)
	{
		return Inventory.HandlePickup(Item);
	}
	return false;
}

//==========================================================================
//
//	CreateCopy
//
//==========================================================================

Inventory CreateCopy(EntityEx Toucher)
{
	Inventory Copy;
	if (GoAway())
	{
		//	Must create a copy
		Copy = Spawn(class<Inventory>(Class),,,, false);
		Copy.Amount = Amount;
		Copy.MaxAmount = MaxAmount;
	}
	else
	{
		//	Use this one
		Copy = self;
	}
	return Copy;
}

//==========================================================================
//
//	CreateTossable
//
//	Create item suitable fro dropping.
//
//==========================================================================

Inventory CreateTossable()
{
	if (!IdleState)
	{
		//	This item has no spawn state so it cannot be seen.
		return none;
	}
	if (bUndroppable || !Owner || Amount <= 0)
	{
		return none;
	}

	if (Amount == 1 && !bKeepDepleted)
	{
		//	Drop the current one.
		BecomePickup();
		DropTime = 1.0;
		bSpecial = false;
		bSolid = false;
		return self;
	}

	Inventory Copy = Spawn(class<Inventory>(Class),,,, false);
	Copy.Amount = 1;
	Copy.MaxAmount = MaxAmount;
	Copy.DropTime = 1.0;
	Copy.bSpecial = false;
	Copy.bSolid = false;
	return Copy;
}

//==========================================================================
//
//	ShouldStay
//
//	Returns true if item should stay after it's been picked up.
//
//==========================================================================

bool ShouldStay()
{
	return false;
}

//==========================================================================
//
//	ShouldRespawn
//
//==========================================================================

bool ShouldRespawn()
{
	if (bBigPowerup && !LineSpecialGameInfo(Level.Game).bRespawnBigItems)
	{
		return false;
	}
	return LineSpecialGameInfo(Level.Game).bRespawnItems;
}

//==========================================================================
//
//	GoAway
//
//==========================================================================

final bool GoAway()
{
	//	Never respawn dropped items.
	if (bDropped)
	{
		if (PickupFlashType)
		{
			//  Initiate the artifact pickup animation.
			Spawn(PickupFlashType, Origin);
		}
		return false;
	}

	if (!ShouldStay())
	{
		if (PickupFlashType)
		{
			//  Initiate the artifact pickup animation.
			Spawn(PickupFlashType, Origin);
		}
		if (ShouldRespawn())
		{
			Hide();
		}
		else
		{
			// Don't respawn
			return false;
		}
	}
	return true;
}

//==========================================================================
//
//	GoAwayAndDie
//
//==========================================================================

final void GoAwayAndDie()
{
	if (!GoAway())
	{
		bSpecial = false;
		SetState(FindState('HoldAndDestroy'));
	}
}

//==========================================================================
//
//	Hide
//
//==========================================================================

final void Hide()
{
	bSpecial = false;
	bInvisible = true;
	if (LineSpecialGameInfo(Level.Game).bRavenStylePickupRespawn)
	{
		SetState(FindState('HideSpecial'));
		StateTime = 40.0;
		if (PickupFlashType)
		{
			StateTime += 30.0 / 35.0;
		}
	}
	else
	{
		SetState(FindState('DormantPickup'));
		StateTime = 30.0;
	}
	if (RespawnTime)
	{
		StateTime = RespawnTime;
	}
}

//==========================================================================
//
//	GetPickupMessage
//
//==========================================================================

string GetPickupMessage()
{
	return PickupMessage;
}

//==========================================================================
//
//	DoPickupSpecial
//
//==========================================================================

void DoPickupSpecial(EntityEx Toucher)
{
	if (Special)
	{
		Level.ExecuteActionSpecial(Special, Args[0], Args[1], Args[2],
			Args[3], Args[4], NULL, 0, Toucher);
		Special = 0;
	}
}

//==========================================================================
//
//	PlayPickupSound
//
//==========================================================================

void PlayPickupSound(EntityEx Toucher)
{
	if (PickupSound)
	{
		Toucher.PlaySound(PickupSound, CHAN_ITEM, 1.0,
			bFullVolPickupSound ? ATTN_NONE : ATTN_NORMAL);
	}
}

//==========================================================================
//
//	GiveQuest
//
//==========================================================================

final void GiveQuest(EntityEx Toucher)
{
	if (GiveQuestNum)
	{
		Toucher.GiveInventoryType(class<Inventory>(FindClass(
			StrToName(va("QuestItem%d", GiveQuestNum)))));
	}
}

//==========================================================================
//
//  DoRespawn
//
//==========================================================================

bool DoRespawn()
{
	return true;
}

//==========================================================================
//
//	SpecialDropAction
//
//==========================================================================

bool SpecialDropAction(EntityEx Source)
{
	return false;
}

//==========================================================================
//
//	PrevInv
//
//	Return previous item with bInvBar flag set.
//
//==========================================================================

Inventory PrevInv()
{
	Inventory Item = Inventory;
	while (Item && !Item.bInvBar)
	{
		Item = Item.Inventory;
	}
	return Item;
}

//==========================================================================
//
//	NextInv
//
//	Return next item with bInvBar flag set.
//
//==========================================================================

Inventory NextInv()
{
	Inventory Ret = none;
	Inventory Item = EntityEx(Owner).Inventory;
	while (Item && Item != self)
	{
		if (Item.bInvBar)
		{
			Ret = Item;
		}
		Item = Item.Inventory;
	}
	return Ret;
}

//==========================================================================
//
//	Use
//
//==========================================================================

bool Use(bool Pickup)
{
	return false;
}

//==========================================================================
//
//	DoEffect
//
//==========================================================================

void DoEffect()
{
}

//==========================================================================
//
//	GetBlend
//
//==========================================================================

int GetBlend()
{
	return 0;
}

//==========================================================================
//
//	AbsorbDamage
//
//==========================================================================

void AbsorbDamage(int damage, name DmgType, out int NewDamage)
{
	if (Inventory)
	{
		Inventory.AbsorbDamage(damage, DmgType, NewDamage);
	}
}

//==========================================================================
//
//	OwnerDied
//
//==========================================================================

void OwnerDied()
{
}

//==========================================================================
//
//	GetSpeedFactor
//
//==========================================================================

float GetSpeedFactor()
{
	if (Inventory)
	{
		return Inventory.GetSpeedFactor();
	}
	else
	{
		return 1.0;
	}
}

//**************************************************************************
//	State jumps
//**************************************************************************

//==========================================================================
//
//  A_JumpIfNoAmmo
//
//==========================================================================

final void A_JumpIfNoAmmo(state Label)
{
	//	State jumps should not affect state chain results.
	if (XLevel.StateCall)
	{
		XLevel.StateCall->Result = false;
	}

	//	Only for weapons.
	if (!bIsPlayer || XLevel.StateCall)
	{
		return;
	}
	Weapon Wpn = PlayerEx(Player).ReadyWeapon;
	if (!Wpn)
	{
		return;
	}

	if (!Wpn.CheckAmmo(Wpn.FireMode, false, true))
	{
		DoJump(Label);
	}
}

//**************************************************************************
//	Weapon functions
//**************************************************************************

//==========================================================================
//
//  A_Lower
//
//  Lowers current weapon, and changes weapon at bottom.
//
//==========================================================================

final void A_Lower()
{
	if (!bIsPlayer)
	{
		return;
	}

	if (PlayerEx(Player).MorphTime ||
		PlayerEx(Player).bInstantWeaponSwitch)
	{
		Player.ViewStates[ps_weapon].SY = Weapon::WEAPONBOTTOM;
	}
	else
	{
		//	FIXME!!
		if (Level.Game.frametime < 1.0 / 35.0)
		{
			Player.ViewStates[ps_weapon].SY += Weapon::LOWERSPEED;
		}
		else
		{
			Player.ViewStates[ps_weapon].SY += Weapon::LOWERSPEED * 35.0 *
				Level.Game.frametime;
		}
	}

	if (Player.ViewStates[ps_weapon].SY < Weapon::WEAPONBOTTOM)
	{
		// Not lowered all the way yet
		return;
	}

	if (Player.PlayerState == PST_DEAD)
	{
		// Player is dead, so don't bring up a pending weapon
		Player.ViewStates[ps_weapon].SY = Weapon::WEAPONBOTTOM;
		return;
	}

	if (Player.MO.Health <= 0)
	{
		// Player is dead, so keep the weapon off screen.
		Player.SetViewState(ps_weapon, none);
		return;
	}

	//	Clear flash state, needed for Strife.
	Player.SetViewState(ps_flash, none);

	PlayerEx(Player).SetWeapon(PlayerEx(Player).PendingWeapon);
	PlayerEx(Player).BringUpWeapon();
}

//==========================================================================
//
//  A_Raise
//
//==========================================================================

final void A_Raise()
{
	if (!bIsPlayer)
	{
		return;
	}
	Weapon Wpn = PlayerEx(Player).ReadyWeapon;

	//	FIXME!!
	if (Level.Game.frametime < 1.0 / 35.0)
	{
		Player.ViewStates[ps_weapon].SY -= Weapon::RAISESPEED;
	}
	else
	{
		Player.ViewStates[ps_weapon].SY -= Weapon::RAISESPEED * 35.0 *
			Level.Game.frametime;
	}
	if (Player.ViewStates[ps_weapon].SY > Weapon::WEAPONTOP)
	{
		// Not raised all the way yet
		return;
	}
	Player.ViewStates[ps_weapon].SY = Weapon::WEAPONTOP;
	if (Wpn)
	{
		Player.SetViewState(ps_weapon, Wpn.GetReadyState());
	}
	else
	{
		Player.SetViewState(ps_weapon, none);
	}
}

//===========================================================================
//
//  A_ReFire
//
//  The player can re-fire the weapon without lowering it entirely.
//
//===========================================================================

final void A_ReFire()
{
	if (!bIsPlayer)
	{
		return;
	}
	Weapon Wpn = PlayerEx(Player).ReadyWeapon;

	if (Wpn.FireMode == Weapon::FIRE_Primary &&
		(Player.Buttons & BT_ATTACK) &&
		!PlayerEx(Player).PendingWeapon && Player.MO.Health > 0)
	{
		PlayerEx(Player).Refire++;
		PlayerEx(Player).FireWeapon();
	}
	else if (Wpn.FireMode == Weapon::FIRE_Secondary &&
		(Player.Buttons & BT_ALT_ATTACK) &&
		!PlayerEx(Player).PendingWeapon && Player.MO.Health > 0)
	{
		PlayerEx(Player).Refire++;
		PlayerEx(Player).AltFireWeapon();
	}
	else
	{
		PlayerEx(Player).Refire = 0;
		Wpn.CheckAmmo(Wpn.FireMode, true);
	}
}

//===========================================================================
//
//  A_ClearReFire
//
//===========================================================================

final void A_ClearReFire()
{
	if (bIsPlayer)
	{
		PlayerEx(Player).Refire = 0;
	}
}

//===========================================================================
//
//  A_GunFlash
//
//===========================================================================

final void A_GunFlash()
{
	if (!bIsPlayer)
	{
		return;
	}
	Weapon Wpn = PlayerEx(Player).ReadyWeapon;

	SetState(MeleeState);
	Player.SetViewState(ps_flash, Wpn.FindState('Flash'));
}

//===========================================================================
//
//  A_CheckReload
//
//===========================================================================

final void A_CheckReload()
{
	if (!bIsPlayer)
	{
		return;
	}
	Weapon Wpn = PlayerEx(Player).ReadyWeapon;

	Wpn.CheckAmmo(Wpn.FireMode, true);
}

//===========================================================================
//
//  A_Light
//
//===========================================================================

final void A_Light(int LightValue)
{
	if (!bIsPlayer)
	{
		return;
	}

	if (LightValue < 0)
	{
		LightValue = 0;
	}
	else if (LightValue > 20)
	{
		LightValue = 20;
	}
	Player.ExtraLight = LightValue;
}

//===========================================================================
//
//  A_Light0
//
//===========================================================================

final void A_Light0()
{
	if (!bIsPlayer)
	{
		return;
	}

	Player.ExtraLight = 0;
}

//===========================================================================
//
//  A_Light1
//
//===========================================================================

final void A_Light1()
{
	if (!bIsPlayer)
	{
		return;
	}

	Player.ExtraLight = 1;
}

//===========================================================================
//
//  A_Light2
//
//===========================================================================

final void A_Light2()
{
	if (!bIsPlayer)
	{
		return;
	}

	Player.ExtraLight = 2;
}

//==========================================================================
//
//	A_LightInverse
//
//==========================================================================

final void A_LightInverse()
{
	if (bIsPlayer)
	{
		Player.ExtraLight = 255;
	}
}

//**************************************************************************
//	Weapon attack functions
//**************************************************************************

//===========================================================================
//
//  A_Saw
//
//===========================================================================

final void A_Saw()
{
	decorate_A_Saw();
}

//===========================================================================
//
//  decorate_A_Saw
//
//===========================================================================

final void decorate_A_Saw(optional name FullSound, optional name HitSound,
	optional int SawDamage, optional class<Actor> PuffType)
{
	float		angle;
	int			damage;
	TAVec		aimAng;
	TVec		dir;
	EntityEx	AimTarget;

	if (!specified_FullSound)
	{
		FullSound = 'weapons/sawfull';
		HitSound = 'weapons/sawhit';
	}
	if (!SawDamage)
	{
		SawDamage = 2;
	}
	if (!PuffType)
	{
		PuffType = BulletPuff;
	}

	if (!bIsPlayer)
	{
		return;
	}

	Weapon Wpn = PlayerEx(Player).ReadyWeapon;
	if (Wpn)
	{
		if (!Wpn.DepleteAmmo(Wpn.FireMode))
		{
			return;
		}
	}

	damage = SawDamage * (P_Random() % 10 + 1);
	aimAng = Angles;
	aimAng.yaw = AngleMod360(aimAng.yaw + (Random() -
		Random()) * 45.0 / 8.0);

	// use meleerange + 1 se the puff doesn't skip the flash
	AimTarget = AimLineAttack(dir, aimAng, MELEERANGE + 0.00001);
	LineAttack(dir, MELEERANGE + 0.00001, damage, PuffType);

	if (!AimTarget)
	{
		PlaySound(FullSound, CHAN_WEAPON);
		return;
	}
	PlaySound(HitSound, CHAN_WEAPON);

	// turn to face target
	angle = atan2(AimTarget.Origin.y - Origin.y,
		AimTarget.Origin.x - Origin.x);
	if (AngleMod360(angle - Angles.yaw) > 180.0)
	{
		if (AngleMod360(angle - Angles.yaw) < -90.0 / 20.0)
			Angles.yaw = angle + 90.0 / 21.0;
		else
			Angles.yaw = Angles.yaw - 90.0 / 20.0;
	}
	else
	{
		if (AngleMod360(angle - Angles.yaw) > 90.0 / 20.0)
			Angles.yaw = angle - 90.0 / 21.0;
		else
			Angles.yaw += 90.0 / 20.0;
	}
	Angles.yaw = AngleMod360(Angles.yaw);
	bJustAttacked = true;
	if (bIsPlayer)
	{
		Player.bFixAngle = true;
	}
}

//===========================================================================
//
//  A_CustomPunch
//
//===========================================================================

final void A_CustomPunch(int PunchDamage, optional bool NoRandom,
	optional bool UseAmmo, optional class<Actor> PuffType,
	optional float Range)
{
	TAVec		aimAngles;
	TVec		dir;
	EntityEx	AimTarget;

	if (!bIsPlayer)
	{
		return;
	}

	if (!specified_UseAmmo)
	{
		UseAmmo = true;
	}
	if (!PuffType)
	{
		PuffType = BulletPuff;
	}
	Weapon Wpn = PlayerEx(Player).ReadyWeapon;

	aimAngles = Angles;
	aimAngles.yaw = AngleMod360(aimAngles.yaw + (Random() -
		Random()) * 45.0 / 8.0);
	AimTarget = AimLineAttack(dir, aimAngles, Range);

	//	Use ammo only if hit something.
	if (UseAmmo && AimTarget && Wpn)
	{
		if (!Wpn.DepleteAmmo(Wpn.FireMode))
		{
			return;
		}
	}

	if (!NoRandom)
	{
		PunchDamage *= (P_Random() % 8 + 1);
	}

	LineAttack(dir, Range, PunchDamage, PuffType,,,
		PuffType.default.DamageType);

	// turn to face target
	if (AimTarget)
	{
		if (Wpn)
		{
			PlaySound(Wpn.AttackSound, CHAN_WEAPON);
		}
		Angles.yaw = atan2(AimTarget.Origin.y - Origin.y,
			AimTarget.Origin.x - Origin.x);
		if (bIsPlayer)
		{
			Player.bFixAngle = true;
		}
	}
}

//===========================================================================
//
//  A_FireBullets
//
//===========================================================================

final void A_FireBullets(float SpreadHoriz, float SpreadVert, int NumBullets,
	int DamagePerBullet, optional class<Actor> PuffType, optional bool UseAmmo,
	optional float Range)
{
	TVec		dir;
	int			i;
	int			damage;
	TAVec		rot;
	TVec		aimDir;

	if (!PuffType)
	{
		PuffType = BulletPuff;
	}
	if (!specified_UseAmmo)
	{
		UseAmmo = true;
	}
	if (!Range)
	{
		Range = MISSILERANGE;
	}

	if (!bIsPlayer)
	{
		return;
	}
	Weapon Wpn = PlayerEx(Player).ReadyWeapon;

	if (UseAmmo && Wpn)
	{
		if (!Wpn.DepleteAmmo(Wpn.FireMode))
		{
			return;
		}
	}

	SetState(MeleeState);

	if (Wpn)
	{
		PlaySound(Wpn.AttackSound, CHAN_WEAPON);
	}

	Aim(aimDir, 16.0 * 64.0);

	if ((NumBullets == 1 && !PlayerEx(Player).Refire) || NumBullets == 0)
	{
		damage = DamagePerBullet * (P_Random() % 3 + 1);
		LineAttack(aimDir, Range, damage, PuffType,,,
			PuffType.default.DamageType);
	}
	else
	{
		if (NumBullets == -1)
		{
			NumBullets = 1;
		}
		for (i = 0; i < NumBullets; i++)
		{
			rot.pitch = (Random() - Random()) * SpreadVert;
			rot.yaw = (Random() - Random()) * SpreadHoriz;
			rot.roll = 0.0;
			dir = RotateDirectionVector(aimDir, rot);
			damage = DamagePerBullet * (P_Random() % 3 + 1);
			LineAttack(dir, Range, damage, PuffType,,,
				PuffType.default.DamageType);
		}
	}
}

//===========================================================================
//
//  A_FireCustomMissile
//
//===========================================================================

final void A_FireCustomMissile(class<Actor> MissileType, optional float Angle,
	optional bool UseAmmo, optional int SpawnXY, optional float SpawnZ,
	optional int AimAtAngle)
{
	if (!MissileType || !bIsPlayer)
	{
		return;
	}

	if (!specified_UseAmmo)
	{
		UseAmmo = true;
	}

	Weapon Wpn = PlayerEx(Player).ReadyWeapon;
	if (UseAmmo && Wpn)
	{
		if (!Wpn.DepleteAmmo(Wpn.FireMode))
		{
			return;
		}
	}

	TVec ShootOrg = Origin;
	if (SpawnXY)
	{
		ShootOrg.x += itof(SpawnXY) * cos(Angles.yaw - 90.0);
		ShootOrg.y += itof(SpawnXY) * sin(Angles.yaw - 90.0);
	}
	ShootOrg.x += SpawnZ;

	float ShootAngle = Angles.yaw;
	if (AimAtAngle)
	{
		ShootAngle += Angle;
	}

	EntityEx AimTarget;
	EntityEx A = SpawnPlayerMissileEx(MissileType, false, AimTarget,
		ShootAngle, ShootOrg);
	if (A)
	{
		//	Handle seeker missiles.
		if (A.bSeekerMissile)
		{
			A.Tracer = AimTarget;
		}

		if (!AimAtAngle)
		{
			VectorRotateAroundZ(&A.Velocity, Angle);
		}
	}
}

//===========================================================================
//
//  A_RailAttack
//
//===========================================================================

final void A_RailAttack(int RailDamage, optional float Offset,
	optional bool UseAmmo, optional string Colour1, optional string Colour2,
	optional bool Silent, optional float MaxDiff,
	optional class<Actor> PuffType)
{
	if (!specified_UseAmmo)
	{
		UseAmmo = true;
	}

	if (!bIsPlayer)
	{
		return;
	}
	Weapon Wpn = PlayerEx(Player).ReadyWeapon;
	if (UseAmmo)
	{
		if (!Wpn.DepleteAmmo(Wpn.FireMode,, 1))
		{
			return;
		}
	}

	int Col1 = ParseColour(Colour1);
	int Col2 = ParseColour(Colour2);
	TVec Dir;
	AngleVector(&Angles, &Dir);
	RailAttack(Dir, Offset, RailDamage, Col1, Col2, MaxDiff, PuffType,
		Silent);
}

//**************************************************************************
//	Doom weapon atack functions
//**************************************************************************

//===========================================================================
//
//  A_FirePistol
//
//===========================================================================

final void A_FirePistol()
{
	TVec dir;
	bool Accurate;

	if (bIsPlayer)
	{
		Weapon Wpn = PlayerEx(Player).ReadyWeapon;
		if (Wpn)
		{
			if (!Wpn.DepleteAmmo(Wpn.FireMode,, 1))
			{
				return;
			}

			Player.SetViewState(ps_flash, Wpn.FindState('Flash'));
		}
		SetState(MeleeState);
		Accurate = !PlayerEx(Player).Refire;
	}
	else
	{
		Accurate = true;
	}

	PlaySound('weapons/pistol', CHAN_WEAPON);

	Aim(dir, 16.0 * 64.0);
	GunShot(Accurate, dir);
}

//===========================================================================
//
//  A_FireShotgun
//
//===========================================================================

final void A_FireShotgun()
{
	int i;
	TVec dir;

	if (!bIsPlayer)
	{
		return;
	}
	Weapon Wpn = PlayerEx(Player).ReadyWeapon;

	PlaySound('weapons/shotgf', CHAN_WEAPON);
	SetState(MeleeState);

	if (Wpn)
	{
		if (!Wpn.DepleteAmmo(Wpn.FireMode,, 1))
		{
			return;
		}

		Player.SetViewState(ps_flash, Wpn.FindState('Flash'));
	}

	Aim(dir, 16.0 * 64.0);
	for (i = 0; i < 7; i++)
	{
		GunShot(false, dir);
	}
}

//===========================================================================
//
//  A_FireShotgun2
//
//===========================================================================

final void A_FireShotgun2()
{
	int i;
	int damage;
	TAVec rot;
	TVec aimDir;
	TVec dir;

	if (!bIsPlayer)
	{
		return;
	}
	Weapon Wpn = PlayerEx(Player).ReadyWeapon;

	PlaySound('weapons/sshotf', CHAN_WEAPON);
	SetState(MeleeState);

	if (Wpn)
	{
		if (!Wpn.DepleteAmmo(Wpn.FireMode,, 2))
		{
			return;
		}

		Player.SetViewState(ps_flash, Wpn.FindState('Flash'));
	}

	Aim(aimDir, 16.0 * 64.0);
	for (i = 0; i < 20; i++)
	{
		rot.pitch = (Random() - Random()) * 45.0 / 8.0;
		rot.yaw = (Random() - Random()) * 45.0 / 4.0;
		rot.roll = 0.0;
		dir = RotateDirectionVector(aimDir, rot);
		damage = 5 * (P_Random() % 3 + 1);
		LineAttack(dir, MISSILERANGE, damage, BulletPuff);
	}
}

//===========================================================================
//
//  A_OpenShotgun2
//
//===========================================================================

final void A_OpenShotgun2()
{
	PlaySound('weapons/sshoto', CHAN_WEAPON);
}

//===========================================================================
//
//  A_LoadShotgun2
//
//===========================================================================

final void A_LoadShotgun2()
{
	PlaySound('weapons/sshotl', CHAN_WEAPON);
}

//===========================================================================
//
//  A_CloseShotgun2
//
//===========================================================================

final void A_CloseShotgun2()
{
	PlaySound('weapons/sshotc', CHAN_WEAPON);
	A_ReFire();
}

//===========================================================================
//
//  A_FireCGun
//
//===========================================================================

final void A_FireCGun()
{
	TVec dir;

	if (!bIsPlayer)
	{
		return;
	}
	Weapon Wpn = PlayerEx(Player).ReadyWeapon;

	PlaySound('weapons/chngun', CHAN_WEAPON);

	if (Wpn)
	{
		if (!Wpn.DepleteAmmo(Wpn.FireMode,, 1))
		{
			return;
		}

		if (Player.ViewStates[ps_weapon].State == Wpn.GetAttackState(false))
		{
			Player.SetViewState(ps_flash, Wpn.FindState('Flash'));
		}
		else
		{
			Player.SetViewState(ps_flash, GetStatePlus(Wpn.FindState('Flash'), 1));
		}
	}

	SetState(MeleeState);

	Aim(dir, 16.0 * 64.0);
	GunShot(!PlayerEx(Player).Refire, dir);
}

//===========================================================================
//
//  A_FireMissile
//
//===========================================================================

final void A_FireMissile()
{
	if (!bIsPlayer)
	{
		return;
	}
	Weapon Wpn = PlayerEx(Player).ReadyWeapon;
	if (Wpn)
	{
		if (!Wpn.DepleteAmmo(Wpn.FireMode,, 1))
		{
			return;
		}
	}
	SpawnPlayerMissile(Rocket);
}

//===========================================================================
//
//  A_FirePlasma
//
//===========================================================================

final void A_FirePlasma()
{
	if (!bIsPlayer)
	{
		return;
	}
	Weapon Wpn = PlayerEx(Player).ReadyWeapon;
	if (Wpn)
	{
		if (!Wpn.DepleteAmmo(Wpn.FireMode,, 1))
		{
			return;
		}
		if (!(P_Random() & 1))
		{
			Player.SetViewState(ps_flash, Wpn.FindState('Flash'));
		}
		else
		{
			Player.SetViewState(ps_flash, GetStatePlus(Wpn.FindState('Flash'), 1));
		}
	}
	SpawnPlayerMissile(PlasmaBall);
}

//===========================================================================
//
//  DoFireRailgun
//
//===========================================================================

final void DoFireRailgun(float Offset)
{
	if (!bIsPlayer)
	{
		return;
	}
	Weapon Wpn = PlayerEx(Player).ReadyWeapon;
	if (Wpn)
	{
		if (!Wpn.DepleteAmmo(Wpn.FireMode,, 1))
		{
			return;
		}
		if (!(P_Random() & 1))
		{
			Player.SetViewState(ps_flash, Wpn.FindState('Flash'));
		}
		else
		{
			Player.SetViewState(ps_flash, GetStatePlus(Wpn.FindState('Flash'), 1));
		}
	}
	int RailDamage = Level.Game.deathmatch ? 100 : 150;
	TVec Dir;
	AngleVector(&Angles, &Dir);
	RailAttack(Dir, Offset, RailDamage);
}

//===========================================================================
//
//  A_FireRailgun
//
//===========================================================================

final void A_FireRailgun()
{
	DoFireRailgun(0.0);
}

//===========================================================================
//
//  A_FireRailgunLeft
//
//===========================================================================

final void A_FireRailgunLeft()
{
	DoFireRailgun(-10.0);
}

//===========================================================================
//
//  A_FireRailgunRight
//
//===========================================================================

final void A_FireRailgunRight()
{
	DoFireRailgun(10.0);
}

//===========================================================================
//
//  A_RailWait
//
//===========================================================================

final void A_RailWait()
{
}

//===========================================================================
//
//  A_BFGsound
//
//===========================================================================

final void A_BFGsound()
{
	PlaySound('weapons/bfgf', CHAN_WEAPON);
}

//===========================================================================
//
//  A_FireBFG
//
//===========================================================================

final void A_FireBFG()
{
	if (!bIsPlayer)
	{
		return;
	}
	Weapon Wpn = PlayerEx(Player).ReadyWeapon;
	if (Wpn)
	{
		if (!Wpn.DepleteAmmo(Wpn.FireMode,, BFG9000.default.AmmoUse1))
		{
			return;
		}
	}
	SpawnPlayerMissile(BFGBall);
}

//**************************************************************************
//
//**************************************************************************

//==========================================================================
//
//  A_RestoreSpecialThing1
//
//  Make a special thing visible again.
//
//==========================================================================

final void A_RestoreSpecialThing1()
{
	bInvisible = false;
	if (DoRespawn())
	{
		PlaySound('misc/spawn', CHAN_VOICE);
	}
}

//==========================================================================
//
//  A_RestoreSpecialThing2
//
//==========================================================================

final void A_RestoreSpecialThing2()
{
	bSpecial = true;
	SetState(IdleState);
}
