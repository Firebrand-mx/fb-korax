//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

//**************************************************************************
//
//  OBJECT MOVEMENT
//
//**************************************************************************

//==========================================================================
//
//	Physics
//
//==========================================================================

bool Physics(float DeltaTime)
{
	EntityEx		onmo;
	SectorThinker	SecThink;
	float			scrollx;
	float			scrolly;
	float			height;
	float			waterheight;	// killough 4/4/98: add waterheight

	if (bBlaster)
	{
		return BlasterPhysics(DeltaTime);
	}

	if (Sector->AffectorData && bColideWithWorld && !bNoSector)
	{
		// killough 3/7/98: Carry things on floor
		// killough 3/20/98: use new sector list which reflects true members
		// killough 3/27/98: fix carrier bug
		// killough 4/4/98: Underwater, carry things even w/o gravity

		// Move objects only if on floor or underwater,
		// non-floating, and clipped.

		float CummX = 0.0;
		float CummY = 0.0;
		int CountX = 0;
		int CountY = 0;
		for (SecThink = SectorThinker(Sector->AffectorData); SecThink;
			SecThink = SecThink.NextAffector)
		{
			if (!Scroller(SecThink))
			{
				continue;
			}
			scrollx = Scroller(SecThink).CarryScrollX;
			scrolly = Scroller(SecThink).CarryScrollY;
			if (!scrollx && !scrolly)
			{
				continue;
			}
			if (bNoGravity && (!Sector->heightsec ||
				(Sector->heightsec->bIgnoreHeightSec)))
			{
				continue;
			}
			height = GetPlanePointZ(&Sector->floor, Origin);
			if (Origin.z > height)
			{
				if (!Sector->heightsec || (Sector->heightsec->bIgnoreHeightSec))
				{
					continue;
				}

				waterheight = GetPlanePointZ(&Sector->heightsec->floor, Origin);
				if (waterheight > height && Origin.z >= waterheight)
				{
					continue;
				}
			}

			CummX += scrollx;
			CummY += scrolly;
			if (scrollx)
			{
				CountX++;
			}
			if (scrolly)
			{
				CountY++;
			}
		}

		// Some levels designed with Boom in mind actually want things to accelerate
		// at neighboring scrolling sector boundaries. But it is only important for
		// non-player objects.
		if (bIsPlayer || !Level.CompatBoomScroll)
		{
			if (CountX > 1)
			{
				CummX /= itof(CountX);
			}
			if (CountY > 1)
			{
				CummY /= itof(CountY);
			}
		}

		Velocity.x += CummX;
		Velocity.y += CummY;
	}

	CheckWater();
	if (!bFloatBob)
	{
		UpdateVelocity();
	}

	// momentum movement
	if (Velocity.x || Velocity.y)
	{
		// Handle X and Y momentums
		XYMovement(DeltaTime);
		if (IsDestroyed())
		{
			// mobj was removed
			return false;
		}
	}
	else if (bSkullFly && Health > 0)
	{
		//	A flying mobj slammed into something
		bSkullFly = false;
		Velocity = vector(0.0, 0.0, 0.0);
		if (!SetState(SeeState ? SeeState : IdleState))
		{
			// mobj was removed
			return false;
		}
	}
	else if (bBlasted)
	{
		// Reset to not blasted when momentums are gone
		ResetBlasted();
	}

	if (bFloatBob && bSpecial)
	{
		// Floating item bobbing motion (special1 is height)
		if (Sector->bHasExtrafloors)
		{
			//	Make sure FloorZ is from bottom region.
			Origin.z = ONFLOORZ;
			LinkToWorld();
		}
		FloatBobPhase += DeltaTime;
		Origin.z = FloorZ + Special1f +
			Level.Game.FloatBobOffsets[ftoi(FloatBobPhase * 35.0) & 63];
	}
	else if (bPassMobj && !bMissile && !Level.CompatNoPassOver)
	{
		//	Floating bobbing motion for monsters.
		if (bFloatBob)
		{
			Origin.z -= Level.Game.FloatBobOffsets[
				ftoi(FloatBobPhase * 35.0) & 63];
			FloatBobPhase += DeltaTime;
			Origin.z += Level.Game.FloatBobOffsets[
				ftoi(FloatBobPhase * 35.0) & 63];
		}

		// Handle Z momentum and gravity
		onmo = EntityEx(CheckOnmobj());
		if (onmo)
		{
			if (bIsPlayer)
			{
				if (Velocity.z < -DEFAULT_GRAVITY * 0.25 && !bFly)
				{
					PlayerLandedOnThing();
				}
			}
			if (onmo.Origin.z + onmo.Height - Origin.z <= MaxStepHeight)
			{
				if (bIsPlayer)
				{
					PlayerEx(Player).ViewHeight -=
						onmo.Origin.z + onmo.Height - Origin.z;
					PlayerEx(Player).DeltaViewHeight =
						// [CW] ------------- experimental
						(/*PlayerPawn(self).ViewHeight*/PlayerEx(Player).GetMOViewHeight() -
						PlayerEx(Player).ViewHeight) * 4.0;
				}
				Origin.z = onmo.Origin.z + onmo.Height;
			}
			bOnMobj = true;
			Velocity.z = 0.0;

			if (onmo.bOnmobjCopyVel)
			{
				Velocity.x = onmo.Velocity.x;
				Velocity.y = onmo.Velocity.y;
				if (onmo.Origin.z < onmo.FloorZ)
				{
					Origin.z += onmo.FloorZ - onmo.Origin.z;
					if (onmo.bIsPlayer)
					{
						PlayerEx(onmo.Player).ViewHeight -=
							onmo.FloorZ - onmo.Origin.z;
						PlayerEx(onmo.Player).DeltaViewHeight =
							// [CW] ------------- experimental
							(/*PlayerPawn(self).ViewHeight*/PlayerEx(Player).GetMOViewHeight() -
							PlayerEx(onmo.Player).ViewHeight) * 4.0;
					}
					onmo.Origin.z = onmo.FloorZ;
				}
			}
		}
		else if ((Origin.z != FloorZ) || Velocity.z)
		{
			ZMovement(DeltaTime);
			bOnMobj = false;
		}
		if (IsDestroyed())
		{
			// entity was removed
			return false;
		}
	}
	else if ((Origin.z != FloorZ) || Velocity.z)
	{
		// Handle Z momentum and gravity
		ZMovement(DeltaTime);
		if (IsDestroyed())
		{
			// entity was removed
			return false;
		}
	}
	return true;
}

//==========================================================================
//
//  XYMovement
//
//==========================================================================

final void XYMovement(float DeltaTime)
{
	float	ptryx;
	float	ptryy;
	float	xmove;
	float	ymove;
	int		special;

	if (bWindThrust)
	{
		special = Sector->special & SECSPEC_BASE_MASK;
		switch (special)
		{
		case SECSPEC_WindEastSlow:
		case SECSPEC_WindEastMedium:
		case SECSPEC_WindEastFast:
			Thrust(0.0, LineSpecialGameInfo(Level.Game).windTab[special - SECSPEC_WindEastSlow]);
			break;
		case SECSPEC_WindNorthSlow:
		case SECSPEC_WindNorthMedium:
		case SECSPEC_WindNorthFast:
			Thrust(90.0, LineSpecialGameInfo(Level.Game).windTab[special - SECSPEC_WindNorthSlow]);
			break;
		case SECSPEC_WindSouthSlow:
		case SECSPEC_WindSouthMedium:
		case SECSPEC_WindSouthFast:
			Thrust(270.0, LineSpecialGameInfo(Level.Game).windTab[special - SECSPEC_WindSouthSlow]);
			break;
		case SECSPEC_WindWestSlow:
		case SECSPEC_WindWestMedium:
		case SECSPEC_WindWestFast:
			Thrust(180.0, LineSpecialGameInfo(Level.Game).windTab[special - SECSPEC_WindWestSlow]);
			break;
		}
	}
	if (Velocity.x > MAXMOVE)
	{
		Velocity.x = MAXMOVE;
	}
	else if (Velocity.x < -MAXMOVE)
	{
		Velocity.x = -MAXMOVE;
	}
	if (Velocity.y > MAXMOVE)
	{
		Velocity.y = MAXMOVE;
	}
	else if (Velocity.y < -MAXMOVE)
	{
		Velocity.y = -MAXMOVE;
	}

	xmove = Velocity.x * DeltaTime;
	ymove = Velocity.y * DeltaTime;

	//	Split move in multiple steps if moving too fast.
	int Steps = 1;
	float XStep = fabs(xmove);
	float YStep = fabs(ymove);
	float MaxStep = Radius - 1.0;
	if (MaxStep <= 0.0)
	{
		MaxStep = MAXMOVESTEP;
	}
	if (XStep > MaxStep || YStep > MaxStep)
	{
		if (XStep > YStep)
		{
			Steps = ftoi(XStep / MaxStep) + 1;
		}
		else
		{
			Steps = ftoi(YStep / MaxStep) + 1;
		}
	}
	float StepXMove = xmove / itof(Steps);
	float StepYMove = ymove / itof(Steps);

	int Step = 1;
	do
	{
		ptryx = Origin.x + StepXMove;
		ptryy = Origin.y + StepYMove;

		tmtrace_t tmtrace;
		if (!TryMoveEx(&tmtrace, vector(ptryx, ptryy, Origin.z), true))
		{
			// blocked move
			if (tmtrace.BlockingMobj)
			{
				HitMobj(tmtrace.BlockingMobj, ptryx, ptryy);
			}
			else
			{
				HitLine(&tmtrace, DeltaTime / itof(Steps));
			}
			return;
		}
	}
	while (Step++ < Steps);
}

//==========================================================================
//
//	ZMovement
//
//==========================================================================

final void ZMovement(float DeltaTime)
{
	float	dist;
	float	delta;
	float	OldZ = Origin.z;

	// check for smooth step up
	if (bIsPlayer && Origin.z < FloorZ)
	{
		PlayerEx(Player).ViewHeight -= FloorZ - Origin.z;
											// [CW] ------------- experimental
		PlayerEx(Player).DeltaViewHeight = (/*PlayerPawn(self).ViewHeight*/PlayerEx(Player).GetMOViewHeight() -
			PlayerEx(Player).ViewHeight) * 4.0;
	}

	// adjust height
	Origin.z += Velocity.z * DeltaTime;

	if (bFloat && !bDormant && Target)
	{
		// float down towards enemy if too close
		if (!bSkullFly && !bInFloat)
		{
			dist = DistTo2(Target);
			delta = Target.Origin.z + Height / 2.0 - Origin.z;
			if (delta < 0.0 && dist < -delta * 3.0)
			{
				Origin.z -= FloatSpeed * DeltaTime;
				Velocity.z = 0.0;
			}
			else if (delta > 0.0 && dist < delta * 3.0)
			{
				Origin.z += FloatSpeed * DeltaTime;
				Velocity.z = 0.0;
			}
		}
	}
	if (bIsPlayer && bFly && !(Origin.z <= FloorZ) && XLevel.TicTime & 2)
	{
		Origin.z += sin(90.0 * 35.0 / 20.0 * XLevel.Time);
	}

	// clip movement
	if (Origin.z <= FloorZ + 0.1)
	{
		// hit the floor
		if (!HitFloor(DeltaTime))
		{
			return;
		}
	}

	if (Origin.z + Height > CeilingZ)
	{
		// hit the ceiling
		if (!HitCeiling())
		{
			return;
		}
	}

	CheckFakeFloorTriggers(OldZ);
}

//==========================================================================
//
//	HitLine
//
//==========================================================================

final void HitLine(tmtrace_t* tmtrace, float StepVelScale)
{
	if (bMissile)
	{
		if (BounceType == BOUNCE_Doom ||
			BounceType == BOUNCE_Hexen)
		{
			//	If number of bounces is limited.
			if (BounceCount > 0 && --BounceCount <= 0)
			{
				ExplodeMissile(none);
				return;
			}

			if (tmtrace->BlockingLine && tmtrace->BlockingLine->special ==
				LNSPEC_LineHorizon)
			{
				SightSound = '';
				Destroy();
				return;
			}

			// Struck a wall
			BounceWall(BOUNCE_VAL);
			if (!bNoBounceSound && !bNoWallBounceSnd && SightSound)
			{
				PlaySound(SightSound, CHAN_VOICE);
			}
			return;
		}

		// explode a missile
		if (tmtrace->CeilingLine && tmtrace->CeilingLine->backsector &&
			tmtrace->CeilingLine->backsector->ceiling.pic == Level.Game.skyflatnum)
		{
			// Hack to prevent missiles exploding against the sky.
			// Does not handle sky floors.
			if (bBounceSky)
			{
				Velocity = vector(0.0, 0.0, -1.0 * 35.0);
			}
			else if (bExplodeOnSky)
			{
				ExplodeMissile(none);
			}
			else
			{
				Destroy();
			}
			return;
		}
		if (tmtrace->BlockingLine && tmtrace->BlockingLine->special ==
			LNSPEC_LineHorizon)
		{
			if (bBounceSky)
			{
				Velocity = vector(0.0, 0.0, -1.0 * 35.0);
			}
			else
			{
				Destroy();
			}
			return;
		}
		ExplodeMissile(none);
	}
	else if (bSlide)
	{
		// try to slide along it
		SlideMove(StepVelScale);
	}
	else
	{
		Velocity.x = 0.0;
		Velocity.y = 0.0;
	}
}

//==========================================================================
//
//	HitMobj
//
//==========================================================================

final void HitMobj(Entity Other, float ptryx, float ptryy)
{
	float	angle;
	float	speed;

	if (bMissile)
	{
		if (BounceType == BOUNCE_Doom ||
			BounceType == BOUNCE_Hexen)
		{
			//  Bounce against walls and non-killable ofjects
			if (bBounceOnActors || EntityEx(Other).bReflective ||
				(!Other.bIsPlayer && !EntityEx(Other).bCountKill))
			{
				angle = AngleMod360(atan2(Origin.y - Other.Origin.y,
					Origin.x - Other.Origin.x) + (Random() * 16.0 - 8.0));
				speed = Length(Velocity);
				speed = speed * 0.75;
				Angles.yaw = angle;
				Velocity.x = speed * cos(angle);
				Velocity.y = speed * sin(angle);
				if (!bNoBounceSound && SightSound)
				{
					PlaySound(SightSound, CHAN_VOICE);
				}
			}
			else
			{
				// Struck a player/creature
				ExplodeMissile(EntityEx(Other));
			}
			return;
		}
		if (EntityEx(Other).bReflective)
		{
			angle = EntityEx(Other).GetReflectedAngle(self);
			if (angle != -1.0)
			{
				// Reflect the missile along angle
				Angles.yaw = angle;
				Velocity.x = (Speed / 2.0) * cos(angle);
				Velocity.y = (Speed / 2.0) * sin(angle);
				Velocity.z = -Velocity.z * 0.5;
				if (bSeekerMissile)
				{
					Tracer = Target;
				}
				Target = EntityEx(Other);
				return;
			}
		}
		// Explode a missile
		ExplodeMissile(EntityEx(Other));
	}
	else if (bSlide)
	{
		// Try to slide along it
		// Slide against mobj
		if (TryMove(vector(Origin.x, ptryy, Origin.z), true))
		{
			Velocity.x = 0.0;
		}
		else if (TryMove(vector(ptryx, Origin.y, Origin.z), true))
		{
			Velocity.y = 0.0;
		}
		else
		{
			Velocity.x = 0.0;
			Velocity.y = 0.0;
		}
	}
	else
	{
		Velocity.x = 0.0;
		Velocity.y = 0.0;
	}
}

//==========================================================================
//
//	HitFloor
//
//==========================================================================

final bool HitFloor(float DeltaTime)
{
	float	vdot;

	//	Trigger hit floor sector actions.
	if (Sector->ActionList && GetPlanePointZ(&Sector->floor, Origin) == FloorZ)
	{
		SectorAction(Sector->ActionList).TriggerAction(self,
			SectorAction::SECSPAC_HitFloor);
	}

	if (bMissile && (bColideWithWorld ||
		!LineSpecialGameInfo(Level.Game).bNoClipIgnoreFloor))
	{
		Origin.z = FloorZ;
		if (BounceType != BOUNCE_None)
		{
			FloorBounceMissile();
			return false;
		}
		if (bNoExplodeFloor)
		{
			// The spirit struck the ground
			Velocity.z = 0.0;
			HitFloorType();
			return false;
		}
		if (bIgnoreFloorStep)
		{
			// Minotaur floor fire can go up steps
			return false;
		}
		HitFloorType();
		ExplodeMissile(none);
		return false;
	}

	vdot = DotProduct(Velocity, Floor->normal);
	if (bCountKill)	// Blasted mobj falling
	{
		if (vdot < -23.0 * 35.0)
		{
			MonsterFallingDamage();
		}
	}
	Origin.z = FloorZ;
	if (vdot < -0.1)
	{
		// Spawn splashes, etc.
		HitFloorType();
		if (DamageType == 'Ice' && vdot < -DEFAULT_GRAVITY * 0.25)
		{
			StateTime = 0.1;
			Velocity = vector(0.0, 0.0, 0.0);
			return false;
		}
		//	Do some special action when hitting the floor.
		OnHitFloor();
		if (bIsPlayer)
		{
			PlayerEx(Player).JumpTime = 0.2;	// delay any jumping for a short time
			if (vdot < -DEFAULT_GRAVITY * 0.25 && !bNoGravity)
			{
				// Squat down.
				// Decrease ViewHeight for a moment after hitting the ground
				// (hard), and utter appropriate sound.
				PlayerLandedOnThing();
			}
		}
		//Velocity -= vdot * Floor->normal;
		Velocity.z = 0.0;
	}
	if (bSkullFly)
	{
		// The skull slammed into something
		Velocity.z = -Velocity.z;
	}
	Crash();
	return true;
}

//==========================================================================
//
//	HitCeiling
//
//==========================================================================

final bool HitCeiling()
{
	float	vdot;

	//	Trigger hit ceiling sector actions.
	if (Sector->ActionList && GetPlanePointZ(&Sector->ceiling, Origin) ==
		CeilingZ)
	{
		SectorAction(Sector->ActionList).TriggerAction(self,
			SectorAction::SECSPAC_HitCeiling);
	}

	vdot = DotProduct(Velocity, Ceiling->normal);
	if (vdot < 0.0)
	{
		Velocity -= vdot * Ceiling->normal;
	}
	Origin.z = CeilingZ - Height;

	if (bMissile && (bColideWithWorld ||
		!LineSpecialGameInfo(Level.Game).bNoClipIgnoreFloor))
	{
		if (BounceType != BOUNCE_None)
		{
			CeilingBounceMissile();
			return false;
		}
		if (bIgnoreCeilingStep)
		{
			return false;
		}
		if (Ceiling->pic == Level.Game.skyflatnum)
		{
			if (bBounceSky)
			{
				Velocity = vector(0.0, 0.0, -1.0 * 35.0);
			}
			else if (bExplodeOnSky)
			{
				ExplodeMissile(none);
			}
			else
			{
				Destroy();
			}
			return false;
		}
		ExplodeMissile(none);
		return false;
	}
	if (bSkullFly)
	{
		// the skull slammed into something
		Velocity.z = -Velocity.z;
	}
	return true;
}

//==========================================================================
//
//	FloorBounceMissile
//
//==========================================================================

void FloorBounceMissile()
{
	float	vdot;

	if (HitFloorType())
	{
		//	Landed on some kind of liquid.
		if (bExplodeOnWater)
		{
			ExplodeMissile(none);
			return;
		}
		if (!bCanBounceWater)
		{
			Destroy();
			return;
		}
	}

	//	If number of bounces is limited.
	if (BounceCount > 0 && --BounceCount <= 0)
	{
		ExplodeMissile(none);
		return;
	}

	vdot = DotProduct(Velocity, Floor->normal);

	if (BounceType == BOUNCE_Heretic)
	{
		Velocity -= 2.0 * vdot * Floor->normal;
		Angles.yaw = atan2(Velocity.y, Velocity.x);
		SetState(FindState('Death'));
		return;
	}

	Velocity = (Velocity - 2.0 * vdot * Floor->normal) * BounceFactor;
	Angles.yaw = atan2(Velocity.y, Velocity.x);

	if (!bNoBounceSound && SightSound)
	{
		PlaySound(SightSound, CHAN_VOICE);
	}

	if (BounceType == BOUNCE_Doom)
	{
		if (!bNoGravity && Velocity.z < 3.0 * 35.0)
		{
			BounceType = BOUNCE_None;
		}
	}
}

//==========================================================================
//
//	CeilingBounceMissile
//
//==========================================================================

final void CeilingBounceMissile()
{
	float	vdot;

	//	If number of bounces is limited.
	if (BounceCount > 0 && --BounceCount <= 0)
	{
		ExplodeMissile(none);
		return;
	}

	vdot = DotProduct(Velocity, Ceiling->normal);

	if (BounceType == BOUNCE_Heretic)
	{
		Velocity -= 2.0 * vdot * Ceiling->normal;
		Angles.yaw = atan2(Velocity.y, Velocity.x);
		SetState(FindState('Death'));
		return;
	}

	// Reverse momentum here for ceiling bounce
	Velocity = (Velocity - 2.0 * vdot * Ceiling->normal) * BounceFactor;
	Angles.yaw = atan2(Velocity.y, Velocity.x);

	if (!bNoBounceSound && SightSound)
	{
		PlaySound(SightSound, CHAN_VOICE);
	}
}

//==========================================================================
//
//	GetReflectedAngle
//
//==========================================================================

final float GetReflectedAngle(EntityEx Other)
{
	if (Other.bDontReflect)
	{
		return -1.0;
	}

	float angle = atan2(Other.Origin.y - Origin.y,
		Other.Origin.x - Origin.x);

	if (bShieldReflect)
	{
		// Change angle for delflection/reflection
		if (fabs(AngleMod180(angle - Angles.yaw)) > 45.0 * 45.0 / 32.0)
		{
			return -1.0;
		}
		if (Other.bDontShieldReflect)
		{
			return -1.0;
		}
		// Deflection
		if (Random() < 0.5)
		{
			angle = AngleMod360(angle + 45.0);
		}
		else
		{
			angle = AngleMod360(angle - 45.0);
		}
		return angle;
	}

	if (bDeflect)
	{
		// Change angle for delflection
		if (Random() < 0.5)
		{
			angle = AngleMod360(angle + 45.0);
		}
		else
		{
			angle = AngleMod360(angle - 45.0);
		}
		return angle;
	}

	// Change angle for reflection
	angle = AngleMod360(angle + Random() * 16.0 - 8.0);
	return angle;
}

//==========================================================================
//
//	Crash
//
//==========================================================================

final void Crash()
{
	state CrashState = FindState('Crash');
	if (CrashState && bCorpse && DamageType != 'Ice')
	{
		SetState(CrashState);
	}
}

//===========================================================================
//
//  PlayerLandedOnThing
//
//===========================================================================

final void PlayerLandedOnThing()
{
	PlayerEx(Player).DeltaViewHeight = Velocity.z / 8.0;
	FallingDamage();
	if (Health > 0 && !PlayerEx(Player).MorphTime)
	{
		if (Velocity.z < -DEFAULT_GRAVITY * 0.375)
		{
			PlaySound('*grunt', CHAN_VOICE);
		}
		if ((Origin.z > FloorZ || !GetFloorType()->bLiquid) &&
			!AreSoundsEquivalent('*grunt', '*land'))
		{
			PlaySound('*land', CHAN_BODY);
		}
	}
//FIXME Player.centreing = true;
}

//==========================================================================
//
//  FallingDamage
//
//==========================================================================

final void FallingDamage()
{
	int		damage;
	float	mom;
	float	dist;

	mom = fabs(Velocity.z);

	if (Level.bFallingDamage)
	{
		//	Hexen style falling damage.
		if (mom <= 23.0 * 35.0)
		{
			//	Not fast enough.
			return;
		}
		if (mom >= 63.0 * 35.0)
		{
			//	Automatic death.
			damage = 10000;
		}
		else
		{
			dist = mom / 35.0 * 16.0 / 23.0;
			damage = ftoi(dist * dist / 10.0) - 24;
			if (Velocity.z > -39.0 * 35.0 && damage > Health && Health != 1)
			{
				//	No-death threshold.
				damage = Health - 1;
			}
		}
	}
	else if (Level.bOldFallingDamage)
	{
		//	ZDoom style falling damage, less damaging.
		if (mom <= 19.0 * 35.0)
		{
			//	Not fast enough.
			return;
		}
		if (mom >= 84.0 * 35.0)
		{
			//	Automatic death.
			damage = 10000;
		}
		else
		{
			mom = mom / 35.0;
			damage = (ftoi(mom * mom * 11.0 / 128.0) - 30) / 2;
			if (damage < 1)
			{
				damage = 1;
			}
		}
	}
	else if (Level.bStrifeFallingDamage)
	{
		//	Strife style falling damage, very strong.
		if (mom <= 20.0 * 35.0)
		{
			//	Not fast enough.
			return;
		}
		damage = ftoi(mom * (8192.0 / 3125.0 / 35.0));
	}
	else
	{
		return;
	}

	PlaySound('*land', CHAN_BODY);
	Damage(none, none, damage, 'Falling');
	LineSpecialLevelInfo(Level).NoiseAlert(self, self);
}

//==========================================================================
//
//  MonsterFallingDamage
//
//==========================================================================

final void MonsterFallingDamage()
{
	int		damage;
	float	mom;

	if (!Level.bMonsterFallingDamage)
	{
		return;
	}

	mom = fabs(Velocity.z) / 35.0;
	if (mom > 35.0)
	{
		// automatic death
		damage = 10000;
	}
	else
	{
		damage = ftoi((mom - 23.0) * 6.0);
	}
	damage = 10000;	// always kill 'em
	Damage(none, none, damage, 'Falling');
}

//==========================================================================
//
//	BlasterPhysics
//
//  Thinker for the ultra-fast blaster PL2 ripper-spawning missile.
//
//==========================================================================

final bool BlasterPhysics(float DeltaTime)
{
	int			i;
	float		xfrac;
	float		yfrac;
	float		zfrac;
	bool		changexy;
	tmtrace_t	tmtrace;

	// Handle movement
	if (Velocity.x || Velocity.y || (Origin.z != FloorZ) || Velocity.z)
	{
		xfrac = Velocity.x * DeltaTime / 8.0;
		yfrac = Velocity.y * DeltaTime / 8.0;
		zfrac = Velocity.z * DeltaTime / 8.0;
		changexy = xfrac || yfrac;
		for (i = 0; i < 8; i++)
		{
			if (changexy)
			{
				if (!TryMoveEx(&tmtrace, vector(Origin.x + xfrac,
					Origin.y + yfrac, Origin.z), true))
				{
					// Blocked move
					if (tmtrace.BlockingMobj)
					{
						BlasterHitMobj(tmtrace.BlockingMobj);
					}
					else
					{
						ExplodeMissile(none);
					}
					return !IsDestroyed();
				}
			}
			Origin.z += zfrac;
			if (Origin.z <= FloorZ)
			{
				// Hit the floor
				Origin.z = FloorZ;
				HitFloorType();
				ExplodeMissile(none);
				return !IsDestroyed();
			}
			if (Origin.z + Height > CeilingZ)
			{
				// Hit the ceiling
				Origin.z = CeilingZ - Height;
				ExplodeMissile(none);
				return !IsDestroyed();
			}
			if (changexy)
			{
				SpawnBlasterEffects();
			}
		}
	}
	return true;
}

//==========================================================================
//
//  ResetBlasted
//
//==========================================================================

final void ResetBlasted()
{
	bBlasted = false;
	if (!bIceCorpse)
	{
		bSlide = false;
	}
}

//==========================================================================
//
//	OnHitFloor
//
//==========================================================================

void OnHitFloor()
{
}

//==========================================================================
//
//	BlasterHitMobj
//
//==========================================================================

bool BlasterHitMobj(Entity Other)
{
	return ExplodeMissile(EntityEx(Other));
}

//==========================================================================
//
//  SpawnBlasterEffects
//
//==========================================================================

void SpawnBlasterEffects()
{
}

//==========================================================================
//
//  HitFloorType
//
//==========================================================================

final bool HitFloorType()
{
	EntityEx		A;
	TVec			org;
	bool			smallsplash = false;
	VTerrainInfo*	TInfo;
	VSplashInfo*	SInfo;

	if (FloorZ != GetPlanePointZ(&Sector->floor, Origin))
	{
		// don't splash if landing on the edge above water/lava/etc....
		return false;
	}

	// Things that don't splash go here
	if (bNoSplash)
	{
		return false;
	}

	TInfo = GetFloorType();

	// Small splash for small masses
	if (Mass < 10.0 || bSmallSplash)
		smallsplash = true;

	if (TInfo->DamageAmount && bIsPlayer &&
		XLevel.TicTime & TInfo->DamageTimeMask)
	{
		Damage(none, none, TInfo->DamageAmount, TInfo->DamageType);
	}

	SInfo = GetSplashInfo(TInfo->Splash);
	if (!SInfo)
	{
		return TInfo->bLiquid;
	}

	org = Origin;
	org.z = FloorZ;

	if (smallsplash)
	{
		if (SInfo->SmallClass)
		{
			A = Spawn(class<EntityEx>(SInfo->SmallClass), org);
			A.FloorClip += SInfo->SmallClip;
			if (SInfo->SmallSound)
			{
				A.PlaySound(SInfo->SmallSound, CHAN_VOICE);
			}
		}
	}
	else
	{
		if (SInfo->BaseClass)
		{
			A = Spawn(class<EntityEx>(SInfo->BaseClass), org);
			if (SInfo->Sound && !SInfo->ChunkClass)
			{
				A.PlaySound(SInfo->Sound, CHAN_VOICE);
			}
		}
		if (SInfo->ChunkClass)
		{
			A = Spawn(class<EntityEx>(SInfo->ChunkClass), org);
			A.Target = self;
			A.Velocity.x = (Random() - Random()) * SInfo->ChunkXVelMul * 35.0;
			A.Velocity.y = (Random() - Random()) * SInfo->ChunkYVelMul * 35.0;
			A.Velocity.z = (SInfo->ChunkBaseZVel + Random() *
				SInfo->ChunkZVelMul) * 35.0;
			if (SInfo->Sound)
			{
				A.PlaySound(SInfo->Sound, CHAN_VOICE);
			}
		}
		if (SInfo->Sound && !SInfo->BaseClass && !SInfo->ChunkClass)
		{
			PlaySound(SInfo->Sound, CHAN_BODY);
		}
		if (!SInfo->bNoAlert && bIsPlayer)
		{
			LineSpecialLevelInfo(Level).NoiseAlert(self, self);
		}
	}
	return TInfo->bLiquid;
}

//===========================================================================
//
//  GetFloorType
//
//===========================================================================

final VTerrainInfo* GetFloorType()
{
	return TerrainType(Floor->pic);
}

//==========================================================================
//
//	HandleFloorclip
//
//==========================================================================

final void HandleFloorclip()
{
	if (bFloorClip)
	{
		VTerrainInfo* TInfo = GetFloorType();
		if (Origin.z == FloorZ && TInfo->bLiquid)
		{
			FloorClip = TInfo->FootClip;
		}
		else
		{
			FloorClip = 0.0;
		}
	}
}

//==========================================================================
//
//  ApplyFriction
//
//==========================================================================

final void ApplyFriction()
{
	float dot;

	if (bMissile || bSkullFly)
	{
		// no friction for missiles ever
		return;
	}

	if (Origin.z > FloorZ && !bOnMobj && WaterLevel < 2 && !bFly &&
		!bFallingFriction)
	{
		// no friction when airborne
		return;
	}

	//  Clip velocity
	if (Origin.z <= FloorZ)
	{
		dot = DotProduct(Velocity, Floor->normal);
		if (dot < 0.0)
		{
			Velocity -= dot * Floor->normal;
		}
	}

	if (bCorpse)
	{
		// Don't stop sliding if halfway off a step with some momentum
		if (Velocity.x > 0.25 * 35.0 || Velocity.x < -0.25 * 35.0 ||
			Velocity.y > 0.25 * 35.0 || Velocity.y < -0.25 * 35.0)
		{
			if (FloorZ != GetPlanePointZ(&Sector->floor, Origin))
			{
				return;
			}
		}
	}

	if (Velocity.x > -STOPSPEED && Velocity.x < STOPSPEED &&
		Velocity.y > -STOPSPEED && Velocity.y < STOPSPEED &&
		Velocity.z > -STOPSPEED && Velocity.z < STOPSPEED &&
		(!bIsPlayer || (!Player.ForwardMove && !Player.SideMove)))
	{
		if (bIsPlayer)
		{
			// if in a walking frame, stop moving
			if (StateIsInRange(State, SeeState, none, 4))
			{
				SetState(IdleState);
			}
		}
		Velocity = vector(0.0, 0.0, 0.0);
	}
	else
	{
		// slow down
		Velocity -= Velocity * (GetFriction() * Level.Game.frametime);
	}
}

//===========================================================================
//
//  GetFriction
//
//===========================================================================

final float GetFriction()
{
	if (WaterLevel > 1)
	{
		return FRICTION_WATER;
	}
	if (bFly && Origin.z > FloorZ && !bOnMobj)
	{
		return FRICTION_FLY;
	}
	if ((Sector->special & SECSPEC_BASE_MASK) == SECSPEC_FrictionLow)
	{
		return FRICTION_LOW;
	}
	VTerrainInfo* TInfo = GetFloorType();
	if (TInfo->Friction)
	{
		return TInfo->Friction;
	}
	if (Sector->special & SECSPEC_FRICTION_MASK)
	{
		return Sector->Friction;
	}
	return FRICTION_NORMAL;
}
