
/*
	Generic Attacks for KRPG
*/

//==========================================================================
//
//	A_AimGrenade
//
//==========================================================================

final void A_AimGrenade(class<Actor> ItemType, float Pitch, float MaxSpeed, state FailedState,
						optional EntityEx AimTarget)
{
	float VelXY, VelZ; // dummies;
	if (!AimThrowAngle(ItemType, specified_AimTarget ? AimTarget : Target, Pitch,
																MaxSpeed, VelXY, VelZ))
	{
		SetState(FailedState);
	}
}

//==========================================================================
//
//	A_ThrowAimedGrenade
//
//==========================================================================

final void A_ThrowAimedGrenade(class<Actor> ItemType, float Pitch, float MaxSpeed,
						  optional float SpawnHeight, optional float Precision /*0-1.0*/,
						  optional EntityEx AimTarget, optional bool UseAmmo)
{
	if (!specified_AimTarget)
		AimTarget = Target;

	float VelXY, VelZ;

	if (!AimThrowAngle(ItemType, AimTarget, Pitch, MaxSpeed, VelXY, VelZ))
	{
		return;
	}


	if (specified_Precision)
	{
		if (Precision > 1.0) Precision = 1.0;
		else if (Precision < 0.0) Precision = 0.0;
		Precision = 1.0 - Precision;	// invert value to simplify futher calculations
	}
	else
	{
		Precision = 0.0;				// this actually means 0% deviation
	}

	if (Precision)
	{
		VelXY += VelXY * (Random() * 2.0 - 1.0) * Precision;
		VelZ += VelZ * (Random() * 2.0 - 1.0) * Precision;
	}

	//A_ThrowGrenadeEx(ItemType, SpawnHeight, VelXY, VelZ, UseAmmo);
	Actor A = Spawn(ItemType, Origin +
		vector(0.0, 0.0, SpawnHeight - FloorClip));
	if (A)
	{
		A.PlayMissileSpawnSound(self);
		A.Velocity.x = VelXY * cos(Angles.yaw);
		A.Velocity.y = VelXY * sin(Angles.yaw);
		A.Velocity.z = VelZ;
		A.Target = self;// CHECKME
		if (A.bRandomise)
		{
			A.StateTime -= Random() * 0.1;
			if (A.StateTime < 1.0 / 35.0)
			{
				A.StateTime = 1.0 / 35.0;
			}
		}
		A.CheckMissileSpawn();
	}
}

//==========================================================================
//
//	AimThrowAngle
//
//==========================================================================

final bool AimThrowAngle(class<Actor> ItemType, EntityEx AimTarget, float Pitch, float MaxSpeed, out float VelXY, out float VelZ)
{
	if (!AimTarget)
		return false;

	float aim_distance = DistTo2(AimTarget);
	float gravity = ItemType.default.Gravity * Level.Gravity/* * Sector.Gravity*/;
	VelXY = MaxSpeed * 35.0 * cos(Pitch);
	VelZ = MaxSpeed * 35.0 * sin(Pitch);

	float max_timereachZ = VelZ / gravity;
	float max_Zdist = VelZ * max_timereachZ - (gravity * max_timereachZ * max_timereachZ)/2.0;

	if (max_Zdist < AimTarget.Origin.z - Origin.z)
	{
		return false;
	}

	float max_timereachN = sqrt(2.0 * (max_Zdist + (Origin.z - AimTarget.Origin.z)) / gravity);
	float max_time_total = max_timereachZ + max_timereachN;
	float max_XYdist = max_time_total * VelXY;


	// Check other opportunities
	if (ItemType.default.BounceType == BOUNCE_Doom ||
			ItemType.default.BounceType == BOUNCE_Hexen)
	{
		max_XYdist += max_XYdist / 4.0;
	}
	else if (ItemType.default.BounceType == BOUNCE_Heretic)
	{
		max_XYdist += max_XYdist;
	}
	max_XYdist += 64.0/* half of the default explosion radius */;


	if (max_XYdist > aim_distance)
	{
		VelXY *= (aim_distance/max_XYdist);

		if (AimTarget.Origin.z < Origin.z)
		{
			VelZ *= (aim_distance/max_XYdist);
		}
	}
	else if (max_XYdist < aim_distance)
	{
		return false;
	}
	return true;
}
