//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ## ###  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**				   ######  #####   ######
//**	               ##   ## ##  ## ##    ##
//**	     		   ##   ## ##  ## ##   
//**	               #####   #####  ##  ####
//**	     		   ## ###  ##     ###   ##
//**	     		   ##  ### ##      ######
//**
//**    $Id$
//**
//**    Copyright (C) 2004-2008 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class ACDamageDealer : ActorCondition;


bool		bDoDamage;
bool		bConditional;
bool		bProportionalToTimeDelta;	// use with DamageDelay = 0.0
float		DamageTime;
float		DamageDelay;
int			DamageValue;
int			AccumulatedDamage;
float		DamageLevelFactor;
name		DamageType;


//==========================================================================
//
//	Do
//
//==========================================================================

void Do(float deltaTime)
{
	if (DamageTime > 0.0)
	{
		DamageTime -= deltaTime;
		if (DamageTime > 0.0)
			return;
	}
	
	if (!bConditional || bDoDamage)
	{
		int RealDamage;

		if (AccumulatedDamage > 0)
			DamageValue = AccumulatedDamage;

		if (bProportionalToTimeDelta)
			RealDamage = ftoi(itof(DamageValue) * deltaTime);
		else
			RealDamage = DamageValue;

		if (DamageLevelFactor > 0.0)
		{
			RealDamage = ftoi(itof(RealDamage * Level) * DamageLevelFactor);
		}

		ARecepient.Damage(none, AInstigator, RealDamage, DamageType, true /* ignore armor */);

		DamageTime = DamageDelay;
		bDoDamage = false;
		AccumulatedDamage = 0;
	}
}



defaultproperties
{
	bDontCallDo = false;	// AC default is true
	bIsNegative = true;
}
