//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ## ###  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**				   ######  #####   ######
//**	               ##   ## ##  ## ##    ##
//**	     		   ##   ## ##  ## ##   
//**	               #####   #####  ##  ####
//**	     		   ## ###  ##     ###   ##
//**	     		   ##  ### ##      ######
//**
//**    $Id: HexenWeapon.Head.vc 1638 2008-08-28 19:10:17Z firebrand_kh $
//**
//**    Copyright (C) 2004-2008 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class HexenWeapon : Weapon
	abstract;

const float AxeRange = 9.0 * MELEERANGE / 4.0;
const float HammerRange = MELEERANGE + MELEERANGE / 2.0;


class<Actor>	WeaponClass;	// [CW] could be KRPGFighterPlayer, KRPGClericPlayer or KRPGMagePlayer
int				Slot;			// A slot in arsenal matrix (1-10)

//	[FB] Third mana type
//	Type of ammo weapon needs to operate.
class<Ammo>		AmmoType3;
//	How much ammo to give when picked up.
int				AmmoGive3;
//	How much ammo used in each shot.
int				AmmoUse3;
//	Runtime in-inventory reference.
Ammo			Ammo3;

// [CW] AmmoUse 1-3 determines ammo usage for primary attacks, these will determine
// mana usage for secondary attacks
int				AmmoSecondaryUse1;
int				AmmoSecondaryUse2;
int				AmmoSecondaryUse3;

bool			bMagicMelee;	// tells to use intelligence instead of strength
bool			bMagicMissile;	// tells to use intelligence instead of dexterity

// [CW] NOTE: EntityEx has two interesting variable members: MeleeDamage and MissileDamage;
// since Weapon is an Actor, we can use them as a generic damage values for HexenWeapon,
// without inventing new ones.
//
// MeleeDamage shall be used as a constant damage value. As for random part, an extra
// variable should be used: MeleeHitDice. It is a parameter for HITDICE method;
// HITDICE is a member of EntityEx (defined in EntityEx.Misc) and basically it rolls a
// random value between (1 - 8) * X, where X is a passed parameter.
//
// MissileDamage when applied to missile actors, is used as a parameter for HITDICE
// on its own (so, basically, missiles do not have constant damage).
// MissileHitDice property is usable only for instant ranged attacks (aka hitscan);
// for that kind of attacks MissileDamage should act as a constant damage part.
//
// int MeleeDamage;		// generic melee damage of a weapon
// int MissileDamage;	// generic missile damage of a weapon (missile-spawning weapons
//						// should set this to their missiles; set this to 0 to ignore it)
//
int				MeleeHitDice;
int				MissileHitDice;

float			MeleeFarRange;
float			MeleeCloseRange;
float			HitPrecision;
float			HitThrust;
class<Actor>	MeleePuffType;	// puff this weapon creates in melee
name			MeleeAttackSound;
name			MeleeHitSound;

class<Actor>	MissileType;
name			MissileSound;

replication
{
	reliable if (Role == ROLE_Authority && bNetOwner)
		Ammo3;
}

//==========================================================================
//
//  TryPickup
//
//	[CW] Ammo3 added
//
//==========================================================================

bool TryPickup(EntityEx Toucher)
{
	if (!ClassIsChildOf(Toucher.Class, GetClassReplacement(WeaponClass)))
	{
		// Wrong class, but try to pick up for mana
		if (ShouldStay() && !bDropped)
		{
			return false;
		}
		bool gaveMana = false;
		if (PlayerEx(Toucher.Player).GiveAmmo(AmmoType1, AmmoGive1))
		{
			gaveMana = true;
		}
		if (PlayerEx(Toucher.Player).GiveAmmo(AmmoType2, AmmoGive2))
		{
			gaveMana = true;
		}
		if (PlayerEx(Toucher.Player).GiveAmmo(AmmoType3, AmmoGive3))
		{
			gaveMana = true;
		}
		if (gaveMana)
		{
			GoAwayAndDie();
			GiveQuest(Toucher);
			return true;
		}
		return false;
	}

	return ::TryPickup(Toucher);
}

//==========================================================================
//
//	CreateCopy
//
//	[CW] Ammo3 added
//
//==========================================================================

Inventory CreateCopy(EntityEx Toucher)
{
	HexenWeapon Copy = HexenWeapon(::CreateCopy(Toucher));
	if (Copy)
	{
		Copy.AmmoGive1 = AmmoGive1;
		Copy.AmmoGive2 = AmmoGive2;
		Copy.AmmoGive3 = AmmoGive3;
	}
	return Copy;
}

//==========================================================================
//
//	CreateTossable
//
//	[CW] Ammo3 added
//
//==========================================================================

Inventory CreateTossable()
{
	//	Drop the wapon that is meant to be placed in a level, i.e. that
	// normaly gives you ammo.
	if (SisterWeapon && !default.AmmoGive1 && !default.AmmoGive2 &&
		!default.AmmoGive3 &&
		(SisterWeapon.default.AmmoGive1 > 0 ||
		SisterWeapon.default.AmmoGive2 > 0 ||
		HexenWeapon(SisterWeapon).default.AmmoGive3 > 0))
	{
		return SisterWeapon.CreateTossable();
	}

	HexenWeapon Copy = HexenWeapon(::CreateTossable());
	if (Copy)
	{
		//	If weapon has a sister weapon, remove it too.
		if (SisterWeapon)
		{
			SisterWeapon.SisterWeapon = none;
			SisterWeapon.Destroy();
		}
		//	Dropped weapons don't have ammo to prevent cheating.
		Copy.AmmoGive1 = 0;
		Copy.AmmoGive2 = 0;
		Copy.AmmoGive3 = 0;
	}
	return Copy;
}

//==========================================================================
//
//	AttachToOwner
//
//	[CW] Ammo3 added
//
//==========================================================================

void AttachToOwner(EntityEx NewOwner)
{
	::AttachToOwner(NewOwner);

	Ammo3 = AddAmmo(NewOwner, AmmoType3, AmmoGive3);
}

//==========================================================================
//
//	PickupForAmmo
//
//	[CW] Ammo3 added
//
//==========================================================================

bool PickupForAmmo(Weapon ExistingWeapon)
{
	// leave placed weapons forever on net games
	if (ShouldStay() && !bDropped)
	{
		return false;
	}
	bool gaveammo = false;
	if (AddExistingAmmo(ExistingWeapon.Ammo1, AmmoGive1))
	{
		gaveammo = true;
	}
	if (AddExistingAmmo(ExistingWeapon.Ammo2, AmmoGive2))
	{
		gaveammo = true;
	}
	if (AddExistingAmmo(HexenWeapon(ExistingWeapon).Ammo3, AmmoGive3))
	{
		gaveammo = true;
	}
	return gaveammo;
}

//==========================================================================
//
//  CheckAmmo
//
//  Returns true if there is enough mana to shoot.  If not, selects the
// next weapon to use.
//
//	[CW] Ammo3 added
//
//==========================================================================

bool CheckAmmo(byte Mode, bool AutoSwitch, optional bool RequireAmmo)
{
	if (Mode == FIRE_Either)
	{
		if (CheckAmmo(FIRE_Primary, false) || CheckAmmo(FIRE_Secondary, false))
		{
			return true;
		}
	}
	else
	{
		if (!RequireAmmo && bAmmoOptional)
		{
			return true;
		}

		int Amount1 = Ammo1 ? Ammo1.Amount : 0;
		int Amount2 = Ammo2 ? Ammo2.Amount : 0;
		int Amount3 = Ammo3 ? Ammo3.Amount : 0;

		bool Good = true;
		
		if (Mode == FIRE_Primary && (
			/*bPrimaryUseAmmo1*/ AmmoUse1 && (Amount1 < AmmoUse1) ||
			/*bPrimaryUseAmmo2*/ AmmoUse2 && (Amount2 < AmmoUse2) ||
			/*bPrimaryUseAmmo3*/ AmmoUse3 && (Amount3 < AmmoUse3)
			))
		{
			Good = false;
		}
		else if (Mode == FIRE_Secondary && (
			/*bAltUseAmmo1*/ AmmoSecondaryUse1 && (Amount1 < AmmoUse1) ||
			/*bAltUseAmmo2*/ AmmoSecondaryUse2 && (Amount2 < AmmoUse2) ||
			/*bAltUseAmmo3*/ AmmoSecondaryUse3 && (Amount3 < AmmoUse3)
			))
		{
			Good = false;
		}
		//	If weapon has no secondary fire, there's never enough ammo for it.
		else if (Mode == FIRE_Secondary && !FindState('AltFire'))
		{
			Good = false;
		}

		if (Good)
		{
			return true;
		}
	}

	if (!AutoSwitch)
	{
		return false;
	}

	Owner.Player.centreprint("No mana");

	// out of ammo, pick a weapon to change to
	Weapon Best = PlayerEx(Owner.Player).BestWeapon();

	PlayerEx(Owner.Player).PendingWeapon = Best;
	Owner.Player.SetViewState(ps_weapon, GetDownState());
	return false;
}

//==========================================================================
//
//	DepleteAmmoEx
//
//==========================================================================

bool DepleteAmmoEx(byte Mode, optional bool CheckEnough)
{
	//	Default parameter values
	if (!specified_CheckEnough)
	{
		CheckEnough = true;
	}

	if (CheckEnough && !CheckAmmo(Weapon::FIRE_Either, false))
	{
		return false;
	}

	if (Ammo1)
	{
		Ammo1.Amount -= AmmoUse1 * 10 / KRPGPlayerBase(Owner.Player).charisma;
		Actor(Owner.Player.MO).NotifyConditions(ActorCondition::notify_ManaUsed, none, AmmoUse1);
		// [FB] No negative ammo values!
		if (Ammo1.Amount < 0)
		{
			Ammo1.Amount = 0;
		}
	}
	if (Ammo2)
	{
		Ammo2.Amount -= AmmoUse2 * 10 / KRPGPlayerBase(Owner.Player).charisma;
		Actor(Owner.Player.MO).NotifyConditions(ActorCondition::notify_ManaUsed, none, AmmoUse2);
		if (Ammo2.Amount < 0)
		{
			Ammo2.Amount = 0;
		}
	}
	if (Ammo3)
	{
		Ammo3.Amount -= AmmoUse3 * 10 / KRPGPlayerBase(Owner.Player).charisma;
		Actor(Owner.Player.MO).NotifyConditions(ActorCondition::notify_ManaUsed, none, AmmoUse3);
		if (Ammo3.Amount < 0)
		{
			Ammo3.Amount = 0;
		}
	}

	return true;
}
