
//**************************************************************************
//
//
//	[KoraxRPG] Advanced actions
//
//
//**************************************************************************

//==========================================================================
//
//	A_Resurrect
//
//==========================================================================

final void A_Resurrect()
{
	A_DeQueueCorpse();

	bSolid = default.bSolid;
	bShootable = default.bShootable;
	bFloat = default.bFloat;
	bSkullFly = default.bSkullFly;
	bNoGravity = default.bNoGravity;
	bDropOff = default.bDropOff;
	bCorpse = false;
	bPassMobj = default.bPassMobj;

	bDynamicLight = default.bDynamicLight;
	bLeaveTrail = default.bLeaveTrail;

	Health = default.Health;
	Height = default.Height;

	Alpha = default.Alpha;
}

//==========================================================================
//
//	UseSpell
//
//==========================================================================

final bool UseSpell(Inventory Item)
{
	//	Don't use items if you are dead.
	if (Health <= 0)
	{
		return false;
	}
	// [CW] Do not use item other than SpellItem
	if (!SpellItem(Item))
	{
		return false;
	}
	//	Don't use item if don't actually have it.
	if (Item.Amount <= 0)
	{
		return false;
	}
	if (!SpellItem(Item).ActivateSpell(false, SpellItem(Item).Level))
	{
		return false;
	}

	return true;
}

//==========================================================================
//
//	A_SpiritsWithin
//
//	[FB] Make fallen foes spirits help monster out
//
//==========================================================================

final bool A_SpiritsWithin()
{
	int i;
	EntityEx tail;
	EntityEx next;
	EntityEx mo;
	EntityEx g;
	float dist;
	float limit;

	foreach AllThinkers(EntityEx, mo)
	{
		// Not a corpse
		if (!mo.bCorpse)
		{
			continue;
		}
		dist = DistTo(mo);
		limit = 500.0;
		if (dist > limit)
		{
			continue;
		}
		g = Spawn(HolySpirit, mo.Origin + vector(0.0, 0.0, 32.0));
		if (!g)
		{
			continue;
		}
		g.Angles.yaw = AngleMod360(mo.Angles.yaw +
			(45.0 + 45.0 / 2.0));
		g.Thrust(g.Angles.yaw, g.Speed * Level.Game.frametime);
		g.Target = self;
		g.Args[0] = 10;	// initial turn value
		g.Args[1] = 0;	// initial look angle
		if (Level.Game.deathmatch)
		{
			// Ghosts last slightly less longer in DeathMatch
			g.Health = 85;
		}
		if (Tracer)
		{
			g.Tracer = Tracer;
			//	Don't colide with world but colide with things, i.e explode
			g.bColideWithWorld = false;
			g.bSkullFly = true;
			g.bMissile = false;
		}
		tail = Spawn(HolyTail, g.Origin);
		tail.Target = g;	// parent
		for (i = 1; i < 3; i++)
		{
			next = Spawn(HolyTailTrail, g.Origin);
			tail.Tracer = next;
			tail = next;
		}
		g.PlaySound(g.ActiveSound, CHAN_VOICE);
		mo.SetState(mo.FindState('FreeTargMobj'));
	}

	return true;
}

//==========================================================================
//
//	FaceActorInstant
//
//	[CW] Not sure if there's a common method for such simple action..
//
//==========================================================================

final void FaceActorInstant(EntityEx target)
{
	Angles.yaw = atan2(target.Origin.y - Origin.y,
		target.Origin.x - Origin.x);
}

//**************************************************************************
//
//
//	[KoraxRPG] Advanced interaction
//
//
//**************************************************************************

//==========================================================================
//
//	CanBeUsed
//
//	TODO
//
//==========================================================================

bool CanBeUsed()
{
	return true;
}

//==========================================================================
//
//	UseThing
//
//==========================================================================

bool UseThing(EntityEx Thing)
{
	if (Thing == self)
	{
		return false;
	}

	if (Thing.bUseSpecial && Thing.Special && Level.ExecuteActionSpecial(
		Thing.Special, Thing.Args[0], Thing.Args[1], Thing.Args[2],
		Thing.Args[3], Thing.Args[4], NULL, 0, self))
	{
		return true;
	}

	// [CW] TODO: thinkout what conversation style do we need;
	//			  also, should other persons have ability to talk with each other?
	//
	//dprint("UseThing: Thing Class = %n, ConID = %i", GetClassName(Thing.Class), Thing.ConversationID);
	if (Thing.ConversationID > 0 && LineSpecialLevelInfo(Level).StartConversation(self, Thing))
	{
		return true;
	}

	if (UseThingSpecial(Thing))
	{
		return true;
	}

	return Actor(Thing).IsBeingUsed(self);
}

//==========================================================================
//
//	UseThingSpecial
//
//==========================================================================

bool UseThingSpecial(EntityEx Thing)
{
	return false;
}

//==========================================================================
//
//	IsBeingUsed
//
//	[CW] Override for actors that could be 'used'
//
//==========================================================================

bool IsBeingUsed(Actor User)
{
	return false;
}
