//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ## ###  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**				   ######  #####   ######
//**	               ##   ## ##  ## ##    ##
//**	     		   ##   ## ##  ## ##   
//**	               #####   #####  ##  ####
//**	     		   ## ###  ##     ###   ##
//**	     		   ##  ### ##      ######
//**
//**    $Id: template.vc 1638 2008-08-28 19:10:17Z firebrand_kh $
//**
//**    Copyright (C) 2004-2008 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

//**************************************************************************
//
//
//	[KoraxRPG] Advanced actions
//
//
//**************************************************************************

//==========================================================================
//
//	A_Resurrect
//
//==========================================================================

final void A_Resurrect()
{
	A_DeQueueCorpse();

	bSolid = default.bSolid;
	bShootable = default.bShootable;
	bFloat = default.bFloat;
	bSkullFly = default.bSkullFly;
	bNoGravity = default.bNoGravity;
	bDropOff = default.bDropOff;
	bCorpse = false;
	bPassMobj = default.bPassMobj;

	bDynamicLight = default.bDynamicLight;
	bLeaveTrail = default.bLeaveTrail;

	Health = default.Health;
	Height = default.Height;

	Alpha = default.Alpha;
}

//==========================================================================
//
//	UseSpell
//
//==========================================================================

final bool UseSpell(Inventory Item)
{
	//	Don't use items if you are dead.
	if (Health <= 0)
	{
		return false;
	}
	// [CW] Do not use item other than SpellItem
	if (!SpellItem(Item))
	{
		return false;
	}
	//	Don't use item if don't actually have it.
	if (Item.Amount <= 0)
	{
		return false;
	}
	if (!SpellItem(Item).ActivateSpell(false, SpellItem(Item).Level))
	{
		return false;
	}

	return true;
}

//==========================================================================
//
//	A_SpiritsWithin
//
//	[FB] Make fallen foes spirits help monster out
//
//==========================================================================

final bool A_SpiritsWithin()
{
	int i;
	EntityEx tail;
	EntityEx next;
	EntityEx mo;
	EntityEx g;
	float dist;
	float limit;

	foreach AllThinkers(EntityEx, mo)
	{
		// Not a corpse
		if (!mo.bCorpse)
		{
			continue;
		}
		dist = DistTo(mo);
		limit = 500.0;
		if (dist > limit)
		{
			continue;
		}
		g = Spawn(HolySpirit, mo.Origin + vector(0.0, 0.0, 32.0));
		if (!g)
		{
			continue;
		}
		g.Angles.yaw = AngleMod360(mo.Angles.yaw +
			(45.0 + 45.0 / 2.0));
		g.Thrust(g.Angles.yaw, g.Speed * Level.Game.frametime);
		g.Target = self;
		g.Args[0] = 10;	// initial turn value
		g.Args[1] = 0;	// initial look angle
		if (Level.Game.deathmatch)
		{
			// Ghosts last slightly less longer in DeathMatch
			g.Health = 85;
		}
		if (Tracer)
		{
			g.Tracer = Tracer;
			//	Don't colide with world but colide with things, i.e explode
			g.bColideWithWorld = false;
			g.bSkullFly = true;
			g.bMissile = false;
		}
		tail = Spawn(HolyTail, g.Origin);
		tail.Target = g;	// parent
		for (i = 1; i < 3; i++)
		{
			next = Spawn(HolyTailTrail, g.Origin);
			tail.Tracer = next;
			tail = next;
		}
		g.PlaySound(g.ActiveSound, CHAN_VOICE);
		mo.SetState(mo.FindState('FreeTargMobj'));
	}

	return true;
}

//==========================================================================
//
//	FaceActorInstant
//
//	[CW] Not sure if there's a common method for such simple action..
//
//==========================================================================

final void FaceActorInstant(EntityEx target)
{
	Angles.yaw = atan2(target.Origin.y - Origin.y,
		target.Origin.x - Origin.x);
}

//==========================================================================
//
//  A_GenericDoBlur
//
//==========================================================================

final void A_GenericDoBlur(int CountMask, int CountAdd, float ThrustForce, name SoundName)
{
	Special1 = (P_Random() & CountMask) + CountAdd;	// P_Random number of blurs
	if (P_Random() < 120)
	{
		Thrust(AngleMod360(Angles.yaw + 90.0), ThrustForce);
	}
	else if (P_Random() > 125)
	{
		Thrust(AngleMod360(Angles.yaw - 90.0), ThrustForce);
	}
	else
	{
		// Thrust forward
		Thrust(Angles.yaw, ThrustForce);
	}
	PlaySound(SoundName, CHAN_VOICE);
}

//==========================================================================
//
//	A_GenericSpawnBlur
//
//==========================================================================

final void A_GenericSpawnBlur(class<Actor> BlurClass, state AfterState)
{
	Actor blur;

	if (!--Special1)
	{
		Velocity.x = 0.0;
		Velocity.y = 0.0;
		SetState(AfterState);
	}
	blur = Spawn(BlurClass, Origin);
	if (blur)
	{
		blur.Angles = Angles;
	}
}
