
//**************************************************************************
//
//
//	[KoraxRPG] Advanced actions
//
//
//**************************************************************************

//==========================================================================
//
//	A_Resurrect
//
//==========================================================================

final void A_Resurrect()
{
	A_DeQueueCorpse();

	bSolid = default.bSolid;
	bShootable = default.bShootable;
	bFloat = default.bFloat;
	bSkullFly = default.bSkullFly;
	bNoGravity = default.bNoGravity;
	bDropOff = default.bDropOff;
	bCorpse = false;
	bPassMobj = default.bPassMobj;

	bDynamicLight = default.bDynamicLight;
	bLeaveTrail = default.bLeaveTrail;

	Health = default.Health;
	Height = default.Height;

	Alpha = default.Alpha;
}

//==========================================================================
//
//	UseSpell
//
//==========================================================================

final bool UseSpell(Inventory Item)
{
	//	Don't use items if you are dead.
	if (Health <= 0)
	{
		return false;
	}
	// [CW] Do not use item other than SpellItem
	if (!SpellItem(Item))
	{
		return false;
	}
	//	Don't use item if don't actually have it.
	if (Item.Amount <= 0)
	{
		return false;
	}
	if (!SpellItem(Item).ActivateSpell(false, SpellItem(Item).Level))
	{
		return false;
	}

	return true;
}

//==========================================================================
//
//	FaceActorInstant
//
//	[CW] Not sure if there's a common method for such simple action..
//
//==========================================================================

final void FaceActorInstant(EntityEx target)
{
	Angles.yaw = atan2(target.Origin.y - Origin.y,
		target.Origin.x - Origin.x);
}

//**************************************************************************
//
//
//	[KoraxRPG] Advanced interaction
//
//
//**************************************************************************

//==========================================================================
//
//	UseThing
//
//==========================================================================

bool UseThing(EntityEx Thing)
{
	if (Thing == self)
	{
		return false;
	}

	if (Thing.bUseSpecial && Thing.Special && Level.ExecuteActionSpecial(
		Thing.Special, Thing.Args[0], Thing.Args[1], Thing.Args[2],
		Thing.Args[3], Thing.Args[4], NULL, 0, self))
	{
		return true;
	}

	// [CW] TODO: thinkout what conversation style do we need;
	//			  also, should other persons have ability to talk with each other?
	//
	//dprint("UseThing: Thing Class = %n, ConID = %i", GetClassName(Thing.Class), Thing.ConversationID);
	if (Thing.ConversationID > 0 && LineSpecialLevelInfo(Level).StartConversation(self, Thing))
	{
		return true;
	}

	if (UseThingSpecial(Thing))
	{
		return true;
	}

	return Actor(Thing).IsBeingUsed(self);
}

//==========================================================================
//
//	UseThingSpecial
//
//==========================================================================

bool UseThingSpecial(EntityEx Thing)
{
	return false;
}

//==========================================================================
//
//	IsBeingUsed
//
//	[CW] Override for actors that could be 'used'
//
//==========================================================================

bool IsBeingUsed(Actor User)
{
	return false;
}
