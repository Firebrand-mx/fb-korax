
class ActorCondition : SpellInstance
	abstract;


// notified events
enum
{
	notify_RecepientDead,	// Actor = killer, param - unused
	notify_ManaUsed			// Actor - unused, param = mana amount
};


Actor			ARecepient;

string  CastMessage;

float	MaxAccumulatedLifePerLevel;

enum
{
	CSHIFT_OP_NONE,
	CSHIFT_OP_SET,
	CSHIFT_OP_OR,
	CSHIFT_OP_AND
};

int		CShiftOperation;		// Logical operation to use when modifying player's CShift
int		CShift;					// CShift value to set when active
bool	bCShiftDecreasePermanent;



//==========================================================================
//
//	Tick
//
//==========================================================================

void Tick(float deltaTime)
{
	if (!ARecepient)
	{
		FatalError("ActorCondition::Tick : no reference to Recepient actor, bad algorythm?");
		Dispell();
		return;
	}

	::Tick(deltaTime);
}

//==========================================================================
//
//	CanBeCastUpon
//
//==========================================================================

bool CanBeCastUpon(Actor recepient)
{
	return recepient.Health > 0;
}

//==========================================================================
//
//	MakeCShift
//
//==========================================================================

void MakeCShift(int * pCShift)
{
	int Amount;

	if (bCShiftDecreasePermanent)
		Amount = ftoi(LifeTime / LifeDuration * 256.0);
	else if (LifeTime / LifeDuration <= 0.25)
		Amount = ftoi((LifeTime / (LifeDuration * 0.25) * 256.0));
	else
		Amount = 0xFF;

	if (Amount > ((CShift >> 24) & 0x000000FF))
		Amount = (CShift >> 24) & 0x000000FF;
	Amount <<= 24;
	Amount |= CShift & 0x00FFFFFF;

	if (CShiftOperation != CSHIFT_OP_NONE)
	{
		switch (CShiftOperation)
		{
		case CSHIFT_OP_SET: *pCShift = Amount; break;
		case CSHIFT_OP_OR: *pCShift |= Amount; break;
		case CSHIFT_OP_AND: *pCShift &= Amount; break;
		}
	}
}

//==========================================================================
//
//	Notify
//
//==========================================================================

void Notify(int notification, EntityEx E, int param)
{
	switch (notification)
	{
	// Common AC behavior is to dispell when recepient dies
	case notify_RecepientDead:
		Dispell();
		break;
	}
}

//==========================================================================
//
//	Dispell
//
//==========================================================================

void Dispell()
{
	if (!ARecepient)
		FatalError("ActorCondition::Dispell : no reference to Recepient actor, bad algorythm?");
	//if (!Referer)
	//	FatalError("ActorCondition::Dispell : no reference to Referer linked object, bad algorythm?");

	Deactivate();
	//Referer.Destroy();	// remove reference to this AC from recepient's conditions list
	Destroy();
}


defaultproperties
{
	CastMessage = "";

	MaxAccumulatedLifePerLevel = -1.0;

	CShiftOperation = CSHIFT_OP_NONE;
	CShift = 0;
	bCShiftDecreasePermanent = false;
}
