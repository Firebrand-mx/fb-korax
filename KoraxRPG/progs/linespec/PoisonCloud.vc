//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ## ###  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**				   ######  #####   ######
//**	               ##   ## ##  ## ##    ##
//**	     		   ##   ## ##  ## ##   
//**	               #####   #####  ##  ####
//**	     		   ## ###  ##     ###   ##
//**	     		   ##  ### ##      ######
//**
//**    $Id$
//**
//**    Copyright (C) 2004-2008 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class PoisonCloud : Actor;

int LifeCount;
int BobIndex;
int SpawnChildren;	// [CW] advanced ability

//==========================================================================
//
//	GetExplodeParms
//
//==========================================================================

void GetExplodeParms(out int damage, out float distance, out byte damageSelf)
{
	damage = 4;
	distance = 40.0;
}

//==========================================================================
//
//  DoSpecialDamage
//
//==========================================================================

int DoSpecialDamage(EntityEx victim, EntityEx source, int damage)
{
	if (victim.bIsPlayer || victim.bMonster && P_Random() < 33)
	{
		if (!Actor(victim).GetCondition(ACPoisoned, Actor(source), 1))
		{
			Actor(victim).CastCondition(ACPoisoned, true, Actor(source), 1, 5.0);
			Actor(victim).Damage(/*self */none, Actor(source), 15 + (P_Random() & 15), 'Poison');// Don't play painsound
		}
		return -1;
	}
	return damage;
}

//==========================================================================
//
//	InitCloud
//
//	FIXME this sucks!
//
//==========================================================================

void InitCloud(Actor InstigatedBy)
{
	Velocity.x = 0.00001;	// missile objects must move to impact other objects
	LifeCount = 24 + (P_Random() & 7);
	BobIndex = 0;
	Target = InstigatedBy;
	Radius = 20.0;
	Height = 30.0;
	bColideWithThings = true;
	bColideWithWorld = true;
}

//===========================================================================
//
//  A_PoisonBagDamage
//
//===========================================================================

final void A_PoisonBagDamage()
{
	A_Explode();

	Origin.z += Level.Game.FloatBobOffsets[BobIndex] / 16.0;
	BobIndex = (BobIndex + 1) & 63;
}

//===========================================================================
//
//  A_PoisonBagCheck
//
//===========================================================================

final void A_PoisonBagCheck()
{
	if (!--LifeCount)
	{
		SetState(FindState('Death'));
	}
}

//===========================================================================
//
//  A_SpawnChildren
//
// [CW] Advanced ability (for Cleric's 6th weapon)
//
//===========================================================================

final void A_SpawnChildren()
{
	if (SpawnChildren > 0)
	{
		int i;
		for (i = 0; i < SpawnChildren; i++)
		{
			PoisonCloud pc = PoisonCloud(Spawn(PoisonCloud,
							 Origin + vector((Random() - 0.5) * 256.0, (Random() - 0.5) * 256.0,
							 (Random() - 0.5) * 64.0)));
			if (pc)
			{
				if (!TestLocation())
				{
					SetState(GetStatePlus(FindState('Death'), 1));
					return;
				}
				else
				{
					pc.InitCloud(Actor(Target));
					pc.Obituary = Obituary;
					pc.LifeCount >> 2;
					pc.Velocity.x = 0.00001;
					//pc.bCheckFriendlyFire = bCheckFriendlyFire;
					if (!pc.TryMove(pc.Origin + pc.Velocity, false))
						SetState(GetStatePlus(FindState('Death'), 1));
				}
			}
		}
	}
}


states
{
Spawn:
	PSBG D 1
	PSBG D 1 A_Scream
	PSBG DEEEFFFGGGHHHI 2 A_PoisonBagDamage
	PSBG I 1 A_PoisonBagDamage
	PSBG I 1 A_PoisonBagCheck
	Goto Spawn+3
Death:
	PSBG HG 7
	PSBG FD 6
	Stop
}

defaultproperties
{
	Radius = 1.0;
	Height = 1.0;
	Mass = 99999.0;
	RenderStyle = STYLE_Translucent;
	Alpha = 0.333;
	bNoBlockmap = true;
	bNoGravity = true;
	bDropOff = true;
	bColideWithWorld = false;
	bColideWithThings = false;
	bNoDamageThrust = true;
	bDamageInvulnerable = true;
	bHowlVictims = true;
	bNoSplash = true;
	bCanBlast = true;
	DeathSound = 'PoisonShroomDeath';
}



class CPoisonMissile : FastProjectile;

float FlameSpeed;
Actor bmo;

//==========================================================================
//
//	BlasterHitMobj
//
//==========================================================================

bool BlasterHitMobj(Entity Other)
{
	bmo = Actor(Other);
	return ::BlasterHitMobj(Other);
}

//===========================================================================
//
//	SpawnBlasterEffects
//
//===========================================================================

void SpawnBlasterEffects()
{
	float z;
	Actor A;

	if (!--Special1)
	{
		Special1 = 4;
		z = Origin.z - 12.0;
		if (z < FloorZ)
		{
			z = FloorZ;
		}
		A = Spawn(CPoisonFloor, vector(Origin.x, Origin.y, z));
		if (A)
		{
			A.Angles.yaw = Angles.yaw;
		}
	}
}

//==========================================================================
//
//	A_CFlamePuff
//
//==========================================================================

final void A_CFlamePuff()
{
	bInvisible = false;
	Velocity = vector(0.0, 0.0, 0.0);
	PlaySound('ClericFlameExplode', CHAN_VOICE);
}

//==========================================================================
//
//  A_CPoisonMissile
//
//==========================================================================

final void A_CPoisonMissile()
{
	int i;
	float an;
	float dist;
	Actor A;

	bInvisible = false;
	PlaySound('ClericFlameExplode', CHAN_VOICE);
	if (bmo && bmo.bShootable)
	{
		// Hit something, so spawn the flame circle around the thing
		dist = bmo.Radius + 18.0;
		for (i = 0; i < 4; i++)
		{
			an = itof(i) * 45.0;
			A = Spawn(CirclePoison, bmo.Origin +
				vector(dist * cos(an), dist * sin(an), 5.0));
			if (A)
			{
				A.Angles.yaw = an;
				A.Target = Target;
				A.Velocity.x = FlameSpeed * cos(an);
				A.Velocity.y = FlameSpeed * sin(an);
				A.Special1f = A.Velocity.x;
				A.Special2f = A.Velocity.y;
				A.StateTime -= Random() * 0.1;
			}
			A = Spawn(CirclePoison, bmo.Origin +
				vector(-dist * cos(an), -dist * sin(an), 5.0));
			if (A)
			{
				A.Angles.yaw = AngleMod360(180.0 + an);
				A.Target = Target;
				A.Velocity.x = -FlameSpeed * cos(an);
				A.Velocity.y = -FlameSpeed * sin(an);
				A.Special1f = A.Velocity.x;
				A.Special2f = A.Velocity.y;
				A.StateTime -= Random() * 0.1;
			}
		}
		SetState(FindState('FlamePuff'));
	}
}

states
{
Spawn:
	CFFX A 4 Bright
	CFFX A 1 A_CFlamePuff
	Goto Death+1
Death:
	CFFX A 1 Bright A_CPoisonMissile
	CFFX ABC 3 Bright
	CFFX D 4 Bright
	CFFX E 3 Bright
	CFFX F 4 Bright
	CFFX G 3 Bright
	CFFX H 4 Bright
	CFFX I 3 Bright
	CFFX J 4 Bright
	CFFX K 3 Bright
	CFFX L 4 Bright
	CFFX M 3 Bright
	Stop
FlamePuff:
	CFFX ABC 3 Bright
	CFFX D 4 Bright
	CFFX E 3 Bright
	CFFX F 4 Bright
	CFFX G 3 Bright
	CFFX H 4 Bright
	CFFX I 3 Bright
	CFFX C 3 Bright
	CFFX D 4 Bright
	CFFX E 3 Bright
	CFFX F 4 Bright
	CFFX G 3 Bright
	CFFX H 4 Bright
	CFFX I 3 Bright
	CFFX J 4 Bright
	CFFX K 3 Bright
	CFFX L 4 Bright
	CFFX M 3 Bright
	Stop
}

defaultproperties
{
	Radius = 14.0;
	Height = 8.0;
	Speed = 7000.0;
	MissileDamage = 8;
	RenderStyle = STYLE_Add;
	bInvisible = true;
	DamageType = 'Fire';
	FlameSpeed = 9.0 / 20.0 * 35.0;
}



