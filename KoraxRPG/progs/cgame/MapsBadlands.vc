//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ## ###  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**				   ######  #####   ######
//**	               ##   ## ##  ## ##    ##
//**	     		   ##   ## ##  ## ##   
//**	               #####   #####  ##  ####
//**	     		   ## ###  ##     ###   ##
//**	     		   ##  ### ##      ######
//**
//**    $Id: MapsBadlands.vc 2236 2017-03-19 13:58:27Z ramborc $
//**
//**    Copyright (C) 2004-2008 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class MapsBadlands : JournalMenuScreen;

//==========================================================================
//
//	CyclePrevChoice
//
//==========================================================================

void CyclePrevChoice()
{
}

//==========================================================================
//
//	CycleNextChoice
//
//==========================================================================

void CycleNextChoice()
{
}

//==========================================================================
//
//  OnDraw
//
//==========================================================================

void OnDraw()
{
	DrawPic(0, 0, R_RegisterPic('journal'));

	foreach ClGame.GLevel.LevelInfo.AllThinkers(KRPGPlayerReplicationInfo, RepInfo)
	{
		if (ClGame.cl.ClientNum == RepInfo.PlayerNum)
		{
		
			if (RepInfo.plclass == 0)
			{
			DrawPic(8, 80, R_RegisterPic('journf'));			
			}
			if (RepInfo.plclass == 1)
			{
			DrawPic(8, 80, R_RegisterPic('journc'));			
			}
			if (RepInfo.plclass == 2)
			{
			DrawPic(8, 80, R_RegisterPic('journm'));			
			}
		}
		
		if (EntityEx(ClGame.cl.MO).FindInventory(TrackerMapDA) && EntityEx(ClGame.cl.MO).FindInventory(TrackerMapDB) && EntityEx(ClGame.cl.MO).FindInventory(TrackerMapDC) && EntityEx(ClGame.cl.MO).FindInventory(TrackerMapDD) && EntityEx(ClGame.cl.MO).FindInventory(TrackerMapDE) && EntityEx(ClGame.cl.MO).FindInventory(TrackerMapDF) && EntityEx(ClGame.cl.MO).FindInventory(TrackerMapDG) && EntityEx(ClGame.cl.MO).FindInventory(TrackerMapDH) && EntityEx(ClGame.cl.MO).FindInventory(TrackerMapDI) && EntityEx(ClGame.cl.MO).FindInventory(TrackerMapDJ) && EntityEx(ClGame.cl.MO).FindInventory(TrackerMapDK) && EntityEx(ClGame.cl.MO).FindInventory(TrackerMapDL) && EntityEx(ClGame.cl.MO).FindInventory(TrackerMapDM))
		{
			DrawPic(160, 82, R_RegisterPic('jmapdz'));
		}	
			
		else if (EntityEx(ClGame.cl.MO).FindInventory(TrackerMapDA))
		{
			DrawPic(160, 82, R_RegisterPic('jmapda'));
			
			if (EntityEx(ClGame.cl.MO).FindInventory(TrackerMapDB))
			{
			DrawPic(160, 82, R_RegisterPic('jmapdb'));
			}
			
			if (EntityEx(ClGame.cl.MO).FindInventory(TrackerMapDC))
			{
			DrawPic(160, 82, R_RegisterPic('jmapdc'));
			}
			
			if (EntityEx(ClGame.cl.MO).FindInventory(TrackerMapDD))
			{
			DrawPic(160, 82, R_RegisterPic('jmapdd'));
			}
			
			if (EntityEx(ClGame.cl.MO).FindInventory(TrackerMapDE))
			{
			DrawPic(160, 82, R_RegisterPic('jmapde'));
			}
			
			if (EntityEx(ClGame.cl.MO).FindInventory(TrackerMapDF))
			{
			DrawPic(160, 82, R_RegisterPic('jmapdf'));
			}
			
			if (EntityEx(ClGame.cl.MO).FindInventory(TrackerMapDG))
			{
			DrawPic(160, 82, R_RegisterPic('jmapdg'));
			}
			
			if (EntityEx(ClGame.cl.MO).FindInventory(TrackerMapDH))
			{
			DrawPic(160, 82, R_RegisterPic('jmapdh'));
			}
			
			if (EntityEx(ClGame.cl.MO).FindInventory(TrackerMapDI))
			{
			DrawPic(160, 82, R_RegisterPic('jmapdi'));
			}
			
			if (EntityEx(ClGame.cl.MO).FindInventory(TrackerMapDJ))
			{
			DrawPic(160, 82, R_RegisterPic('jmapdj'));
			}
			
			if (EntityEx(ClGame.cl.MO).FindInventory(TrackerMapDK))
			{
			DrawPic(160, 82, R_RegisterPic('jmapdk'));
			}			

			if (EntityEx(ClGame.cl.MO).FindInventory(TrackerMapDL))
			{
			DrawPic(160, 82, R_RegisterPic('jmapdl'));
			}
			
			if (EntityEx(ClGame.cl.MO).FindInventory(TrackerMapDM))
			{
			DrawPic(160, 82, R_RegisterPic('jmapdm'));
			}				
		}
		
		else if (GetCvar('JournalHints') == 1)
		{
			DrawText(160, 82, va("Someone in Kreo might be selling a map of this area."), CR_DARKGRAY);
		}
	}
}


//==========================================================================
//
//  OnDestroy
//
//==========================================================================

void OnDestroy()
{
	::OnDestroy();

	ClientGame(ClGame).HideMapsBadlands();

}


defaultproperties
{
	X = 0;
	Y = 0;
	Width = 640;
	Height = 480;
	TitleX = 320;
	ChoicesStartX = 85;
	ChoicesStartY = 130;
/*	ScaleX = 2.0;
	ScaleY = 2.4;*/
	Title = "map of the southern badlands";
}
