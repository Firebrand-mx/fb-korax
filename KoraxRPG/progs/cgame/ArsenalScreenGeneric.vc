//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ## ###  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**		        ######  #####   ######
//**	            ##   ## ##  ## ##    ##
//**	     	    ##   ## ##  ## ##   
//**	            #####   #####  ##  ####
//**	            ## ###  ##     ###   ##
//**	     	    ##  ### ##      ######
//**
//**    $Id: ArsenalScreenGeneric.vc 1638 2008-08-28 19:10:17Z firebrand_kh $
//**
//**    Copyright (C) 2004-2008 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class ArsenalScreenGeneric : ArsenalScreen;

MenuTextButton	SelectedEntry;

//==========================================================================
//
//	CreateChoices
//
//==========================================================================

void CreateChoices()
{
	int i;
	MenuStaticText		Static;
	int YPos = ChoicesStartY;

	if (cl)
	{
		Static = MenuStaticText(NewChild(MenuStaticText));
		Static.SetOrigin(ChoicesStartX, YPos);
		// [CW] TODO: make methods for static to automatically adjust size
		Static.Text = va("Slots: %i - %i; Current Slot: %i", SlotFirst, SlotLast, SlotCurrent);
		Static.Height = Static.TextHeight(Static.Text);
		YPos += Static.Height << 1;

		CreateWeaponEntries(YPos);
	}
}

//==========================================================================
//
//	CreateWeaponEntries
//
//==========================================================================

void CreateWeaponEntries(int YPos)
{
	int i;
	MenuTaggedTextButton Btn;

	Inventory			 Item = cl.WeaponFirst;

	i = 0;
	while (Item)
	{
		if (HexenWeapon(Item).Slot == SlotCurrent)
		{
			Btn = MenuTaggedTextButton(NewChild(MenuTaggedTextButton));
			Btn.Tag = i++;
			Btn.SetOrigin(ChoicesStartX, YPos);
			if (StrStartsWith(Item.PickupMessage, "$"))
			{
				Btn.Text = GetLangString(StrToName(substr(Item.PickupMessage, 1, strlen(Item.PickupMessage) - 1)));
			}
			else
			{
				Btn.Text = Item.PickupMessage;
			}
			Btn.Width = 600;

			if (cl.WeaponsBelt[SlotCurrent] == Item)
			{
				SelectedEntry = Btn;
				Btn.TextColour = CR_YELLOW;
				Btn.TextColourFocus = CR_GOLD;
			}
			else
			{
				Btn.TextColour = CR_UNTRANSLATED;
				Btn.TextColourFocus = CR_WHITE;
			}

			Btn.Activated = WeaponSelect;
			YPos += Btn.Height;
		}

		Item = Item.NextWpn();
	}
}

//==========================================================================
//
//	OnKeyDown
//
//==========================================================================

bool OnKeyDown(int Key)
{
	switch (Key)
	{
	case K_LEFTARROW:
		PrevPage();
		break;
	case K_RIGHTARROW:
		NextPage();
		break;
	default:
		{
			dprint("Key = %i", Key);
			if (Key >= 0x30 && Key <= 39)
			{
				SetPage(Key == 0x30 ? 10 : Key - 0x30);
			}
			else
			{
				return ::OnKeyDown(Key);
			}
		}
	}
	
	return true;
}

//==========================================================================
//
//	NextPage
//
//==========================================================================

void NextPage()
{
	if (SlotCurrent == SlotLast)
	{
		SlotCurrent = SlotFirst;
	}
	else
	{
		SlotCurrent++;
	}

	UpdatePage();
}

//==========================================================================
//
//	PrevPage
//
//==========================================================================

void PrevPage()
{
	if (SlotCurrent == SlotFirst)
	{
		SlotCurrent = SlotLast;
	}
	else
	{
		SlotCurrent--;
	}

	UpdatePage();
}

//==========================================================================
//
//	SetPage
//
//==========================================================================

void SetPage(int page)
{
	if (page >= SlotFirst && page <= SlotLast)
	{
		SlotCurrent = page;
		UpdatePage();
	}
}

//==========================================================================
//
//	UpdatePage
//
//==========================================================================

void UpdatePage()
{
	int i;
	for (i = 1; i < NumItems; i++)
	{
		Items[i].Destroy();
		Items[i] = none;
	}
	NumItems = 0;
	CreateChoices();

	SetDefaultChoice();
}

//==========================================================================
//
//	WeaponSelect
//
//==========================================================================

void WeaponSelect(Object Sender)
{
	if (SelectedEntry != Sender)
	{
		Player(ClientGame(ClGame).cl).PutWeaponOnBelt(SlotCurrent, MenuTaggedTextButton(Sender).Tag);
		if (SelectedEntry)
		{
			SelectedEntry.TextColour = CR_UNTRANSLATED;
			SelectedEntry.TextColourFocus = CR_WHITE;
		}
		SelectedEntry = MenuTextButton(Sender);
		SelectedEntry.TextColour = CR_YELLOW;
		SelectedEntry.TextColourFocus = CR_GOLD;
	}
}

defaultproperties
{
	X = 20;
	Width = 600;
	ChoicesStartX = 40;
	ChoicesStartY = 60;
	SelectorType = MenuSelector_SmallLeft;
	Title = "SELECT YOUR ARSENAL";
}
