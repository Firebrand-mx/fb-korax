//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Artifact : Pickup
	abstract;

int ArtifactType;
int DormantState;

//==========================================================================
//
//  A_HideThing
//
//==========================================================================

void A_HideThing(void)
{
	bHidden = true;
}

//==========================================================================
//
//  A_UnHideThing
//
//==========================================================================

void A_UnHideThing(void)
{
	bHidden = false;
}

//==========================================================================
//
//  A_RestoreArtifact
//
//==========================================================================

void A_RestoreArtifact(void)
{
	bSpecial = true;
	SetState(IdleState);
	PlaySound('Respawn', CHAN_VOICE);
}

__states__
{
	//	Dormant for 40 secs
	S_DORMANTARTI1_1('ACLO', 3, 3.0 / 35.0, S_DORMANTARTI1_2) { }
	S_DORMANTARTI1_2('ACLO', 2, 3.0 / 35.0, S_DORMANTARTI1_3) { }
	S_DORMANTARTI1_3('ACLO', 3, 3.0 / 35.0, S_DORMANTARTI1_4) { }
	S_DORMANTARTI1_4('ACLO', 2, 3.0 / 35.0, S_DORMANTARTI1_5) { }
	S_DORMANTARTI1_5('ACLO', 1, 3.0 / 35.0, S_DORMANTARTI1_6) { }
	S_DORMANTARTI1_6('ACLO', 2, 3.0 / 35.0, S_DORMANTARTI1_7) { }
	S_DORMANTARTI1_7('ACLO', 1, 3.0 / 35.0, S_DORMANTARTI1_8) { }
	S_DORMANTARTI1_8('ACLO', 0, 3.0 / 35.0, S_DORMANTARTI1_9) { }
	S_DORMANTARTI1_9('ACLO', 1, 3.0 / 35.0, S_DORMANTARTI1_10) { }
	S_DORMANTARTI1_10('ACLO', 0, 3.0 / 35.0, S_DORMANTARTI1_11) { }
	S_DORMANTARTI1_11('ACLO', 0, 1400.0 / 35.0, S_DORMANTARTI1_12) { A_HideThing(); }
	S_DORMANTARTI1_12('ACLO', 0, 3.0 / 35.0, S_DORMANTARTI1_13) { A_UnHideThing(); }
	S_DORMANTARTI1_13('ACLO', 1, 3.0 / 35.0, S_DORMANTARTI1_14) { }
	S_DORMANTARTI1_14('ACLO', 0, 3.0 / 35.0, S_DORMANTARTI1_15) { }
	S_DORMANTARTI1_15('ACLO', 1, 3.0 / 35.0, S_DORMANTARTI1_16) { }
	S_DORMANTARTI1_16('ACLO', 2, 3.0 / 35.0, S_DORMANTARTI1_17) { }
	S_DORMANTARTI1_17('ACLO', 1, 3.0 / 35.0, S_DORMANTARTI1_18) { }
	S_DORMANTARTI1_18('ACLO', 2, 3.0 / 35.0, S_DORMANTARTI1_19) { }
	S_DORMANTARTI1_19('ACLO', 3, 3.0 / 35.0, S_DORMANTARTI1_20) { }
	S_DORMANTARTI1_20('ACLO', 2, 3.0 / 35.0, S_DORMANTARTI1_21) { }
	S_DORMANTARTI1_21('ACLO', 3, 3.0 / 35.0, S_NULL) { A_RestoreArtifact(); }

	//	Dormant for 2 minutes
	S_DORMANTARTI2_1('ACLO', 3, 3.0 / 35.0, S_DORMANTARTI2_2) { }
	S_DORMANTARTI2_2('ACLO', 2, 3.0 / 35.0, S_DORMANTARTI2_3) { }
	S_DORMANTARTI2_3('ACLO', 3, 3.0 / 35.0, S_DORMANTARTI2_4) { }
	S_DORMANTARTI2_4('ACLO', 2, 3.0 / 35.0, S_DORMANTARTI2_5) { }
	S_DORMANTARTI2_5('ACLO', 1, 3.0 / 35.0, S_DORMANTARTI2_6) { }
	S_DORMANTARTI2_6('ACLO', 2, 3.0 / 35.0, S_DORMANTARTI2_7) { }
	S_DORMANTARTI2_7('ACLO', 1, 3.0 / 35.0, S_DORMANTARTI2_8) { }
	S_DORMANTARTI2_8('ACLO', 0, 3.0 / 35.0, S_DORMANTARTI2_9) { }
	S_DORMANTARTI2_9('ACLO', 1, 3.0 / 35.0, S_DORMANTARTI2_10) { }
	S_DORMANTARTI2_10('ACLO', 0, 3.0 / 35.0, S_DORMANTARTI2_11) { }
	S_DORMANTARTI2_11('ACLO', 0, 4200.0 / 35.0, S_DORMANTARTI2_12) { A_HideThing(); }
	S_DORMANTARTI2_12('ACLO', 0, 3.0 / 35.0, S_DORMANTARTI2_13) { A_UnHideThing(); }
	S_DORMANTARTI2_13('ACLO', 1, 3.0 / 35.0, S_DORMANTARTI2_14) { }
	S_DORMANTARTI2_14('ACLO', 0, 3.0 / 35.0, S_DORMANTARTI2_15) { }
	S_DORMANTARTI2_15('ACLO', 1, 3.0 / 35.0, S_DORMANTARTI2_16) { }
	S_DORMANTARTI2_16('ACLO', 2, 3.0 / 35.0, S_DORMANTARTI2_17) { }
	S_DORMANTARTI2_17('ACLO', 1, 3.0 / 35.0, S_DORMANTARTI2_18) { }
	S_DORMANTARTI2_18('ACLO', 2, 3.0 / 35.0, S_DORMANTARTI2_19) { }
	S_DORMANTARTI2_19('ACLO', 3, 3.0 / 35.0, S_DORMANTARTI2_20) { }
	S_DORMANTARTI2_20('ACLO', 2, 3.0 / 35.0, S_DORMANTARTI2_21) { }
	S_DORMANTARTI2_21('ACLO', 3, 3.0 / 35.0, S_NULL) { A_RestoreArtifact(); }

	//	Dormant for 10 minutes
	S_DORMANTARTI3_1('ACLO', 3, 3.0 / 35.0, S_DORMANTARTI3_2) { }
	S_DORMANTARTI3_2('ACLO', 2, 3.0 / 35.0, S_DORMANTARTI3_3) { }
	S_DORMANTARTI3_3('ACLO', 3, 3.0 / 35.0, S_DORMANTARTI3_4) { }
	S_DORMANTARTI3_4('ACLO', 2, 3.0 / 35.0, S_DORMANTARTI3_5) { }
	S_DORMANTARTI3_5('ACLO', 1, 3.0 / 35.0, S_DORMANTARTI3_6) { }
	S_DORMANTARTI3_6('ACLO', 2, 3.0 / 35.0, S_DORMANTARTI3_7) { }
	S_DORMANTARTI3_7('ACLO', 1, 3.0 / 35.0, S_DORMANTARTI3_8) { }
	S_DORMANTARTI3_8('ACLO', 0, 3.0 / 35.0, S_DORMANTARTI3_9) { }
	S_DORMANTARTI3_9('ACLO', 1, 3.0 / 35.0, S_DORMANTARTI3_10) { }
	S_DORMANTARTI3_10('ACLO', 0, 3.0 / 35.0, S_DORMANTARTI3_11) { }
	S_DORMANTARTI3_11('ACLO', 0, 21000.0 / 35.0, S_DORMANTARTI3_12) { A_HideThing(); }
	S_DORMANTARTI3_12('ACLO', 0, 3.0 / 35.0, S_DORMANTARTI3_13) { A_UnHideThing(); }
	S_DORMANTARTI3_13('ACLO', 1, 3.0 / 35.0, S_DORMANTARTI3_14) { }
	S_DORMANTARTI3_14('ACLO', 0, 3.0 / 35.0, S_DORMANTARTI3_15) { }
	S_DORMANTARTI3_15('ACLO', 1, 3.0 / 35.0, S_DORMANTARTI3_16) { }
	S_DORMANTARTI3_16('ACLO', 2, 3.0 / 35.0, S_DORMANTARTI3_17) { }
	S_DORMANTARTI3_17('ACLO', 1, 3.0 / 35.0, S_DORMANTARTI3_18) { }
	S_DORMANTARTI3_18('ACLO', 2, 3.0 / 35.0, S_DORMANTARTI3_19) { }
	S_DORMANTARTI3_19('ACLO', 3, 3.0 / 35.0, S_DORMANTARTI3_20) { }
	S_DORMANTARTI3_20('ACLO', 2, 3.0 / 35.0, S_DORMANTARTI3_21) { }
	S_DORMANTARTI3_21('ACLO', 3, 3.0 / 35.0, S_NULL) { A_RestoreArtifact(); }

	S_DEADARTI1('ACLO', 3, 3.0 / 35.0, S_DEADARTI2) { }
	S_DEADARTI2('ACLO', 2, 3.0 / 35.0, S_DEADARTI3) { }
	S_DEADARTI3('ACLO', 3, 3.0 / 35.0, S_DEADARTI4) { }
	S_DEADARTI4('ACLO', 2, 3.0 / 35.0, S_DEADARTI5) { }
	S_DEADARTI5('ACLO', 1, 3.0 / 35.0, S_DEADARTI6) { }
	S_DEADARTI6('ACLO', 2, 3.0 / 35.0, S_DEADARTI7) { }
	S_DEADARTI7('ACLO', 1, 3.0 / 35.0, S_DEADARTI8) { }
	S_DEADARTI8('ACLO', 0, 3.0 / 35.0, S_DEADARTI9) { }
	S_DEADARTI9('ACLO', 1, 3.0 / 35.0, S_DEADARTI10) { }
	S_DEADARTI10('ACLO', 0, 3.0 / 35.0, S_NULL) { }
}

//==========================================================================
//
//  SetDormantArtifact
//
//  Removes the bSpecial flag and initiates the artifact pickup animation.
//
//==========================================================================

void SetDormantArtifact(void)
{
	bSpecial = false;
	if (deathmatch && !bDropped)
	{
		SetState(DormantState);
	}
	else
	{
		// Don't respawn
		SetState(S_DEADARTI1);
	}
}

//==========================================================================
//
//  TouchSpecial
//
//==========================================================================

void TouchSpecial(Actor Toucher)
{
	if (!Toucher.bPickUp)
	{
		// Can't be picked up by toucher
		return;
	}
	if (Toucher.Health <= 0)
	{
		// Toucher is dead
		return;
	}
	if (Toucher.Player.GiveArtifact(ArtifactType))
	{
		if (Special)
		{
			Level.ExecuteActionSpecial(Special, Args[0], Args[1], Args[2],
				Args[3], Args[4], NULL, 0, Toucher);
			Special = 0;
		}
		Toucher.Player.BonusFlash += BONUSADD;
		if (ArtifactType < arti_firstpuzzitem)
		{
			SetDormantArtifact();
			PlaySound('PickupArtifact', CHAN_ITEM);
			cprint(Toucher.Player, artifactMessages[ArtifactType]);
		}
		else
		{
			// Puzzle item
			PlayFullVolumeSound('PickupItem', CHAN_ITEM);
			cprint(Toucher.Player, artifactMessages[ArtifactType]);
			if (!netgame || deathmatch)
			{
				// Remove puzzle items if not cooperative netplay
				Remove();
			}
		}
	}
}

defaultproperties
{
	bFloatBob = true;
	DormantState = S_DORMANTARTI1_1;
}

//**************************************************************************
//
//  $Log$
//  Revision 1.3  2006/02/06 19:43:03  firebrand_kh
//  Added latest Vavoom changes
//
//  Revision 1.4  2005/12/27 22:22:28  dj_jl
//  Created level info class, moved action special handling to it.
//
//  Revision 1.3  2004/08/22 19:23:26  dj_jl
//  Moved many functions to player class.
//
//  Revision 1.2  2003/11/12 16:50:47  dj_jl
//  Changed player structure into a class
//
//  Revision 1.1  2002/10/26 16:32:25  dj_jl
//  New style of defining classes.
//
//**************************************************************************
