//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id: FWeapAxe.vc 2527 2007-07-29 08:18:44Z dj_jl $
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class FWeapAxe : FighterWeapon
	__mobjinfo__(8010)
	__scriptid__(27);

state NoMoreManaState;
float AxeRange;

//==========================================================================
//
//	GetUpState
//
//==========================================================================

state GetUpState()
{
	return Ammo1.Amount > 0 ? S_FAXEUP_G : UpState;
}

//==========================================================================
//
//	GetDownState
//
//==========================================================================

state GetDownState()
{
	return Ammo1.Amount > 0 ? S_FAXEDOWN_G : DownState;
}

//==========================================================================
//
//	GetReadyState
//
//==========================================================================

state GetReadyState()
{
	return Ammo1.Amount > 0 ? S_FAXEREADY_G : ReadyState;
}

//==========================================================================
//
//	GetAttackState
//
//==========================================================================

state GetAttackState(bool Hold)
{
	return Ammo1.Amount > 0 ? S_FAXEATK_G1 :	// Glowing axe
		Hold ? HoldAttackState : AttackState;
}

//==========================================================================
//
//  A_FAxeCheckReady
//
//==========================================================================

final void A_FAxeCheckReady()
{
	if (Ammo1.Amount > 0)
	{
		Owner.Player.SetViewState(ps_weapon, S_FAXEREADY_G);
	}
	else
	{
		A_WeaponReady();
	}
}

//==========================================================================
//
//  A_FAxeCheckReadyG
//
//==========================================================================

final void A_FAxeCheckReadyG()
{
	if (Ammo1.Amount <= 0)
	{
		Owner.Player.SetViewState(ps_weapon, S_FAXEREADY);
	}
	else
	{
		A_WeaponReady();
	}
}

//==========================================================================
//
//  A_FAxeCheckUp
//
//==========================================================================

final void A_FAxeCheckUp()
{
	if (Ammo1.Amount > 0)
	{
		Owner.Player.SetViewState(ps_weapon, S_FAXEUP_G);
	}
	else
	{
		A_Raise();
	}
}

//==========================================================================
//
//  A_FAxeCheckUpG
//
//==========================================================================

final void A_FAxeCheckUpG()
{
	if (Ammo1.Amount <= 0)
	{
		Owner.Player.SetViewState(ps_weapon, S_FAXEUP);
	}
	else
	{
		A_Raise();
	}
}

//==========================================================================
//
//  A_FAxeAttack
//
//==========================================================================

final void A_FAxeAttack()
{
	float			power;
	int				damage;
	int				useMana;
	TAVec			angles;
	TVec			vforward;
	class<Actor>	PuffType;
	EntityEx		AimTarget;

	damage = 40 + (P_Random() & 15) + (P_Random() & 7);
	power = 0.0;
	if (EntityEx(Owner).FindInventory(Mana1).Amount > 0)
	{
		damage <<= 1;
		power = 6.0;
		PuffType = AxePuffGlow;
		useMana = 1;
	}
	else
	{
		PuffType = AxePuff;
		useMana = 0;
	}
	AimTarget = Actor(Owner).AimEx(vforward, AxeRange, 45.0 / 16.0, 16,
		Actor::MELEERANGE);
	if (AimTarget)
	{
		VectorAngles(&vforward, &angles);
		if (Actor(Owner).LineAttack(vforward, AxeRange, damage, PuffType))
		{
			Owner.PlaySound('FighterHammerMiss', CHAN_WEAPON);
		}
		if (AimTarget.bMonster || AimTarget.bIsPlayer)
		{
			AimTarget.Thrust(angles.yaw, power);
		}
		Player(Owner.Player).AdjustPlayerAngle(AimTarget);
		useMana++;
	}
	else
	{
		// didn't find any creatures, so try to strike any walls
		if (Actor(Owner).LineAttack(vforward, Actor::MELEERANGE, damage, PuffType))
		{
			Owner.PlaySound('FighterHammerMiss', CHAN_WEAPON);
		}
	}

	if (useMana == 2)
	{
		DepleteAmmo(false);
		if (!CheckAmmo(false, true))
		{
			Owner.Player.SetViewState(ps_weapon, NoMoreManaState);
		}
	}
}

__states__
{
	S_FAXEREADY('FAXE', 0, 1.0 / 35.0, S_FAXEREADY) = A_FAxeCheckReady
	S_FAXEDOWN('FAXE', 0, 1.0 / 35.0, S_FAXEDOWN) = A_Lower
	S_FAXEUP('FAXE', 0, 1.0 / 35.0, S_FAXEUP) = A_FAxeCheckUp
	S_FAXEATK_1('FAXE', 1, 4.0 / 35.0, S_FAXEATK_2, 15, 32) = none
	S_FAXEATK_2('FAXE', 2, 3.0 / 35.0, S_FAXEATK_3, 15, 32) = none
	S_FAXEATK_3('FAXE', 3, 2.0 / 35.0, S_FAXEATK_4, 15, 32) = none
	S_FAXEATK_4('FAXE', 3, 1.0 / 35.0, S_FAXEATK_5, -5, 70) = A_FAxeAttack
	S_FAXEATK_5('FAXE', 3, 2.0 / 35.0, S_FAXEATK_6, -25, 90) = none
	S_FAXEATK_6('FAXE', 4, 1.0 / 35.0, S_FAXEATK_7, 15, 32) = none
	S_FAXEATK_7('FAXE', 4, 2.0 / 35.0, S_FAXEATK_8, 10, 54) = none
	S_FAXEATK_8('FAXE', 4, 7.0 / 35.0, S_FAXEATK_9, 10, 150) = none
	S_FAXEATK_9('FAXE', 0, 1.0 / 35.0, S_FAXEATK_10, 0, 60) = A_ReFire
	S_FAXEATK_10('FAXE', 0, 1.0 / 35.0, S_FAXEATK_11, 0, 52) = none
	S_FAXEATK_11('FAXE', 0, 1.0 / 35.0, S_FAXEATK_12, 0, 44) = none
	S_FAXEATK_12('FAXE', 0, 1.0 / 35.0, S_FAXEATK_13, 0, 36) = none
	S_FAXEATK_13('FAXE', 0, 1.0 / 35.0, S_FAXEREADY) = none
	S_FAXEREADY_G('FAXE', 11, 1.0 / 35.0, S_FAXEREADY_G1) = A_FAxeCheckReadyG
	S_FAXEREADY_G1('FAXE', 11, 1.0 / 35.0, S_FAXEREADY_G2) = A_FAxeCheckReadyG
	S_FAXEREADY_G2('FAXE', 11, 1.0 / 35.0, S_FAXEREADY_G3) = A_FAxeCheckReadyG
	S_FAXEREADY_G3('FAXE', 12, 1.0 / 35.0, S_FAXEREADY_G4) = A_FAxeCheckReadyG
	S_FAXEREADY_G4('FAXE', 12, 1.0 / 35.0, S_FAXEREADY_G5) = A_FAxeCheckReadyG
	S_FAXEREADY_G5('FAXE', 12, 1.0 / 35.0, S_FAXEREADY_G) = A_FAxeCheckReadyG
	S_FAXEDOWN_G('FAXE', 11, 1.0 / 35.0, S_FAXEDOWN_G) = A_Lower
	S_FAXEUP_G('FAXE', 11, 1.0 / 35.0, S_FAXEUP_G) = A_FAxeCheckUpG
	S_FAXEATK_G1('FAXE', 13, 4.0 / 35.0, S_FAXEATK_G2, 15, 32) = none
	S_FAXEATK_G2('FAXE', 14, 3.0 / 35.0, S_FAXEATK_G3, 15, 32) = none
	S_FAXEATK_G3('FAXE', 15, 2.0 / 35.0, S_FAXEATK_G4, 15, 32) = none
	S_FAXEATK_G4('FAXE', 15, 1.0 / 35.0, S_FAXEATK_G5, -5, 70) = A_FAxeAttack
	S_FAXEATK_G5('FAXE', 15, 2.0 / 35.0, S_FAXEATK_G6, -25, 90) = none
	S_FAXEATK_G6('FAXE', 16, 1.0 / 35.0, S_FAXEATK_G7, 15, 32) = none
	S_FAXEATK_G7('FAXE', 16, 2.0 / 35.0, S_FAXEATK_G8, 10, 54) = none
	S_FAXEATK_G8('FAXE', 16, 7.0 / 35.0, S_FAXEATK_G9, 10, 150) = none
	S_FAXEATK_G9('FAXE', 0, 1.0 / 35.0, S_FAXEATK_G10, 0, 60) = A_ReFire
	S_FAXEATK_G10('FAXE', 0, 1.0 / 35.0, S_FAXEATK_G11, 0, 52) = none
	S_FAXEATK_G11('FAXE', 0, 1.0 / 35.0, S_FAXEATK_G12, 0, 44) = none
	S_FAXEATK_G12('FAXE', 0, 1.0 / 35.0, S_FAXEATK_G13, 0, 36) = none
	S_FAXEATK_G13('FAXE', 0, 1.0 / 35.0, S_FAXEREADY_G) = none
	S_AXE('WFAX', 0, -1.0, none) = none
}

defaultproperties
{
	WeaponClass = HexenDefs::PCLASS_FIGHTER;
	Slot = 2;
	SelectionOrder = 1500;
	AmmoType1 = Mana1;
	AmmoUse1 = 2;
	AmmoGive1 = 25;
	PSpriteSY = -12.0;
	bAmmoOptional = true;
	AxeRange = 9.0 * Actor::MELEERANGE / 4.0;
	PickupMessage = "$txt_weapon_f2";
	BotCombatDist = 48.0;
	IdleState = S_AXE;
	UpState = S_FAXEUP;
	DownState = S_FAXEDOWN;
	ReadyState = S_FAXEREADY;
	AttackState = S_FAXEATK_1;
	HoldAttackState = S_FAXEATK_1;
	NoMoreManaState = S_FAXEATK_5;
}
