//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id: FWeapAxe.vc 2667 2007-08-23 17:33:05Z dj_jl $
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class FWeapAxe : FighterWeapon
	__mobjinfo__(8010)
	__scriptid__(27);

float AxeRange;

//==========================================================================
//
//	GetUpState
//
//==========================================================================

state GetUpState()
{
	return Ammo1.Amount > 0 ? FindState('GlowSelect') : ::GetUpState();
}

//==========================================================================
//
//	GetDownState
//
//==========================================================================

state GetDownState()
{
	return Ammo1.Amount > 0 ? FindState('GlowDeselect') : ::GetDownState();
}

//==========================================================================
//
//	GetReadyState
//
//==========================================================================

state GetReadyState()
{
	return Ammo1.Amount > 0 ? FindState('GlowReady') : ::GetReadyState();
}

//==========================================================================
//
//	GetAttackState
//
//==========================================================================

state GetAttackState(bool Hold)
{
	return Ammo1.Amount > 0 ? FindState('GlowFire') :	// Glowing axe
		::GetAttackState(Hold);
}

//==========================================================================
//
//  A_FAxeCheckReady
//
//==========================================================================

final void A_FAxeCheckReady()
{
	if (Ammo1.Amount > 0)
	{
		Owner.Player.SetViewState(ps_weapon, FindState('GlowReady'));
	}
	else
	{
		A_WeaponReady();
	}
}

//==========================================================================
//
//  A_FAxeCheckReadyG
//
//==========================================================================

final void A_FAxeCheckReadyG()
{
	if (Ammo1.Amount <= 0)
	{
		Owner.Player.SetViewState(ps_weapon, FindState('Ready'));
	}
	else
	{
		A_WeaponReady();
	}
}

//==========================================================================
//
//  A_FAxeCheckUp
//
//==========================================================================

final void A_FAxeCheckUp()
{
	if (Ammo1.Amount > 0)
	{
		Owner.Player.SetViewState(ps_weapon, FindState('GlowSelect'));
	}
	else
	{
		A_Raise();
	}
}

//==========================================================================
//
//  A_FAxeCheckUpG
//
//==========================================================================

final void A_FAxeCheckUpG()
{
	if (Ammo1.Amount <= 0)
	{
		Owner.Player.SetViewState(ps_weapon, FindState('Select'));
	}
	else
	{
		A_Raise();
	}
}

//==========================================================================
//
//  A_FAxeAttack
//
//==========================================================================

final void A_FAxeAttack()
{
	float			power;
	int				damage;
	int				useMana;
	TAVec			angles;
	TVec			vforward;
	class<Actor>	PuffType;
	EntityEx		AimTarget;

	damage = 40 + (P_Random() & 15) + (P_Random() & 7);
	power = 0.0;
	if (EntityEx(Owner).FindInventory(Mana1).Amount > 0)
	{
		damage <<= 1;
		power = 6.0;
		PuffType = AxePuffGlow;
		useMana = 1;
	}
	else
	{
		PuffType = AxePuff;
		useMana = 0;
	}
	AimTarget = Actor(Owner).AimEx(vforward, AxeRange, 45.0 / 16.0, 16,
		Actor::MELEERANGE);
	if (AimTarget)
	{
		VectorAngles(&vforward, &angles);
		if (Actor(Owner).LineAttack(vforward, AxeRange, damage, PuffType))
		{
			Owner.PlaySound('FighterHammerMiss', CHAN_WEAPON);
		}
		if (AimTarget.bMonster || AimTarget.bIsPlayer)
		{
			AimTarget.Thrust(angles.yaw, power);
		}
		Player(Owner.Player).AdjustPlayerAngle(AimTarget);
		useMana++;
	}
	else
	{
		// didn't find any creatures, so try to strike any walls
		if (Actor(Owner).LineAttack(vforward, Actor::MELEERANGE, damage, PuffType))
		{
			Owner.PlaySound('FighterHammerMiss', CHAN_WEAPON);
		}
	}

	if (useMana == 2)
	{
		DepleteAmmoEx(false);
		if (!CheckAmmo(false, true))
		{
			Owner.Player.SetViewState(ps_weapon, FindState('NoMoreMana'));
		}
	}
}

states
{
Ready:
	FAXE A 1 A_FAxeCheckReady
	Loop
Deselect:
	FAXE A 1 A_Lower
	Loop
Select:
	FAXE A 1 A_FAxeCheckUp
	Loop
Fire:
	FAXE B 4 Offset(15, 32)
	FAXE C 3 Offset(15, 32)
	FAXE D 2 Offset(15, 32)
	FAXE D 1 Offset(-5, 70) A_FAxeAttack
NoMoreMana:
	FAXE D 2 Offset(-25, 90)
	FAXE E 1 Offset(15, 32)
	FAXE E 2 Offset(10, 54)
	FAXE E 7 Offset(10, 150)
	FAXE A 1 Offset(0, 60) A_ReFire
	FAXE A 1 Offset(0, 52)
	FAXE A 1 Offset(0, 44)
	FAXE A 1 Offset(0, 36)
	FAXE A 1
	Goto Ready

GlowReady:
	FAXE LLLMMM 1 A_FAxeCheckReadyG
	Loop
GlowDeselect:
	FAXE L 1 A_Lower
	Loop
GlowSelect:
	FAXE L 1 A_FAxeCheckUpG
	Loop
GlowFire:
	FAXE N 4 Offset(15, 32)
	FAXE O 3 Offset(15, 32)
	FAXE P 2 Offset(15, 32)
	FAXE P 1 Offset(-5, 70) A_FAxeAttack
	FAXE P 2 Offset(-25, 90)
	FAXE Q 1 Offset(15, 32)
	FAXE Q 2 Offset(10, 54)
	FAXE Q 7 Offset(10, 150)
	FAXE A 1 Offset(0, 60) A_ReFire
	FAXE A 1 Offset(0, 52)
	FAXE A 1 Offset(0, 44)
	FAXE A 1 Offset(0, 36)
	FAXE A 1
	Goto Ready
Spawn:
	WFAX A -1
	Stop
}

defaultproperties
{
	WeaponClass = HexenDefs::PCLASS_FIGHTER;
	Slot = 2;
	SelectionOrder = 1500;
	AmmoType1 = Mana1;
	AmmoUse1 = 2;
	AmmoGive1 = 25;
	PSpriteSY = -12.0;
	bAmmoOptional = true;
	AxeRange = 9.0 * Actor::MELEERANGE / 4.0;
	PickupMessage = "$txt_weapon_f2";
	BotCombatDist = 48.0;
}
