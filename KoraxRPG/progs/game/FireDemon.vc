//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class FireDemon : Pawn
	__mobjinfo__(10060)
	__scriptid__(5);

//
// Fire Demon AI
//

float AttackRange;

int WeaveIndex;		//	Index into floatbob
int StrafeCount;	//	Whether strafing or not

//============================================================================
//
//  A_FiredSpawnRock
//
//============================================================================

final void A_FiredSpawnRock()
{
	Actor mo;
	TVec rockOrg;
	class<Actor> rtype;

	switch (P_Random() % 5)
	{
	case 0:
		rtype = FireDemonRock1;
		break;
	case 1:
		rtype = FireDemonRock2;
		break;
	case 2:
		rtype = FireDemonRock3;
		break;
	case 3:
		rtype = FireDemonRock4;
		break;
	case 4:
		rtype = FireDemonRock5;
		break;
	}

	rockOrg.x = Origin.x + (Random() - 0.5) * 16.0;
	rockOrg.y = Origin.y + (Random() - 0.5) * 16.0;
	rockOrg.z = Origin.z + Random() * 8.0;
	mo = Spawn(rtype, rockOrg);
	if (mo)
	{
		mo.Target = self;
		mo.Velocity.x = (Random() - 0.5) * 4.0 * 35.0;
		mo.Velocity.y = (Random() - 0.5) * 4.0 * 35.0;
		mo.Velocity.z = Random() * 4.0 * 35.0;
		mo.Special1 = 2;	// Number bounces
	}

	// Initialise fire demon
	StrafeCount = 0;
	bJustAttacked = false;
}

//============================================================================
//
//  A_FiredRocks
//
//============================================================================

final void A_FiredRocks()
{
	A_FiredSpawnRock();
	A_FiredSpawnRock();
	A_FiredSpawnRock();
	A_FiredSpawnRock();
	A_FiredSpawnRock();
}

//==========================================================================
//
//	DoSpecialMove
//
//	[KoraxRPG]
//
//==========================================================================

bool DoSpecialMove(bool Evade)
{
	float dist;
	float ang;

	// Float up and down
	if(TestMobjZ())
	{
		Origin.z += Level.Game.FloatBobOffsets[WeaveIndex];
	}
	WeaveIndex = (WeaveIndex + 2) & 63;


	// Insure it stays above certain height
	if (Origin.z < FloorZ + 64.0)
	{
		if(TestMobjZ())
		{
			Origin.z += 2.0;
		}
	}

	if (!Evade)
	{
		if (Origin.z - pTargetVec->z > Height * 8.0)
		{
			Velocity.z -= 2.5;
		}
	}

	// Strafe
	if (StrafeCount > 0)
	{
		StrafeCount--;
	}
	else if (Target)
	{
		StrafeCount = 0;
		Velocity.x = 0.0;
		Velocity.y = 0.0;
		dist = DistTo(Target);
		if (dist < AttackRange)
		{
			if (P_Random() < 30)
			{
				ang = atan2(Target.Origin.y - Origin.y,
					Target.Origin.x - Origin.x);
				if (P_Random() < 128)
					ang = AngleMod360(ang + 90.0);
				else
					ang = AngleMod360(ang - 90.0);
				Velocity.x = 8.0 * cos(ang) * 35.0;
				Velocity.y = 8.0 * sin(ang) * 35.0;
				StrafeCount = 3;	// strafe time
			}
		}

		return true;
	}

	return false;
}

//============================================================================
//
//  A_FiredAttack
//
//============================================================================

final void A_FiredAttack()
{
	EntityEx mo;

	mo = SpawnMissile(Target, FireDemonMissile);
	if (mo)
	{
		PlaySound('FireDemonAttack', CHAN_WEAPON);
	}
}

//============================================================================
//
//  A_FiredSplotch
//
//============================================================================

final void A_FiredSplotch()
{
	Actor A;

	A = Spawn(FireDemonSplotch1, Origin);
	if (A)
	{
		A.Velocity.x = (Random() - 0.5) * 8.0 * 35.0;
		A.Velocity.y = (Random() - 0.5) * 8.0 * 35.0;
		A.Velocity.z = (3.0 + Random() * 4.0) * 35.0;
	}
	A = Spawn(FireDemonSplotch2, Origin);
	if (A)
	{
		A.Velocity.x = (Random() - 0.5) * 8.0 * 35.0;
		A.Velocity.y = (Random() - 0.5) * 8.0 * 35.0;
		A.Velocity.z = (3.0 + Random() * 4.0) * 35.0;
	}
}

states
{
Spawn:
	FDMN X 5 Bright
	FDMN EFG 10 Bright A_LookAI
	Goto Spawn+1
See:
	FDMN E 8 Bright
	FDMN F 6 Bright
	FDMN G 5 Bright
	FDMN F 8 Bright
	FDMN E 6 Bright
	FDMN F 7 Bright A_FiredRocks
	FDMN HI 5 Bright
	FDMN J 5 Bright A_UnSetInvulnerable
	FDMN ABC 5 Bright A_ChaseAI
	Goto See+9
Pain:
	FDMN D 6 Bright A_Pain
	Goto See+9
Missile:
	FDMN K 3 Bright A_FaceTarget
	FDMN KKK 5 Bright A_FiredAttack
	Goto See+9
Death:
	FDMN D 4 Bright A_FaceTarget
	FDMN L 4 Bright A_Scream
	FDMN L 4 Bright A_NoBlocking
	FDMN L 200 Bright
	Stop
XDeath:
Crash:
	FDMN M 5 A_FaceTarget
	FDMN N 5 A_NoBlocking
	FDMN O 5 A_FiredSplotch
	Stop
Ice:
	FDMN R 5 A_FreezeDeath
	FDMN R 1 A_FreezeDeathChunks
	Wait
}

defaultproperties
{
	Health = 80;
	GibsHealth = -40;
	Radius = 20.0;
	Height = 68.0;
	Mass = 75.0;
	Speed = 13.0 * 35.0;
	PainChance = 0.00390625;
	AttackRange	 = 512.0;
	MissileDamage = 1;
	bNoGravity = true;
	bDropOff = true;
	bFloat = true;
	bInvulnerable = true;
	bDynamicLight = true;
	SightSound = 'FireDemonSpawn';
	ActiveSound = 'FireDemonActive';
	PainSound = 'FireDemonPain';
	DeathSound = 'FireDemonDeath';
	DLightColour = RGB(255, 178, 6);
	DLightRadius = 126.0;

	Behavior.bEvadeMelee = true;
	Behavior.bRunOnEvade = true;
}
