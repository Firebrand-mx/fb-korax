//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ## ###  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**				   ######  #####   ######
//**	               ##   ## ##  ## ##    ##
//**	     		   ##   ## ##  ## ##   
//**	               #####   #####  ##  ####
//**	     		   ## ###  ##     ###   ##
//**	     		   ##  ### ##      ######
//**
//**    $Id: LinkedObject.vc 1638 2008-08-28 19:10:17Z firebrand_kh $
//**
//**    Copyright (C) 2004-2008 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class LinkedObject : Object;


LinkedList		List;
LinkedObject	refPrev;
LinkedObject	refNext;


//==========================================================================
//
//	Destroy
//
//==========================================================================

void Destroy()
{
	if (List && List.DestroyingObject != self)
	{
		List.DestroyObject(self);
		return;
	}
	::Destroy();
}

//==========================================================================
//
//	LinkNext
//
//==========================================================================

void LinkNext(LinkedObject LO)
{
	if (LO)
	{
		LO.UnlinkFromList();
		if (refNext)
		{
			refNext.refPrev = LO;
			LO.refNext = refNext;
		}
		LO.refPrev = self;
		refNext = LO;
	}
}

//==========================================================================
//
//	LinkPrev
//
//==========================================================================

void LinkPrev(LinkedObject LO)
{
	if (LO)
	{
		LO.UnlinkFromList();
		if (refPrev)
		{
			refPrev.refNext = LO;
			LO.refPrev = refPrev;
		}
		LO.refNext = self;
		refPrev = LO;
	}	
}

//==========================================================================
//
//	MoveInFront
//
//==========================================================================

void MoveInFront()
{
	if (List)
	{
		if (List.refHead != self)
		{
			UnlinkFromList(true);
			refNext = List.refHead;
			List.refHead.refPrev = self;
			List.refHead = self;
		}
	}	
}

//==========================================================================
//
//	MoveToBack
//
//==========================================================================

void MoveToBack()
{
	if (List)
	{
		if (List.refTail != self)
		{
			UnlinkFromList(true);
			refPrev = List.refTail;
			List.refTail.refNext = self;
			List.refTail = self;
		}
	}	
}

//==========================================================================
//
//	UnlinkFromList
//
//==========================================================================

void UnlinkFromList(optional bool bKeepListReference)
{
	if (List)
		List.IsBeingRemoved(self);

	if (refPrev)
		refPrev.refNext = refNext;
	if (refNext)
		refNext.refPrev = refPrev;

	if (!bKeepListReference)
		List = none;
	
	refPrev = none;
	refNext = none;
}

//==========================================================================
//
//	UnlinkNext
//
//==========================================================================

void UnlinkNext()
{
	if (refNext)
		refNext.refPrev = none;
	refNext = none;
}

//==========================================================================
//
//	UnlinkPrev
//
//==========================================================================

void UnlinkPrev()
{
	if (refPrev)
		refPrev.refNext = none;
	refPrev= none;
}

defaultproperties
{
}
