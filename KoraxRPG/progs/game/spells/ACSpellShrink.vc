//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ## ###  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**				   ######  #####   ######
//**	               ##   ## ##  ## ##    ##
//**	     		   ##   ## ##  ## ##   
//**	               #####   #####  ##  ####
//**	     		   ## ###  ##     ###   ##
//**	     		   ##  ### ##      ######
//**
//**    $Id: template.vc 1305 2008-03-01 09:20:29Z dj_jl $
//**
//**    Copyright (C) 2004-2008 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class ACSpellShrink : ActorCondition;

//bool bActive;
float sxOld, syOld;
float sx;
float sy;
//float time;

//
//	TODO!! --- IMPORTANT!!
//	How to make it know if ScaleX/Y were changed in some other way meanwhile?
//

//==========================================================================
//
//	Activate
//
//==========================================================================

void Activate()
{
	::Activate();

	if (!ARecepient)
		Error("ACSpellShrink::Activate : no reference to Recepient actor, bad algorythm?");

	// [FB] Initialize variables
	//sx = ARecepient.default.ScaleX;
	//sy = ARecepient.default.ScaleY;
	// [CW] We have scale randomization in Actor.KRPG::BeginPlay, so we cannot use default values here
	sxOld = ARecepient.ScaleX;
	syOld = ARecepient.ScaleY;
	sx = sxOld;
	sy = syOld;
	//bActive = true;
}

//==========================================================================
//
//	BirthTick
//
//==========================================================================

void BirthTick(float deltaTime)
{
	// [FB] Let's animate the 'shrinking' of monsters 'a lá Duke Nukem 3d'! :D
	sx -= 0.5 * deltaTime;
	sy -= 0.5 * deltaTime;

	if (sx <= sxOld / itof(Level) || sy <= syOld / itof(Level))
	{
		sx = sxOld / itof(Level);
		sy = syOld / itof(Level);
		FinishActivation();
	}

	ARecepient.ScaleX = sx;
	ARecepient.ScaleY = sy;
}

//==========================================================================
//
//	DeathTick
//
//==========================================================================

void DeathTick(float deltaTime)
{
	sx += 0.5 * deltaTime;
	sy += 0.5 * deltaTime;

	if (sx >= sxOld || sy >= syOld)
	{
		sx = sxOld;
		sy = syOld;
		FinishDeactivation();
	}

	ARecepient.ScaleX = sx;
	ARecepient.ScaleY = sy;
}

/*
//==========================================================================
//
//	Deactivate
//
//==========================================================================

void Deactivate()
{
	::Deactivate();

	if (!ARecepient)
		Error("ACSpellShrink::Deactivate : no reference to Recepient actor, bad algorythm?");

	bActive = false;
	// [FB] We'll unshrink here, since 'Do' can't be called anymore :(
	while (sx < ARecepient.default.ScaleX && sy < ARecepient.default.ScaleY)
	{
		sx += 0.5 * time;
		sy += 0.5 * time;
		
		ARecepient.ScaleX = sx;
		ARecepient.ScaleY = sy;		
	}
}
*/

/*
//==========================================================================
//
//	Do
//
//==========================================================================

void Do(float deltaTime)
{
	// [FB] Let's animate the 'shrinking' of monsters 'a lá Duke Nukem 3d'! :D
	if (bActive)
	{
		if (sx > 1.0 / itof(Level))
		{
			sx -= 0.5 * deltaTime;
		}
		if (sy > 1.0 / itof(Level))
		{
			 sy -= 0.5 * deltaTime;
		}
		ARecepient.ScaleX = sx;
		ARecepient.ScaleY = sy;
	}
	// FIXME: Find a way to execute these.... :-s
	//		 or to pass deltaTime gradually to unshrinking
	//		 in 'Deactivate' method
/*	else if (!bActive)
	{
		if (sx < ARecepient.default.ScaleX)
		{
			sx += 0.5 * deltaTime;
		}
		if (sy < ARecepient.default.ScaleY)
		{
			sy += 0.5 * deltaTime;
		}

		ARecepient.ScaleX = sx;
		ARecepient.ScaleY = sy;
	}*//*
	
	// [FB] FIXME: Hackity hack, hackity hack.... :P
	time = deltaTime;
}
*/

defaultproperties
{
	bPlayActivation = true;
	bPlayDeactivation = true;
	// bDontCallDo = false;
	bIsNegative = true;

	CastMessage = "shrinked!!";
	SMark = "StatMarkShrink";
}
