//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ## ###  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**				   ######  #####   ######
//**	               ##   ## ##  ## ##    ##
//**	     		   ##   ## ##  ## ##   
//**	               #####   #####  ##  ####
//**	     		   ## ###  ##     ###   ##
//**	     		   ##  ### ##      ######
//**
//**    $Id$
//**
//**    Copyright (C) 2004-2008 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class PathNode : Node
	__mobjinfo__(15102);

enum
{
	ARG__PATHINDEX	= 1,	// global path index on map
	ARG__NODEINDEX	= 2		// index of the node in path
};

//
//	It is not oligatory that Path Node is linked with preious and next path nodes
//	by common node links; thus we should use explicit links for that connections;
//

PathNode	FW;
PathNode	BW;


//==========================================================================
//
//	GetPathNodeByLocalIndex
//
//==========================================================================

PathNode GetPathNodeByLocalIndex(int Index)
{

}

//==========================================================================
//
//	GetPathNodeByOrdinalNumber
//
//==========================================================================

PathNode GetPathNodeByOrdinalNumber(int Number)
{

}

//==========================================================================
//
//	GetPathNode
//
//==========================================================================

PathNode GetPathHead()
{
	PathNode PN;
	PathNode PNHead;
	int PathIndex = Args[ARG__PATHINDEX];
	int MinIndex = -1;

	foreach AllThinkers(PathNode, PN)
	{
		if (PN.Args[ARG__PATHINDEX] == PathIndex)
		{
			if (MinIndex < 0 || PN.Args[ARG__NODEINDEX] < MinIndex)
			{
				MinIndex = PN.Args[ARG__NODEINDEX];
				PNHead = PN;
			}
		}
	}

	return PNHead;
}

//==========================================================================
//
//	GetPathTail
//
//==========================================================================

PathNode GetPathTail()
{
	PathNode PN;
	PathNode PNTail;
	int PathIndex = Args[ARG__PATHINDEX];
	int MaxIndex = -1;

	foreach AllThinkers(PathNode, PN)
	{
		if (PN.Args[ARG__PATHINDEX] == PathIndex)
		{
			if (PN.Args[ARG__NODEINDEX] > MaxIndex)
			{
				MaxIndex = PN.Args[ARG__NODEINDEX];
				PNTail = PN;
			}
		}
	}

	return PNTail;
}


defaultproperties
{
}
