//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class FighterPlayer : PlayerPawn;

//============================================================================
//
//  A_SkullPop
//
//============================================================================

final void A_SkullPop()
{
	EntityEx A;

	if (!bIsPlayer)
	{
		//	Not a player anymore, i.e. already respawned or disconnected.
		return;
	}
	bSolid = false;
	A = Spawn(BloodySkull, Origin + vector(0.0, 0.0, 48.0),,, false);
	A.Velocity.x = (Random() - Random()) * 2.0 * 35.0;
	A.Velocity.y = (Random() - Random()) * 2.0 * 35.0;
	A.Velocity.z = (2.0 + Random() / 4.0) * 35.0;
	// Attach player mobj to bloody skull
	A.Player = Player;
	A.bIsPlayer = true;
	A.ObtainInventory(EntityEx(Player.MO));
	Player = none;
	bIsPlayer = false;
	Special1 = A.Player.PClass;
	A.Health = Health;
	A.Angles.yaw = Angles.yaw;
	A.Player.MO = A;
	A.Player.Camera = A;
	Player(A.Player).DamageFlash = 1.0;
}

states
{
Spawn:
	PLAY A -1
	Stop
See:
	PLAY ABCD 4
	Loop
Melee:
Missile:
	PLAY EF 8
	Goto Spawn
Pain:
	PLAY G 4
	PLAY G 4 A_Pain
	Goto Spawn
Death:
	PLAY H 6
	PLAY I 6 A_PlayerScream
	PLAY JK 6
	PLAY L 6 A_NoBlocking
	PLAY M 6
	PLAY N -1 A_AddPlayerCorpse
	Stop
XDeath:
	PLAY O 5 A_PlayerScream
	PLAY P 5 A_SkullPop
	PLAY R 5 A_NoBlocking
	PLAY STUV 5
	PLAY W -1 A_AddPlayerCorpse
	Stop
Ice:
	PLAY X 5 A_FreezeDeath
	PLAY X 1 A_FreezeDeathChunks
	Wait
Burn:
	FDTH A 5 Bright A_PlayerBurnScream
	FDTH B 4 Bright
	FDTH G 5 Bright
	FDTH H 4 Bright A_PlayerScream
	FDTH I 5 Bright
	FDTH J 4 Bright
	FDTH K 5 Bright
	FDTH L 4 Bright
	FDTH M 5 Bright
	FDTH N 4 Bright
	FDTH O 5 Bright
	FDTH P 4 Bright
	FDTH Q 5 Bright
	FDTH R 4 Bright
	FDTH S 5 Bright A_NoBlocking
	FDTH T 4 Bright
	FDTH U 5 Bright
	FDTH V 4 Bright
	ACLO E 35 A_CheckBurnGone
	Wait
BurnGone:
	ACLO E 8
	Stop
}

defaultproperties
{
	Health = 100;
	GibsHealth = -50;
	Radius = 16.0;
	Height = 64.0;
	StandHeight = 64.0;
	DuckHeight = 32.0;
	PainChance = 1.0;
	HexenArmor[0] = 15.0;
	HexenArmor[1] = 25.0;
	HexenArmor[2] = 20.0;
	HexenArmor[3] = 15.0;
	HexenArmor[4] = 5.0;
	bPickUp = true;
	PainSound = 'PlayerFighterPain';
	SoundClass = 'fighter';

	InitialInventory.Num = 1;
	InitialInventory[0].Type = FWeapFist; InitialInventory[0].Amount = 1;
}
