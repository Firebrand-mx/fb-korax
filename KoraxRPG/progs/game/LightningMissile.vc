//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class LightningMissile : Projectile
	abstract;

LightningMissile LightningLink;
int ZigZagCount;	// Only for floor
float ZagSpeed;

//==========================================================================
//
//	Touch
//
//==========================================================================

bool Touch(Entity InOther)
{
	int damage;
	Actor Other;

	if (!bMissile)
	{
		return false;
	}

	Other = Actor(InOther);
	// Check for a non-shootable mobj
	if (!Other.bShootable || Other.bNonShootable)
	{
		return true;
	}

	// Check for blasted thing running into another
	if (bBlasted && Other.bShootable)
	{
		if (!Other.bBoss && Other.bCountKill)
		{
			Other.Velocity.x += Velocity.x;
			Other.Velocity.y += Velocity.y;
			if ((Other.Velocity.x + Other.Velocity.y) > 3.0 * 35.0)
			{
				damage = (ftoi(Mass) / 100) + 1;
				Other.Damage(self, self, damage);
				damage = (ftoi(Other.Mass) / 100) + 1;
				Damage(Other, Other, damage >> 2);
			}
			return false;
		}
	}

	if (Other == Instigator)
	{
		return true;
	}

	if (Other.Mass != 99999.0)
	{
		Other.Velocity.x += Velocity.x / 16.0;
		Other.Velocity.y += Velocity.y / 16.0;
	}
	if ((!Other.bIsPlayer && !Other.bBoss) || !(level->tictime & 1))
	{
		if (Other.Class == Centaur ||
			Other.Class == CentaurLeader)
		{
			// Lightning does more damage to centaurs
			Other.Damage(self, Instigator, 9);
		}
		else
		{
			Other.Damage(self, Instigator, 3);
		}
		if (!(GetSoundPlayingInfo(self,
					GetSoundID('MageLightningZap'))))
		{
			PlaySound('MageLightningZap', CHAN_VOICE);
		}
		if (Other.bCountKill && P_Random() < 64
			&& !GetSoundPlayingInfo(Other,
				GetSoundID('PuppyBeat')))
		{
			if ((Other.Class == Centaur) ||
				(Other.Class == CentaurLeader) ||
				(Other.Class == Ettin))
			{
				Other.PlaySound('PuppyBeat', CHAN_VOICE);
			}
		}
	}
	Health--;
	if (Health <= 0 || Other.Health <= 0)
	{
		return false;
	}
	if (Class == LightningFloor)
	{
		if (LightningLink && !LightningLink.Enemy)
		{
			LightningLink.Enemy = Other;
		}
	}
	else if (!Enemy)
	{
		Enemy = Other;
	}
	return true;	// lightning zaps through all sprites
}

//==========================================================================
//
//  A_LightningClip
//
//==========================================================================

void A_LightningClip()
{
	Actor targ;
	int zigZag;

	if (Class == LightningFloor)
	{
		if (Sector->bHasExtrafloors && LightningLink && Instigator.Origin.z >= LightningLink.FloorZ)
			Origin.z = LightningLink.FloorZ;
		else
			Origin.z = FloorZ;
		if (LightningLink)
			targ = LightningLink.Enemy;
		else
			targ = none;
	}
	else if (Class == LightningCeiling)
	{
		if (Sector->bHasExtrafloors && LightningLink && Instigator.Origin.z <= LightningLink.CeilingZ)
			Origin.z = LightningLink.CeilingZ - Height;
		else
			Origin.z = CeilingZ - Height;
		targ = Enemy;
	}
	if (Class == LightningFloor)
	{
		// floor lightning zig-zags, and forces the ceiling lightning to mimic
		zigZag = P_Random();
		if ((zigZag > 128 && ZigZagCount < 2) || ZigZagCount < -2)
		{
			Thrust(Angles.yaw + 90.0, ZagSpeed);
			if (LightningLink)
			{
				LightningLink.Thrust(Angles.yaw + 90.0, ZagSpeed);
			}
			ZigZagCount++;
		}
		else
		{
			Thrust(Angles.yaw - 90.0, ZagSpeed);
			if (LightningLink)
			{
				LightningLink.Thrust(Angles.yaw - 90.0, ZagSpeed);
			}
			ZigZagCount--;
		}
	}
	if (targ)
	{
		if (targ.Health <= 0)
		{
			ExplodeMissile();
		}
		else
		{
			Angles.yaw = atan2(targ.Origin.y - Origin.y,
				targ.Origin.x - Origin.x);
			Velocity.x = 0.0;
			Velocity.y = 0.0;
			Thrust(Angles.yaw, Speed * frametime / 2.0);
		}
	}
}

//==========================================================================
//
//  A_LightningZap
//
//==========================================================================

void A_LightningZap(void)
{
	LightningZap Zap;
	float deltaZ;

	A_LightningClip();

	Health -= 8;
	if (Health <= 0)
	{
		SetState(DeathState);
		return;
	}
	if (Class == LightningFloor)
	{
		deltaZ = 10.0;
	}
	else
	{
		deltaZ = -10.0;
	}
	Zap = LightningZap(Spawn(LightningZap,
 		Origin + vector((Random() - 0.5) * Radius,
		(Random() - 0.5) * Radius, deltaZ)));
	if (Zap)
	{
		Zap.LightningOwner = self;
		Zap.Velocity.x = Velocity.x;
		Zap.Velocity.y = Velocity.y;
		Zap.Instigator = Instigator;
		if (Class == LightningFloor)
		{
			Zap.Velocity.z = 20.0 * 35.0;
		}
		else
		{
			Zap.Velocity.z = -20.0 * 35.0;
		}
	}
	if (Class == LightningFloor && P_Random() < 160)
	{
		PlaySound('MageLightningContinuous', CHAN_VOICE);
	}
}

//==========================================================================
//
//  A_LightningRemove
//
//==========================================================================

void A_LightningRemove(void)
{
	if (LightningLink)
	{
		LightningLink.LightningLink = none;
		LightningLink.ExplodeMissile();
	}
}

defaultproperties
{
	Health = 144;
	Radius = 16.0;
	Height = 40.0;
	Speed = 875.0;
	MissileDamage = 8;
	Effects = EF_DL_BLUE;
	ZagSpeed = 1.0;
}

//**************************************************************************
//
//  $Log$
//  Revision 1.3  2006/02/06 19:43:03  firebrand_kh
//  Added latest Vavoom changes
//
//  Revision 1.3  2006/01/12 23:27:25  dj_jl
//  Added a fix for 3d floors.
//
//  Revision 1.2  2003/03/08 12:41:43  dj_jl
//  Removing class pointers.
//
//  Revision 1.1  2002/10/26 16:32:26  dj_jl
//  New style of defining classes.
//
//**************************************************************************
