//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class WeaponPiece : Pickup
	abstract;

int PieceClass;
int PieceValue;

//==========================================================================
//
//  TouchSpecial
//
//==========================================================================

void TouchSpecial(Actor Toucher)
{
	bool remove;
	bool checkAssembled;
	bool gaveWeapon;
	int gaveMana;

	if (!Toucher.bPickUp)
	{
		// Can't be picked up by toucher
		return;
	}
	if (Toucher.Health <= 0)
	{
		// Toucher is dead
		return;
	}
	remove = true;
	checkAssembled = true;
	gaveWeapon = false;
	if (Toucher.Player.PClass != PieceClass)
	{
		// Wrong class, but try to pick up for mana
		if (netgame && !deathmatch)
		{
			// Can't pick up wrong-class weapons in coop netplay
			return;
		}
		checkAssembled = false;
		gaveMana = Toucher.Player.GiveMana(MANA_BOTH, 20);
		if (!gaveMana)
		{
			// Didn't need the mana, so don't pick it up
			return;
		}
	}
	else if (netgame && !deathmatch)
	{
		// Cooperative net-game
		if (Toucher.Player.Pieces & PieceValue)
		{
			// Already has the piece
			return;
		}
		PieceValue = pieceValueTrans[PieceValue];
		Toucher.Player.GiveMana(MANA_BOTH, 20);
		remove = false;
	}
	else
	{
		// Deathmatch or single player game
		gaveMana = Toucher.Player.GiveMana(MANA_BOTH, 20);
		if (Toucher.Player.Pieces & PieceValue)
		{
			// Already has the piece, check if mana needed
			if (!gaveMana)
			{
				// Didn't need the mana, so don't pick it up
				return;
			}
			checkAssembled = false;
		}
	}

	// Pick up the weapon piece
	if (Special)
	{
		ExecuteLineSpecial(Special, &Args[0], NULL, 0, Toucher);
		Special = 0;
	}
	if (remove)
	{
		if (deathmatch && !bDropped)
		{
			HideSpecial();
		}
		else
		{
			Remove();
		}
	}
	Toucher.Player.BonusFlash += BONUSADD;

	// Check if fourth weapon assembled
	if (checkAssembled)
	{
		Toucher.Player.Pieces |= PieceValue;
		if (Toucher.Player.Pieces == (WPIECE1 | WPIECE2 | WPIECE3))
		{
			gaveWeapon = true;
			Toucher.Player.WeaponOwned[WP_FOURTH] = true;
			Toucher.Player.PendingWeapon = WP_FOURTH;
		}
	}

	if (gaveWeapon)
	{
		cprint(Toucher.Player, fourthWeaponText[PieceClass]);
		// Play the build-sound full volume for all players
		Toucher.PlayFullVolumeSound('WeaponBuild', CHAN_ITEM);
	}
	else
	{
		cprint(Toucher.Player, weaponPieceText[PieceClass]);
		Toucher.PlayFullVolumeSound('PickupWeapon', CHAN_ITEM);	//FIXME must be PickupPiece
	}
}

defaultproperties
{
	bFloatBob = true;
}

//**************************************************************************
//
//  $Log$
//  Revision 1.1  2005/08/02 16:13:26  firebrand_kh
//  Initial Import
//
//  Revision 1.3  2004/08/22 19:23:26  dj_jl
//  Moved many functions to player class.
//
//  Revision 1.2  2003/11/12 16:50:47  dj_jl
//  Changed player structure into a class
//
//  Revision 1.1  2002/10/26 16:32:27  dj_jl
//  New style of defining classes.
//
//**************************************************************************
