//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class HolySpirit : Projectile;

int WeaveXY;
int WeaveZ;

//==========================================================================
//
//	Touch
//
//==========================================================================

bool Touch(Entity InOther)
{
	int damage;
	EntityEx Other;

	Other = EntityEx(InOther);
	if (!Other.bSolid && !Other.bSpecial && !Other.bShootable)
		return true;

	// Check for skulls slamming into things
	if (bSkullFly)
	{
		if (Other.bShootable && Other != Target)
		{
			if (Level.Game.netgame && !Level.Game.deathmatch && Other.bIsPlayer)
			{
				// don't attack other co-op players
				return true;
			}
			if (Other.bReflective && (Other.bIsPlayer || Other.bBoss))
			{
				Tracer = Target;
				Target = Other;
				return true;
			}
			if (Other.bMonster || Other.bIsPlayer)
			{
				Tracer = Other;
			}
			if (P_Random() < 96)
			{
				damage = 12;
				if (Other.bIsPlayer || Other.bBoss)
				{
					damage = 3;
					// ghost burns out faster when attacking players/bosses
					Health -= 6;
				}
				Other.Damage(self, Target, damage);
				if (P_Random() < 128)
				{
					Spawn(HolyPuff, Origin);
					PlaySound('SpiritAttack', CHAN_VOICE);
					if (Other.bMonster && P_Random() < 128
						&& !GetSoundPlayingInfo(Other,
							GetSoundID('PuppyBeat')))
					{
						if ((Other.Class == Centaur) ||
							(Other.Class == CentaurLeader) ||
							(Other.Class == Ettin))
						{
							Other.PlaySound('PuppyBeat', CHAN_VOICE);
						}
					}
				}
			}
			if (Other.Health <= 0)
			{
				Tracer = none;
			}
		}
		return true;
	}
	return ::Touch(InOther);
}

//============================================================================
//
//  CHolyFindTarget
//
//============================================================================

void CHolyFindTarget()
{
	Entity		Other;

	foreach RoughBlockSearch(Other, 6)
	{
		EntityEx link = EntityEx(Other);

		if ((!link.bMonster && !link.bIsPlayer) || link.bDormant)
		{
			continue;
		}
		if (!link.bShootable)
		{
			continue;
		}
		if (Level.Game.netgame && !Level.Game.deathmatch && link.bIsPlayer)
		{
			continue;
		}
		if (link == Target)
		{
			continue;
		}
		if (!CanSee(link))
		{
			continue;
		}
		Tracer = link;
		bColideWithWorld = false;
		bSkullFly = true;
		bMissile = false;
		break;
	}
}

//============================================================================
//
//  CHolySeekerMissile
//
//  Similar to SeekerMissile, but seeks to a random Z on the target
//
//============================================================================

void CHolySeekerMissile(float thresh, float turnMax)
{
	int dir;
	float dist;
	float delta;
	float angle;
	float newZ;
	float deltaZ;

	if (!Tracer)
	{
		return;
	}
	if (!Tracer.bShootable || (!Tracer.bMonster && !Tracer.bIsPlayer))
	{
		// Target died/target isn't a player or creature
		Tracer = none;
		bColideWithWorld = true;
		bSkullFly = false;
		bMissile = true;
		CHolyFindTarget();
		return;
	}
	dir = FaceActor(Actor(Tracer), delta);
	if (delta > thresh)
	{
		delta /= 2.0;
		if (delta > turnMax)
		{
			delta = turnMax;
		}
	}
	if (dir)
	{
		// Turn clockwise
		Angles.yaw += delta;
	}
	else
	{
		// Turn counter clockwise
		Angles.yaw -= delta;
	}
	Angles.yaw = AngleMod360(Angles.yaw);
	angle = Angles.yaw;
	Velocity.x = Speed * cos(angle);
	Velocity.y = Speed * sin(angle);
	if (!(XLevel.TicTime & 15) || Origin.z > Tracer.Origin.z + Tracer.Height ||
		Origin.z + Height < Tracer.Origin.z)
	{
		newZ = Tracer.Origin.z + Random() * Tracer.Height;
		deltaZ = newZ - Origin.z;
		if (fabs(deltaZ) > 15.0)
		{
			if (deltaZ > 0.0)
			{
				deltaZ = 15.0;
			}
			else
			{
				deltaZ = -15.0;
			}
		}
		dist = DistTo2(Tracer);
		dist = dist / Speed;
		if (dist < 1.0)
		{
			dist = 1.0;
		}
		Velocity.z = deltaZ / dist;
	}
	return;
}

//============================================================================
//
//	CHolyWeave
//
//============================================================================

void CHolyWeave()
{
	float newX, newY;
	float angle;

	angle = AngleMod360(Angles.yaw + 90.0);
	newX = Origin.x - cos(angle) * Level.Game.FloatBobOffsets[WeaveXY] * 4.0;
	newY = Origin.y - sin(angle) * Level.Game.FloatBobOffsets[WeaveXY] * 4.0;
	WeaveXY = (WeaveXY + (P_Random() % 5)) & 63;
	newX += cos(angle) * Level.Game.FloatBobOffsets[WeaveXY] * 4.0;
	newY += sin(angle) * Level.Game.FloatBobOffsets[WeaveXY] * 4.0;
	TryMove(vector(newX, newY, Origin.z));
	Origin.z -= Level.Game.FloatBobOffsets[WeaveZ] * 2.0;
	WeaveZ = (WeaveZ + (P_Random() % 5)) & 63;
	Origin.z += Level.Game.FloatBobOffsets[WeaveZ] * 2.0;
}

//============================================================================
//
//	A_CHolySeek
//
//============================================================================

final void A_CHolySeek()
{
	Health--;
	if (Health <= 0)
	{
		Velocity.x /= 4.0;
		Velocity.y /= 4.0;
		Velocity.z = 0.0;
		SetState(FindState('Death'));
		StateTime -= Random() * 0.1;
		return;
	}
	if (Tracer)
	{
		CHolySeekerMissile(itof(Args[0]), itof(Args[0]) * 2.0);
		if (!((XLevel.TicTime + 7) & 15))
		{
			Args[0] = 5 + (P_Random() / 20);
		}
	}
	CHolyWeave();
}

//============================================================================
//
//	A_CHolyCheckScream
//
//============================================================================

final void A_CHolyCheckScream()
{
	A_CHolySeek();
	if (P_Random() < 20)
	{
		PlaySound('SpiritActive', CHAN_VOICE);
	}
	if (!Tracer)
	{
		CHolyFindTarget();
	}
}

states
{
Spawn:
	SPIR AAB 2 A_CHolySeek
	SPIR B 2 A_CHolyCheckScream
	Loop
Death:
	SPIR D 4
	SPIR E 4 A_Scream
	SPIR FGHI 4
	Stop
}

defaultproperties
{
	Health = 105;
	Radius = 10.0;
	Height = 6.0;
	Speed = 420.0;
	MissileDamage = 3;
	RenderStyle = STYLE_Translucent;
	Alpha = 0.666;
	bRip = true;
	bSeekerMissile = true;
	bDamageInvulnerable = true;
	bExplodeOnSky = true;
	bNoExplodeFloor = true;
	bExtremeDeath = true;
	bCanBlast = true;
	bDontShieldReflect = true;
	DeathSound = 'SpiritDie';
}
