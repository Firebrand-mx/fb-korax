//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id: ClassBoss.vc 2273 2007-05-27 21:23:27Z dj_jl $
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class ClassBoss : Pawn
	abstract;

bool bHealthInitialised;
int StrafeCount;

float StrafeRange;

//============================================================================
//
//  A_ClassBossHealth
//
//============================================================================

final void A_ClassBossHealth()
{
	if (Level.Game.netgame && !Level.Game.deathmatch)	// co-op only
	{
		if (!bHealthInitialised)
		{
			Health *= 5;
			bHealthInitialised = true;	// has been initialised
		}
	}
}

//============================================================================
//
//  A_MoveEx
//
//	Overloaded movement method for ClassBoss
//	Contents copied from original A_FastChase method
//
//============================================================================

bool A_MoveEx(bool autoSetIdle, bool autoSetAttack, optional bool Evade)
{
	float delta;
	float dist;
	float ang;

	if (!specified_Evade)
		Evade = false;

	if (ReactionCount)
		ReactionCount--;

	// Modify target threshold
	if (Threshold)
		Threshold--;

	if (!pTargetVec)
	{
		Error("ClassBoss::A_MoveEx: called with pTargetVec = NULL");
		return false;
	}

	if (Level.Game.gameskill == sk_nightmare)
	{
		// Monsters move faster in nightmare mode
		StateTime *= 0.5;
		if (StateTime < 0.1)
		{
			StateTime = 0.1;
		}
	}

	//
	// turn towards movement direction if not there yet
	//
	/*if (MoveDir < 8)
	{
		Angles.yaw = itof(ftoi(Angles.yaw / 45.0)) * 45.0;
		delta = AngleMod180(Angles.yaw - itof(MoveDir) * 45.0);
		if (delta > 0.0)
		{
			Angles.yaw = AngleMod360(Angles.yaw - 45.0);
		}
		else if (delta < 0.0)
		{
			Angles.yaw = AngleMod360(Angles.yaw + 45.0);
		}
	}*/

	if (!Evade && Target && !Target.bShootable)
	{
		if (autoSetIdle)
		{
			SetState(IdleState);
			bInCombat = false;
		}
		else
			Target = none;

		return false;
	}

	//
	// don't attack twice in a row
	//
	if (bJustAttacked)
	{
		bJustAttacked = false;
		if (Level.Game.gameskill != sk_nightmare)
			NewChaseDirEx(Evade);
		return true;
	}

	// Strafe
	if (StrafeCount > 0)
	{
		StrafeCount--;
	}
	else if (Target)
	{
		StrafeCount = 0;
		Velocity.x = 0.0;
		Velocity.y = 0.0;
		dist = DistTo(Target);
		if (dist < StrafeRange)
		{
			if (P_Random() < 100)
			{
				ang = atan2(Target.Origin.y - Origin.y,
					Target.Origin.x - Origin.x);
				if (P_Random() < 128)
					ang = AngleMod360(ang + 90.0);
				else
					ang = AngleMod360(ang - 90.0);
				Velocity.x = 13.0 * cos(ang) * 35.0;
				Velocity.y = 13.0 * sin(ang) * 35.0;
				StrafeCount = 3;	// strafe time
			}
		}
	}

	//
	// check for missile attack
	//
	if (autoSetAttack && MissileState)
	{
		if ((Level.Game.gameskill == sk_nightmare) || !MoveCount)
		{
			if (CheckMissileRange())
			{
				SetState(MissileState);
				bJustAttacked = true;
				return true;
			}
		}
	}

	//
	// chase towards player
	//
	if (!StrafeCount)
	{
		if (--MoveCount < 0 || !StepMoveEx())
		{
			NewChaseDirEx(Evade);
		}
	}

	return true;
}


defaultproperties
{
	bNoMorph = true;
	StrafeRange = 640.0;
}
