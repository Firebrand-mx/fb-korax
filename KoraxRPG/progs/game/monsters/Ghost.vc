
class Ghost : IntelligentActor
	__mobjinfo__(16022);

int WeaveXY;
int WeaveZ;


//============================================================================
//
//  A_GhostChase
//
//============================================================================

final void A_GhostChase()
{
	::A_ChaseAI();
	A_GhostWeave();
}

//============================================================================
//
//  DoSpecialMove
//
//============================================================================

bool DoSpecialMove(bool Evade)
{
	if (!pTargetVec)
	{
		Error("Ghost::DoSpecialMove: called with pTargetVec = NULL");
		return false;
	}
	if (!Evade)
	{
		float myz = Origin.z + Height * 0.5 - FloorClip;
		if (myz > pTargetVec->z)
		{
			Velocity.z -= 16.0;
		}
		else if (pTargetVec->z > myz)
		{
			Velocity.z += 16.0;
		}
	}
	return false;
}

//============================================================================
//
//  A_GhostPreAttack
//
//============================================================================

final void A_GhostPreAttack()
{
	Velocity.z += 32.0;
	A_FaceTarget();
}

//============================================================================
//
//  A_GhostAttack
//
//============================================================================

final void A_GhostAttack()
{
	Velocity.z += 32.0;
	if (CheckMeleeRange())
	{
		Target.Damage(self, self, HITDICE(2));
		if (P_Random() < 33)
			Actor(Target).CastCondition(ACSpellConfusion, true, self, 1 + P_Random() % 5, 10.0);
	}
}

//============================================================================
//
//	A_GhostWeave
//
//============================================================================

void A_GhostWeave()
{
	float newX, newY;
	float angle;

	angle = AngleMod360(Angles.yaw + 90.0);
	newX = Origin.x - cos(angle) * Level.Game.FloatBobOffsets[WeaveXY] * 4.0;
	newY = Origin.y - sin(angle) * Level.Game.FloatBobOffsets[WeaveXY] * 4.0;
	WeaveXY = (WeaveXY + (P_Random() % 5)) & 63;
	newX += cos(angle) * Level.Game.FloatBobOffsets[WeaveXY] * 4.0;
	newY += sin(angle) * Level.Game.FloatBobOffsets[WeaveXY] * 4.0;
	TryMove(vector(newX, newY, Origin.z), false);
	Origin.z -= Level.Game.FloatBobOffsets[WeaveZ] * 2.0;
	WeaveZ = (WeaveZ + (P_Random() % 5)) & 63;
	Origin.z += Level.Game.FloatBobOffsets[WeaveZ] * 2.0;
}

//============================================================================
//
//	A_GhostCheckScream
//
//============================================================================

final void A_GhostCheckScream()
{
	if (P_Random() < 20)
	{
		PlaySound('SpiritActive', CHAN_VOICE);
	}
}

states
{
Spawn:
	SPIR AA 10 A_LookAI
	Loop
See:
	SPIR AAB 5 A_GhostChase
	SPIR B 2 A_GhostCheckScream
	Loop
Melee:
	SPIR AA 6 A_GhostPreAttack
	SPIR B 8 A_GhostAttack
	Goto See
Death:
	SPIR D 4 A_NoBlocking
	SPIR E 4 A_Scream
	SPIR FGHI 4
	Stop
}

defaultproperties
{
	bSolid = true;
	bShootable = true;
	bCountKill = true;
	bMonster = true;
	bActivatePushWall = true;
	bActivateMCross = true;
	bPassMobj = true;
	bCanUseWalls = true;

	bFloorClip = true;
	bTelestomp = true;

	Health = 105;
	Radius = 10.0;
	Height = 6.0;
	Mass = 10.0;
	Speed = 50.0 * 35.0;
	PainChance = 0.0;
	MissileDamage = 1;
	RenderStyle = STYLE_Translucent;
	Alpha = 0.666;
	bPassMobj = false;
	bColideWithWorld = false;
	bFloorClip = true;
	bNoGravity = true;
	bDropOff = true;
	bFloat = true;
	bNoBlood = true;
	bActivatePushWall = false;
	bActivateMCross = false; // [CW] Ghost are just too ethereal to activate anything
	bNoTeleport = true;
	bCannotPush = true;
	bNoSplash = true;
	bNoDamageThrust = true;
	bHowlVictims = true;
	bNoGravKill = true;
	bLookAllAround = true;
	bDynamicLight = true;
	DLightRadius = 126.0;
	SightSound = 'SpiritActive';
	ActiveSound = 'SpiritActive';
	AttackSound = 'SpiritAttack';
	DeathSound = 'SpiritDie';

	bSenseAlways = true;
}
