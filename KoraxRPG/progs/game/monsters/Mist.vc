//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ## ###  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**				   ######  #####   ######
//**	               ##   ## ##  ## ##    ##
//**	     		   ##   ## ##  ## ##   
//**	               #####   #####  ##  ####
//**	     		   ## ###  ##     ###   ##
//**	     		   ##  ### ##      ######
//**
//**    $Id: Mist.vc 1638 2008-08-28 19:10:17Z firebrand_kh $
//**
//**    Copyright (C) 2004-2008 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Mist : Actor
	abstract;

const float MAX_DISTANCE_AWAYFROMSPAWNSPOT	= 2048.0;

//==========================================================================
//
// Fog Variables (same as in FogPatch):
//
//      args[0]     Speed (0..10) of fog
//      args[3]     Lifetime countdown (0 for endless life)
//      args[4]     Boolean: fog moving?
//
//==========================================================================

bool bPersistent;

enum
{
	size_small,
	size_medium,
	size_large
};

TVec SpawnSpot;
int SizeType;
//Actor _victim;

int WeaveIndex;		// Index into floatbob table


//==========================================================================
//
//	OnMapSpawn
//
//==========================================================================

void OnMapSpawn(mthing_t* mthing)
{
	::OnMapSpawn(mthing);
	bPersistent = !Args[3];
	SpawnSpot = Origin;
}

//==========================================================================
//
//	BeginPlay
//
//==========================================================================

void BeginPlay()
{
	::BeginPlay();

	SizeType = P_Random() % 3;
	switch (SizeType)
	{
	case size_large:
		SetState(FindState('Large'));
		break;
	case size_medium:
		SetState(FindState('Medium'));
		break;
	case size_small:
		SetState(FindState('Small'));
		break;
	}
}

//==========================================================================
//
//	A_MistMove
//
//==========================================================================

final void A_MistMove()
{
	float speed;
	float angle;
	int weaveindex;

	Args[3]--;
	if (!bPersistent && Args[3] <= 0)
	{
		SetState(FindState('Death'));
		return;
	}

	if (Args[4])
	{
		if ((Args[3] % 4) == 0)
		{
			Origin.z += Level.Game.FloatBobOffsets[WeaveIndex] / 2.0;
			WeaveIndex = (WeaveIndex + 1) & 63;
		}

		speed = itof(Args[0]);
		angle = Angles.yaw;
		Velocity.x = speed * cos(angle) * 35.0;
		Velocity.y = speed * sin(angle) * 35.0;
	}

	//_victim = none;
	A_MistAttack();
}

//==========================================================================
//
//	A_MistAttack
//
//==========================================================================

void A_MistAttack()
{
	int damage;
	float distance;

	switch (SizeType)
	{
	case size_small:
		damage = 4;
		distance = 30.0; break;
	case size_medium:
		damage = 6;
		distance = 40.0; break;
	case size_large:
		damage = 12;
		distance = 80.0; break;
	}

	RadiusAttack(self, damage, distance, false, DamageType);
}

//==========================================================================
//
//	A_MistDecide
//
//==========================================================================

final void A_MistDecide()
{
	if (Length(Origin - SpawnSpot) > MAX_DISTANCE_AWAYFROMSPAWNSPOT)
	{
		// Turn back to spawn spot
		Angles.yaw = atan2(SpawnSpot.y - Origin.y,
				SpawnSpot.x - Origin.x);
	}
	else if (P_Random() < 128)
	{
		Angles.yaw += (Random() - 0.5) * 90.0;
	}
}

//==========================================================================
//
//	A_MistDeath
//
//==========================================================================

final void A_MistDeath()
{
	switch (SizeType)
	{
	case size_large:
		SetState(FindState('DeathLarge'));
		break;
	case size_medium:
		SetState(FindState('DeathMedium'));
		break;
	case size_small:
		SetState(FindState('DeathSmall'));
		break;
	}
}


states
{
Spawn:
	TNT1 A 1
	Loop
Death:
	TNT1 A 1 A_MistDeath
	Stop
}


defaultproperties
{
	Radius = 1.0;
	Height = 1.0;
	Speed = 35.0;
	RenderStyle = STYLE_Translucent;
	Alpha = 0.333;
	bNoBlockmap = true;
	bNoGravity = true;
	bColideWithWorld = false;
	bColideWithThings = false;
	bNoDamageThrust = true;
	bNoSplash = true;
	bFloat = true;
	bDropOff = true;
	bNoTeleport = true;
}
