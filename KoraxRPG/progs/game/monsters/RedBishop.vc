//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ## ###  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**				   ######  #####   ######
//**	               ##   ## ##  ## ##    ##
//**	     		   ##   ## ##  ## ##   
//**	               #####   #####  ##  ####
//**	     		   ## ###  ##     ###   ##
//**	     		   ##  ### ##      ######
//**
//**    $Id: RedBishop.vc 1646 2008-09-04 20:29:52Z dj_jl $
//**
//**    Copyright (C) 2004-2008 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class RedBishop : IntelligentActor
	__mobjinfo__(16008);

/*
	ABILITIES:
		- Teleports instead of common blur;
		- Shoot fiery heretic-style projectiles
		- Ressurects after first death with full health after some time;
		  decreasing chance to ressurect after each following death with lower health
*/

bool bAttackSoundContinious;
class<Actor> BishopFXType;
class<Actor> BishopBlurType;
class<Actor> BishopPainBlurType;

int NumDeaths;

//==========================================================================
//
//	GetSpecies
//
//==========================================================================

name GetSpecies()
{
	return StrToName("Bishop");
}

//==========================================================================
//
//	GetExplodeParms
//
//==========================================================================

void GetExplodeParms(out int damage, out float distance, out byte damageSelf)
{
	// Bishop radius death
	damage = 35 + (P_Random() & 25);
}

//==========================================================================
//
//  A_RedBishopDoBlur
//
//==========================================================================

final void A_RedBishopDoBlur()
{
	bShootable = false;
	bInvisible = true;

	// Spawn blur just at the current position
	Actor blur = Spawn(BishopBlurType, Origin);
	if (blur)
		blur.Angles = Angles;

	Special1 = bInvisible ? ((P_Random() & 3) + 3) : ((P_Random() & 7) + 4);	// P_Random number of blurs
	if (P_Random() < 120)
	{
		Thrust(AngleMod360(Angles.yaw + 90.0), 11.0);
	}
	else if (P_Random() > 125)
	{
		Thrust(AngleMod360(Angles.yaw - 90.0), 11.0);
	}
	else
	{
		// Thrust forward
		Thrust(Angles.yaw, 11.0);
	}
	PlaySound('BishopBlur', CHAN_VOICE);
}

//==========================================================================
//
//	A_RedBishopSpawnBlur
//
//==========================================================================

final void A_RedBishopSpawnBlur()
{
	Actor blur;

	if (!--Special1)
	{
		Velocity.x = 0.0;
		Velocity.y = 0.0;
		//if (!Target)
		//	SetState(IdleState);
		if (P_Random() > 96 || !ConsiderAttack())
		{
			SetState(SeeState);
		}
	}

	if (!bInvisible)
	{
		blur = Spawn(BishopBlurType, Origin);
		if (blur)
		{
			blur.Angles = Angles;
		}
	}
}

//==========================================================================
//
//  A_RedBishopAttack2
//
//  Spawns one of a string of bishop missiles
//
//==========================================================================

final void A_RedBishopAttack2()
{
	EntityEx mo;

	if (!Target || !CanSee(Target) || !Special1)
	{
		Special1 = 0;
		SetState(SeeState);
		return;
	}
	mo = SpawnMissile(Target, BishopFXType);
	if (mo)
	{
		if (bAttackSoundContinious)
			PlaySound(AttackSound, CHAN_WEAPON);
		mo.Tracer = Target;
		mo.Special2 = 16;
	}
	Special1--;
}

//==========================================================================
//
//  A_RedBishopPainBlur
//
//==========================================================================

final void A_RedBishopPainBlur()
{
	Actor blur;

	bInvisible = false;

	if (P_Random() < 64)
	{
		SetState(FindState('Blur'));
		return;
	}
	blur = Spawn(BishopPainBlurType,
		Origin + vector((Random() - Random()) * 16.0,
		(Random() - Random()) * 16.0, (Random() - Random()) * 8.0));
	if (blur)
	{
		blur.Angles = Angles;
	}
}

//==========================================================================
//
//  A_RedBishopCheckDeath
//
//==========================================================================

final void A_RedBishopCheckDeath()
{
	bShootable = true;
	bInvisible = false;

	if (P_Random() < (256 / ++NumDeaths))
	{
		SetState(FindState('Ressurect'));
	}
	else
	{
		A_QueueCorpse();
	}
}

//==========================================================================
//
//  A_RedBishopResurrect
//
//==========================================================================

final void A_RedBishopResurrect()
{
	::A_AIResurrect();

	Health = default.Health / NumDeaths;
}

//==========================================================================
//
//	A_BishopPuff
//
//==========================================================================

final void A_BishopPuff()
{
	Actor puff;

	bInvisible = false;

	puff = Spawn(BishopPuff, Origin + vector(0.0, 0.0, 40.0));
	if (puff)
	{
		puff.Velocity.z = 0.5 * 35.0;
	}
}

states
{
Spawn:
	BISR A 10 A_LookAI
	Loop
See:
	BISR A 0 A_SetShootable
	BISR A 0 A_UnHideThing
	BISR A 2 A_ChaseAI
	BISR A 2 A_BishopChase
	BISR A 2
	BISR B 2 A_BishopChase
	BISR B 2 A_ChaseAI
	BISR B 2 A_BishopChase
	BISR A 1 A_BishopDecide
	Loop
Blur:
Evade:
	BISR A 2 A_RedBishopDoBlur
	BISR A 4 A_RedBishopSpawnBlur
	Wait
Missile:
	BISR A 3 A_FaceTarget
	BISR DE 3 Bright A_FaceTarget
	BISR F 3 Bright A_BishopAttack
	BISR F 5 Bright A_RedBishopAttack2
	Wait
Pain:
	BISR C 6 A_Pain
	BISR CCC 6 A_RedBishopPainBlur
	BISR C 0
	Goto See
Death:
	BISR G 6
	BISR H 6 Bright A_Scream
	BISR I 5 Bright A_NoBlocking
	BISR J 5 Bright A_Explode
	BISR K 5 Bright
	BISR LM 4 Bright
	BISR N 4 A_BishopPuff
	BISR O 4 A_RedBishopCheckDeath
	BISR P -1
	Stop
Ressurect:
	BISR P 140	// 4 seconds
	BISR O 4
	BISR N 4
	BISR LM 4 Bright
	BISR K 5 Bright
	BISR J 5 Bright
	BISR I 5 Bright A_RedBishopResurrect
	BISR H 6 Bright
	BISR G 6
	Goto Blur
Ice:
	BISH X 5 A_FreezeDeath
	BISH X 1 A_FreezeDeathChunks
	Wait
}

defaultproperties
{
	bSolid = true;
	bShootable = true;
	bCountKill = true;
	bMonster = true;
	bActivatePushWall = true;
	bActivateMCross = true;
	bPassMobj = true;
	bCanUseWalls = true;

	bTelestomp = true;

	Health = 130;
	Radius = 22.0;
	Height = 65.0;
	Mass = 100.0;
	Speed = 20.0 * 35.0;
	PainChance = 0.4296875;
	bNoGravity = true;
	bFloat = true;
	bNoBlood = true;
	bActivateMCross = false;
	bNoTargetSwitch = true;
	bDontOverlap = true;
	SightSound = 'BishopSight';
	ActiveSound = 'BishopActiveSounds';
	AttackSound = 'BishopAttack';
	PainSound = 'BishopPain';
	DeathSound = 'BishopDeath';
	Obituary = "$ob_bishop";

	bEvadeMelee = true;

	bAttackSoundContinious = true;
	AttackSound = 'CardinalAttack';

	BishopFXType = BishopFXRed;
	BishopBlurType = BishopBlurRed;
	BishopPainBlurType = BishopPainBlurRed;
}
