//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ## ###  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**				   ######  #####   ######
//**	               ##   ## ##  ## ##    ##
//**	     		   ##   ## ##  ## ##   
//**	               #####   #####  ##  ####
//**	     		   ## ###  ##     ###   ##
//**	     		   ##  ### ##      ######
//**
//**    $Id: BlackBishop.vc 1963 2009-03-06 23:26:20Z crimsonwizard $
//**
//**    Copyright (C) 2004-2008 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class BlackBishop : RedBishop
	__mobjinfo__(16009);

/*
	ABILITIES:
		- Teleports instead of common blur;
		- Shoot blistering monochrome & golden projectiles
		- Ressurects after first death with full health after some time;
		  decreasing chance to ressurect after each following death with lower health
		- Summons Dark Bishops and Cardinals
		- Casts Shield on himself (reflects missiles)
		- Casts Mirror Image to spawn up to 3 illusionary clones of himself (of reduced power)
		- Casts Golden Thunder spell that summons continuos rain of golden projeciles
*/

float flicker;
float ambience;

const int MAXCLONES = 3;
const int MAXSIBLINGS = 7;
const int MAXRAINS = 3;

// [CW] Clones can't be cast until all previous ones died
BlackBishop Clones[MAXCLONES];
// [CW] Siblings and rain spells can't be conjured unless there's a free slot
Actor Siblings[MAXSIBLINGS];
SpellGoldenStorm Rains[MAXRAINS];

//==========================================================================
//
//	GetExplodeParms
//
//==========================================================================

void GetExplodeParms(out int damage, out float distance, out byte damageSelf)
{
	// Bishop radius death
	damage = 70 + (P_Random() & 35);
}

//==========================================================================
//
//	Tick
//
//==========================================================================

void Tick(float deltaTime)
{
	::Tick(deltaTime);
	if (Health > 0 && !bInvisible)
	{
		if (bReflectMissileDamage)
		{
			flicker -= deltaTime;
			if (flicker <= 0.0)
			{
				SpawnSphericalEffect(DarkAdvisorFlicker, GetCentre(), (P_Random() & 7) + 1, vector(128.0,128.0,64.0));
				flicker = 0.35;
			}
		}

		if (Target)
		{
			ambience -= deltaTime;
			if (ambience < 0.0)
			{
				ambience = Random() * 27.0 + 3.0;
				PlaySound('AdvisorActiveSounds', CHAN_BODY, 1.0, ATTN_NONE);
			}
		}
	}
}

//==========================================================================
//
//  A_BlackBishopDecide
//
//==========================================================================

final void A_BlackBishopDecide()
{
	if (P_Random() < 220)
	{
		if (P_Random() < 220)
		{
		}
		else if (!bMirrorImage)
			// [CW] Dark Advisor is too powerful already to cast fully-functional mirror images
		{
			SetState((FindState('Conjure')));
		}
	}
	else
	{
		SetState(FindState('Blur'));
	}
}

//==========================================================================
//
//	A_BlackBishopSelectAttack
//
//==========================================================================

final void A_BlackBishopSelectAttack()
{
	// Clones do second attack rarely
	if (Target && (!bMirrorImage && DistTo(Target) < 512.0 && P_Random() < 220 || P_Random() < 64))
	{
		Special1 << 1;
		SetState(FindState('Missile2'));
	}
}

//==========================================================================
//
//  A_BlackBishopAttack3
//
//  Spawns an arc of golden projectiles.
//
//==========================================================================

final void A_BlackBishopAttack3()
{
	int ang, total;
	TVec dir;
	TAVec angles;
	EntityEx mo;

	if (!Target || Health > 0 && (/* !CanSee(Target) || */ !Special1))
	{
		Special1 = 0;
		SetState(SeeState);
		return;
	}

	if (Health <= 0)
		Special1 = (P_Random() & 3) + 5;

	ang = -15 * Special1 + P_Random() % 15;
	total = 15 * (Special1 + 1);
	dir = Target.GetCentre() - GetCentre();
	VectorAngles(&dir, &angles);
	for (; ang < total; ang += 15)
	{
		angles.yaw = AngleMod360(Angles.yaw + itof(ang));
		angles.pitch + (Random() - 0.5) * 5.0;
		mo = SpawnMissileAngles(BishopFXGold, angles.yaw, angles.pitch);
		if (mo)
		{
			mo.Tracer = Target;
		}
	}
	PlaySound('AdvisorAttack2', CHAN_WEAPON);
	Special1--;
}

//==========================================================================
//
//  A_BlackBishopConjure
//
//  Spawn some glittering effects
//
//==========================================================================

final void A_BlackBishopConjure()
{
	SpawnSphericalEffect(DarkAdvisorFlicker, GetCentre(), 16, vector(128.0,128.0,64.0),,
							vector(0.0,0.0,128.0));
	PlaySound('AdvisorConjure', CHAN_VOICE, 1.0, ATTN_NONE);
}

//==========================================================================
//
//  A_BlackBishopCastSpell
//
//  Casts one of the greater spells
//
//==========================================================================

final void A_BlackBishopCastSpell()
{
	int i,j;
	BlackBishop bishop;
	Actor bishop2;
	TVec v;
	int count;
	int sibling_slots, rain_slots;

	bool bCanCastClones = true;
	for (i = 0; i < MAXCLONES; i++)
	{
		if (Clones[i])
		{
			bCanCastClones = false;
			break;
		}
	}

	sibling_slots = 0;
	for (i = 0; i < MAXSIBLINGS; i++)
	{
		if (!Siblings[i])
			sibling_slots++;
	}

	rain_slots = 0;
	for (i = 0; i < MAXRAINS; i++)
	{
		if (!Rains[i])
			rain_slots++;
	}

	//
	// Kinetic Shield
	//
	if (!GetCondition(ACSpellShield, self, 1) && (Health < (default.Health >> 1) || P_Random() < 220)
			|| P_Random() < 33)
	{
		CastCondition(ACSpellShield, true, self, 1, 24.0);
	}
	//
	// Mirror Image
	//
	else if (bCanCastClones && P_Random() < 64)
	{
		count = P_Random() % MAXCLONES + 1;

		for (i = 0; i < count; i++)
		{
			v = Origin + vector((Random() - 0.5) * 1024.0,
											(Random() - 0.5) * 1024.0,
											(Random()) * 128.0);
			bishop = Spawn(BlackBishop, v,,,false);
			if (bishop)
			{
				if (bishop.TestLocation())
				{
					Clones[i] = bishop;
					bishop.bMirrorImage = true;
					bishop.MirrorMaster = self;
					bishop.SetState(FindState('Blur'));
					SpawnSphericalEffect(DarkAdvisorFlicker, bishop.GetCentre(), 36, vector(128.0,128.0,64.0));
				}
				else
				{
					bishop.Destroy();
				}
			}
		}
		SetState(FindState('Blur'));
	}
	//
	// Summoning
	//
	else if (sibling_slots && P_Random() < 64)
	{
		count = P_Random() % 3 + 1;
		if (count > sibling_slots)
			count = sibling_slots;

		for (i = 0; i < count; i++)
		{
			v = Origin + vector((Random() - 0.5) * 1024.0,
											(Random() - 0.5) * 1024.0,
											(Random()) * 128.0);
			if (P_Random() < 220)
				bishop2 = Spawn(Bishop, v,,,false);
			else
				bishop2 = Spawn(RedBishop, v,,,false);
			if (bishop2)
			{
				if (bishop2.TestLocation())
				{
					for (j = 0; j < MAXSIBLINGS; j++)
						if (!Siblings[j]) Siblings[j] = bishop2;
					bishop2.SetState(FindState('Blur'));
					SpawnSphericalEffect(DarkAdvisorFlicker, bishop2.GetCentre(),
														36, vector(128.0,128.0,64.0));
				}
				else
				{
					bishop2.Destroy();
				}
			}
		}
	}
	//
	// Super attack
	//
	else if (Target && CanSense(Target) && rain_slots)
	{
		SpellGoldenStorm SGS = SpellGoldenStorm(Level.Spawn(SpellGoldenStorm));
		if (SGS)
		{
			for (j = 0; j < MAXRAINS; j++)
				if (!Rains[j]) Rains[j] = SGS;
			SGS.AInstigator = self;
			SGS.Level = 7;
			SGS.LifeDuration = 24.0;
			SGS.Origin = Target.Origin;
			SGS.Target = Target;
			SGS.Activate();
			PlaySound('ThunderCrash', CHAN_BODY, 1.0, ATTN_NONE);
		}
	}

	PlaySound('SorcererSpellCast', CHAN_VOICE, 1.0, ATTN_NONE);
}


states
{
Spawn:
	BISB A 10 A_LookAI
	Loop
See:
	BISB A 0 A_SetShootable
	BISB A 0 A_UnHideThing
	BISB A 1 A_ChaseAI
	BISB A 1 A_BishopChase
	BISB A 1
	BISB B 1 A_BishopChase
	BISB B 1 A_ChaseAI
	BISB B 1 A_BishopChase
	BISB A 1 A_BlackBishopDecide
	Loop
Blur:
Evade:
	BISB A 2 A_RedBishopDoBlur
	BISB A 4 A_RedBishopSpawnBlur
	Wait
Missile:
	BISB A 3 A_FaceTarget
	BISB DE 3 Bright A_FaceTarget
	BISB F 3 Bright A_BishopAttack
	BISB F 1 Bright A_BlackBishopSelectAttack
	BISB F 5 Bright A_RedBishopAttack2
	Wait
Missile2:
	BISB F 1 A_FaceTarget
	BISB F 4 Bright A_BlackBishopAttack3
	Wait
Conjure:
	BISB A 3 A_FaceTarget
	BISB DE 3 Bright A_FaceTarget
	BISB E 3 Bright { PainChance = 0.0; }
	BISB FFFF 16 Bright A_BlackBishopConjure
	BISB E 3 { PainChance = default.PainChance; }
	BISB E 3 Bright A_BlackBishopCastSpell
	Goto See
Pain:
	BISB C 6 A_Pain
	BISB C 6 A_RedBishopPainBlur
	Goto Blur
Death:
Ice:
	BISB G 6
	BISB H 6 Bright A_Scream
	BISB I 5 Bright A_NoBlocking
	BISB J 5 Bright A_Explode
	BISB K 5 Bright
	BISB LM 4 Bright
	BISB N 4 A_BishopPuff
	BISB O 4 A_RedBishopCheckDeath
	BISB P 1 { KRPGLevelInfo(Level).A_LocalQuakeFree(2, 100, 4, 16, Origin); }
	BISB P -1
	Stop
MirrorDeath:
	BISB G 6 { RenderStyle = STYLE_Translucent; Alpha = 0.900; }
	BISB H 6 Bright { A_Scream(); Alpha = 0.666; }
	BISB I 5 Bright { A_NoBlocking(); Alpha = 0.333; }
	BISB J 5 Bright A_Explode
	BISB K 5 Bright {RenderStyle = STYLE_None; }
	Stop
Ressurect:
	BISB P 2 A_FaceTarget
	BISB PP 4 A_BlackBishopAttack3
	BISB P 2 A_FaceTarget
	BISB PP 4 A_BlackBishopAttack3
	BISB P 2 A_FaceTarget
	BISB PP 4 A_BlackBishopAttack3
	BISB P 2 A_FaceTarget
	BISB PP 4 A_BlackBishopAttack3
	BISB P 100
	BISB O 4
	BISB N 4
	BISB LM 4 Bright
	BISB K 5 Bright
	BISB J 5 Bright
	BISB I 5 Bright A_RedBishopResurrect
	BISB H 6 Bright
	BISB G 6
	Goto Blur
}

defaultproperties
{
	bBoss = true;
	bNoMorph = true;
	bFullVolActive = true;
	Health = 2500;
	PainChance = 0.5;
	experience = 400;
	AttackSound = 'AdvisorAttack';

	BishopFXType = BishopFXBlack;
	BishopBlurType = BishopBlurBlack;
	BishopPainBlurType = BishopPainBlurBlack;
}
