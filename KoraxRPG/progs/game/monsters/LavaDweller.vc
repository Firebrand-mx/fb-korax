//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ## ###  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**				   ######  #####   ######
//**	               ##   ## ##  ## ##    ##
//**	     		   ##   ## ##  ## ##   
//**	               #####   #####  ##  ####
//**	     		   ## ###  ##     ###   ##
//**	     		   ##  ### ##      ######
//**
//**    $Id: LavaDweller.vc 1638 2008-08-28 19:10:17Z firebrand_kh $
//**
//**    Copyright (C) 2004-2008 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class LavaDweller : IntelligentActor
	__mobjinfo__(16004);

int regen_count;

//==========================================================================
//
//	A_LavaDwellerDecide
//
//==========================================================================

final void A_LavaDwellerDecide()
{
	bool idle = !Target;

	if (!idle)
	{
		if (!Target || Target.Health <= 0 || !CanSee(Target))
		{
			SetState(IdleState);
			return;
		}
	}

	if (bInvisible)
	{
		if (Health < default.Health)
		{
			Health += 50;
			if (Health > default.Health)
				Health = default.Health;
		}

		regen_count--;

		if (!idle && regen_count <= 0 && ((Health > (default.Health >> 1)) || P_Random() > 150))
		{
			SetState(FindState('Raise'));
			return;
		}
	}
	else
	{
		if (idle || Health < (default.Health >> 1))
		{
			if (P_Random() < 50)
			{
				SetState(FindState('Lower'));
				return;
			}
		}
		
		if (!idle && P_Random() < 200)
		{
			SetState(MissileState);
		}
	}
}

//==========================================================================
//
//	A_LavaDwellerHide
//
//==========================================================================

final void A_LavaDwellerHide()
{
	regen_count = Target ? 2 + (P_Random() % 11) : 4;
	bInvisible = true;
}

//==========================================================================
//
//	A_LavaDwellerUnHide
//
//==========================================================================

final void A_LavaDwellerUnHide()
{
	bInvisible = false;
}

//==========================================================================
//
//	A_LavaDwellerRaise
//
//==========================================================================

final void A_LavaDwellerRaise()
{
	FloorClip -= 4.0;
}

//==========================================================================
//
//	A_LavaDwellerLower
// 
//==========================================================================

final void A_LavaDwellerLower()
{
	FloorClip += 4.0;
}

//==========================================================================
//
//	A_LavaDwellerAfterMovement
//
//==========================================================================

final void A_LavaDwellerAfterMovement()
{
	if (Target)
		SetState(SeeState);
	else
		SetState(IdleState);
}

//==========================================================================
//
//	A_LavaDwellerMissileAttack
//
//==========================================================================

final void A_LavaDwellerMissileAttack()
{
	if (!Target)
	{
		return;
	}
	SpawnMissile(Target, LavaBall);
	PlaySound('Fireball', CHAN_WEAPON);
}

states
{
Spawn:
	MSDV J 10 A_LookAI
	MSDV J 10 A_LavaDwellerDecide
	Loop
See:
	See:
	LADW A 6 A_FaceTarget
	LADW A 8 A_LavaDwellerDecide
	Loop
Raise:
	LADW A 5 A_LavaDwellerUnHide
	LADW AAAAAAAAAAAA 2 A_LavaDwellerRaise
	LADW A 2 A_SetShootable
	LADW AAAA 2 A_LavaDwellerRaise
	LADW A 25
	LADW A -1 A_LavaDwellerAfterMovement
	Stop
Lower:
	LADW A 25
	LADW AAAA 2 A_LavaDwellerLower
	LADW A 2 A_UnSetShootable
	LADW AAAAAAAAAAAA 2 A_LavaDwellerLower
	LADW A 5 A_LavaDwellerHide
	LADW A -1 A_LavaDwellerAfterMovement
	Stop
Missile:
	LADW A 6 A_FaceTarget
	LADW A 5 Bright
	LADW A 5 Bright A_LavaDwellerMissileAttack
	LADW A 5 Bright
	LADW A 6 A_FaceTarget
	LADW A 5 Bright
	LADW A 5 Bright A_LavaDwellerMissileAttack
	LADW A 5 Bright
	LADW A 6 A_FaceTarget
	LADW A 5 Bright
	LADW A 5 Bright A_LavaDwellerMissileAttack
	LADW A 5 Bright
	LADW A 27
	Goto See
Pain:
	LADW A 6
	LADW A 5 Bright
	LADW A 5 Bright
	Goto Missile
Death:
	BISF D 4
	BISF E 4 A_Scream
	BISF F 4 A_NoBlocking
	BISF G 4 A_QueueCorpse
	BISF HIJKLMNOPQ 4
	BISF R -1
	Stop
XDeath:
	BISF E 4
	BISF E 4 A_NoBlocking
	BISF F 4 
	BISF G 4 A_Scream
	BISF H 4 A_QueueCorpse
	BISF IJKLMNOPQ 4
	BISF R -1
	Stop
}

defaultproperties
{
	bSolid = true;
	bShootable = true;
	bCountKill = true;
	bMonster = true;
	bActivatePushWall = true;
	bActivateMCross = true;
	bPassMobj = true;
	bCanUseWalls = true;
	
	bFloorClip = true;
	bTelestomp = true;

	bNoTeleport = true;
	bStanding = true;
	bPushable = false;
	bNoMorph = true;
	//bNoPassMobj = true;
	bLookAllAround = true;
	PainSound = 'SorcererPain';
	DeathSound = 'SorcererPain';

	Radius = 65.0;
	Height = 115.0;
	Mass = 99999.0;
	Speed = 0.0;

	PainChance = 0.0;

	Health = 3000;
	GibsHealth = -250;

	bXYAnchored = true;
	bZAnchored = true;

	bNoWanderDuringAttack = true;
	bCanJoinTaskGroup = false;
	bCanBeTaskLeader = false;
	bNeverUseRoutes = true;
}
