//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ## ###  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**				   ######  #####   ######
//**	               ##   ## ##  ## ##    ##
//**	     		   ##   ## ##  ## ##   
//**	               #####   #####  ##  ####
//**	     		   ## ###  ##     ###   ##
//**	     		   ##  ### ##      ######
//**
//**    $Id: template.vc 1638 2008-08-28 19:10:17Z firebrand_kh $
//**
//**    Copyright (C) 2004-2008 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class SpellItemBerserk : SpellItem;

// [FB] Not actually a spell... but what the hell!! >:P

//==========================================================================
//
//	ActivateSpell
//
//==========================================================================

bool ActivateSpell(bool Pickup, int level)
{
	Actor mo;
	float dist;
	bool berserk_already = Actor(Owner.Player.MO).GetCondition(ACSpellBerserk) != none;

	if (/* !Actor(Player(Owner.Player).MO).bBerserk */
		!berserk_already &&
		Player(Owner.Player).sp_power >= 6)
	{
		Owner.PlaySound('UseArtifact', CHAN_ITEM);

		// Player(Owner.Player).SetBerserk();
		Actor(Owner.Player.MO).CastCondition(
			ACSpellBerserk,				// condition class
			false,						// not accumulative
			Actor(Owner.Player.MO),		// instigator (caster)
			1,							// spell level (should be calculated somehow?)
										// duration
			(1.0 + itof(Player(Owner.Player).sp_power) * 80.0) / 35.0
			);

		Player(Owner.Player).sp_power -= 5;
		Player(Owner.Player).centreprint("BERSERKER ACTIVATED");
	}
	else if (berserk_already /* Actor(Owner.Player.MO).bBerserk */)
	{
		Player(Owner.Player).centreprint("YOU'RE ALREADY BERSERKING");
	}
	else if (Player(Owner.Player).sp_power < 6)
	{
		Player(Owner.Player).centreprint("NOT ENOUGH BATTLE RAGE");
	}
	
	return true;
}

states
{
Spawn:
	TNT1 A 1
	Loop
}

defaultproperties
{
	MaxAmount = DefMaxAmount;
	PickupSound = 'PickupArtifact';
	PickupMessage = "$txt_berserk";
	IconName = 'splf1';
	bFloatBob = true;
	PickupFlashType = PickupFlash;
	bSpellBar = true;
	Level = 1;
}
