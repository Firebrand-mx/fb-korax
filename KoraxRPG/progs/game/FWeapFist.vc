//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class FWeapFist : FighterWeapon;

int PunchCount;

//==========================================================================
//
//  A_FPunchAttack
//
//==========================================================================

final void A_FPunchAttack()
{
	int				damage;
	float			power;
	TVec			vforward;
	class<Actor>	PuffType;
	EntityEx		AimTarget;
	TAVec			angles;

	if (!bIsPlayer)
	{
		return;
	}
	Weapon Wpn = PlayerEx(Player).ReadyWeapon;

	damage = 40 + (P_Random() & 15);
	power = 2.0;
	PuffType = PunchPuff;
	AimTarget = AimEx(vforward, 2.0 * MELEERANGE, 45.0 / 16.0,
		16, MELEERANGE);
	if (AimTarget)
	{
		VectorAngles(&vforward, &angles);
		FWeapFist(Wpn).PunchCount++;
		if (FWeapFist(Wpn).PunchCount == 3)
		{
			damage <<= 1;
			power = 6.0;
			PuffType = HammerPuff;
		}
		if (LineAttack(vforward, 2.0 * MELEERANGE, damage, PuffType))
		{
			if (PuffType == HammerPuff)
			{
				PlaySound('FighterHammerMiss', CHAN_WEAPON);
			}
			else
			{
				PlaySound('FighterPunchMiss', CHAN_WEAPON);
			}
		}
		if (AimTarget.bMonster || AimTarget.bIsPlayer)
		{
			AimTarget.Thrust(angles.yaw, power);
		}
		Player(Player).AdjustPlayerAngle(AimTarget);
	}
	else
	{
		// didn't find any creatures, so try to strike any walls
		FWeapFist(Wpn).PunchCount = 0;

		if (LineAttack(vforward, Actor::MELEERANGE, damage, PuffType))
		{
			PlaySound('FighterPunchMiss', CHAN_WEAPON);
		}
	}

	if (FWeapFist(Wpn).PunchCount == 3)
	{
		FWeapFist(Wpn).PunchCount = 0;
		Player.SetViewState(ps_weapon, Wpn.FindState('Fire2'));
		PlaySound('*fistgrunt', CHAN_VOICE);
	}
}

states
{
Ready:
	FPCH A 1 A_WeaponReady
	Loop
Deselect:
	FPCH A 1 A_Lower
	Loop
Select:
	FPCH A 1 A_Raise
	Loop
Fire:
	FPCH B 5 Offset(5, 40)
	FPCH C 4 Offset(5, 40)
	FPCH D 4 Offset(5, 40) A_FPunchAttack
	FPCH C 4 Offset(5, 40)
	FPCH B 5 Offset(5, 40) A_ReFire
	Goto Ready
Fire2:
	FPCH D 4 Offset(5, 40)
	FPCH E 4 Offset(5, 40)
	FPCH E 1 Offset(15, 50)
	FPCH E 1 Offset(25, 60)
	FPCH E 1 Offset(35, 70)
	FPCH E 1 Offset(45, 80)
	FPCH E 1 Offset(55, 90)
	FPCH E 1 Offset(65, 100)
	FPCH E 10 Offset(0, 150)
	Goto Ready
}

defaultproperties
{
	Slot = 1;
	SelectionOrder = 3400;
	PSpriteSY = 0.0;
	BotCombatDist = 48.0;
	bBotMelee = true;
}
