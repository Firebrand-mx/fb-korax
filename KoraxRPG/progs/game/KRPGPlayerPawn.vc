//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ## ###  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**				   ######  #####   ######
//**	               ##   ## ##  ## ##    ##
//**	     		   ##   ## ##  ## ##   
//**	               #####   #####  ##  ####
//**	     		   ## ###  ##     ###   ##
//**	     		   ##  ### ##      ######
//**
//**    $Id$
//**
//**    Copyright (C) 2007-2008 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class KRPGPlayerPawn : PlayerPawn
	abstract;

int InitialHealth;
int InitialSpiritPower;
int InitialStrength;
int InitialConstitution;
int InitialIntelligence;
int InitialWisdom;
int InitialDexterity;
int InitialCharisma;

int MaxStrength;
int MaxConstitution;
int MaxIntelligence;
int MaxWisdom;
int MaxDexterity;
int MaxCharisma;

//int experience;	// [CW] not needed, we already have 'experience' property
					// declared for Actor in Actor.KRPG;
					// inheritance: Actor->PlayerPawn->KRPGPlayerPawn

// [CW] Just a thought -- should monsters have these?
float			StandHeight;
float			DuckHeight;

// class<KRPGWeapon>			WeaponClasses[KRPGDefs::NUMWEAPONSLOTS];


//==========================================================================
//
//	AddInventory
//
//==========================================================================

void AddInventory(Inventory Item)
{
	if (HexenWeapon(Item) && HexenWeapon(Item).FindState('Ready'))
	{
		KRPGPlayerBase(Player).AddWeapon(HexenWeapon(Item));
	}
	if (Item.bSpellBar)
	{
		KRPGPlayerBase(Player).AddSpellItem(Item);
	}
	
	::AddInventory(Item);
}

//===========================================================================
//
//  StandUp
//
//===========================================================================

void StandUp(float deltaTime)
{
	if (Height < StandHeight)
	{
		Height += 128.0 * deltaTime;
		if (Height > StandHeight)
			Height = StandHeight;
	}
}

//===========================================================================
//
//  BendDown
//
//===========================================================================

void BendDown(float deltaTime)
{
	if (Height > DuckHeight)
	{
		Height -= 128.0 * deltaTime;
		if (Height < DuckHeight)
			Height = DuckHeight;
	}
}

//==========================================================================
//
//  A_PlayPain
//
// [FB] Final method used to avoid errors when declaring players,
//	    it's like callingthe A_KRPGPain method
//
//==========================================================================

final void A_PlayPain()
{
	A_KRPGPain();
}

defaultproperties
{
	bNeverTarget = false;

	bNonScalable = true;
	bCombatant = true;
	bLiving = true;
	bCanRide = true;

	Team = KRPGDefs::TEAM_PLAYER;
}
