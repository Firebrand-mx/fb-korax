//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ## ###  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**				   ######  #####   ######
//**	               ##   ## ##  ## ##    ##
//**	     		   ##   ## ##  ## ##   
//**	               #####   #####  ##  ####
//**	     		   ## ###  ##     ###   ##
//**	     		   ##  ### ##      ######
//**
//**    $Id$
//**
//**    Copyright (C) 2004-2008 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Player : KRPGPlayerBase;

enum
{
	BT_DUCK	= 0x10
};

const int MAXMORPHHEALTH	= 30;

BotPlayer Bot;

// [FB] Player atributes for leveling system
int experience;
int exp_level;
int next_level;
int prev_level;
int possTics;               // FOV effect for possession
int money;
int hunger;					// [FB] This one was declared in KMod 3 source code, but it's really going to used??
int stamina;
//int strength;
int vitality;
//int intelligence;
//int wisdom;
int speed;

bool inited;

//
//  Other stats (for status bar)
//
int max_health;
int maxhealth_old;
int av_points;
int maxsp_power;
int sp_power;
int sp_power_old;

int sp_recharge_tics; // [FB] Determine when to charge SP

replication
{
	reliable if (!bIsClient)
		experience, exp_level, next_level, prev_level, money,
		hunger, stamina, /* strength, */vitality, /* intelligence, wisdom,*/
		speed, max_health, maxhealth_old, sp_power, maxsp_power,
		SetFOV;

	unreliable if (!bIsClient)
		ParticleEffectEx;

	reliable if (!bIsClient)
		ClientUpgradeScreen, ClientArsenalScreen, ClientConversation,
		ConCleanScene, ConSetPersonInfo, ConPlayCue, ConCleanChoices,
		ConAddChoice, ConSuspend, ConWait, ConCloseScene;

	reliable if (bIsClient)
		ConChoice, ConContinue;
}

//==========================================================================
//
//  CreateBot
//
//==========================================================================

void CreateBot()
{
	Bot = BotPlayer(SpawnObject(BotPlayer));
	Bot.player = self;
	Bot.OnBeginPlay();
}

//==========================================================================
//
//  ResetPlayerOnSpawn
//
//==========================================================================

void ResetPlayerOnSpawn()
{
	::ResetPlayerOnSpawn();

//[Korax]
	if (!inited)
	{
		InitiateLevel();
		inited = true;
	}
}

//==========================================================================
//
//  GiveExperience
//
//==========================================================================

void GiveExperience(int exp)
{
	// TODO: Multiply exp by gameexp modifier!!
	experience += exp;
	if(experience > 2100000666)
	{
		experience = 2100000666;
		next_level = 2100000999;
	}
	KRPGPlayerPawn(MO).experience = experience;
	while (experience >= next_level && PClass != HexenDefs::PCLASS_PIG)
	{
		ActivateLevel(exp_level + 1);
	}
}

//============================================================================
//
//  ActivateLevel
//
//============================================================================

void ActivateLevel(int to_lvl)
{
	int addhealth;
	int i;
	int skillp_table[5];

	for(i = 0; i < 6; i++)
	{
		if (i == 0)
			skillp_table[i] = 6;
		else if (i == 1)
			skillp_table[i] = 6;
		else if (i == 2)
			skillp_table[i] = 5;
		else if (i == 3)
			skillp_table[i] = 4;
		else if (i == 4)
			skillp_table[i] = 4;
	}

	exp_level++;
	experience -= next_level;
	next_level = next_level * 2;
//	prev_level = 1000 * exp_level;
	addhealth = Health  / max_health;
	maxhealth_old = (maxhealth_old != max_health ? maxhealth_old : max_health);
	max_health += vitality;
	sp_power_old = (sp_power_old != sp_power ? sp_power_old : sp_power);
	if (PClass != HexenDefs::PCLASS_FIGHTER)
	{
		maxsp_power += intelligence;
	}
	else
	{
		maxsp_power += strength;
	}
	sp_power = maxsp_power;
	Health = max_health + addhealth;
	MO.Health = Health;

/*	if (PClass == PCLASS_MAGE)
	{
		if (exp_level == 8)
			player->weaponowned[P_GetWeaponNum(player,WP_MAGE_BWAND)] = true;
		if (exp_level == 6)
			player->weaponowned[P_GetWeaponNum(player,WP_MAGE_WAND3)] = true;
		if (exp_level == 4)
			player->weaponowned[P_GetWeaponNum(player,WP_MAGE_WAND2)] = true;
		if (exp_level == 2)
			player->weaponowned[P_GetWeaponNum(player,WP_MAGE_WAND)] = true;	
	}*/

	switch (PClass) //Messages about new stuff
	{
	case HexenDefs::PCLASS_FIGHTER:
		switch (exp_level)
		{
		case 5:
			centreprint("YOU CAN NOW USE MANA!");
			break;
		}
		break;
	case HexenDefs::PCLASS_CLERIC:
		switch (exp_level)
		{
		case 3:
			centreprint("YOU CAN NOW USE MANA!");
			break;
		case 5:
			centreprint("YOU CAN NOW CAST SPIRITS WITHIN!");
			EntityEx(MO).GiveInventoryType(SpellItemSpirits);
			break;
		case 7:
			centreprint("YOU CAN NOW CAST BANISHMENT!");
			EntityEx(MO).GiveInventoryType(SpellItemBanishment);
			break;
		case 8:
			centreprint("YOU NOW HAVE THE ICE WAND!");
			break;
		case 9:
			centreprint("YOU CAN NOW CAST WRATH OF THE GODS");
			break;
		}
		break;
	case HexenDefs::PCLASS_MAGE:
		switch (exp_level)
		{
		case 2:
			centreprint("YOU NOW HAVE THE BLUE WAND!");
			break;
		case 3:
			centreprint("YOU CAN NOW CAST MANA CREATION!");
			break;
		case 4:
			centreprint("YOU CAN HAVE THE GREY WAND!");
			break;
		case 5:
			centreprint("YOU CAN NOW CAST A DEFENSIVE SPELL!");
			EntityEx(MO).GiveInventoryType(SpellItemDefensive);
			break;
		case 6:
			centreprint("YOU NOW HAVE THE RED WAND!");
			break;
		case 7:
			centreprint("YOU CAN NOW CAST SPEED!");
			break;
		case 8:
			centreprint("YOU CAN NOW SUMMON MONSTERS!");
			break;
		case 9:
			centreprint("YOU CAN NOW CAST POSSESSION!");
			break;
		case 10:
			centreprint("YOU CAN NOW CAST HORRIBLE PAIN!");
			break;
		}
		break;
	}

	av_points += skillp_table[Level.World.GameSkill];

	// [FB] For multiplayer??
/*	switch (PClass)
	{
		case HexenDefs::PCLASS_FIGHTER:
			strength += skillp_table[Level.World.GameSkill];
			break;
		case HexenDefs::PCLASS_CLERIC:
			strength += skillp_table[Level.World.GameSkill] / 2;
			wisdom += skillp_table[Level.World.GameSkill] -
					  (skillp_table[Level.World.GameSkill] / 2);
			break;
		case HexenDefs::PCLASS_MAGE:
			wisdom += skillp_table[Level.World.GameSkill];
			break;
		}
	}*/

	cprint("YOU REACHED LEVEL %d", exp_level);
	MO.PlaySound('misc/chat', CHAN_AUTO);
}

//============================================================================
//
//  InitiateLevel
//
//============================================================================

void InitiateLevel()
{
	// [FB]  First, we need to get the stats we choose at the character build screen
	MainGameInfo(Level.Game).PassInitialStats(MO);
	
	max_health = KRPGPlayerPawn(MO).InitialHealth;
	sp_power = KRPGPlayerPawn(MO).InitialSpiritPower;
	maxsp_power = KRPGPlayerPawn(MO).InitialSpiritPower;

	exp_level = 1;
	next_level =  1000 * exp_level;
	prev_level = 1000 * (exp_level - 1);
	Health = max_health;
	MO.Health = Health;
	money = 0;
//	hunger = KRPGPlayerPawn(MO).InitialHunger;
//	stamina = KRPGPlayerPawn(MO).InitialStamina;
	UpdateStats(KRPGPlayerPawn(MO).InitialStrength, KRPGPlayerPawn(MO).InitialVitality,
			KRPGPlayerPawn(MO).InitialSpeed, KRPGPlayerPawn(MO).InitialIntelligence,
			KRPGPlayerPawn(MO).InitialWisdom);
}

//==========================================================================
//
//  UpgradeScreen
//
//==========================================================================

void UpgradeScreen()
{
	// [FB] Only if we are not berserk
	//if (!Actor(MO).berserkTics)
	if (!Actor(MO).GetCondition(ACSpellBerserk))
	{
		ClientUpgradeScreen();
	}
}

//==========================================================================
//
//  ClientUpgradeScreen
//
//==========================================================================

void ClientUpgradeScreen()
{
	KRPGClientGameBase(ClGame).ShowUpgradeScreen();
}

//==========================================================================
//
//  UpdateStats
//
//==========================================================================

void UpdateStats(int n_strength, int n_vitality, int n_speed, int n_intelligence,
		int n_wisdom)
{
	strength += n_strength;
	vitality += n_vitality;
	speed += n_speed;
	intelligence += n_intelligence;
	wisdom += n_wisdom;
	
	//	Update armor save percentages.
	BasicArmor Armor = BasicArmor(EntityEx(MO).FindInventory(BasicArmor));
	if (Armor && Armor.Amount)
	{
		Armor.SavePercent = 0.333 + itof(vitality) * 0.4;
		if (Armor.SavePercent > 0.75)
		{
			Armor.SavePercent = 0.75;
		}
	}

	//	Update player speed.
	float Value;
	if (MorphTime)
	{
		Value = (itof(speed) * 0.25) / 100.0;
	}
	else
	{
		Value = (itof(speed) * 0.5) / 100.0;
	}
	KRPGPlayerPawn(MO).ForwardMove1 += Value;
	KRPGPlayerPawn(MO).ForwardMove2 += Value;
	KRPGPlayerPawn(MO).SideMove1 += Value;
	KRPGPlayerPawn(MO).SideMove2 += Value;
}

//==========================================================================
//
//  ArsenalScreen
//
//==========================================================================

void ArsenalScreen()
{
	ClientArsenalScreen();
}

//==========================================================================
//
//  ClientArsenalScreen
//
//==========================================================================

void ClientArsenalScreen()
{
	KRPGClientGameBase(ClGame).ShowArsenalScreen();
}

//==========================================================================
//
//  GetPoints
//
//==========================================================================

int GetPoints()
{
	return av_points;
}

//==========================================================================
//
//  SetPoints
//
//==========================================================================

void SetPoints(int value)
{
	if (av_points < 0)
	{
		av_points = 0;
	}
	else
	{
		av_points = value;
	}
}

//==========================================================================
//
//  OnNetReborn
//
//==========================================================================

void OnNetReborn(EntityEx OldMO)
{
	Weapon bestWeapon;
	Inventory Item;

	bestWeapon = none;
	if (OldMO)
	{
		// Restore keys and weapons when reborn in co-op
		for (Item = OldMO.Inventory; Item; )
		{
			Inventory Next = Item.Inventory;
			if (Weapon(Item))
			{
				if (!bestWeapon || bestWeapon.SelectionOrder >
					Weapon(Item).SelectionOrder)
				{
					bestWeapon = Weapon(Item);
				}
				Item.AttachToOwner(EntityEx(MO));
			}
			else if (FourthWeaponHolder(Item) || Key(Item))
			{
				Item.AttachToOwner(EntityEx(MO));
			}
			Item = Next;
		}
		OldMO.DestroyAllInventory();
	}
	GiveAmmo(Mana1, 0);
	GiveAmmo(Mana2, 0);
	EntityEx(MO).FindInventory(Mana1).Amount = 25;
	EntityEx(MO).FindInventory(Mana2).Amount = 25;
	if (bestWeapon)
	{
		// Bring up the best weapon
		PendingWeapon = bestWeapon;
	}
}

//==========================================================================
//
//  NetGameReborn
//
//	Respawn at the start
//
//==========================================================================

void NetGameReborn()
{
	int old_experience;
	int old_strength;
	int old_vitality;
	int old_speed;
	int old_intelligence;
	int old_wisdom;
	int old_max_health;
	int old_maxhealth_old;
	int old_exp_level;
	int old_prev_level;
	int old_next_level;
	int old_maxsp_power;
	int old_sp_power_old;
	int old_money;
	EntityEx OldMo = EntityEx(MO);
	
	// [FB] Retrieve experience level and attributes we have made...
	old_experience = Player(OldMo.Player).experience;
	old_strength = Player(OldMo.Player).strength;
	old_vitality = Player(OldMo.Player).vitality;
	old_speed = Player(OldMo.Player).speed;
	old_intelligence = Player(OldMo.Player).intelligence;
	old_wisdom = Player(OldMo.Player).wisdom;
	old_exp_level = Player(OldMo.Player).exp_level;
	old_next_level = Player(OldMo.Player).next_level;
	old_prev_level = Player(OldMo.Player).prev_level;
	old_max_health = Player(OldMo.Player).max_health;
	old_maxhealth_old = Player(OldMo.Player).maxhealth_old;
	old_maxsp_power = Player(OldMo.Player).maxsp_power;
	old_sp_power_old = Player(OldMo.Player).sp_power_old;
	old_money = Player(OldMo.Player).money;
	
	// [FB] ...and update them accordingly
	experience = old_experience;
	strength = old_strength;
	vitality = old_vitality;
	speed = old_speed;
	intelligence = old_intelligence;
	wisdom = old_wisdom;
	exp_level = old_exp_level;
	next_level = old_next_level;
	prev_level = old_prev_level;
	max_health = old_max_health;
	maxhealth_old = old_maxhealth_old;
	maxsp_power = old_maxsp_power;
	sp_power_old = old_sp_power_old;
	money = old_money;
	
	::NetGameReborn();
}	

//==========================================================================
//
//  MovePsprites
//
//  Called every tic by player thinking routine
//
//==========================================================================

void MovePsprites(float deltaTime)
{
	if (speed < 6)
		deltaTime *= 0.8;
	else if (speed > 34)
		deltaTime *= 3.5;
	else if (speed > 24)
		deltaTime *= 2.5;
	else if (speed > 14)
		deltaTime *= 1.5;
	::MovePsprites(deltaTime);
}

//==========================================================================
//
//  DestroyBot
//
//==========================================================================

void DestroyBot()
{
	if (Bot != none)
	{
		Bot.Destroy();
		Bot = none;
	}
}

//==========================================================================
//
//  BotOnSpawn
//
//==========================================================================

void BotOnSpawn()
{
	Bot.OnSpawn();
}

//==========================================================================
//
//  DoClearPlayer
//
//==========================================================================

void DoClearPlayer()
{
	BotPlayer b;

	b = Bot;
	ClearPlayer();
	Bot = b;
}

//==========================================================================
//
//  GetRebornHealth
//
//==========================================================================

int GetRebornHealth()
{
	return max_health;
}

//==========================================================================
//
//	GetMaxHealth
//
//==========================================================================

int GetMaxHealth()
{
	if (MorphTime)
	{
		return MAXMORPHHEALTH;
	}
	return max_health;
}

//==========================================================================
//
//  PlayerImpulse
//
//==========================================================================

void PlayerImpulse()
{
	int impulse;
	int i;

	impulse = Impulse;
	Impulse = 0;
	Inventory Arti = none;

	switch (impulse)
	{
	case KRPGDefs::IMPULSE__TEST__TRAVEL_MAP:
		Level.Completed(-1,0,0);
		break;
	}

	/*---------------------------------------
	-	[CW] Actor Conditions Test      -
	---------------------------------------*/
	switch (impulse)
	{
	case KRPGDefs::IMPULSE__TEST_AC__CAST_ICE_DAMAGER:
		{
			ACDamageDealer ac = ACDamageDealer(Actor(MO).CastCondition(ACDamageDealer, false, none, 1, 5.0));
			if (ac)
			{
				ac.DamageValue = 10;
				ac.DamageDelay = 1.5;
				ac.DamageType = 'Ice';
			}
		}
		break;
	case KRPGDefs::IMPULSE__TEST_AC__CAST_POISON_DAMAGER:
		{
			Actor(MO).CastCondition(ACPoisoned, true, none, 1, 8.0);
		}
		break;
	case KRPGDefs::IMPULSE__TEST_AC__CAST_SPELL_MANA_BURN:
		{
			Actor(MO).CastCondition(ACSpellManaBurn, true, none, 1, 20.0);
		}
		break;
	case KRPGDefs::IMPULSE__TEST_AC__CAST_SPELL_CONFUSION:
		{
			Actor(MO).CastCondition(ACSpellConfusion, true, none, 1, 20.0);
		}
		break;
	}

	/*---------------------------------------
	-	[CW] Spells Test      -
	---------------------------------------*/

	switch (impulse)
	{
	case KRPGDefs::IMPULSE__TEST_SPELL__CAST_SPELL_GRAVITATOR:
		{
			SpellGravitator SG = SpellGravitator(Level.Spawn(SpellGravitator));
			SG.Level = 2;
			SG.LifeDuration = 10.0;
			SG.Origin = MO.Origin;
			SG.Activate();
		}
		break;
	case KRPGDefs::IMPULSE__TEST_SPELL__CAST_SPELL_GOLDEN_STORM:
		{
			SpellGoldenStorm SGS = SpellGoldenStorm(Level.Spawn(SpellGoldenStorm));
			SGS.Level = 2;
			SGS.LifeDuration = 20.0;
			SGS.Origin = MO.Origin;
			SGS.Target = EntityEx(MO);
			SGS.Activate();
		}
		break;
	case KRPGDefs::IMPULSE__TEST_SPELL__CAST_SPELL_GLOBAL_SHRINKER:
		{
			Actor KA;
			foreach Level.AllThinkers(Actor, KA)
			{
				if (KA.bMonster)
				{
					KA.CastCondition(ACSpellShrink, true, Actor(MO), 4, 20.0);
				}
			}
		}
		break;
	}

	/*---------------------------------------
	-	[CW] Actor Tasks Test      -
	---------------------------------------*/
	switch (impulse)
	{
	case KRPGDefs::IMPULSE__TEST_AT__ORDER_EVERYONE_CANCELCURRENT:
		{
			IntelligentActor IA;
			foreach Level.AllThinkers(IntelligentActor, IA)
			{
				if (IA.bMonster)
				{
					IA.A_OrderCancelCurrent();
				}
			}
		}
	case KRPGDefs::IMPULSE__TEST_AT__ORDER_EVERYONE_STANDSTILL:
		{
			IntelligentActor IA;
			foreach Level.AllThinkers(IntelligentActor, IA)
			{
				if (IA.bMonster)
				{
					IA.A_OrderStandStill(false, 0, 5.0);
				}
			}
		}
		break;
	case KRPGDefs::IMPULSE__TEST_AT__ORDER_EVERYONE_MOVETO_PLAYER:
		{
			IntelligentActor IA;
			foreach Level.AllThinkers(IntelligentActor, IA)
			{
				if (IA.bMonster)
				{
					IA.A_OrderWalkTo(false, 0, 0.0, MO.Origin);
				}
			}
		}
		break;
	case KRPGDefs::IMPULSE__TEST_AT__ORDER_EVERYONE_ATTACKALL:
		{
			IntelligentActor IA;
			foreach Level.AllThinkers(IntelligentActor, IA)
			{
				if (IA.bMonster)
				{
					IA.A_OrderAttackAll(false, 0, 0.0);
				}
			}
		}
		break;
	};


	if (impulse < /* <= */ /* 4 */ KRPGDefs::NUMWEAPONSLOTS)
	{
		ChangeWeaponEx(impulse);
	}
	else if (impulse == KRPGDefs::IMPULSE__INVENTORY_PREV)
	{
		InventoryLeft();
	}
	else if (impulse == KRPGDefs::IMPULSE__INVENTORY_NEXT)
	{
		InventoryRight();
	}
	else if (impulse == KRPGDefs::IMPULSE__INVENTORY_USE)
	{
		InventoryUse();
	}
	else if (impulse == KRPGDefs::IMPULSE__SETNEXTSPELL)
	{
		NextSpell();
	}
	else if (impulse == KRPGDefs::IMPULSE__SETPREVIOUSSPELL)
	{
		PreviousSpell();
	}
	else if (impulse == KRPGDefs::IMPULSE__USESPELL)
	{
		SpellUse();
	}
	else if (impulse == KRPGDefs::IMPULSE__SUICIDE)
	{
		Actor(MO).Damage(none, none, 10000);
	}
	else if (impulse == KRPGDefs::IMPULSE__WEAPON_PREV)
	{
		PrevWeapon();
	}
	else if (impulse == KRPGDefs::IMPULSE__WEAPON_NEXT)
	{
		NextWeapon();
	}
	else if (impulse == KRPGDefs::IMPULSE__UPGRADESCREEN)
	{
		UpgradeScreen();
	}
	else if (impulse == KRPGDefs::IMPULSE__ARSENAL)
	{
		ArsenalScreen();
	}
	// [CW] TODO: replace by using KRPG conversation system
	else if (impulse >= 200 && impulse <= 205)
	{
		LineSpecialLevelInfo(Level).ConChoiceImpulse(impulse - 200);
	}

	// Hexen artifact hot keys
	if (!Arti)
	{
		if (impulse == 12 && (Health < max_health))
		{
			Arti = EntityEx(MO).FindInventory(ArtiHealth);
		}
		else if (impulse == 10)
		{
			Arti = EntityEx(MO).FindInventory(ArtiPoisonBag);
		}
		else if (impulse == 9)
		{
			Arti = EntityEx(MO).FindInventory(ArtiBlastRadius);
		}
		else if (impulse == 8)
		{
			Arti = EntityEx(MO).FindInventory(ArtiTeleport);
		}
		else if (impulse == 7)
		{
			Arti = EntityEx(MO).FindInventory(ArtiTeleportOther);
		}
		else if (impulse == 6)
		{
			Arti = EntityEx(MO).FindInventory(ArtiPork);
		}
		else if (impulse == 5 &&
			!EntityEx(MO).FindInventory(PowerInvulnerable))
		{
			Arti = EntityEx(MO).FindInventory(ArtiInvulnerability);
		}
	}

	if (Arti)
	{
		// Use an artifact
		EntityEx(MO).UseInventory(Arti);
	}
}

//==========================================================================
//
//  PlayerTick
//
//==========================================================================

void PlayerTick(float deltaTime)
{
	if (bIsBot)
	{
		BotTick(deltaTime);
	}

	// fixme: do this in the cheat code
	if (Cheats & CF_NOCLIP)
	{
		MO.bColideWithThings = false;
		MO.bColideWithWorld = false;
	}
	else
	{
		MO.bColideWithThings = true;
		MO.bColideWithWorld = true;
	}

	if (Actor(MO).bJustAttacked)
	{
		ForwardMove = 100.0;
		SideMove = 0.0;
		Actor(MO).bJustAttacked = false;
	}

	//	You can only press use while totally frozen
	if (bTotallyFrozen)
	{
		Buttons &= BT_USE;
		Impulse = 0;
		ViewAngles = MO.Angles;
		ForwardMove = 0.0;
		SideMove = 0.0;
		FlyMove = 0.0;
	}
	else if (bFrozen)
	{
		ForwardMove = 0.0;
		SideMove = 0.0;
		FlyMove = 0.0;
	}

	sp_recharge_tics++;
	// [FB] Slowly increase spiritual power
	if (PlayerState == PST_LIVE && (sp_recharge_tics >= 18) && (sp_recharge_tics % (5 * 35) == 0) &&
		sp_power < maxsp_power)
	{
		sp_power++;
	}
	if (sp_recharge_tics > (10 * 35))
	{
		sp_recharge_tics = 0; // [FB] Restart counter
	}
	/*if (Actor(MO).berserkTics > 0.0)
	{
		BonusFlash = 0.3;
		Actor(MO).berserkTics -= 1.0;
	}*/
	/*if (Actor(MO).berserkTics <= 0.0 && Actor(MO).bBerserk)
	{
		centreprint("BERSERKER DEACTIVATED");
		UnsetBerserk();
	}*/
	WorldTimer += deltaTime;
	InventoryTick(deltaTime);
	SpellTick(deltaTime);

	if (PlayerState == PST_DEAD)
	{
		DeathPlayerTick(deltaTime);
		return;
	}

	// Copy view angles
	if (MO == Camera)
	{
		MO.Angles = ViewAngles;
	}

	if (JumpTime)
	{
		JumpTime -= deltaTime;
		if (JumpTime <= 0.0)
		{
			JumpTime = 0.0;
		}
	}
	if (MorphTime)
	{
		PlayerPawn(MO).MorphPlayerThink();
	}

	// KRPG
	// Duck
	float oldHeight = MO.Height;
	if (Buttons & BT_DUCK)
	{
		KRPGPlayerPawn(MO).BendDown(deltaTime);
	}
	else
	{
		KRPGPlayerPawn(MO).StandUp(deltaTime);
	}
	KRPGPlayerPawn(MO).ViewHeight += (MO.Height - oldHeight);

	//	Move around.
	//	ReactionTime is used to prevent movement for a bit after a teleport.
	if (Actor(MO).ReactionTime)
	{
		Actor(MO).ReactionTime -= deltaTime;
		if (Actor(MO).ReactionTime <= 0.0)
			Actor(MO).ReactionTime = 0.0;
		if (Actor(MO).bWaterJump)
			WaterJump();
	}
	else
	{
		if (MO.Height < KRPGPlayerPawn(MO).StandHeight)
		{
			ForwardMove /= 4.0;
			SideMove /= 7.0;
		}
		// KRPG
		if (KRPGPlayerPawn(MO).RidePartner && KRPGPlayerPawn(MO).bIsMountedOn && KRPGPlayerPawn(MO).bRideControl)
			PlayerRide(deltaTime);
		else if (MO.WaterLevel > 1)
			WaterMove(deltaTime);
		else
			MovePlayer(deltaTime);
		if (EntityEx(MO).FindInventory(PowerSpeed) &&
			!(Level.XLevel.TicTime & 1) && Length(MO.Velocity) > 12.0 * 35.0)
		{
			SpawnSpeedEffect();
		}
	}

	CalcHeight(deltaTime);

	if (MO.Sector->special || MO.Sector->Damage)
	{
		PlayerInSpecialSector(deltaTime);
	}
	PlayerOnSpecialFlat(Actor(MO).GetFloorType());
	PlayerInContents(deltaTime);

	if (MO.Velocity.z <= -35.0 * 35.0 && MO.Velocity.z >= -40.0 * 35.0 &&
		!MorphTime && MO.WaterLevel == 0 &&
		!GetSoundPlayingInfo(MO, GetSoundID('*falling')))
	{
		MO.PlaySound('*falling', CHAN_VOICE);
	}

	// Check for weapon change.
	if (Impulse)
	{
		PlayerImpulse();
	}

	// check for use
	if (Buttons & BT_USE)
	{
		if (!bUseDown)
		{
			//[KoraxRPG]
			//P_UseLines();
			if (MO.IsA('KRPGPlayerPawn'))
				KRPGPlayerPawn(MO).TryUse(USERANGE, USETHINGRANGE);
			bUseDown = true;
		}
	}
	else
	{
		bUseDown = false;
	}

	if (!ReadyWeapon && PendingWeapon)
	{
		SetWeapon(PendingWeapon);
		BringUpWeapon();
	}

	// Morph counter
	if (MorphTime)
	{
		if (ChickenPeck)
		{
			// Chicken attack counter
			ChickenPeck -= 3;
		}
		MorphTime -= deltaTime;
		if (MorphTime <= 0.0)
		{
			// Attempt to undo the chicken/pig
			MorphTime = 0.0;
			UndoPlayerMorph(false, self);
		}
	}

	//	Cycle psprites
	MovePsprites(deltaTime);

	//	Counters.
	if (PoisonCount && Level.XLevel.Time - LastPoisonTime >= 0.5)
	{
		PoisonCount -= 5;
		if (PoisonCount < 0)
		{
			PoisonCount = 0;
		}
		LastPoisonTime = Level.XLevel.Time;
		Actor(MO).PoisonDamage(Poisoner, Poisoner, 1, true);
	}

	if (DamageFlash)
	{
		DamageFlash -= deltaTime;
		if (DamageFlash <= 0.0)
			DamageFlash = 0.0;
	}

	if (BonusFlash)
	{
		BonusFlash -= deltaTime;
		if (BonusFlash <= 0.0)
			BonusFlash = 0.0;
	}

	if (HazardTime)
	{
		HazardTime -= deltaTime;
		if (HazardTime <= 0.0)
			HazardTime = 0.0;
		if (Level.XLevel.Time - LastHazardTime >= 32.0 / 35.0 &&
			HazardTime > 16.0)
		{
			LastHazardTime = Level.XLevel.Time;
			Actor(MO).Damage(none, none, 5);
		}
	}
}

//==========================================================================
//
//  BotTick
//
//==========================================================================

void BotTick(float deltaTime)
{
	Bot.BotTick(deltaTime);
}

//==========================================================================
//
//  SpawnSpeedEffect
//
//==========================================================================

void SpawnSpeedEffect()
{
	Actor speedA = HexenLevelInfo(Level).Spawn(PlayerSpeed, MO.Origin);
	if (speedA)
	{
		speedA.Angles.yaw = MO.Angles.yaw;
		speedA.Translation = MO.Translation;
		speedA.Target = Actor(MO);
		speedA.Special1 = PClass;
		if (speedA.Special1 > 2)
		{
			speedA.Special1 = 0;
		}
		int Idx;
		switch (PClass)
		{
		case HexenDefs::PCLASS_FIGHTER:
			Idx = 0;
			break;
		case HexenDefs::PCLASS_CLERIC:
			Idx = 2;
			break;
		case HexenDefs::PCLASS_MAGE:
			Idx = 4;
			break;
		case HexenDefs::PCLASS_PIG:
			Idx = 6;
			break;
		}
		speedA.SetState(GetStatePlus(speedA.IdleState, Idx, true));
		speedA.FloorClip = MO.FloorClip;
#ifdef FIXME
		if (self == GPlayers[consoleplayer])
		{
			speedA.bHidden = true;
		}
#endif
	}
}

//==========================================================================
//
//  PlayerRide
//
//==========================================================================

void PlayerRide(float deltaTime)
{
	float forward = ForwardMove;
	float side = SideMove;
	float vertical = (Buttons & BT_JUMP) ? deltaTime : 0.0;

	KRPGPlayerPawn(MO).RidePartner.RideCommand(forward * deltaTime, side * deltaTime, vertical);
}

//==========================================================================
//
//  PaletteFlash
//
//  Sets the new palette based upon the current values of
// Player.DamageFlash and Player.BonusFlash.
//
//==========================================================================

void PaletteFlash()
{
	float r = 0.0;
	float g = 0.0;
	float b = 0.0;
	float a = 0.0;

	int CShiftPowerPositive, CShiftPowerNegative;

	if (MO.WaterLevel == 3)
	{
		switch (MO.WaterType)
		{
		case CONTENTS_WATER:
			AddBlend(r, g, b, a, RGBA(130, 80, 50, 128));
			break;

		case CONTENTS_LAVA:
			AddBlend(r, g, b, a, RGBA(255, 80, 0, 150));
			break;

		case CONTENTS_NUKAGE:
			AddBlend(r, g, b, a, RGBA(50, 255, 50, 150));
			break;

		case CONTENTS_SLIME:
			AddBlend(r, g, b, a, RGBA(0, 25, 5, 150));
			break;

		case CONTENTS_HELLSLIME:
			AddBlend(r, g, b, a, RGBA(255, 80, 0, 150));
			break;

		case CONTENTS_BLOOD:
			AddBlend(r, g, b, a, RGBA(160, 16, 16, 150));
			break;

		case CONTENTS_SLUDGE:
			AddBlend(r, g, b, a, RGBA(128, 160, 128, 150));
			break;

		case CONTENTS_HAZARD:
			AddBlend(r, g, b, a, RGBA(128, 160, 128, 128));
			break;
		}
	}

	if (EntityEx(MO).DamageType == 'Ice')
	{
		// Frozen player
		AddBlend(r, g, b, a, RGBA(2, 2, 255, 113));
	}
	else
	{
		if (DamageFlash)
		{
			int Amount = ftoi(114.0 * DamageFlash);
			if (Amount >= 228)
			{
				Amount = 228;
			}
			// KRPG
			// [CW] TODO: need extra parameter in DoSpecialDamage to use this
			if (Actor(MO).DamageType == 'Ice')
				AddBlend(r, g, b, a, RGBA(2, 2, 255, Amount));
			else
				AddBlend(r, g, b, a, RGBA(255, 0, 0, Amount));
		}

		if (BonusFlash)
		{
			int Amount = ftoi(256.0 * BonusFlash);
			if (Amount >= 128)
			{
				Amount = 128;
			}
			AddBlend(r, g, b, a, RGBA(215, 186, 68, Amount));
		}

		//
		// KRPG
		//
		/*if (PoisonCount)
		{
			int Amount = PoisonCount * 160 / 32;
			if (Amount >= 160)
			{
				Amount = 160;
			}
			AddBlend(r, g, b, a, RGBA(56, 118, 46, Amount));
		}*/

		//FIXME add hazard flash.
		if (HazardTime > 16.0 || ftoi(4.0 * HazardTime) & 1)
		{
			AddBlend(r, g, b, a, RGBA(0, 255, 0, 32));
		}
	}

	Inventory Item;
	for (Item = EntityEx(MO).Inventory; Item; Item = Item.Inventory)
	{
		int Blend = Item.GetBlend();
		if (Blend)
		{
			AddBlend(r, g, b, a, Blend);
		}
	}

	//
	// KRPG
	//
	KRPGPlayerPawn kpp = KRPGPlayerPawn(MO);
	if (kpp.Conditions.Num)
	{
		int i;
		for (i = 0; i < kpp.Conditions.Num; i++)
		{
			ActorCondition ac = kpp.Conditions[i];
			if (ac)
			{
				if (ac.bIsNegative)
				{
					if (!MO.bCorpse)
						ac.MakeCShift(&CShiftPowerNegative);
				}
				else
					ac.MakeCShift(&CShiftPowerPositive);
			}
		};
	}

	if (r > 1.0)
	{
		r = 1.0;
	}
	if (g > 1.0)
	{
		g = 1.0;
	}
	if (b > 1.0)
	{
		b = 1.0;
	}
	CShift = RGBA(ftoi(r * 255.0), ftoi(g * 255.0), ftoi(b * 255.0),
		ftoi(a * 255.0));
	//
	// KRPG
	CShift |= CShiftPowerPositive;
	CShift |= CShiftPowerNegative;
	// [CW] OMG, what a mess :)
}

//==========================================================================
//
//  ParticleEffectEx
//
//==========================================================================

void ParticleEffectEx(int count, int type1, int type2, TVec origin, TVec ornd,
	TVec velocity, TVec vrnd, TVec acceleration, float grav, int colour, float duration, float ramp,
	int Pattern)
{
	KRPGLevelInfo(Level).ParticleEffectEx(count, type1, type2, origin, ornd, velocity, vrnd, acceleration,
				grav, colour, duration, ramp, Pattern);
}

//==========================================================================
//
//  Cheat_Gimme
//
//==========================================================================

void Cheat_Gimme()
{
	class<Inventory>			Cls;
	class<HexenWeapon>			WpnCls;
	class<FourthWeaponPiece>	PieceCls;
	Inventory					Inv;

	if (Cmd_CheckParm("weapons"))
	{
		int i;

		HexenArmor HArmor = HexenArmor(EntityEx(MO).FindInventory(
			HexenArmor));
		for (i = 0; i < 4; i++)
		{
			HArmor.Slots[i] = HArmor.SlotsIncrement[i];
		}
		foreach AllClasses(HexenWeapon, WpnCls)
		{
			if (!FindClassState(WpnCls, 'Ready'))
			{
				//	Abstract class.
				continue;
			}
			WpnCls = class<HexenWeapon>(GetClassReplacement(WpnCls));
			HexenWeapon Wpn = HexenWeapon(Level.Spawn(WpnCls,,,, false));
			Wpn.AmmoGive1 = 0;
			Wpn.AmmoGive2 = 0;
			Wpn.AmmoGive3 = 0;
			if (!Wpn.TryPickup(EntityEx(MO)))
			{
				Wpn.Destroy();
			}
		}
		foreach AllClasses(Ammo, Cls)
		{
			//	Only direct descendants.
			if (GetClassParent(Cls) != Ammo)
			{
				continue;
			}
			Inventory AmmoItem = EntityEx(MO).FindInventory(Cls);
			if (!AmmoItem)
			{
				Cls = class<Inventory>(GetClassReplacement(Cls));
				AmmoItem = Level.Spawn(Cls,,,, false);
				if (!AmmoItem.TryPickup(EntityEx(MO)))
				{
					AmmoItem.Destroy();
					AmmoItem = none;
				}
			}
			if (AmmoItem)
			{
				AmmoItem.Amount = AmmoItem.MaxAmount;
			}
		}

		FourthWeaponHolder Hold = FourthWeaponHolder(
			EntityEx(MO).FindInventory(FourthWeaponHolder));
		if (!Hold)
		{
			Hold = Level.Spawn(FourthWeaponHolder,,,, false);
			Hold.AttachToOwner(EntityEx(MO));
		}
		Hold.PieceMask = 7;

		cprint("ALL WEAPONS");
	}
	if (Cmd_CheckParm("health"))
	{
		if (MorphTime)
		{
			MO.Health = MAXMORPHHEALTH;
			Health = MO.Health;
		}
		else
		{
			MO.Health = max_health;
			Health = MO.Health;
		}
		cprint("FULL HEALTH");
	}
	if (Cmd_CheckParm("keys"))
	{
		foreach AllClasses(Key, Cls)
		{
			if (!FindClassState(Cls, 'Spawn'))
			{
				//	Abstract class
				continue;
			}
			Cls = class<Inventory>(GetClassReplacement(Cls));
			EntityEx(MO).GiveInventoryType(Cls);
		}
		cprint("ALL KEYS");
	}
	if (Cmd_CheckParm("artifacts"))
	{
		// All artifacts
		foreach AllClasses(Inventory, Cls)
		{
			if (!Cls.default.bInvBar || !Cls.default.MaxAmount)
			{
				//	Not an artifact
				continue;
			}
			if (!FindClassState(Cls, 'Spawn'))
			{
				//	Abstract class
				continue;
			}
			if (ClassIsChildOf(Cls, PuzzleItem))
			{
				//	Not puzzle items.
				continue;
			}
			if (!AreStateSpritesPresent(FindClassState(Cls, 'Spawn')))
			{
				//	From other game or not available in shareware.
				continue;
			}
			Cls = class<Inventory>(GetClassReplacement(Cls));
			Inv = Level.Spawn(Cls,,,, false);
			Inv.Amount = Inv.MaxAmount;
			if (!Inv.TryPickup(EntityEx(MO)))
			{
				Inv.Destroy();
			}
		}
		cprint("ALL ARTIFACTS");
	}
	if (Cmd_CheckParm("puzzles"))
	{
		foreach AllClasses(PuzzleItem, Cls)
		{
			if (!FindClassState(Cls, 'Spawn'))
			{
				//	Abstract class
				continue;
			}
			Cls = class<Inventory>(GetClassReplacement(Cls));
			EntityEx(MO).GiveInventoryType(Cls);
		}
		cprint("ALL ARTIFACTS");
	}
	if (Cmd_CheckParm("exp"))
	{
		GiveExperience(next_level - experience);
		cprint("LOTS OF EXP");
	}
	// [CW] Could not help myself not doing this >8}=}
	if (Cmd_CheckParm("peace"))
	{
		if (MO)
			Actor(MO).Kill();
		cprint("REST IN PEACE...");
	}
}

//==========================================================================
//
//  Cheat_Morph
//
//==========================================================================

void Cheat_Morph()
{
	if (MorphTime)
	{
		UndoPlayerMorph(false, self);
	}
	else
	{
		Actor(MO).MorphPlayer(PorkFX.default.PlayerClass, 0.0,
			PorkFX.default.MorphStyle, none, none, Actor(MO));
	}
	cprint("SQUEAL!!");
}

//==========================================================================
//
//  Cheat_Class
//
//==========================================================================

void Cheat_Class()
{
	int i;
	int pclass;

	if (MorphTime)
	{
		// don't change class if the player is morphed
		return;
	}
	if (Cmd_CheckParm("fighter"))
		pclass = HexenDefs::PCLASS_FIGHTER;
	else if (Cmd_CheckParm("cleric"))
		pclass = HexenDefs::PCLASS_CLERIC;
	else if (Cmd_CheckParm("mage"))
		pclass = HexenDefs::PCLASS_MAGE;
	else
	{
		cprint("INVALID PLAYER CLASS");
		return;
	}
	//FIXME it doesn't work like this.
	PClass = pclass;
	HexenArmor HArmor = HexenArmor(EntityEx(MO).FindInventory(HexenArmor));
	for (i = 0; i < 4; i++)
	{
		HArmor.Slots[i] = 0.0;
	}
	BaseClass = pclass;
	//PostMorphWeapon(HexenDefs::WP_FIRST);
	SetCvar('class', pclass);
	SB_Start();
}

//==========================================================================
//
//  SetFOV
//
//==========================================================================

void SetFOV(int FOV)
{
	SetCvar('FOV', FOV);
}

//==========================================================================
//
//  IsWeaponAlwaysExtremeDeath
//
//==========================================================================

bool IsWeaponAlwaysExtremeDeath()
{
	// Always extreme death from fourth weapon
	return ReadyWeapon.bExtremeDeath;
}

//==========================================================================
//
//  ClientConversation
//
//==========================================================================

void ClientConversation(string Speaker, string SpeakingTo)
{
	MainGameInfo(Level.Game).GameConParser.CleanScene = ConCleanScene;
	MainGameInfo(Level.Game).GameConParser.SetPersonInfo = ConSetPersonInfo;
	MainGameInfo(Level.Game).GameConParser.PlayCue = ConPlayCue;
	MainGameInfo(Level.Game).GameConParser.CleanChoices = ConCleanChoices;
	MainGameInfo(Level.Game).GameConParser.AddChoice = ConAddChoice;
	MainGameInfo(Level.Game).GameConParser.Suspend = ConSuspend;
	MainGameInfo(Level.Game).GameConParser.Wait = ConWait;
	MainGameInfo(Level.Game).GameConParser.CloseScene = ConCloseScene;

	MainGameInfo(Level.Game).GameConParser.PlayerName = PlayerName;

	KRPGClientGameBase(ClGame).ConversationStart();

	MainGameInfo(Level.Game).GameConParser.Begin(Speaker, SpeakingTo);
}

//==========================================================================
//
//  ConCleanScene
//
//==========================================================================

void ConCleanScene()
{
	KRPGClientGameBase(ClGame).ConCleanScene();
}

//==========================================================================
//
//  ConSetPersonInfo
//
//==========================================================================

void ConSetPersonInfo(string Name, name Pic, name Flat)
{
	KRPGClientGameBase(ClGame).ConSetPersonInfo(Name, Pic, Flat);
}

//==========================================================================
//
//  ConPlayCue
//
//==========================================================================

void ConPlayCue(string Who, string ToWhom, string Cue, name Voice)
{
	KRPGClientGameBase(ClGame).ConPlayCue(Who, ToWhom, Cue, Voice);
}

//==========================================================================
//
//  ConCleanChoices
//
//==========================================================================

void ConCleanChoices()
{
	KRPGClientGameBase(ClGame).ConCleanChoices();
}

//==========================================================================
//
//  ConAddChoice
//
//==========================================================================

void ConAddChoice(string Text, string Name, int Index)
{
	KRPGClientGameBase(ClGame).ConAddChoice(Text, Name, Index);
}

//==========================================================================
//
//  ConSuspend
//
//==========================================================================

void ConSuspend()
{
	KRPGClientGameBase(ClGame).ConSuspend();
}

//==========================================================================
//
//  ConWait
//
//==========================================================================

void ConWait()
{
}

//==========================================================================
//
//  ConCloseScene
//
//==========================================================================

void ConCloseScene()
{
	KRPGClientGameBase(ClGame).ConversationEnd();
}

//==========================================================================
//
//  ConChoice
//
//==========================================================================

void ConChoice(string Name, int Index)
{
	MainGameInfo(Level.Game).GameConParser.ExecuteChoice(Name, Index);
}

//==========================================================================
//
//  ConContinue
//
//==========================================================================

void ConContinue()
{
	MainGameInfo(Level.Game).GameConParser.Continue();
}

//==========================================================================
//
//	KilledActor
//
//==========================================================================

void KilledActor(EntityEx Victim)
{
	// Check for frag changes
	if (Victim.bIsPlayer)
	{
		if (bIsBot)
		{
			Bot.Killed(Victim);
		}

		if (Victim.Player.bIsBot)
		{
			Player(Victim.Player).Bot.Died(EntityEx(MO));
		}

		if (Victim == MO)
		{
			// Self-frag
			Frags--;
		}
		else
		{
			Frags++;
		}
	}
}

//==========================================================================
//
//	PlayerMorphed
//
//==========================================================================

void PlayerMorphed(EntityEx OldMO)
{
	PClass = HexenDefs::PCLASS_PIG;
}

/*//==========================================================================
//
//	SetBerserk
//
//==========================================================================

final void SetBerserk()
{
	// [FB] Berserker actors get the double of their actual health
	//	    Doubling their speed and their strength (MissileDamage for non players)
	// [FB] Player actor case
	Actor(MO).berserkTics += 1.0 + itof(sp_power) * 80.0;
	Actor(MO).preberserk_strength = strength;
	Actor(MO).preberserk_speed = itof(speed);
	Actor(MO).preberserk_health = Health;
	
	strength *= 2;
	speed *= 2;
	Health *= 2;
	MO.Health = Health;
	sp_power = 0;
	Actor(MO).bBerserk = true;
}

//==========================================================================
//
//	UnsetBerserk
//
//	[FB] Return actor to it's original stats
//
//==========================================================================

final void UnsetBerserk()
{
	Actor(MO).berserkTics = 0.0;
	strength = Actor(MO).preberserk_strength;
	speed = ftoi(Actor(MO).preberserk_speed);
	Health /= 2;
	MO.Health = Health; // -JL- Decrease also mobj's health which is the actual health value
	DamageFlash += itof(MO.Health) * 0.09;
	if (DamageFlash > 2.0)
	{
		DamageFlash = 2.0;
	}
	Actor(MO).bBerserk = false;
	MO.SetState(MO.FindState('Pain'));
}*/

//==========================================================================
//
//	SpiritsWithin
//
//	[FB] Make fallen foes spirits help us out
//
//==========================================================================

final bool A_SpiritsWithin()
{
	int i;
	EntityEx tail;
	EntityEx next;
	EntityEx mo;
	EntityEx g;
	float dist;
	float limit;

	foreach EntityEx(MO).AllThinkers(EntityEx, mo)
	{
		 // Not a corpse
		if (!mo.bCorpse)
		{
			continue;
		}
		dist = EntityEx(MO).DistTo(mo);
		limit = 1000.0 * (itof(exp_level) * 0.1);
		if (dist > limit)
		{
			continue;
		}
		if (sp_power >= 5)
		{
			sp_power -= 5;
		}
		else
		{			
			return false;
		}
		g = Level.Spawn(HolySpirit, mo.Origin + vector(0.0, 0.0, 32.0));
		if (!g)
		{
			continue;
		}
		g.Angles.yaw = AngleMod360(mo.Angles.yaw +
			(45.0 + 45.0 / 2.0));
		g.Thrust(g.Angles.yaw, g.Speed * Level.Game.frametime);
		g.Target = EntityEx(MO);
		g.Args[0] = 10;	// initial turn value
		g.Args[1] = 0;	// initial look angle
		if (Level.Game.deathmatch)
		{
			// Ghosts last slightly less longer in DeathMatch
			g.Health = 85;
		}
		if (EntityEx(MO).Tracer)
		{
			g.Tracer = EntityEx(MO).Tracer;
			//	Don't colide with world but colide with things, i.e explode
			g.bColideWithWorld = false;
			g.bSkullFly = true;
			g.bMissile = false;
		}
		tail = Level.Spawn(HolyTail, g.Origin);
		tail.Target = g;	// parent
		for (i = 1; i < 3; i++)
		{
			next = Level.Spawn(HolyTailTrail, g.Origin);
			tail.Tracer = next;
			tail = next;
		}
		g.PlaySound(g.ActiveSound, CHAN_VOICE);
		mo.SetState(mo.FindState('FreeTargMobj'));
	}

	return true;
}

defaultproperties
{
	SpellSize = 6;
}
