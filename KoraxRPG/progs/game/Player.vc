//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Player : PlayerEx;

enum
{
	BT_DUCK	= 8
};

const int MAXHEALTH			= 100;
const int MAXMORPHHEALTH	= 30;
const float VIEWHEIGHT		= 48.0;

float MorphTime;	// player is a pig if > 0

BotPlayer Bot;

// KRPG
float ViewHeightFixed;

replication
{
	reliable if (!bIsClient)
		SetFOV;

	unreliable if (!bIsClient)
		ParticleEffectEx;

	reliable if (!bIsClient)
		ClientConversation, ConCleanScene, ConSetPersonInfo, ConPlayCue,
		ConCleanChoices, ConAddChoice, ConSuspend, ConWait, ConCloseScene;

	reliable if (bIsClient)
		ConChoice, ConContinue;
}

//==========================================================================
//
//	PutClientIntoServer
//
//==========================================================================

void PutClientIntoServer()
{
	if (bIsBot)
	{
		Bot = BotPlayer(SpawnObject(BotPlayer));
		Bot.player = self;
		Bot.OnBeginPlay();
	}
}

//==========================================================================
//
//  SpawnClient
//
//==========================================================================

void SpawnClient()
{
	bool playerWasReborn;
	Weapon bestWeapon;
	EntityEx OldMO = EntityEx(MO);
	Inventory Item;

	Attacker = none;

	if (Level.Game.netgame && !Level.Game.deathmatch)
	{
		// Cooperative net-play, retain keys and weapons
		playerWasReborn = (PlayerState == PST_REBORN);
	}

	//  Spawn player
	if (Level.Game.deathmatch)
	{
		DeathMatchSpawnPlayer();
	}
	else
	{
		SpawnPlayer(&Level.PlayerStarts[Level.Game.RebornPosition * MAXPLAYERS +
			GetPlayerNum()]);
	}

	if (Level.Game.netgame && !Level.Game.deathmatch && playerWasReborn)
	{
		// Restore keys and weapons when reborn in co-op
		bestWeapon = none;
		if (OldMO)
		{
			for (Item = OldMO.Inventory; Item; )
			{
				Inventory Next = Item.Inventory;
				if (Weapon(Item))
				{
					if (!bestWeapon || bestWeapon.SelectionOrder >
						Weapon(Item).SelectionOrder)
					{
						bestWeapon = Weapon(Item);
					}
					Item.AttachToOwner(EntityEx(MO));
				}
				else if (FourthWeaponHolder(Item) || Key(Item))
				{
					Item.AttachToOwner(EntityEx(MO));
				}
				Item = Next;
			}
		}
		GiveMana(Mana1, 0);
		GiveMana(Mana2, 0);
		EntityEx(MO).FindInventory(Mana1).Amount = 25;
		EntityEx(MO).FindInventory(Mana2).Amount = 25;
		if (bestWeapon)
		{
			// Bring up the best weapon
			PendingWeapon = bestWeapon;
		}
	}

	// Destroy all things touching players
	Actor(MO).TeleportMove(MO.Origin);
}

//==========================================================================
//
//  NetGameReborn
//
//==========================================================================

void NetGameReborn()
{
	int i;
	bool foundSpot;
	Weapon bestWeapon;
	EntityEx OldMO = EntityEx(MO);
	Inventory Item;

	// remove pitch and roll angles from corpse
	MO.Angles.pitch = 0.0;
	MO.Angles.roll = 0.0;

	// first dissasociate the corpse
	MO.Player = none;
	MO.bIsPlayer = false;

	// spawn at random spot if in death match
	if (Level.Game.deathmatch)
	{
		OldMO.DestroyAllInventory();
		DeathMatchSpawnPlayer();
		return;
	}

	foundSpot = false;
	if (CheckSpot(&Level.PlayerStarts[Level.Game.RebornPosition * MAXPLAYERS +
		GetPlayerNum()]))
	{
		// Appropriate player start spot is open
		SpawnPlayer(&Level.PlayerStarts[Level.Game.RebornPosition * MAXPLAYERS +
			GetPlayerNum()]);
		foundSpot = true;
	}
	else
	{
		// Try to spawn at one of the other player start spots
		for (i = 0; i < MAXPLAYERS; i++)
		{
			if (CheckSpot(&Level.PlayerStarts[Level.Game.RebornPosition * MAXPLAYERS + i]))
			{
				// Found an open start spot
				SpawnPlayer(&Level.PlayerStarts[Level.Game.RebornPosition * MAXPLAYERS + i]);
				foundSpot = true;
				break;
			}
		}
	}

	if (!foundSpot)
	{
		// Player's going to be inside something
		SpawnPlayer(&Level.PlayerStarts[Level.Game.RebornPosition * MAXPLAYERS +
			GetPlayerNum()]);
	}

	// Restore keys and weapons
	bestWeapon = none;
	for (Item = OldMO.Inventory; Item; Item = Item.Inventory)
	{
		if (Weapon(Item))
		{
			if (!bestWeapon || bestWeapon.SelectionOrder >
				Weapon(Item).SelectionOrder)
			{
				bestWeapon = Weapon(Item);
			}
			Item.AttachToOwner(EntityEx(MO));
		}
		else if (FourthWeaponHolder(Item) || Key(Item))
		{
			Item.AttachToOwner(EntityEx(MO));
		}
	}
	GiveMana(Mana1, 0);
	GiveMana(Mana2, 0);
	EntityEx(MO).FindInventory(Mana1).Amount = 25;
	EntityEx(MO).FindInventory(Mana2).Amount = 25;
	if (bestWeapon)
	{
		// Bring up the best weapon
		PendingWeapon = bestWeapon;
	}
	OldMO.DestroyAllInventory();
}

//==========================================================================
//
//  DisconnectClient
//
//==========================================================================

void DisconnectClient()
{
	int i;

	if (Bot != none)
	{
		Bot.Destroy();
		Bot = none;
	}
	if (MO)
	{
		MO.Player = none;
		MO.bIsPlayer = false;
		Actor(MO).Damage(none, none, 10000);
	}
	Level.bprint("%s left the game\n", PlayerName);
	MO.PlaySound('misc/chat', CHAN_AUTO, 1.0, ATTN_NONE);
}

//==========================================================================
//
//  UserinfoChanged
//
//==========================================================================

void UserinfoChanged()
{
}

//==========================================================================
//
//  DeathMatchSpawnPlayer
//
//  Spawns a player at one of the random death match spots called at level
// load and each death
//
//==========================================================================

void DeathMatchSpawnPlayer()
{
	int i;
	int j;

	for (j = 0; j < 20; j++)
	{
		i = P_Random() % Level.NumDeathmatchStarts;
		if (CheckSpot(&Level.DeathmatchStarts[i]))
		{
			SpawnPlayer(&Level.DeathmatchStarts[i]);
			return;
		}
	}

	// no good spot, so the player will probably get stuck 
	SpawnPlayer(&Level.PlayerStarts[GetPlayerNum()]);
}

//==========================================================================
//
//  CheckSpot
//
//  Returns false if the player cannot be respawned at the given mthing_t
// spot because something is occupying it
//
//==========================================================================

bool CheckSpot(mthing_t * mthing)
{
	float x;
	float y;
	sector_t *sec;
	float an;
	Actor A;
	int i;

	if (!MO)
	{
		// first spawn of level, before corpses
		for (i = 0; i < MAXPLAYERS; i++)
			if (Level.Game.Players[i] && Level.Game.Players[i].MO &&
				Level.Game.Players[i].MO.Origin.x == mthing->x &&
				Level.Game.Players[i].MO.Origin.y == mthing->y)
				return false;
		return true;
	}

	x = mthing->x;
	y = mthing->y;

	MO.bPassMobj = false;
	if (!MO.CheckPosition(vector(x, y, Actor::ONFLOORZ)))
	{
		MO.bPassMobj = true;
		return false;
	}
	MO.bPassMobj = true;

	// spawn a teleport fog 
	sec = Level.XLevel.PointInSector(vector(x, y, 0.0));
	an = itof(45 * (mthing->angle / 45));

	A = HexenLevelInfo(Level).Spawn(TeleportFog, vector(x + 20.0 * cos(an), y + 20.0 * sin(an),
		sec->floorheight + Actor::TELEFOGHEIGHT));
	A.PlaySound('Teleport', CHAN_VOICE);

	return true;
}

//==========================================================================
//
//  SpawnPlayer
//
//  Called when a player is spawned on the level.  Most of the player
// structure stays unchanged between levels.
//
//==========================================================================

void SpawnPlayer(mthing_t * mthing)
{
	float x, y, z;
	PlayerPawn pp;
	bool ResetInventory = false;
	Inventory Item;
	int i;
	class<Inventory> Cls;

	if (PlayerState == PST_REBORN)
	{
		PlayerReborn();
		ResetInventory = true;
	}
	if (MainGameInfo(Level.Game).randomclass && Level.Game.deathmatch)
	{
		PClass = P_Random() % 3;
		if (PClass == BaseClass)
		{
			PClass = (PClass + 1) % 3;
		}
		BaseClass = PClass;
		SB_Start();
	}
	else
	{
		PClass = BaseClass;
	}
	x = mthing->x;
	y = mthing->y;
	z = Actor::ONFLOORZ;
	switch (PClass)
	{
	case HexenDefs::PCLASS_FIGHTER:
		pp = PlayerPawn(HexenLevelInfo(Level).Spawn(FighterPlayer, vector(x, y, z),,, false));
		break;
	case HexenDefs::PCLASS_CLERIC:
		pp = PlayerPawn(HexenLevelInfo(Level).Spawn(ClericPlayer, vector(x, y, z),,, false));
		break;
	case HexenDefs::PCLASS_MAGE:
		pp = PlayerPawn(HexenLevelInfo(Level).Spawn(MagePlayer, vector(x, y, z),,, false));
		break;
	default:
		Error("P_SpawnPlayer: Unknown class type");
		break;
	}
	pp.Origin.z += mthing->height;
	pp.LinkToWorld();

	pp.Angles.yaw = itof(45 * (mthing->angle / 45));
	pp.Player = self;
	pp.bIsPlayer = true;
	pp.Health = Health;
	MO = pp;
	Camera = pp;
	PlayerState = PST_LIVE;
	Refire = 0;
	DamageFlash = 0.0;
	BonusFlash = 0.0;
	MorphTime = 0.0;
	ExtraLight = 0;
	FixedColourmap = 0;
	LastSectorDamageTime = 0.0;
	LastHazardTime = 0.0;
	ViewHeight = VIEWHEIGHT;
	ViewAngles = pp.Angles;
	bFixAngle = true;

	pp.Inventory = SavedInventory;
	for (Item = pp.Inventory; Item; Item = Item.Inventory)
	{
		Item.Owner = MO;
	}

	if (ResetInventory)
	{
		while (pp.Inventory)
		{
			pp.Inventory.Destroy();
		}

		HexenArmor HArmor = Level.Spawn(HexenArmor,,,, false);
		HArmor.AttachToOwner(pp);
		HArmor.Slots[4] = pp.HexenArmor[0];
		HArmor.SlotsIncrement[0] = pp.HexenArmor[1];
		HArmor.SlotsIncrement[1] = pp.HexenArmor[2];
		HArmor.SlotsIncrement[2] = pp.HexenArmor[3];
		HArmor.SlotsIncrement[3] = pp.HexenArmor[4];

		BasicArmor BArmor = Level.Spawn(BasicArmor,,,, false);
		BArmor.Amount = 0;
		BArmor.AttachToOwner(pp);

		for (i = 0; i < pp.DropItemList.Num; i++)
		{
			Item = Inventory(Level.Spawn(pp.DropItemList[i].Type,,,, false));
			Item.bIgnoreSkill = true;
			Item.Amount = pp.DropItemList[i].Amount;
			if (Weapon(Item))
			{
				//	For better control empty weapon's ammo.
				Weapon(Item).AmmoGive1 = 0;
				Weapon(Item).AmmoGive2 = 0;
			}
			if (!Item.TryPickup(pp))
			{
				Item.Destroy();
			}
			else if (Weapon(Item) && Weapon(Item).CheckAmmo(false))
			{
				SetWeapon(Weapon(Item));
			}
		}
	}
	SetupPsprites();
	if (Level.Game.deathmatch)
	{
		// Give all keys in death match mode
		foreach AllClasses(Key, Cls)
		{
			if (!FindClassState(Cls, 'Spawn'))
			{
				//	Abstract class.
				continue;
			}
			pp.GiveInventoryType(Cls);
		}
	}

	// Set translation table data
	if (PClass == HexenDefs::PCLASS_FIGHTER)
	{
		TranslStart = 246;
		TranslEnd = 254;
	}
	else
	{
		TranslStart = 146;
		TranslEnd = 163;
	}
	pp.Translation = (Entity::TRANSL_Player << Entity::TRANSL_TYPE_SHIFT) +
		GetPlayerNum();
	if (bIsBot)
	{
		Bot.OnSpawn();
	}
}

//==========================================================================
//
//  PlayerReborn
//
//  Called after a player dies almost everything is cleared and initialised
//
//==========================================================================

void PlayerReborn()
{
	BotPlayer B;

	B = Bot;
	ClearPlayer();
	Bot = B;

	PClass = BaseClass;

	bUseDown = true;	// don't do anything immediately
	bAttackDown = true;
	PlayerState = PST_LIVE;
	Health = MAXHEALTH;
	LocalQuakeHappening = 0;
}

//==========================================================================
//
//  PlayerExitMap
//
//  Called when the player leaves a map.
//
//==========================================================================

void PlayerExitMap(bool clusterChange)
{
	int i;
	Inventory Item;

	// Strip all current powers
	for (Item = EntityEx(MO).Inventory; Item;)
	{
		Inventory Next = Item.Inventory;
		if (Powerup(Item) && (Level.Game.deathmatch || clusterChange ||
			!Item.bHubPower))
		{
			Item.Destroy();
		}
		Item = Next;
	}

	if (!Level.Game.deathmatch)
	{
		if (clusterChange)
		{
			// Entering new cluster
			// Strip some items
			for (Item = EntityEx(MO).Inventory; Item;)
			{
				Inventory Next = Item.Inventory;
				if (Item.bInterHubStrip)
				{
					Item.Destroy();
				}
				Item = Next;
			}
		}
	}

	if (MorphTime)
	{
		SetWeapon(Weapon(Actor(MO).Tracer));	// Restore weapon
		MorphTime = 0.0;
	}
	MO.Angles.pitch = 0.0;
	MO.RenderStyle = Entity::STYLE_Normal;
	MO.Alpha = 1.0;
	EntityEx(MO).bShadow = false;	// Remove invisibility
	ExtraLight = 0;	// Remove weapon flashes
	FixedColourmap = 0;	// Remove torch
	DamageFlash = 0.0;	// No palette changes
	BonusFlash = 0.0;
}

//==========================================================================
//
//  GiveMana
//
//  Returns true if the player accepted the mana, false if it was refused.
//
//==========================================================================

bool GiveMana(class<Ammo> ammo, int count)
{
	int oldammo;

	if (!ammo)
	{
		return false;
	}

	Ammo AmmoItem = Ammo(EntityEx(MO).FindInventory(ammo));
	if (!AmmoItem)
	{
		AmmoItem = Level.Spawn(ammo,,,, false);
		AmmoItem.AttachToOwner(EntityEx(MO));
		AmmoItem.Amount = 0;
	}
	if (!count)
	{
		return false;
	}
	if (AmmoItem.Amount == AmmoItem.MaxAmount)
	{
		return false;
	}

	if (Level.Game.gameskill == sk_baby ||
		(Level.Game.gameskill == sk_nightmare &&
		LineSpecialGameInfo(Level.Game).bNightmareExtraAmmo))
	{
		// extra ammo in baby mode and nightmare mode
		if (LineSpecialGameInfo(Level.Game).bBabyNightmareDoubleAmmo)
		{
			count <<= 1;
		}
		else
		{
			count += count >> 1;
		}
	}

	oldammo = AmmoItem.Amount;
	AmmoItem.Amount += count;
	if (AmmoItem.Amount > AmmoItem.MaxAmount)
	{
		AmmoItem.Amount = AmmoItem.MaxAmount;
	}

	if (oldammo <= 0)
	{
		GotAmmo(AmmoItem);
	}
	return true;
}

//==========================================================================
//
//	GotAmmo
//
//==========================================================================

void GotAmmo(Ammo NewAmmo)
{
}

//==========================================================================
//
//	GetMaxHealth
//
//==========================================================================

int GetMaxHealth()
{
	if (MorphTime)
	{
		return MAXMORPHHEALTH;
	}
	return MAXHEALTH;
}

//==========================================================================
//
//  InventoryLeft
//
//==========================================================================

void InventoryLeft()
{
	if (!InventoryTime)
	{
		InventoryTime = 5.0;
		return;
	}
	InventoryTime = 5.0;
	if (InvPtr)
	{
		Inventory Prev = InvPtr.PrevInv();
		if (Prev)
		{
			InvPtr = Prev;
			AdjustInvFirst();
		}
	}
}

//==========================================================================
//
//  InventoryRight
//
//==========================================================================

void InventoryRight()
{
	if (!InventoryTime)
	{
		InventoryTime = 5.0;
		return;
	}
	InventoryTime = 5.0;
	if (InvPtr)
	{
		Inventory Next = InvPtr.NextInv();
		if (Next)
		{
			InvPtr = Next;
			AdjustInvFirst();
		}
	}
}

//==========================================================================
//
//  InventoryUse
//
//==========================================================================

Inventory InventoryUse()
{
	// flag to denote that it's okay to use an artifact
	if (InventoryTime)
	{
		InventoryTime = 0.0;
		return none;
	}
	else
	{
		return InvPtr;
	}
}

//==========================================================================
//
//  InventoryTick
//
//==========================================================================

void InventoryTick(float deltaTime)
{
	// turn inventory off after a certain amount of time
	if (InventoryTime)
	{
		InventoryTime -= deltaTime;
		if (InventoryTime <= 0.0)
		{
			InventoryTime = 0.0;
		}
	}
	if (ArtifactFlash)
	{
		ArtifactFlash--;
	}
}

//==========================================================================
//
//	AdjustInvFirst
//
//==========================================================================

void AdjustInvFirst()
{
	Inventory Item;

	if (!InvPtr)
	{
		InvFirst = none;
		return;
	}

	//	Count how many items are following the current one, also make sure
	// that first is not after this one.
	int NumFollowing = 0;
	for (Item = InvPtr.NextInv(); Item; Item = Item.NextInv())
	{
		NumFollowing++;
		if (InvFirst == Item)
		{
			InvFirst = InvPtr;
		}
	}
	int FirstOffs = 0;
	for (Item = InvPtr; Item && Item != InvFirst; Item = Item.PrevInv())
	{
		FirstOffs++;
	}
	while (FirstOffs > 6)
	{
		InvFirst = InvFirst.NextInv();
		FirstOffs--;
	}
	while (NumFollowing + FirstOffs < 6 && InvFirst.PrevInv())
	{
		InvFirst = InvFirst.PrevInv();
		FirstOffs++;
	}
}

//==========================================================================
//
//  AdjustSpeed
//
//==========================================================================

void AdjustSpeed(out float forward, out float side)
{
	//  Adjust speed depending on class. Originaly this is done in input
	// code, but to simplify it, we do it here.
	//  Fighter moves faster, cleric at original speed, mage - slower,
	// pig - slower, but faster than mage
	switch (PClass)
	{
	case HexenDefs::PCLASS_FIGHTER:
		forward *= 1.18;
		side *= 1.3;
		break;

	case HexenDefs::PCLASS_CLERIC:
		break;

	case HexenDefs::PCLASS_MAGE:
		forward *= 0.9;
		side *= 0.9;
		break;

	case HexenDefs::PCLASS_PIG:
		forward *= 0.97;
		side *= 0.97;
		break;
	}
}

//==========================================================================
//
//  UseFlyPower
//
//==========================================================================

void UseFlyPower()
{
	PlayerUseArtifactType(ArtiFly);
}

//==========================================================================
//
//  PlayerImpulse
//
//==========================================================================

void PlayerImpulse()
{
	int impulse;
	int i;

	impulse = Impulse;
	Impulse = 0;
	Inventory Arti = none;

	/*---------------------------------------
	-	[CW] Actor Conditions Test      -
	---------------------------------------*/
	switch (impulse)
	{
	case KRPGDefs::IMPULSE__TEST_AC__CAST_ICE_DAMAGER:
		{
			ACDamageDealer ac = ACDamageDealer(KRPGActor(MO).CastCondition(ACDamageDealer, false, none, 1, 5.0));
			if (ac)
			{
				ac.DamageValue = 10;
				ac.DamageDelay = 1.5;
				ac.DamageType = 'Ice';
			}
		}
		break;
	case KRPGDefs::IMPULSE__TEST_AC__CAST_POISON_DAMAGER:
		{
			KRPGActor(MO).CastCondition(ACPoisoned, true, none, 1, 8.0);
		}
		break;
	case KRPGDefs::IMPULSE__TEST_AC__CAST_SPELL_MANA_BURN:
		{
			KRPGActor(MO).CastCondition(ACSpellManaBurn, true, none, 1, 20.0);
		}
		break;
	case KRPGDefs::IMPULSE__TEST_AC__CAST_SPELL_CONFUSION:
		{
			KRPGActor(MO).CastCondition(ACSpellConfusion, true, none, 1, 20.0);
		}
		break;
	}

	/*---------------------------------------
	-	[CW] Spells Test      -
	---------------------------------------*/

	switch (impulse)
	{
	case KRPGDefs::IMPULSE__TEST_SPELL__CAST_SPELL_GRAVITATOR:
		{
			SpellGravitator SG = SpellGravitator(Level.Spawn(SpellGravitator));
			SG.Level = 2;
			SG.LifeDuration = 10.0;
			SG.Origin = MO.Origin;
			SG.Activate();
		}
		break;
	case KRPGDefs::IMPULSE__TEST_SPELL__CAST_SPELL_GOLDEN_STORM:
		{
			SpellGoldenStorm SGS = SpellGoldenStorm(Level.Spawn(SpellGoldenStorm));
			SGS.Level = 2;
			SGS.LifeDuration = 20.0;
			SGS.Origin = MO.Origin;
			SGS.Target = EntityEx(MO);
			SGS.Activate();
		}
		break;
	}

	/*---------------------------------------
	-	[CW] Actor Tasks Test      -
	---------------------------------------*/
	switch (impulse)
	{
	case KRPGDefs::IMPULSE__TEST_AT__ORDER_EVERYONE_CANCELCURRENT:
		{
			IntelligentActor IA;
			foreach Level.AllThinkers(IntelligentActor, IA)
			{
				if (IA.bMonster)
				{
					IA.A_OrderCancelCurrent();
				}
			}
		}
	case KRPGDefs::IMPULSE__TEST_AT__ORDER_EVERYONE_STANDSTILL:
		{
			IntelligentActor IA;
			foreach Level.AllThinkers(IntelligentActor, IA)
			{
				if (IA.bMonster)
				{
					IA.A_OrderStandStill(false, 0, 5.0);
				}
			}
		}
		break;
	case KRPGDefs::IMPULSE__TEST_AT__ORDER_EVERYONE_MOVETO_PLAYER:
		{
			IntelligentActor IA;
			foreach Level.AllThinkers(IntelligentActor, IA)
			{
				if (IA.bMonster)
				{
					IA.A_OrderWalkTo(false, 0, 0.0, MO.Origin);
				}
			}
		}
		break;
	case KRPGDefs::IMPULSE__TEST_AT__ORDER_EVERYONE_ATTACKALL:
		{
			IntelligentActor IA;
			foreach Level.AllThinkers(IntelligentActor, IA)
			{
				if (IA.bMonster)
				{
					IA.A_OrderAttackAll(false, 0, 0.0);
				}
			}
		}
		break;
	};


	if (impulse <= 4)
	{
		ChangeWeapon(impulse);
	}
	else if (impulse == 13)
	{
		InventoryLeft();
	}
	else if (impulse == 14)
	{
		InventoryRight();
	}
	else if (impulse == 15)
	{
		Arti = InventoryUse();
	}
	else if (impulse == 16)
	{
		Actor(MO).Damage(none, none, 10000);
	}
	else if (impulse == 17)
	{
		PrevWeapon();
	}
	else if (impulse == 18)
	{
		NextWeapon();
	}
	// Hexen artifact hot keys
	if (!Arti)
	{
		if (impulse == 12 && (Health < MAXHEALTH))
		{
			Arti = EntityEx(MO).FindInventory(ArtiHealth);
		}
		else if (impulse == 10)
		{
			Arti = EntityEx(MO).FindInventory(ArtiPoisonBag);
		}
		else if (impulse == 9)
		{
			Arti = EntityEx(MO).FindInventory(ArtiBlastRadius);
		}
		else if (impulse == 8)
		{
			Arti = EntityEx(MO).FindInventory(ArtiTeleport);
		}
		else if (impulse == 7)
		{
			Arti = EntityEx(MO).FindInventory(ArtiTeleportOther);
		}
		else if (impulse == 6)
		{
			Arti = EntityEx(MO).FindInventory(ArtiPork);
		}
		else if (impulse == 5 &&
			!EntityEx(MO).FindInventory(PowerInvulnerable))
		{
			Arti = EntityEx(MO).FindInventory(ArtiInvulnerability);
		}
	}

	if (Arti)
	{
		// Use an artifact
		EntityEx(MO).UseInventory(Arti);
	}
}

//==========================================================================
//
//  MorphPlayerThink
//
//==========================================================================

void MorphPlayerThink()
{
	//FIXME this sucks
	if (ftoi(32.0 * MorphTime) & 15)
	{
		return;
	}
	if (!(MO.Velocity.x + MO.Velocity.y) && P_Random() < 64)
	{
		// Snout sniff
		Snout(ReadyWeapon).SnoutSniff();
		MO.PlaySound('PigActive1', CHAN_VOICE);	// snort
		return;
	}
	if (P_Random() < 48)
	{
		if (P_Random() < 128)
		{
			MO.PlaySound('PigActive1', CHAN_VOICE);
		}
		else
		{
			MO.PlaySound('PigActive2', CHAN_VOICE);
		}
	}
}

//==========================================================================
//
//  UndoPlayerMorph
//
//==========================================================================

bool UndoPlayerMorph()
{
	Actor fog;
	Actor A;

	MO.UnlinkFromWorld();
	switch (BaseClass)
	{
	case HexenDefs::PCLASS_FIGHTER:
		A = HexenLevelInfo(Level).Spawn(FighterPlayer, MO.Origin);
		break;
	case HexenDefs::PCLASS_CLERIC:
		A = HexenLevelInfo(Level).Spawn(ClericPlayer, MO.Origin);
		break;
	case HexenDefs::PCLASS_MAGE:
		A = HexenLevelInfo(Level).Spawn(MagePlayer, MO.Origin);
		break;
	default:
		Error("UndoPlayerMorph: Unknown player class %d", BaseClass);
	}
	if (!A.TestLocation())
	{
		// Didn't fit
		A.Destroy();
		MO.LinkToWorld();
		MorphTime = 2.0;
		return false;
	}
	MO.LinkToWorld();
	A.Angles = MO.Angles;
	A.Player = self;
	A.bIsPlayer = true;
	A.ReactionTime = 0.5;
	if (MO.bFly)
	{
		A.bFly = true;
		A.bNoGravity = true;
	}
	A.bShadow = EntityEx(MO).bShadow;
	A.bGhost = EntityEx(MO).bGhost;
	A.ObtainInventory(EntityEx(MO));
	MorphTime = 0.0;
	A.Health = MAXHEALTH;
	Health = A.Health;
	PClass = BaseClass;
	A.Translation = (Entity::TRANSL_Player << Entity::TRANSL_TYPE_SHIFT) +
		GetPlayerNum();
	PostMorphWeapon(Weapon(Actor(MO).Tracer));

	fog = HexenLevelInfo(Level).Spawn(TeleportFog, MO.Origin + vector(20.0 * cos(MO.Angles.yaw),
		20.0 * sin(MO.Angles.yaw), Actor::TELEFOGHEIGHT));
	fog.PlaySound('Teleport', CHAN_VOICE);

	MO.SetState(MO.FindState('FreeTargMobj'));
	MO = A;
	Camera = A;
	return true;
}

//==========================================================================
//
//  DeathPlayerTick
//
//  Fall on your face when dying. Decrease POV height to floor height.
//
//==========================================================================

void DeathPlayerTick(float deltaTime)
{
	int dir;
	float delta;
	int lookDelta;

	MovePsprites(deltaTime);
	if (MO.WaterLevel > 1)
	{
		MO.Velocity.z -= 60.0;	// drift towards bottom
	}

	onground = (MO.Origin.z <= MO.FloorZ);

	if (MO.Class == BloodySkull || MO.Class == IceChunk)
	{
		// Flying bloody skull or flying ice chunk
		ViewHeight = 6.0;
		DeltaViewHeight = 0.0;
		//player->damagecount = 20;
		if (onground)
		{
#ifdef FIXME
			if (lookdir < 60)
			{
				lookDelta = (60 - lookdir) / 8;
				if (lookDelta < 1 && (Level.Game.level->tictime & 1))
				{
					lookDelta = 1;
				}
				else if (lookDelta > 6)
				{
					lookDelta = 6;
				}
				lookdir += lookDelta;
			}
#endif
		}
	}
	else if (Actor(MO).DamageType != 'Ice')
	{
		// Fall to ground (if not frozen)
		DeltaViewHeight = 0.0;
		if (ViewHeight > 6.0)
		{
			ViewHeight -= 35.0 * deltaTime;
		}
		if (ViewHeight < 6.0)
		{
			ViewHeight = 6.0;
		}
#ifdef FIXME
		if (lookdir > 0)
		{
			lookdir -= 6;
		}
		else if (lookdir < 0)
		{
			lookdir += 6;
		}
		if (abs(lookdir) < 6)
		{
			lookdir = 0;
		}
#endif
	}
	CalcHeight(deltaTime);

	if (Attacker && Attacker != MO)
	{
		// Watch killer
		dir = EntityEx(MO).FaceActor(EntityEx(Attacker), delta);
		if (delta < 10.0)
		{
			// Looking at killer, so fade damage and poison counters
			if (DamageFlash)
			{
				DamageFlash -= deltaTime;
				if (DamageFlash <= 0.0)
					DamageFlash = 0.0;
			}
		}
		delta = delta / 8.0;
		if (delta > 5.0)
		{
			delta = 5.0;
		}
		if (dir)
		{
			// Turn clockwise
			MO.Angles.yaw += delta;
		}
		else
		{	// Turn counter clockwise
			MO.Angles.yaw -= delta;
		}
	}
	else if (DamageFlash)
	{
		DamageFlash -= deltaTime;
		if (DamageFlash <= 0.0)
			DamageFlash = 0.0;
	}

	if (Buttons & BT_USE)
	{
		InvPtr = none;
		InvFirst = none;
		PlayerState = PST_REBORN;
		Actor(MO).Special1 = PClass;
		if (Actor(MO).Special1 > 2)
		{
			Actor(MO).Special1 = 0;
		}
		// Let the mobj know the player has entered the reborn state.  Some
		// mobjs need to know when it's ok to remove themselves.
		Actor(MO).Special2 = 666;
	}
}

//==========================================================================
//
//  PlayerTick
//
//==========================================================================

void PlayerTick(float deltaTime)
{
	int newweapon;
	Actor speedA;

	if (bIsBot)
	{
		Bot.BotTick(deltaTime);
	}

	// Copy view angles
	if (MO == Camera)
	{
		MO.Angles = ViewAngles;
	}

	// fixme: do this in the cheat code
	if (Cheats & CF_NOCLIP)
	{
		MO.bColideWithThings = false;
		MO.bColideWithWorld = false;
	}
	else
	{
		MO.bColideWithThings = true;
		MO.bColideWithWorld = true;
	}

	if (Actor(MO).bJustAttacked)
	{
		ForwardMove = 100.0;
		SideMove = 0.0;
		Actor(MO).bJustAttacked = false;
	}

	if (bTotallyFrozen)
	{
		Buttons &= BT_USE;
		Impulse = 0;
		ViewAngles = MO.Angles;
		ForwardMove = 0.0;
		SideMove = 0.0;
		FlyMove = 0.0;
	}
	else if (bFrozen)
	{
		ForwardMove = 0.0;
		SideMove = 0.0;
		FlyMove = 0.0;
	}

	WorldTimer += deltaTime;
	InventoryTick(deltaTime);

	if (PlayerState == PST_DEAD)
	{
		DeathPlayerTick(deltaTime);
		return;
	}

	if (JumpTime)
	{
		JumpTime -= deltaTime;
		if (JumpTime <= 0.0)
			JumpTime = 0.0;
	}
	if (MorphTime)
	{
		MorphPlayerThink();
	}

	// KRPG
	// Duck
	float oldHeight = MO.Height;
	if (Buttons & BT_DUCK)
	{
		PlayerPawn(MO).BendDown(deltaTime);
	}
	else
	{
		PlayerPawn(MO).StandUp(deltaTime);
	}
	//if (Camera == MO)	??? CHECKME
	ViewHeightFixed += (MO.Height - oldHeight);

	//  Move around.
	//  ReactionTime is used to prevent movement for a bit after a teleport.
	if (Actor(MO).ReactionTime)
	{
		Actor(MO).ReactionTime -= deltaTime;
		if (Actor(MO).ReactionTime <= 0.0)
			Actor(MO).ReactionTime = 0.0;
		if (Actor(MO).bWaterJump)
			WaterJump();
	}
	else
	{
		if (MO.Height < PlayerPawn(MO).StandHeight)
		{
			ForwardMove /= 4.0;
			SideMove /= 7.0;
		}
		// KRPG
		if (KRPGActor(MO).RidePartner && KRPGActor(MO).bIsMountedOn && KRPGActor(MO).bRideControl)
			PlayerRide(deltaTime);
		else if (MO.WaterLevel >= 2)
			WaterMove(deltaTime);
		else
			MovePlayer(deltaTime);
		if (EntityEx(MO).FindInventory(PowerSpeed) &&
			!(Level.XLevel.TicTime & 1) && Length(MO.Velocity) > 12.0 * 35.0)
		{
			speedA = HexenLevelInfo(Level).Spawn(PlayerSpeed, MO.Origin);
			if (speedA)
			{
				speedA.Angles.yaw = MO.Angles.yaw;
				speedA.Translation = MO.Translation;
				speedA.Target = Actor(MO);
				speedA.Special1 = PClass;
				if (speedA.Special1 > 2)
				{
					speedA.Special1 = 0;
				}
				int Idx;
				switch (PClass)
				{
				case HexenDefs::PCLASS_FIGHTER:
					Idx = 0;
					break;
				case HexenDefs::PCLASS_CLERIC:
					Idx = 2;
					break;
				case HexenDefs::PCLASS_MAGE:
					Idx = 4;
					break;
				case HexenDefs::PCLASS_PIG:
					Idx = 6;
					break;
				}
				speedA.SetState(GetStatePlus(speedA.IdleState, Idx, true));
				speedA.FloorClip = MO.FloorClip;
#ifdef FIXME
				if (self == GPlayers[consoleplayer])
				{
					speedA.bHidden = true;
				}
#endif
			}
		}
	}

	CalcHeight(deltaTime);

	if (MO.Sector->special)
	{
		PlayerInSpecialSector(deltaTime);
	}
	PlayerOnSpecialFlat(Actor(MO).GetFloorType());
	PlayerInContents(deltaTime);

	if (MO.Velocity.z <= -35.0 * 35.0 && MO.Velocity.z >= -40.0 * 35.0 &&
		!MorphTime && !GetSoundPlayingInfo(MO, GetSoundID('*falling')))
	{
		MO.PlaySound('*falling', CHAN_VOICE);
	}

	// Check for weapon change.
	if (Impulse)
	{
		PlayerImpulse();
	}

	// check for use
	if (Buttons & BT_USE)
	{
		if (!bUseDown)
		{
			//[KoraxRPG]
			//P_UseLines();
			if (MO.IsA('PlayerPawn'))
				PlayerPawn(MO).TryUse(USERANGE, USETHINGRANGE, MorphTime > 0.0 ? 'PigActive1' : '*usefail');
			bUseDown = true;
		}
	}
	else
	{
		bUseDown = false;
	}

	// Morph counter
	if (MorphTime)
	{
		MorphTime -= deltaTime;
		if (MorphTime <= 0.0)
		{
			// Attempt to undo the pig
			MorphTime = 0.0;
			UndoPlayerMorph();
		}
	}

	// cycle psprites
	MovePsprites(deltaTime);

	// Counters

	if (DamageFlash)
	{
		DamageFlash -= deltaTime;
		if (DamageFlash <= 0.0)
			DamageFlash = 0.0;
	}

	if (BonusFlash)
	{
		BonusFlash -= deltaTime;
		if (BonusFlash <= 0.0)
			BonusFlash = 0.0;
	}

	if (HazardTime)
	{
		HazardTime -= deltaTime;
		if (HazardTime <= 0.0)
			HazardTime = 0.0;
		if (Level.XLevel.Time - LastHazardTime >= 32.0 / 35.0 &&
			HazardTime > 16.0)
		{
			LastHazardTime = Level.XLevel.Time;
			Actor(MO).Damage(none, none, 5);
		}
	}
}

//==========================================================================
//
//  PlayerRide
//
//==========================================================================

void PlayerRide(float deltaTime)
{
	float forward = ForwardMove;
	float side = SideMove;
	float vertical = (Buttons & BT_JUMP) ? deltaTime : 0.0;

	KRPGActor(MO).RidePartner.RideCommand(forward * deltaTime, side * deltaTime, vertical);
}

//==========================================================================
//
//  PaletteFlash
//
//  Sets the new palette based upon the current values of
// Player.DamageFlash and Player.BonusFlash.
//
//==========================================================================

void PaletteFlash()
{
	float r = 0.0;
	float g = 0.0;
	float b = 0.0;
	float a = 0.0;

	int CShiftPowerPositive, CShiftPowerNegative;

	if (MO.WaterLevel == 3)
	{
		switch (MO.WaterType)
		{
		case CONTENTS_WATER:
			AddBlend(r, g, b, a, RGBA(130, 80, 50, 128));
			break;

		case CONTENTS_LAVA:
			AddBlend(r, g, b, a, RGBA(255, 80, 0, 150));
			break;

		case CONTENTS_NUKAGE:
			AddBlend(r, g, b, a, RGBA(50, 255, 50, 150));
			break;

		case CONTENTS_SLIME:
			AddBlend(r, g, b, a, RGBA(0, 25, 5, 150));
			break;

		case CONTENTS_HELLSLIME:
			AddBlend(r, g, b, a, RGBA(255, 80, 0, 150));
			break;

		case CONTENTS_BLOOD:
			AddBlend(r, g, b, a, RGBA(160, 16, 16, 150));
			break;

		case CONTENTS_SLUDGE:
			AddBlend(r, g, b, a, RGBA(128, 160, 128, 150));
			break;

		case CONTENTS_HAZARD:
			AddBlend(r, g, b, a, RGBA(128, 160, 128, 128));
			break;
		}
	}

	if (EntityEx(MO).DamageType == 'Ice')
	{
		// Frozen player
		AddBlend(r, g, b, a, RGBA(2, 2, 255, 113));
	}
	else
	{
		if (DamageFlash)
		{
			int Amount = ftoi(114.0 * DamageFlash);
			if (Amount >= 228)
			{
				Amount = 228;
			}
			// KRPG
			// [CW] TODO: need extra parameter in DoSpecialDamage to use this
			if (Actor(MO).DamageType == 'Ice')
				AddBlend(r, g, b, a, RGBA(2, 2, 255, Amount));
			else
				AddBlend(r, g, b, a, RGBA(255, 0, 0, Amount));
		}

		if (BonusFlash)
		{
			int Amount = ftoi(256.0 * BonusFlash);
			if (Amount >= 128)
			{
				Amount = 128;
			}
			AddBlend(r, g, b, a, RGBA(215, 186, 68, Amount));
		}

		//
		// KRPG
		//
		/*if (PoisonCount)
		{
			int Amount = PoisonCount * 160 / 32;
			if (Amount >= 160)
			{
				Amount = 160;
			}
			AddBlend(r, g, b, a, RGBA(56, 118, 46, Amount));
		}*/

		//FIXME add hazard flash.
		if (HazardTime > 16.0 || ftoi(4.0 * HazardTime) & 1)
		{
			AddBlend(r, g, b, a, RGBA(0, 255, 0, 32));
		}
	}

	Inventory Item;
	for (Item = EntityEx(MO).Inventory; Item; Item = Item.Inventory)
	{
		int Blend = Item.GetBlend();
		if (Blend)
		{
			AddBlend(r, g, b, a, Blend);
		}
	}

	//
	// KRPG
	//
	KRPGActor ka = KRPGActor(MO);
	if (ka.Conditions.Num/*KRPGActor(MO).Conditions && KRPGActor(MO).Conditions.refHead*/)
	{
		//LinkedReferer acref = LinkedReferer(KRPGActor(MO).Conditions.refHead);
		//while (acref)
		int i;
		for (i = 0; i < ka.Conditions.Num; i++)
		{
			ActorCondition ac = ka.Conditions[i];//ActorCondition(acref.refObject);
			if (ac)
			{
				if (ac.bIsNegative)
				{
					if (!MO.bCorpse)
						ac.MakeCShift(&CShiftPowerNegative);
				}
				else
					ac.MakeCShift(&CShiftPowerPositive);
			}
			//acref = LinkedReferer(acref.refNext);
		};
	}

	if (r > 1.0)
	{
		r = 1.0;
	}
	if (g > 1.0)
	{
		g = 1.0;
	}
	if (b > 1.0)
	{
		b = 1.0;
	}
	CShift = RGBA(ftoi(r * 255.0), ftoi(g * 255.0), ftoi(b * 255.0),
		ftoi(a * 255.0));
	//
	// KRPG
	CShift |= CShiftPowerPositive;
	CShift |= CShiftPowerNegative;
	// [CW] OMG, what a mess :)
}

//==========================================================================
//
//  SetViewPos
//
//==========================================================================

void SetViewPos()
{
	int		i;

	//	Just in a case camera entity has been destroyed
	if (!Camera)
	{
		Camera = MO;
	}

	if (MO != Camera)
	{
		ViewOrg = Camera.Origin;
		ViewAngles = Camera.Angles;
	}
	else
	{
		ViewOrg.x = MO.Origin.x;
		ViewOrg.y = MO.Origin.y;

		if (LocalQuakeHappening)
		{
			float intensity;

			intensity = itof(LocalQuakeHappening);
			ViewOrg.x += (Random() - 0.5) * (intensity * 4.0);
			ViewOrg.y += (Random() - 0.5) * (intensity * 4.0);
		}

		ViewAngles = MO.Angles;
	}

	PaletteFlash();

	ClientSetViewOrg(ViewOrg.x, ViewOrg.y, ViewOrg.z);
}

//==========================================================================
//
//  PlayerUseArtifact
//
//==========================================================================

void PlayerUseArtifactType(class<Inventory> arti)
{
	Inventory Item = EntityEx(MO).FindInventory(arti);
	if (Item)
	{
		EntityEx(MO).UseInventory(Item);
	}
}

//==========================================================================
//
//  PlayerNextArtifact
//
//==========================================================================

void PlayerNextArtifact()
{
	if (!InvPtr)
	{
		return;
	}
	Inventory NewPtr = InvPtr.PrevInv();
	if (!NewPtr)
	{
		NewPtr = InvPtr;
		while (NewPtr.NextInv())
		{
			NewPtr = NewPtr.NextInv();
		}
	}
	InvPtr = NewPtr;
	AdjustInvFirst();
}

//==========================================================================
//
//  AdjustPlayerAngle
//
//==========================================================================

void AdjustPlayerAngle(EntityEx AimTarget)
{
	float angle;
	float difference;

	angle = atan2(AimTarget.Origin.y - MO.Origin.y,
		AimTarget.Origin.x - MO.Origin.x);
	difference = AngleMod180(angle - MO.Angles.yaw);
	if (fabs(difference) > 5.0)
	{
		MO.Angles.yaw += difference > 0.0 ? 5.0 : -5.0;
	}
	else
	{
		MO.Angles.yaw = angle;
	}
	bFixAngle = true;
}

//==========================================================================
//
//  ActivateMorphWeapon
//
//==========================================================================

void ActivateMorphWeapon()
{
	ViewStates[ps_weapon].SY = Weapon::WEAPONTOP;
	Weapon Wpn = Level.Spawn(Snout);
	if (!Wpn.TryPickup(EntityEx(MO)))
	{
		Wpn.Destroy();
	}
	SetWeapon(Weapon(EntityEx(MO).FindInventory(Snout)));	// Snout is the first weapon
	SetViewState(ps_weapon, ReadyWeapon.GetReadyState());
}

//==========================================================================
//
//  PostMorphWeapon
//
//==========================================================================

void PostMorphWeapon(Weapon weapon)
{
	ReadyWeapon.Destroy();
	SetWeapon(weapon);
	ViewStates[ps_weapon].SY = Weapon::WEAPONBOTTOM;
	SetViewState(ps_weapon, ReadyWeapon.GetUpState());
}

//==========================================================================
//
//  ParticleEffectEx
//
//==========================================================================

void ParticleEffectEx(int count, int type1, int type2, TVec origin, TVec ornd,
	TVec velocity, TVec vrnd, TVec acceleration, float grav, int colour, float duration, float ramp,
	int Pattern)
{
	KRPGLevelInfo(Level).ParticleEffectEx(count, type1, type2, origin, ornd, velocity, vrnd, acceleration,
				grav, colour, duration, ramp, Pattern);
}

//==========================================================================
//
//  Cheat_God
//
//==========================================================================

void Cheat_God()
{
	Cheats ^= CF_GODMODE;
	if (Cheats & CF_GODMODE)
	{
		cprint("GOD MODE ON");
	}
	else
	{
		cprint("GOD MODE OFF");
	}
}

//==========================================================================
//
//  Cheat_NoClip
//
//==========================================================================

void Cheat_NoClip()
{
	Cheats ^= CF_NOCLIP;
	if (Cheats & CF_NOCLIP)
	{
		cprint("NO CLIPPING ON");
	}
	else
	{
		cprint("NO CLIPPING OFF");
	}
}

//==========================================================================
//
//  Cheat_Gimme
//
//==========================================================================

void Cheat_Gimme()
{
	class<Inventory>			Cls;
	class<Weapon>				WpnCls;
	class<FourthWeaponPiece>	PieceCls;
	Inventory					Inv;

	if (Cmd_CheckParm("weapons"))
	{
		int i;

		HexenArmor HArmor = HexenArmor(EntityEx(MO).FindInventory(
			HexenArmor));
		for (i = 0; i < 4; i++)
		{
			HArmor.Slots[i] = HArmor.SlotsIncrement[i];
		}
		foreach AllClasses(Weapon, WpnCls)
		{
			if (!FindClassState(WpnCls, 'Ready'))
			{
				//	Abstract class.
				continue;
			}
			if (!AreStateSpritesPresent(FindClassState(WpnCls, 'Ready')))
			{
				//	Weapon has no sprites, must be from different game.
				continue;
			}
			Weapon Wpn = Level.Spawn(WpnCls,,,, false);
			Wpn.AmmoGive1 = 0;
			Wpn.AmmoGive2 = 0;
			if (!Wpn.TryPickup(EntityEx(MO)))
			{
				Wpn.Destroy();
			}
		}
		foreach AllClasses(Ammo, Cls)
		{
			//	Only direct descendants.
			if (GetClassParent(Cls) != Ammo)
			{
				continue;
			}
			Inventory AmmoItem = EntityEx(MO).FindInventory(Cls);
			if (!AmmoItem)
			{
				AmmoItem = Level.Spawn(Cls,,,, false);
				if (!AmmoItem.TryPickup(EntityEx(MO)))
				{
					AmmoItem.Destroy();
					AmmoItem = none;
				}
			}
			if (AmmoItem)
			{
				AmmoItem.Amount = AmmoItem.MaxAmount;
			}
		}
		foreach AllClasses(FourthWeaponPiece, PieceCls)
		{
			if (!FindClassState(PieceCls, 'Spawn'))
			{
				//	Abstract class.
				continue;
			}
			if (PieceCls.default.PieceClass != PClass)
			{
				//	Wrong class.
				continue;
			}
			FourthWeaponHolder Hold = FourthWeaponHolder(
				EntityEx(MO).FindInventory(FourthWeaponHolder));
			if (!Hold)
			{
				Hold = Level.Spawn(FourthWeaponHolder,,,, false);
				Hold.AttachToOwner(EntityEx(MO));
			}
			Hold.PieceMask = 7;
		}
		cprint("ALL WEAPONS");
	}
	if (Cmd_CheckParm("health"))
	{
		if (MorphTime)
		{
			MO.Health = MAXMORPHHEALTH;
			Health = MO.Health;
		}
		else
		{
			MO.Health = MAXHEALTH;
			Health = MO.Health;
		}
		cprint("FULL HEALTH");
	}
	if (Cmd_CheckParm("keys"))
	{
		foreach AllClasses(Key, Cls)
		{
			if (!FindClassState(Cls, 'Spawn'))
			{
				//	Abstract class
				continue;
			}
			EntityEx(MO).GiveInventoryType(Cls);
		}
		cprint("ALL KEYS");
	}
	if (Cmd_CheckParm("artifacts"))
	{
		foreach AllClasses(Inventory, Cls)
		{
			int j;

			if (!Cls.default.bInvBar)
			{
				//	Not an inventory item.
				continue;
			}
			if (!FindClassState(Cls, 'Spawn'))
			{
				//	Abstract class
				continue;
			}
			if (ClassIsChildOf(Cls, PuzzleItem))
			{
				//	Not puzzle items.
				continue;
			}
			Inv = Level.Spawn(Cls,,,, false);
			Inv.Amount = Inv.MaxAmount;
			if (!Inv.TryPickup(EntityEx(MO)))
			{
				Inv.Destroy();
			}
		}
		cprint("ALL ARTIFACTS");
	}
	if (Cmd_CheckParm("puzzles"))
	{
		foreach AllClasses(PuzzleItem, Cls)
		{
			if (!FindClassState(Cls, 'Spawn'))
			{
				//	Abstract class
				continue;
			}
			EntityEx(MO).GiveInventoryType(Cls);
		}
		cprint("ALL ARTIFACTS");
	}
}

//==========================================================================
//
//  P_Massacre
//
//  Kills all monsters.
//
//==========================================================================

int P_Massacre()
{
	int count;
	Actor mo;

	count = 0;
	foreach MO.AllThinkers(Actor, mo)
	{
		if (mo.bMonster && mo.Health > 0)
		{
			mo.bNonShootable = false;
			mo.bInvulnerable = false;
			mo.bShootable = true;
			mo.Damage(none, none, 10000);
			count++;
		}
	}
	return count;
}

//==========================================================================
//
//  Cheat_KillAll
//
//==========================================================================

void Cheat_KillAll()
{
	cprint("%d MONSTERS KILLED", P_Massacre());
}

//==========================================================================
//
//  Cheat_Morph
//
//==========================================================================

void Cheat_Morph()
{
	if (MorphTime)
	{
		UndoPlayerMorph();
	}
	else
	{
		PorkFX Tmp = Level.Spawn(PorkFX);
		Tmp.MorphPlayer(Actor(MO));
		Tmp.Destroy();
	}
	cprint("SQUEAL!!");
}

//==========================================================================
//
//  Cheat_NoWeapons
//
//==========================================================================

void Cheat_NoWeapons()
{
	if (MorphTime)
	{
		return;
	}
	//	Find weakest weapon.
	Inventory Item;
	Weapon Weakest = none;
	for (Item = EntityEx(MO).Inventory; Item; Item = Item.Inventory)
	{
		if (Weapon(Item) && (!Weakest ||
			Weakest.SelectionOrder < Weapon(Item).SelectionOrder))
		{
			Weakest = Weapon(Item);
		}
	}
	//	Removed all others.
	for (Item = EntityEx(MO).Inventory; Item; )
	{
		Inventory Next = Item.Inventory;
		if ((Weapon(Item) && Item != Weakest) || FourthWeaponHolder(Item))
		{
			Item.Destroy();
		}
		Item = Next;
	}
	SetWeapon(Weakest);
	PendingWeapon = Weakest;
	cprint("CHEATER - YOU DON'T DESERVE WEAPONS");
}

//==========================================================================
//
//  Cheat_Class
//
//==========================================================================

void Cheat_Class()
{
	int i;
	int pclass;

	if (MorphTime)
	{
		// don't change class if the player is morphed
		return;
	}
	if (Cmd_CheckParm("fighter"))
		pclass = HexenDefs::PCLASS_FIGHTER;
	else if (Cmd_CheckParm("cleric"))
		pclass = HexenDefs::PCLASS_CLERIC;
	else if (Cmd_CheckParm("mage"))
		pclass = HexenDefs::PCLASS_MAGE;
	else
	{
		cprint("INVALID PLAYER CLASS");
		return;
	}
	//FIXME it doesn't work like this.
	PClass = pclass;
	HexenArmor HArmor = HexenArmor(EntityEx(MO).FindInventory(HexenArmor));
	for (i = 0; i < 4; i++)
	{
		HArmor.Slots[i] = 0.0;
	}
	BaseClass = pclass;
	//PostMorphWeapon(HexenDefs::WP_FIRST);
	SetCvar('class', pclass);
	SB_Start();
}

//==========================================================================
//
//  SetFOV
//
//==========================================================================

void SetFOV(int FOV)
{
	SetCvar('FOV', FOV);
}

//==========================================================================
//
//  IsWeaponAlwaysExtremeDeath
//
//==========================================================================

bool IsWeaponAlwaysExtremeDeath()
{
	// Always extreme death from fourth weapon
	return ReadyWeapon.bExtremeDeath;
}

//==========================================================================
//
//  GetInvulnerabilityMode
//
//==========================================================================

name GetInvulnerabilityMode()
{
	switch (PClass)
	{
	case HexenDefs::PCLASS_CLERIC:
		return 'Ghost';
	case HexenDefs::PCLASS_MAGE:
		return 'Reflective';
	}
	return '';
}

//==========================================================================
//
//  ClientConversation
//
//==========================================================================

void ClientConversation(string Speaker, string SpeakingTo)
{
	MainGameInfo(Level.Game).GameConParser.CleanScene = ConCleanScene;
	MainGameInfo(Level.Game).GameConParser.SetPersonInfo = ConSetPersonInfo;
	MainGameInfo(Level.Game).GameConParser.PlayCue = ConPlayCue;
	MainGameInfo(Level.Game).GameConParser.CleanChoices = ConCleanChoices;
	MainGameInfo(Level.Game).GameConParser.AddChoice = ConAddChoice;
	MainGameInfo(Level.Game).GameConParser.Suspend = ConSuspend;
	MainGameInfo(Level.Game).GameConParser.Wait = ConWait;
	MainGameInfo(Level.Game).GameConParser.CloseScene = ConCloseScene;

	MainGameInfo(Level.Game).GameConParser.PlayerName = PlayerName;

	KRPGClientGameBase(ClGame).ConversationStart();

	MainGameInfo(Level.Game).GameConParser.Begin(Speaker, SpeakingTo);
}

//==========================================================================
//
//  ConCleanScene
//
//==========================================================================

void ConCleanScene()
{
	KRPGClientGameBase(ClGame).ConCleanScene();
}

//==========================================================================
//
//  ConSetPersonInfo
//
//==========================================================================

void ConSetPersonInfo(string Name, name Pic, name Flat)
{
	KRPGClientGameBase(ClGame).ConSetPersonInfo(Name, Pic, Flat);
}

//==========================================================================
//
//  ConPlayCue
//
//==========================================================================

void ConPlayCue(string Who, string ToWhom, string Cue, name Voice)
{
	KRPGClientGameBase(ClGame).ConPlayCue(Who, ToWhom, Cue, Voice);
}

//==========================================================================
//
//  ConCleanChoices
//
//==========================================================================

void ConCleanChoices()
{
	KRPGClientGameBase(ClGame).ConCleanChoices();
}

//==========================================================================
//
//  ConAddChoice
//
//==========================================================================

void ConAddChoice(string Text, string Name, int Index)
{
	KRPGClientGameBase(ClGame).ConAddChoice(Text, Name, Index);
}

//==========================================================================
//
//  ConSuspend
//
//==========================================================================

void ConSuspend()
{
	KRPGClientGameBase(ClGame).ConSuspend();
}

//==========================================================================
//
//  ConWait
//
//==========================================================================

void ConWait()
{
}

//==========================================================================
//
//  ConCloseScene
//
//==========================================================================

void ConCloseScene()
{
	KRPGClientGameBase(ClGame).ConversationEnd();
}

//==========================================================================
//
//  ConChoice
//
//==========================================================================

void ConChoice(string Name, int Index)
{
	MainGameInfo(Level.Game).GameConParser.ExecuteChoice(Name, Index);
}

//==========================================================================
//
//  ConContinue
//
//==========================================================================

void ConContinue()
{
	MainGameInfo(Level.Game).GameConParser.Continue();
}

//==========================================================================
//
//	KilledByPlayer
//
//==========================================================================

void KilledByPlayer(EntityEx Victim)
{
	// Check for frag changes
	if (Victim.bIsPlayer)
	{
		if (bIsBot)
		{
			Bot.Killed(Victim);
		}

		if (Victim.Player.bIsBot)
		{
			Player(Victim.Player).Bot.Died(EntityEx(MO));
		}

		if (Victim == MO)
		{
			// Self-frag
			Frags--;
		}
		else
		{
			Frags++;
		}
	}
}

defaultproperties
{
	ViewHeightFixed = VIEWHEIGHT;
}
