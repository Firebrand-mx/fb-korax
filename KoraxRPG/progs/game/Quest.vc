//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ## ###  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**				   ######  #####   ######
//**	               ##   ## ##  ## ##    ##
//**	     		   ##   ## ##  ## ##   
//**	               #####   #####  ##  ####
//**	     		   ## ###  ##     ###   ##
//**	     		   ##  ### ##      ######
//**
//**    $Id$
//**
//**    Copyright (C) 2004-2008 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Quest : Object;

enum
{
	qvar_type_boolean,
	qvar_type_integer
};

struct questvar_t
{
	string	sname;
	int		id;
	int		type;
	int		value;
};

struct coniteminfo_t
{
	name					conLump;		// con lump this conversation item is in
	int						conLumpIndex;	// conversation item order in the con lump

	string					scriptName;		// conitem name
	int						scriptId;		// index used in map scripts
};

struct personinfo_t
{
	name					persLump;		// person script this person is declared in
	int						persLmpIndex;	// person order in the person script
	array<coniteminfo_t>	cons;			// registered conversation items

	string					scriptName;	// person's name
	int						scriptId;	// index used in map scripts
	array<questvar_t>		vars;		// local person's variables
	int						conId;		// active conversation item
};

enum
{
	quest_state_hidden,
	quest_state_active,
	quest_state_completed,
	quest_state_failed
};

struct questinfo_t
{
	// ?
	name					questLump;
	int						questLumpIndex;

	string					scriptName;
	int						scriptId;

	string					title;
	array<string>			texts;
	array<questvar_t>		vars;		// quest variables
	int						position;
	int						qstate;
};

defaultproperties
{
}
