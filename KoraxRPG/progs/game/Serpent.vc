//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Serpent : Pawn
	__mobjinfo__(121)
	__scriptid__(6);

//==========================================================================
//
//	A_SerpentChase
//
//==========================================================================

bool A_SerpentChase(bool Evade, state AIdleState, state AMeleeState,
				  state AMissileState, bool PlayActive)
{
	//DoChase(false, MeleeState, none, true, true);
	return A_DoMove(Evade, false/*FastChase*/, AIdleState, AMeleeState, none,
		true/*NightmareFast*/, PlayActive);
}

//==========================================================================
//
//	A_SerpentChaseAI
//
//==========================================================================

final void A_SerpentChaseAI()
{
	DoMove = A_SerpentChase;
	A_ChaseAI();
}

//==========================================================================
//
//  A_SerpentHumpDecide
//
//  Decided whether to hump up or to missile attack
//
//==========================================================================

final void A_SerpentHumpDecide()
{
	if (SerpentLeader(self))
	{
		if (P_Random() > 30)
		{
			return;
		}
		if (P_Random() < 40)
		{
			// Missile attack
			SetState(MeleeState);
			return;
		}
		if (!CheckMeleeRange())
		{
			// The hump shouldn't occur when within melee range
			if (P_Random() < 128)
			{
				SetState(MeleeState);
			}
			else
			{
				SetState(FindState('Hump'));
				PlaySound('SerpentActive', CHAN_VOICE);
			}
		}
	}
	else
	{
		if (P_Random() > 3)
		{
			return;
		}
		if (!CheckMeleeRange())
		{
			// The hump shouldn't occur when within melee range
			SetState(FindState('Hump'));
			PlaySound('SerpentActive', CHAN_VOICE);
		}
	}
}

//==========================================================================
//
//	A_SerpentUnHide
//
//==========================================================================

final void A_SerpentUnHide()
{
	bInvisible = false;
	FloorClip = 24.0;
}

//==========================================================================
//
//	A_SerpentRaiseHump
// 
//	Raises the hump above the surface by raising the FloorClip level
//
//==========================================================================

final void A_SerpentRaiseHump()
{
	FloorClip -= 4.0;
}

//==========================================================================
//
//	A_SerpentLowerHump
// 
//==========================================================================

final void A_SerpentLowerHump()
{
	FloorClip += 4.0;
}

//==========================================================================
//
//	A_SerpentHide
//
//==========================================================================

final void A_SerpentHide()
{
	bInvisible = true;
	FloorClip = 0.0;
}

//==========================================================================
//
//	A_SerpentBirthScream
//
//==========================================================================

final void A_SerpentBirthScream()
{
	PlaySound('SerpentBirth', CHAN_VOICE);
}

//==========================================================================
//
//	A_SetShootable
//
//==========================================================================

final void A_SetShootable()
{
	bNonShootable = false;
	bShootable = true;
}

//==========================================================================
//
//  A_SerpentCheckForAttack
//
//==========================================================================

final void A_SerpentCheckForAttack()
{
	if (!Target)
	{
		return;
	}
	if (SerpentLeader(self) && !CheckMeleeRange())
	{
		SetState(FindState('Attack'));
		return;
	}
	if (CheckMeleeRange2())
	{
		SetState(FindState('Walk'));
	}
	else if (CheckMeleeRange())
	{
		if (P_Random() < 32)
		{
			SetState(FindState('Walk'));
		}
		else
		{
			SetState(FindState('Attack'));
		}
	}
}

//==========================================================================
//
//	A_UnSetShootable
//
//==========================================================================

final void A_UnSetShootable()
{
	bNonShootable = true;
	bShootable = false;
}

//==========================================================================
//
//	A_SerpentDiveSound
//
//==========================================================================

final void A_SerpentDiveSound()
{
	PlaySound('SerpentActive', CHAN_VOICE);
}

//==========================================================================
//
//  A_SerpentWalk
//
//  Similar to A_Chase, only has a hardcoded entering of meleestate.
//
//==========================================================================

bool A_SerpentWalk(bool Evade, state AIdleState, state AMeleeState,
				  state AMissileState, bool PlayActive)
{
	//DoChase(false, FindState('Attack'), none, true, false);
	return A_DoMove(Evade, false/*FastChase*/, AIdleState, FindState('Attack'), none,
		true/*NightmareFast*/, false/*PlayActive*/);
}

//==========================================================================
//
//	A_SerpentWalkAI
//
//==========================================================================

final void A_SerpentWalkAI()
{
	DoMove = A_SerpentWalk;
	A_ChaseAI();
}

//==========================================================================
//
//  A_SerpentChooseAttack
//
//==========================================================================

final void A_SerpentChooseAttack()
{
	if (SerpentLeader(self))
	{
		if (!Target || CheckMeleeRange())
		{
			return;
		}
		SetState(MissileState);
	}
}

//==========================================================================
//
//	A_SerpentMeleeAttack
//
//==========================================================================

final void A_SerpentMeleeAttack()
{
	if (!Target)
	{
		return;
	}
	if (CheckMeleeRange())
	{
		Target.Damage(self, self, HITDICE(5));
		PlaySound('SerpentMeleeHit', CHAN_WEAPON);
	}
	if (P_Random() < 96)
	{
		A_SerpentCheckForAttack();
	}
}

//==========================================================================
//
//	A_SerpentHeadPop
//
//==========================================================================

final void A_SerpentHeadPop()
{
	Actor A = Spawn(SerpentHead, Origin + vector(0.0, 0.0, 45.0));
	if (A)
	{
		A.Translation = Translation;
	}
}

//==========================================================================
//
//	A_SerpentSpawnGibs
//
//==========================================================================

final void A_SerpentSpawnGibs()
{
	Actor A;

	A = Spawn(SerpentGib1, vector(Origin.x + (Random() - 0.5) * 16.0,
		Origin.y + (Random() - 0.5) * 16.0, FloorZ + 1.0));
	if (A)
	{
		A.Velocity.x = (Random() - 0.5) / 4.0 * 35.0;
		A.Velocity.y = (Random() - 0.5) / 4.0 * 35.0;
		A.FloorClip = 6.0;
		A.Translation = Translation;
	}
	A = Spawn(SerpentGib2, vector(Origin.x + (Random() - 0.5) * 16.0,
		Origin.y + (Random() - 0.5) * 16.0, FloorZ + 1.0));
	if (A)
	{
		A.Velocity.x = (Random() - 0.5) / 4.0 * 35.0;
		A.Velocity.y = (Random() - 0.5) / 4.0 * 35.0;
		A.FloorClip = 6.0;
		A.Translation = Translation;
	}
	A = Spawn(SerpentGib3, vector(Origin.x + (Random() - 0.5) * 16.0,
		Origin.y + (Random() - 0.5) * 16.0, FloorZ + 1.0));
	if (A)
	{
		A.Velocity.x = (Random() - 0.5) / 4.0 * 35.0;
		A.Velocity.y = (Random() - 0.5) / 4.0 * 35.0;
		A.FloorClip = 6.0;
		A.Translation = Translation;
	}
}

states
{
Spawn:
	SSPT H 10 A_LookAI
	Loop
See:
	SSPT HH 1 A_SerpentChaseAI
	SSPT H 2 A_SerpentHumpDecide
	Loop
Hump:
	SSPT H 3 A_SerpentUnHide
	SSPT EFGEF 3 A_SerpentRaiseHump
	SSPT GEF 3
	SSPT GEFGE 3 A_SerpentLowerHump
	SSPT F 3 A_SerpentHide
	Goto See
Melee:
	SSPT A 1 A_UnHideThing
	SSPT A 1 A_SerpentBirthScream
	SSPT B 3 A_SetShootable
	SSPT C 3
	SSPT D 4 A_SerpentCheckForAttack
	SSDV ABC 4
	SSDV D 4 A_UnSetShootable
	SSDV E 3 A_SerpentDiveSound
	SSDV F 3
	SSDV GH 4
	SSDV I 3
	SSDV J 3 A_SerpentHide
	Goto See
Walk:
	SSPT IJI 5 A_SerpentWalkAI
	SSPT J 5 A_SerpentCheckForAttack
	Goto Melee+5
Pain:
	SSPT L 5
	SSPT L 5 A_Pain
	Goto Melee+5
Attack:
	SSPT K 6 A_FaceTarget
	SSPT L 5 A_SerpentChooseAttack
	SSPT N 5 A_SerpentMeleeAttack
	Goto Melee+5
Death:
	SSPT O 4
	SSPT P 4 A_Scream
	SSPT Q 4 A_NoBlocking
	SSPT RSTUVWXYZ 4
	Stop
XDeath:
	SSXD A 4
	SSXD B 4 A_SerpentHeadPop
	SSXD C 4 A_NoBlocking
	SSXD DE 4
	SSXD FG 3
	SSXD H 3 A_SerpentSpawnGibs
	Stop
Ice:
	SSPT "[" 5 A_FreezeDeath
	SSPT "[" 1 A_FreezeDeathChunks
	Wait
}

defaultproperties
{
	Health = 90;
	GibsHealth = -45;
	Radius = 32.0;
	Height = 70.0;
	Mass = 99999.0;
	Speed = 12.0 * 35.0;
	PainChance = 0.375;
	bInvisible = true;
	bNoBlood = true;
	bShootable = false;
	bFloorClip = false;
	bTelestomp = false;
	bActivatePushWall = false;
	bCantLeaveFloorpic = true;
	bNonShootable = true;
	bDontBlast = true;
	SightSound = 'SerpentSight';
	AttackSound = 'SerpentAttack';
	PainSound = 'SerpentPain';
	DeathSound = 'SerpentDeath';
	Obituary = "$ob_serpent";
	HitObituary = "$ob_serpenthit";

	bZAnchored = true;

	bLiving = true;
}
