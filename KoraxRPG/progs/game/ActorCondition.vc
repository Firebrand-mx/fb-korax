//
// put Head and Tail to Actor class
//


class ActorCondition : LinkedObject;


// notified events
enum
{
	notify_RecepientDead,	// Actor = killer, param - unused
	notify_ManaUsed			// Actor - unused, param = mana amount
};


Actor	ARecepient;
Actor	AInstigator;

string  CastMessage;
name	CastSound;

bool	bIsNegative;
bool	bIsMagic;

int		Level;

float	LifeTime;
float	LifeDuration;

float	MaxAccumulatedLifePerLevel;

enum
{
	CSHIFT_OP_NONE,
	CSHIFT_OP_SET,
	CSHIFT_OP_OR,
	CSHIFT_OP_AND
};

int		CShiftOperation;		// Use OR operation when modifying player's CShift
int		CShift;					// CShift value to set when active
bool	bCShiftDecreasePermanent;



//==========================================================================
//
//	Tick
//
//==========================================================================

void Tick(float deltaTime)
{
	if (!ARecepient)
	{
		Error("ActorCondition::Tick : no reference to Recepient actor, bad algorythm?");
		Dispell();
		return;
	}

	if (LifeDuration > 0.0)
	{
		LifeTime -= deltaTime;
		if (LifeTime <= 0.0)
		{
			Dispell();
			return;
		}
	}


	Do(deltaTime);
}

//==========================================================================
//
//	Do
//
//==========================================================================

void Do(float deltaTime)
{
}

//==========================================================================
//
//	MakeCShift
//
//==========================================================================

void MakeCShift(int * pCShift)
{
	int Amount;

	if (bCShiftDecreasePermanent)
		Amount = ftoi(LifeTime / LifeDuration * 256.0);
	else if (LifeTime / LifeDuration <= 0.25)
		Amount = ftoi((LifeTime / (LifeDuration * 0.25) * 256.0));
	else
		Amount = 0xFF;

	if (Amount > ((CShift >> 24) & 0x000000FF))
		Amount = (CShift >> 24) & 0x000000FF;
	Amount <<= 24;
	Amount |= CShift & 0x00FFFFFF;

	if (CShiftOperation != CSHIFT_OP_NONE)
	{
		switch (CShiftOperation)
		{
		case CSHIFT_OP_SET: *pCShift = Amount; break;
		case CSHIFT_OP_OR: *pCShift |= Amount; break;
		case CSHIFT_OP_AND: *pCShift &= Amount; break;
		}
	}
}

//==========================================================================
//
//	Notify
//
//==========================================================================

void Notify(int notification, Actor A, int param)
{
	switch (notification)
	{
	// Common AC behavior is to dispell when recepient dies
	case notify_RecepientDead:
		Dispell();
		break;
	}
}

//==========================================================================
//
//	Activate
//
//==========================================================================

void Activate()
{
	LifeTime = LifeDuration;
}

//==========================================================================
//
//	Deactivate
//
//==========================================================================

void Deactivate()
{
}

//==========================================================================
//
//	Dispell
//
//==========================================================================

void Dispell()
{
	if (!ARecepient)
		Error("ActorCondition::Dispell : no reference to Recepient actor, bad algorythm?");

	Deactivate();
	UnlinkFromList();
	Destroy();
}


defaultproperties
{
	CastMessage = "";

	bIsNegative = false;
	bIsMagic = false;

	LifeTime = 0.0;
	LifeDuration = 0.0;

	MaxAccumulatedLifePerLevel = -1.0;

	CShiftOperation = CSHIFT_OP_NONE;
	CShift = 0;
	bCShiftDecreasePermanent = false;
}
