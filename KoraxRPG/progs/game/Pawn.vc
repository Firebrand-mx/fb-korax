//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id: Pawn.vc 2946 2007-12-10 23:45:07Z dj_jl $
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Pawn : IntelligentActor
	abstract;


bool			bCanRide;		// pawn is allowed to ride saddlehorses


//============================================================================
//
//  IsNotAttackingMaster
//
//============================================================================

bool IsNotAttackingMaster(EntityEx Other)
{
	return Class == MinotaurFriend && Other.Class == MinotaurFriend &&
		Other.Target != Tracer;
}

//==========================================================================
//
//	IsMaster
//
//==========================================================================

bool IsMaster(EntityEx Other)
{
	return Class == MinotaurFriend && Tracer == Other;
}

//============================================================================
//
//	A_FreezeDeath
//
//============================================================================

final void A_FreezeDeath()
{
	StateTime = 2.0 + Random() * 8.0 + Random() * 8.0;
	bSolid = true;
	bShootable = true;
	bNoBlood = true;
	bPushable = true;
	bTelestomp = true;
	bSlide = true;
	bPassMobj = true;
	bDynamicLight = false;
	Height *= 4.0;
	PlaySound('FreezeDeath', CHAN_VOICE);
	Translation = 0;	//no translation
	bIceCorpse = true;

	//	Andy Baker's stealth monsters
	if (bStealth)
	{
		Alpha = 1.0;
		VisDir = 0;
	}

	if (bIsPlayer)
	{
		Player(Player).DamageFlash = 0.0;
		Player(Player).PoisonCount = 0;
		Player(Player).BonusFlash = 0.0;
	}
	else
	{
		if (bMonster && Special)
		{
			// Initiate monster death actions
			Level.ExecuteActionSpecial(Special, Args[0], Args[1], Args[2],
				Args[3], Args[4], NULL, 0, self);
		}
	}
}

//============================================================================
//
//  A_FreezeDeathChunks
//
//============================================================================

final void A_FreezeDeathChunks()
{
	int i;
	Actor A;

	if (Length(Velocity) > 1.0)
	{
		StateTime = 3.0;
		return;
	}
	PlaySound('FreezeShatter', CHAN_VOICE);

	for (i = 0; i < MAXPLAYERS; i++)
	{
		if (!Level.Game.Players[i])
			continue;
		if (!Level.Game.Players[i].bSpawned)
			continue;
		PlayerEx(Level.Game.Players[i]).ParticleEffect(256, LineSpecialLevelInfo::pt_static, HexenLevelInfo::pt_ice_chunk,
			Origin + vector(Radius, Radius, Height), 0.8, vector(64.0, 64.0, 96.0), 0.6, 6.0,
			80.0, RGB(127, 130, 240), 10.0, 16.0);
	}
	for (i = 12 + (P_Random() & 15); i >= 0; i--)
	{
		A = Spawn(IceChunk, Origin + vector(
			(Random() - 0.5) * 2.0 * Radius,
			(Random() - 0.5) * 2.0 * Radius,
			Random() * Height));
		A.SetState(GetStatePlus(A.IdleState, P_Random() % 3));
		if (A)
		{
			A.Velocity.z = (A.Origin.z - Origin.z) / Height * 4.0 * 35.0;
			A.Velocity.x = (Random() - Random()) * 2.0 * 35.0;
			A.Velocity.y = (Random() - Random()) * 2.0 * 35.0;
			IceChunk(A).A_IceSetTics();	// set a random tic wait
		}
	}
	for (i = 12 + (P_Random() & 15); i >= 0; i--)
	{
		A = Spawn(IceChunk, Origin + vector(
			(Random() - 0.5) * 2.0 * Radius,
			(Random() - 0.5) * 2.0 * Radius,
			Random() * Height));
		A.SetState(GetStatePlus(A.IdleState, P_Random() % 3));
		if (A)
		{
			A.Velocity.z = (A.Origin.z - Origin.z) / Height * 4.0 * 35.0;
			A.Velocity.x = (Random() - Random()) * 2.0 * 35.0;
			A.Velocity.y = (Random() - Random()) * 2.0 * 35.0;
			IceChunk(A).A_IceSetTics();	// set a random tic wait
		}
	}
	if (bIsPlayer)
	{
		// attach the player's view to a chunk of ice
		A = Spawn(IceChunkHead, Origin + vector(0.0, 0.0, Player::VIEWHEIGHT));
		A.Velocity.x = (Random() - Random()) * 2.0 * 35.0;
		A.Velocity.y = (Random() - Random()) * 2.0 * 35.0;
		A.Velocity.z = (A.Origin.z - Origin.z) / Height * 4.0 * 35.0;
		A.Player = Player;
		A.bIsPlayer = true;
		A.ObtainInventory(EntityEx(Player.MO));
		Player = none;
		bIsPlayer = false;
		A.Health = Health;
		A.Angles.yaw = Angles.yaw;
		A.Player.MO = A;
		A.Player.Camera = A;
		A.Angles.pitch = 0.0;
	}
	RemoveFromTIDList();
	SetState(FindState('FreeTargMobj'));
	bInvisible = true;
}

//**************************************************************************
//
// [KORAX RPG] Advanced interaction
//
//
//**************************************************************************

//==========================================================================
//
//  TryUse
//
//	[CW] Override or modify to add more 'use' possibilities
//
//==========================================================================

bool TryUse(optional float fUseRange, optional float fUseThingRange, optional name FailSound)
{
	if (UseLines(fUseRange, fUseThingRange, FailSound))
		return true;
	else
	{
		if (RidePartner && (bIsMountedOn || bRideControl))
		{
			Dismount();
			return true;
		}
	}

	return false;
}

//==========================================================================
//
//  UseLines
//
//  Looks for special lines in front of the pawn to activate.
//
//	[CW] copied from Player::P_UseLines
//
//==========================================================================

bool UseLines(optional float fUseRange, optional float fUseThingRange, optional name FailSound)
{
	bool action;
	float x1;
	float y1;
	float x2;
	float y2;
	TVec useDir;
	intercept_t* in;
	TVec hit_point;
	opening_t *open;

	action = false;
	AngleVector(&Angles, &useDir);
	x1 = Origin.x;
	y1 = Origin.y;

	x2 = x1 + fUseThingRange * useDir.x;
	y2 = y1 + fUseThingRange * useDir.y;
	foreach PathTraverse(in, x1, y1, x2, y2, PT_ADDLINES | PT_ADDTHINGS)
	{
		if (!in->bIsALine)
		{
			//	Check height.
			if (Origin.z >= in->Thing.Origin.z + in->Thing.Height ||
				Origin.z + Height <= in->Thing.Origin.z)
			{
				continue;
			}
			if (in->Thing.IsA('KRPGActor') && UseThing(KRPGActor(in->Thing)))
			{
				action = true;
				break;
			}
			continue;
		}

		if (!(in->line->flags & ML_TWOSIDED))
			break;	// stop

		hit_point = Origin + (fUseThingRange * in->frac) * useDir;
		open = LineOpenings(in->line, hit_point);
		open = FindOpening(open, hit_point.z, hit_point.z + Height);
		if (!open || open->range < 1.0)
		{
			// can't use through a wall
			break;
		}
		continue;
	}

	x2 = x1 + fUseRange * useDir.x;
	y2 = y1 + fUseRange * useDir.y;
	foreach PathTraverse(in, x1, y1, x2, y2, PT_ADDLINES)
	{
		line_t* line;
		float pheight;

		line = in->line;
		if (!line->special || (Level.GET_SPAC(line->flags) != SPAC_USE &&
			Level.GET_SPAC(line->flags) != SPAC_USETHROUGH))
		{
			hit_point = Origin + (fUseRange * in->frac) * useDir;
			open = LineOpenings(line, hit_point);
			open = FindOpening(open, hit_point.z + Height / 2.0,
				hit_point.z + Height);
			if (!open)
			{
				PlaySound(FailSound, CHAN_VOICE);
				break;	// can't use through a wall
			}
			pheight = Origin.z + Height / 2.0;
			if ((open->top < pheight) || (open->bottom > pheight))
			{
				PlaySound(FailSound, CHAN_VOICE);
			}
			continue;	// not a special line, but keep checking
		}

		if (PointOnPlaneSide(Origin, line) == 1)
		{
			//	Don't use back side unless it's a two-sided line.
			if (line->backsector != NULL)
				continue;
			break;
		}

		HexenLevelInfo(Level).ActivateLine(line, self, 0, SPAC_USE);
		action = true;

		//WAS can't use more than one special line in a row
		//jff 3/21/98 NOW multiple use allowed with enabling line flag
		if (Level.GET_SPAC(line->flags) != SPAC_USETHROUGH)
		{
			break;
		}
	}

	return action;
}

//==========================================================================
//
//	UseThing
//
//==========================================================================

bool UseThing(KRPGActor Thing)
{
	if (!Thing)
		Error("Pawn::UseThing : Thing reference not set to an instance of an object");

	// [CW] TODO: thinkout what conversation style do we need;
	//			  also, should other persons have ability to talk with each other?
	//
	// [CW] that's how it could look like if we used Strife-like dialogs
	if (Thing.ConversationID >= 0 && KRPGLevelInfo(Level).StartConversation(self, Actor(Thing)))
		return true;
	// Possible generic 'use' types
	if (bCanRide && Thing.bSaddleHorse && !Thing.RidePartner)
	{
		MountOn(Thing, true);
		return true;
	}

	return Thing.IsBeingUsed(self);
}

//==========================================================================
//
//	P_Order_UseLine			-=  TODO  =-
//
//==========================================================================

void P_Order_UseLine()
{
}

//==========================================================================
//
//	P_Order_UseThing		-=  TODO  =-
//
//==========================================================================

void P_Order_UseThing()
{
}



defaultproperties
{
	bSolid = true;
	bShootable = true;
	bCountKill = true;
	bMonster = true;
	bFloorClip = true;
	bTelestomp = true;
	bActivatePushWall = true;
	bActivateMCross = true;
	bPassMobj = true;
	bNeverTarget = false;

	bNonScalable = false;
	bCombatant = true;
}
