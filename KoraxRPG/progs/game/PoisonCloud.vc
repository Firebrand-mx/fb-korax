//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class PoisonCloud : Effect;

int LifeCount;
int BobIndex;

//==========================================================================
//
//	GetExplodeParms
//
//==========================================================================

void GetExplodeParms(out int damage, out float distance, out byte damageSelf)
{
	damage = 4;
	distance = 40.0;
}

//==========================================================================
//
//  DoSpecialDamage
//
//==========================================================================

int DoSpecialDamage(EntityEx victim, EntityEx source, int damage)
{
	if (victim.bIsPlayer/* || victim.bMonster && P_Random() < 128*/)
	{
		if (!KRPGPlayerPawn(victim).GetCondition(ACPoisoned, Actor(source), 1))
		{
			KRPGPlayerPawn(victim).CastCondition(ACPoisoned, true, Actor(source), 1, 5.0);
			KRPGPlayerPawn(victim).Damage(self, Actor(source), 15 + (P_Random() & 15), 'Poison');	// Don't play painsound
		}
		return -1;
	}
	return damage;
}

//==========================================================================
//
//	InitCloud
//
//	FIXME this sucks!
//
//==========================================================================

void InitCloud(Actor InstigatedBy)
{
	Velocity.x = 0.00001;	// missile objects must move to impact other objects
	LifeCount = 24 + (P_Random() & 7);
	BobIndex = 0;
	Target = InstigatedBy;
	Radius = 20.0;
	Height = 30.0;
	bColideWithThings = true;
	bColideWithWorld = true;
}

//===========================================================================
//
//  A_PoisonBagDamage
//
//===========================================================================

final void A_PoisonBagDamage()
{
	A_Explode();

	Origin.z += Level.Game.FloatBobOffsets[BobIndex] / 16.0;
	BobIndex = (BobIndex + 1) & 63;
}

//===========================================================================
//
//  A_PoisonBagCheck
//
//===========================================================================

final void A_PoisonBagCheck()
{
	if (!--LifeCount)
	{
		SetState(FindState('Death'));
	}
}

states
{
Spawn:
	PSBG D 1
	PSBG D 1 A_Scream
	PSBG DEEEFFFGGGHHHI 2 A_PoisonBagDamage
	PSBG I 1 A_PoisonBagDamage
	PSBG I 1 A_PoisonBagCheck
	Goto Spawn+3
Death:
	PSBG HG 7
	PSBG FD 6
	Stop
}

defaultproperties
{
	Radius = 1.0;
	Height = 1.0;
	Mass = 99999.0;
	RenderStyle = STYLE_Translucent;
	Alpha = 0.333;
	bDropOff = true;
	bColideWithWorld = false;
	bColideWithThings = false;
	bNoDamageThrust = true;
	bDamageInvulnerable = true;
	bHowlVictims = true;
	bNoSplash = true;
	bCanBlast = true;
	DeathSound = 'PoisonShroomDeath';
}
