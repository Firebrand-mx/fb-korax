//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ## ###  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**				   ######  #####   ######
//**	               ##   ## ##  ## ##    ##
//**	     		   ##   ## ##  ## ##   
//**	               #####   #####  ##  ####
//**	     		   ## ###  ##     ###   ##
//**	     		   ##  ### ##      ######
//**
//**    $Id: ConParser.Objects.vc 1638 2008-08-28 19:10:17Z firebrand_kh $
//**
//**    Copyright (C) 2004-2008 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

// Object Tokens
enum
{
	//
	// Level
	//
	Token_Level_MapNumber,
	Token_Level_NoiseAlert,
	//
	// Actor
	//
	Token_Actor_HasInventory,
	Token_Actor_GiveExperience,
	Token_Actor_GiveInventory,
	Token_Actor_RemoveInventory,
	Token_Actor_TID,
	LAST_ACTOR_METHOD = Token_Actor_TID,
	//
	// Player
	//
	Token_Player_Class,
	Token_Player_GiveLevels,
	Token_Player_GiveStrength,
	Token_Player_GiveConstitution,
	Token_Player_GiveDexterity,
	Token_Player_GiveIntelligence,
	Token_Player_GiveWisdom,
	Token_Player_GiveCharisma,
	Token_Player_TeleportToMap,
	//
	// Person
	//
	Token_Person_SetActiveConItem,
	//
	// World
	//
	Token_World_SetQuest,
	Token_World_GetQuestState,
	Token_World_GetQuestPosition,
	
	NUM_OBJECTTOKENS
};

// Argument Tokens
enum
{
	Token_World_Quest_Hidden,
	Token_World_Quest_Active,
	Token_World_Quest_Complete,
	Token_World_Quest_Failed,

	NUM_ARGUMENTTOKENS
};

string ObjectTokens[NUM_OBJECTTOKENS];
string ArgumentTokens[NUM_ARGUMENTTOKENS];

enum
{
	Error_NoSuchMethod,
	Error_TooManyParameters,
	Error_NotEnouphParameters,
	NUM_OBJECTERRORS
};

string ObjectErrors[NUM_OBJECTERRORS];

int MethodParamsMinimal[NUM_OBJECTTOKENS];
int MethodParamsMaximal[NUM_OBJECTTOKENS];


//==========================================================================
//
//	GetObjectToken
//
//	Get token index using tokens array
//
//==========================================================================

int GetObjectToken(string S)
{
	int i;
	for (i = 0; i < NUM_OBJECTTOKENS; i++)
	{
		if (!strcmp(ObjectTokens[i], S))
			return i;
	}
	return -1;
}

//==========================================================================
//
//	ParseObjectReference
//
//	[CW] This method should start a handling of various object-referenced
//	actions. In most simple case this can be a calling of one of the
//	allowed object methods.
//
//==========================================================================

void ParseObjectReference(int ReferenceClass, optional expression_t * p_Result,
						  optional bool bSkipIfPossible, optional bool bIgnoreCommandSeparator)
{
	int				Method;
	array<string>	Params;

	Expect(Tokens[Token_ObjectAccess]);
	ExpectString();
	Method = GetObjectToken(String);
	if (Method < 0)
	{
		ScriptError(Errors[Error_UnknownToken], String);
		return;
	}
	Expect(Tokens[Token_BracketsOpen]);
	ExpectString();

	while (strcmp(Tokens[Token_BracketsClose], String))
	{
		if (bSkipIfPossible)
		{
			String;
		}
		else
		{
			Params.Num = Params.Num + 1;
			Params[Params.Num - 1] = String;
		}
		ExpectString();
		if (!strcmp(Tokens[Token_Comma], String))
		{
			ExpectString();
		}
	}

	if (!bSkipIfPossible)
	{
		if (Params.Num < MethodParamsMinimal[Method])
		{
			ScriptError(ObjectErrors[Error_NotEnouphParameters], Tokens[ReferenceClass], ObjectTokens[Method],
				MethodParamsMinimal[Method], Params.Num);
			return;
		}
		if (Params.Num > MethodParamsMaximal[Method])
		{
			ScriptError(ObjectErrors[Error_TooManyParameters], Tokens[ReferenceClass], ObjectTokens[Method],
				MethodParamsMaximal[Method], Params.Num);
			return;
		}
	}

	if (!bIgnoreCommandSeparator)
	{
		Expect(Tokens[Token_CommandSeparator]);
	}

	if (!bSkipIfPossible)
	{
		// First, non-direct references should be routed to particular object
		switch (ReferenceClass)
		{
			// TODO
		case Token_Everybody:
			break;
		case Token_Initiator:
			if (ConInfo.AInitiator && ConInfo.Player && ConInfo.AInitiator == ConInfo.Player.MO)
			{
				ReferenceClass = Token_Player;
			}
			break;
		case Token_Myself:
			if (ConInfo.APerson && ConInfo.Player && ConInfo.APerson == ConInfo.Player.MO)
			{
				ReferenceClass = Token_Player;
			}
			break;
		}

		if (p_Result)
		{
			p_Result->type = exp_type_unknown;
		}

		// Now, we have an exact class to deal with
		switch (ReferenceClass)
		{
		case Token_Initiator:
			if (Method > LAST_ACTOR_METHOD)
				ParsePersonMethod(ConInfo.pInitiatorInfo, Token_Initiator, Method, &Params, p_Result);
			else
				ParseActorMethod(ConInfo.AInitiator, Token_Initiator, Method, &Params, p_Result);
			break;
		case Token_Level:
			ParseLevelMethod(Method, &Params, p_Result);
			break;
		case Token_Myself:
			if (Method > LAST_ACTOR_METHOD)
				ParsePersonMethod(ConInfo.pPersonInfo, Token_Myself, Method, &Params, p_Result);
			else
				ParseActorMethod(ConInfo.APerson, Token_Myself, Method, &Params, p_Result);
			break;
		case Token_Player:
			ParsePlayerMethod(Method, &Params, p_Result);
			break;
		case Token_World:
			ParseWorldMethod(Method, &Params, p_Result);
			break;
		}
	}
}

//==========================================================================
//
//	ParseActorMethod
//
//==========================================================================

void ParseActorMethod(Actor Ref, int ObjectClass, int Method, array<string> * p_Params, optional expression_t * p_Result)
{
	if (!Ref)
	{
		dprint("ConParser::ParseActorMethod : WARNING - no actor reference of class '%s', execution skipped", Tokens[ObjectClass]);
		return;
	}

	switch (Method)
	{
	case Token_Actor_HasInventory:
		if (p_Result)
		{
			p_Result->type = exp_type_boolean;
			class<Inventory> ItemType = class<Inventory>(FindClassLowerCase(StrToName(strlwr((*p_Params)[0]))));
			Inventory Item = Ref.FindInventory(ItemType);
			//dprint("Token_Actor_HasInventory, Item = %i", Item);
			if ((*p_Params).Num > 1)
			{
				//if (Item)
				//	dprint("Amount = %i, required = %i", Item.Amount, atoi((*p_Params)[1]));
				p_Result->ivalue = (Item != none) && (Item.Amount >= atoi((*p_Params)[1]));
			}
			else
			{
				p_Result->ivalue = Item != none;
			}
			//dprint("p_Result->ivalue = %i", p_Result->ivalue);
		}
		break;
	case Token_Actor_GiveInventory:
		{
			class<Inventory> ItemType = class<Inventory>(FindClassLowerCase(StrToName(strlwr((*p_Params)[0]))));
			Ref.DoGiveInventory(ItemType, (*p_Params).Num > 1 ? atoi((*p_Params)[1]) : 1, Ref);
		}
		break;
	case Token_Actor_RemoveInventory:
		{
			class<Inventory> ItemType = class<Inventory>(FindClassLowerCase(StrToName(strlwr((*p_Params)[0]))));
			//print("ItemType = %i", ItemType);
			Ref.DoTakeInventory(ItemType, (*p_Params).Num > 1 ? atoi((*p_Params)[1]) : 1, Ref);
		}
		break;
	case Token_Actor_TID:
		if (p_Result)
		{
			p_Result->type = exp_type_integer;
			p_Result->ivalue = Ref.TID;
		}
		break;
	default:
		ScriptError(ObjectErrors[Error_NoSuchMethod], Tokens[ObjectClass], ObjectTokens[Method]);
		break;
	}
}

//==========================================================================
//
//	ParseLevelMethod
//
//==========================================================================

void ParseLevelMethod(int Method, array<string> * p_Params, optional expression_t * p_Result)
{
	if (!ConInfo.Level)
	{
		dprint("ConParser::ParseLevelMethod : WARNING - no level reference, execution skipped");
		return;
	}

	switch (Method)
	{
	case Token_Level_MapNumber:
		if (p_Result)
		{
			p_Result->type = exp_type_integer;
			p_Result->ivalue = ConInfo.Level.LevelNum;
		}
		break;
	case Token_Level_NoiseAlert:
		// TODO -- parse param values!
		LineSpecialLevelInfo(ConInfo.Level).NoiseAlert(ConInfo.Player.MO, ConInfo.Player.MO);
		break;
	default:
		ScriptError(ObjectErrors[Error_NoSuchMethod], Tokens[Token_Level], ObjectTokens[Method]);
		break;
	}
}

//==========================================================================
//
//	ParsePlayerMethod
//
//==========================================================================

void ParsePlayerMethod(int Method, array<string> * p_Params, optional expression_t * p_Result)
{
	if (!ConInfo.Player)
	{
		dprint("ConParser::ParsePlayerMethod : WARNING - no player reference, execution skipped");
		return;
	}

	switch (Method)
	{
		// GiveExperience is handled differently for Player actors
	case Token_Actor_GiveExperience:		
		ConInfo.Player.GiveExperience(atoi((*p_Params)[0]));
		break;
	case Token_Player_GiveLevels:
		ConInfo.Player.GiveLevels(atoi((*p_Params)[0]));
		break;
	case Token_Player_GiveStrength:
		ConInfo.Player.GiveStrength(atoi((*p_Params)[0]));
		break;
	case Token_Player_GiveConstitution:
		ConInfo.Player.GiveConstitution(atoi((*p_Params)[0]));
		break;
	case Token_Player_GiveDexterity:
		ConInfo.Player.GiveDexterity(atoi((*p_Params)[0]));
		break;
	case Token_Player_GiveIntelligence:
		ConInfo.Player.GiveIntelligence(atoi((*p_Params)[0]));
		break;
	case Token_Player_GiveWisdom:
		ConInfo.Player.GiveWisdom(atoi((*p_Params)[0]));
		break;
	case Token_Player_GiveCharisma:
		ConInfo.Player.GiveCharisma(atoi((*p_Params)[0]));
		break;
	case Token_Player_TeleportToMap:
		ConInfo.Level.Completed(atoi((*p_Params)[0]), (*p_Params).Num > 1 ? atoi((*p_Params)[1]) : 0,
			(*p_Params).Num > 2 ? atoi((*p_Params)[2]) : 0);
		break;
		
	default:
		ParseActorMethod(Actor(ConInfo.Player.MO), Token_Player, Method, p_Params, p_Result);
		break;
	}
}

//==========================================================================
//
//	ParsePersonMethod
//
//==========================================================================

void ParsePersonMethod(/*string Ref*/Quest::personinfo_t * p_PInfo, int ObjectClass, int Method, array<string> * p_Params,
					   optional expression_t * p_Result)
{
	//Quest::personinfo_t * p_PInfo;

	if (!GetPersonRegistry)
		FatalError("ConParser::ParsePersonInfo : GetPersonRegistry delegate is not valid");

	//p_PInfo = GetPersonRegistry(Ref, -1);

	//if (!p_PInfo)
	//{
	//	dprint("ConParser::ParsePersonMethod : WARNING - person '%s' not registered, execution skipped", Ref);
	//	return;
	//}

	switch (Method)
	{
	case Token_Person_SetActiveConItem:
		{
			int i;
			bool foundByName;
			int foundById = -1;
			int tryid = atoi((*p_Params)[0]);

			for (i = 0; i < p_PInfo->cons.Num; i++)
			{
				if (!strcmp(p_PInfo->cons[i].scriptName, (*p_Params)[0]))
				{
					p_PInfo->conId = p_PInfo->cons[i].scriptId;
					foundByName = true;
					break;
				}

				if (p_PInfo->cons[i].scriptId == tryid)
				{
					foundById = p_PInfo->cons[i].scriptId;
				}
			}

			if (!foundByName && foundById >= 0)
			{
				//p_PInfo->conId = atoi((*p_Params)[0]);
				p_PInfo->conId = foundById;
			}
		}
		break;
	default:
		ScriptError(ObjectErrors[Error_NoSuchMethod], Tokens[ObjectClass], ObjectTokens[Method]);
		break;
	}
}

//==========================================================================
//
//	ParseWorldMethod
//
//==========================================================================

void ParseWorldMethod(int Method, array<string> * p_Params, optional expression_t * p_Result)
{
	if (!ConInfo.World)
	{
		dprint("ConParser::ParseWorldMethod : WARNING - no world reference, execution skipped");
		return;
	}

	switch (Method)
	{
	case Token_World_SetQuest:
		{
			int qstate;
			if (!strcmp((*p_Params)[1], ArgumentTokens[Token_World_Quest_Hidden]))
			{
				qstate = Quest::quest_state_hidden;
			}
			else if (!strcmp((*p_Params)[1], ArgumentTokens[Token_World_Quest_Active]))
			{
				qstate = Quest::quest_state_active;
			}
			else if (!strcmp((*p_Params)[1],ArgumentTokens[Token_World_Quest_Complete]))
			{
				qstate = Quest::quest_state_completed;
			}
			else if (!strcmp((*p_Params)[1], ArgumentTokens[Token_World_Quest_Failed]))
			{
				qstate = Quest::quest_state_failed;
			}
			else
			{
				qstate = atoi((*p_Params)[1]);
			}

			Quest::questinfo_t * p_QInfo;

			p_QInfo = KRPGWorldInfo(ConInfo.World).GetQuest((*p_Params)[0], -1);
			if (!p_QInfo) p_QInfo = KRPGWorldInfo(ConInfo.World).GetQuest("", atoi((*p_Params)[0]));
			if (!p_QInfo)
			{
				return;
			}

			p_QInfo->qstate = qstate;
			if ((*p_Params).Num > 2) p_QInfo->position = atoi((*p_Params)[2]);
		}
		break;
	case Token_World_GetQuestState:
		{
			Quest::questinfo_t * p_QInfo;

			p_QInfo = KRPGWorldInfo(ConInfo.World).GetQuest((*p_Params)[0], -1);
			if (!p_QInfo) p_QInfo = KRPGWorldInfo(ConInfo.World).GetQuest("", atoi((*p_Params)[0]));
			if (!p_QInfo)
			{
				return;
			}

			if (p_Result)
			{
				p_Result->type = exp_type_integer;
				p_Result->ivalue = p_QInfo->qstate;
			}
		}
		break;
	case Token_World_GetQuestPosition:
		{
			Quest::questinfo_t * p_QInfo;

			p_QInfo = KRPGWorldInfo(ConInfo.World).GetQuest((*p_Params)[0], -1);
			if (!p_QInfo) p_QInfo = KRPGWorldInfo(ConInfo.World).GetQuest("", atoi((*p_Params)[0]));
			if (!p_QInfo)
			{
				return;
			}

			if (p_Result)
			{
				p_Result->type = exp_type_integer;
				p_Result->ivalue = p_QInfo->position;
			}
		}
		break;
	default:
		ScriptError(ObjectErrors[Error_NoSuchMethod], Tokens[Token_World], ObjectTokens[Method]);
		break;
	}
}