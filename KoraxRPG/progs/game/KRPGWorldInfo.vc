//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ## ###  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**				   ######  #####   ######
//**	               ##   ## ##  ## ##    ##
//**	     		   ##   ## ##  ## ##   
//**	               #####   #####  ##  ####
//**	     		   ## ###  ##     ###   ##
//**	     		   ##  ### ##      ######
//**
//**    $Id$
//**
//**    Copyright (C) 2004-2008 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class KRPGWorldInfo : WorldInfoEx;

array<Quest::questvar_t>		GlobalVars;
array<Quest::personinfo_t>		PersonInfos;


//==========================================================================
//
//	AddPersonRegistry
//
//==========================================================================

Quest::personinfo_t * AddPersonRegistry()
{
	PersonInfos.Num = PersonInfos.Num + 1;
	return &PersonInfos[PersonInfos.Num - 1];
}

//==========================================================================
//
//	GetPersonRegistry
//
//==========================================================================

Quest::personinfo_t * GetPersonRegistry(string scriptName, int scriptId)
{
	int i;

	if (!scriptName && scriptId < 0)
		Error("KRPGWorldInfo::GetPersonRegistry : no scriptName nor scriptId specified");

	for (i = 0; i < PersonInfos.Num; i++)
	{
		if (scriptName && strcmp(PersonInfos[i].scriptName, scriptName))
			continue;
		if (scriptId >= 0 && PersonInfos[i].scriptId != scriptId)
			continue;
			
		return &PersonInfos[i];
	}
	return NULL;
}

//==========================================================================
//
//	SetActiveConItem
//
//==========================================================================

Quest::coniteminfo_t * SetActiveConItem(string personScriptName, int personScriptId, string conItemScriptName, int conItemScriptId)
{
	int i;
	bool foundByName;

	Quest::personinfo_t * p_PInfo = GetPersonRegistry(personScriptName, personScriptId);

	if (!p_PInfo)
	{
		return NULL;
	}

	for (i = 0; i < p_PInfo->cons.Num; i++)
	{
		if (conItemScriptName && !strcmp(p_PInfo->cons[i].scriptName, conItemScriptName))
		{
			p_PInfo->conId = p_PInfo->cons[i].scriptId;
			return &p_PInfo->cons[i];
		}

		if (p_PInfo->cons[i].scriptId == conItemScriptId)
		{
			p_PInfo->conId = p_PInfo->cons[i].scriptId;
			return &p_PInfo->cons[i];
		}
	}

	return NULL;
}

//==========================================================================
//
//	SetPersonVar
//
//==========================================================================

Quest::questvar_t * SetPersonVar(string personScriptName, int personScriptId, string varScriptName, int varScriptId,
									int Value)
{
	int i;
	Quest::questvar_t * p_var;

	Quest::personinfo_t * p_PInfo = GetPersonRegistry(personScriptName, personScriptId);

	if (!p_PInfo)
	{
		return NULL;
	}

	for (i = 0; i < p_PInfo->vars.Num; i++)
	{
		if (varScriptName && !strcmp(p_PInfo->vars[i].sname, varScriptName))
		{
			p_var = &p_PInfo->vars[i];
			break;
		}

		if (p_PInfo->vars[i].id == varScriptId)
		{
			p_var = &p_PInfo->vars[i];
			break;
		}
	}

	if (p_var)
	{
		switch (p_var->type)
		{
		case Quest::qvar_type_boolean:
			p_var->value = Value == 0 ? 0 : 1;
			break;
		case Quest::qvar_type_integer:
			p_var->value = Value;
			break;
		}
		return p_var;
	}

	return NULL;
}

defaultproperties
{
}
