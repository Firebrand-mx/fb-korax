//**************************************************************************
//**
//**	    ##   ##   ####   ######     ##    ##     ##
//**	    ##  ##   ##  ##  ##   ##  ##  ##   ### ###
//**	    ## ##   ##    ## ##   ## ##    ##   #####
//**	    ######  ##    ## #####   ########   #####
//**	    ## ###   ##  ##  ## ###  ##    ##  ### ###
//**	    ##   ##   ####   ##  ### ##    ## ##     ##
//**
//**				   ######  #####   ######
//**	               ##   ## ##  ## ##    ##
//**	     		   ##   ## ##  ## ##   
//**	               #####   #####  ##  ####
//**	     		   ## ###  ##     ###   ##
//**	     		   ##  ### ##      ######
//**
//**    $Id: Node.vc 1983 2009-07-04 00:51:38Z crimsonwizard $
//**
//**    Copyright (C) 2004-2008 Korax Heritage Team
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Node : Actor
	abstract;

#ifdef OBSOLETE
//
//	Node extended classes should use Args to store specific data
//

enum
{
	ARG__ATTRIBUTES	= 0
};
#endif


struct nodelink_t
{
	Node		node;			// linked node object
	float		length;			// distance from one linked node to another
	float		minyspace;		// minimal space between height and ceiling
	float		maxstepheight;	// maximal step height
	float		maxdropoff;		// maximal dropoff height
};

array<nodelink_t>	Links;

//==========================================================================
//
//	ApplyLink
//
//	Apllies new link to the node in defined slot; if node already has link in
//	that slot, ApplyLink removes previous link from that slot.
//	Function also tries to apply same link to the opposite node if
//	corresponding flag is set.
//
//==========================================================================

void ApplyLink(nodelink_t * _link, int index, bool dual_connect)
{
	if (index < 0)
	{
		index = Links.Num;
		Links.Num = Links.Num + 1;
	}
	else if (index >= Links.Num)
		return;

	if (Links[index].node)
		RemoveLinkByIndex(index, false);

	Links[index].node = _link->node;
	Links[index].length = _link->length;
	Links[index].minyspace = _link->minyspace;
	Links[index].maxstepheight = _link->maxstepheight;
	Links[index].maxdropoff = _link->maxdropoff;

	if (dual_connect)
	{
		nodelink_t backward_link;
		backward_link.node = self;
		backward_link.length = _link->length;
		backward_link.minyspace = _link->minyspace;
		// Switch maxstep and dropoff for backdir link
		backward_link.maxstepheight = _link->maxdropoff;
		backward_link.maxdropoff = _link->maxstepheight;

		_link->node.ApplyLink(&backward_link, -1, false);
	}
}

//==========================================================================
//
//	RemoveLinkByIndex
//
//==========================================================================

void RemoveLinkByIndex(int index, bool dual_removal)
{
	if (dual_removal && Links[index].node)
		Links[index].node.RemoveLinkByNode(self, false);

	Links[index].node = none;
	Links[index].length = 0.0;
	Links[index].minyspace = 0.0;
	Links[index].maxstepheight = 0.0;
	Links[index].maxdropoff = 0.0;
}

//==========================================================================
//
//	RemoveLinkByNode
//
//==========================================================================

void RemoveLinkByNode(Node node, bool dual_removal)
{
	int i;
	int index;
	for (i = 0; i < Links.Num; i++)
	{
		if (Links[i].node == node)
		{
			index = i;
			break;
		}
	}
	if (index < 0)
	{
		return;
	}

	if (dual_removal && Links[index].node)
		Links[index].node.RemoveLinkByNode(self, false);

	Links[index].node = none;
	Links[index].length = 0.0;
	Links[index].minyspace = 0.0;
	Links[index].maxstepheight = 0.0;
	Links[index].maxdropoff = 0.0;
}

defaultproperties
{
	bInvisible = true;
	bNoGravity = true;
}
