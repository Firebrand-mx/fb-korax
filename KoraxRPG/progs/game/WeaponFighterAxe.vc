//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class WeaponFighterAxe : Weapon;

int NoMoreManaState;
float AxeRange;

//==========================================================================
//
//  A_FAxeAttack
//
//==========================================================================

void A_FAxeAttack(void)
{
	Actor Owner = Player.MO;
	float power;
	int damage;
	int i;
	int useMana;
	TAVec angles;
	TVec vforward;

	damage = 40 + (P_Random() & 15) + (P_Random() & 7);
	power = 0.0;
	if (Player.Mana[MANA_1] > 0)
	{
		damage <<= 1;
		power = 6.0;
		PuffType = AxePuffGlow;
		useMana = 1;
	}
	else
	{
		PuffType = AxePuff;
		useMana = 0;
	}
	for (i = 0; i < 16; i++)
	{
		angles = Owner.Angles;
		angles.yaw = AngleMod360(angles.yaw + itof(i) * (45.0 / 16.0));
		AimLineAttack(Owner, &angles, AxeRange);
		if (linetarget)
		{
			AngleVector(&angles, &vforward);
			if (LineAttack(Owner, vforward, AxeRange, damage))
			{
				Owner.PlaySound('FighterHammerMiss', CHAN_WEAPON);
			}
			if (linetarget.bCountKill || linetarget.bIsPlayer)
			{
				linetarget.Thrust(angles.yaw, power);
			}
			Player.AdjustPlayerAngle();
			useMana++;
			break;
		}
		angles = Owner.Angles;
		angles.yaw = AngleMod360(angles.yaw - itof(i) * (45.0 / 16.0));
		AimLineAttack(Owner, &angles, AxeRange);
		if (linetarget)
		{
			AngleVector(&angles, &vforward);
			if (LineAttack(Owner, vforward, AxeRange, damage))
			{
				Owner.PlaySound('FighterHammerMiss', CHAN_WEAPON);
			}
			if (linetarget.bCountKill || linetarget.bIsPlayer)
			{
				linetarget.Thrust(angles.yaw, power);
			}
			Player.AdjustPlayerAngle();
			useMana++;
			break;
		}
	}
	if (i == 16)
	{
		// didn't find any creatures, so try to strike any walls
		angles = Owner.Angles;
		AimLineAttack(Owner, &angles, MELEERANGE);
		AngleVector(&angles, &vforward);
		if (LineAttack(Owner, vforward, MELEERANGE, damage))
		{
			Owner.PlaySound('FighterHammerMiss', CHAN_WEAPON);
		}
	}

	if (useMana == 2)
	{
		Player.Mana[MANA_1] -=
			WeaponManaUse(Player.PClass, Player.ReadyWeapon);
		if (Player.Mana[MANA_1] <= 0)
		{
			SetState(NoMoreManaState);
		}
	}
}

__states__
{
	S_FAXEREADY('FAXE', 0, 1.0 / 35.0, S_FAXEREADY) { A_WeaponReady(); }
	S_FAXEDOWN('FAXE', 0, 1.0 / 35.0, S_FAXEDOWN) { A_Lower(); }
	S_FAXEUP('FAXE', 0, 1.0 / 35.0, S_FAXEUP) { A_Raise(); }
	S_FAXEATK_1('FAXE', 1, 4.0 / 35.0, S_FAXEATK_2) { SX = 15.0; SY = 32.0; }
	S_FAXEATK_2('FAXE', 2, 3.0 / 35.0, S_FAXEATK_3) { SX = 15.0; SY = 32.0; }
	S_FAXEATK_3('FAXE', 3, 2.0 / 35.0, S_FAXEATK_4) { SX = 15.0; SY = 32.0; }
	S_FAXEATK_4('FAXE', 3, 1.0 / 35.0, S_FAXEATK_5) { SX = -5.0; SY = 70.0; A_FAxeAttack(); }
	S_FAXEATK_5('FAXE', 3, 2.0 / 35.0, S_FAXEATK_6) { SX = -25.0; SY = 90.0; }
	S_FAXEATK_6('FAXE', 4, 1.0 / 35.0, S_FAXEATK_7) { SX = 15.0; SY = 32.0; }
	S_FAXEATK_7('FAXE', 4, 2.0 / 35.0, S_FAXEATK_8) { SX = 10.0; SY = 54.0; }
	S_FAXEATK_8('FAXE', 4, 7.0 / 35.0, S_FAXEATK_9) { SX = 10.0; SY = 150.0; }
	S_FAXEATK_9('FAXE', 0, 1.0 / 35.0, S_FAXEATK_10) { SY = 60.0; A_ReFire(); }
	S_FAXEATK_10('FAXE', 0, 1.0 / 35.0, S_FAXEATK_11) { SY = 52.0; }
	S_FAXEATK_11('FAXE', 0, 1.0 / 35.0, S_FAXEATK_12) { SY = 44.0; }
	S_FAXEATK_12('FAXE', 0, 1.0 / 35.0, S_FAXEATK_13) { SY = 36.0; }
	S_FAXEATK_13('FAXE', 0, 1.0 / 35.0, S_FAXEREADY) { }
	S_FAXEREADY_G('FAXE', 11, 1.0 / 35.0, S_FAXEREADY_G1) { A_WeaponReady(); }
	S_FAXEREADY_G1('FAXE', 11, 1.0 / 35.0, S_FAXEREADY_G2) { A_WeaponReady(); }
	S_FAXEREADY_G2('FAXE', 11, 1.0 / 35.0, S_FAXEREADY_G3) { A_WeaponReady(); }
	S_FAXEREADY_G3('FAXE', 12, 1.0 / 35.0, S_FAXEREADY_G4) { A_WeaponReady(); }
	S_FAXEREADY_G4('FAXE', 12, 1.0 / 35.0, S_FAXEREADY_G5) { A_WeaponReady(); }
	S_FAXEREADY_G5('FAXE', 12, 1.0 / 35.0, S_FAXEREADY_G) { A_WeaponReady(); }
	S_FAXEDOWN_G('FAXE', 11, 1.0 / 35.0, S_FAXEDOWN_G) { A_Lower(); }
	S_FAXEUP_G('FAXE', 11, 1.0 / 35.0, S_FAXEUP_G) { A_Raise(); }
	S_FAXEATK_G1('FAXE', 13, 4.0 / 35.0, S_FAXEATK_G2) { SX = 15.0; SY = 32.0; }
	S_FAXEATK_G2('FAXE', 14, 3.0 / 35.0, S_FAXEATK_G3) { SX = 15.0; SY = 32.0; }
	S_FAXEATK_G3('FAXE', 15, 2.0 / 35.0, S_FAXEATK_G4) { SX = 15.0; SY = 32.0; }
	S_FAXEATK_G4('FAXE', 15, 1.0 / 35.0, S_FAXEATK_G5) { SX = -5.0; SY = 70.0; A_FAxeAttack(); }
	S_FAXEATK_G5('FAXE', 15, 2.0 / 35.0, S_FAXEATK_G6) { SX = -25.0; SY = 90.0; }
	S_FAXEATK_G6('FAXE', 16, 1.0 / 35.0, S_FAXEATK_G7) { SX = 15.0; SY = 32.0; }
	S_FAXEATK_G7('FAXE', 16, 2.0 / 35.0, S_FAXEATK_G8) { SX = 10.0; SY = 54.0; }
	S_FAXEATK_G8('FAXE', 16, 7.0 / 35.0, S_FAXEATK_G9) { SX = 10.0; SY = 150.0; }
	S_FAXEATK_G9('FAXE', 0, 1.0 / 35.0, S_FAXEATK_G10) { SY = 60.0; A_ReFire(); }
	S_FAXEATK_G10('FAXE', 0, 1.0 / 35.0, S_FAXEATK_G11) { SY = 52.0; }
	S_FAXEATK_G11('FAXE', 0, 1.0 / 35.0, S_FAXEATK_G12) { SY = 44.0; }
	S_FAXEATK_G12('FAXE', 0, 1.0 / 35.0, S_FAXEATK_G13) { SY = 36.0; }
	S_FAXEATK_G13('FAXE', 0, 1.0 / 35.0, S_FAXEREADY_G) { }
}

//==========================================================================
//
//	GetUpState
//
//==========================================================================

int GetUpState(void)
{
	if (Player.Mana[MANA_1])
	{
		return S_FAXEUP_G;
	}
	else
	{
		return UpState;
	}
}

//==========================================================================
//
//	GetDownState
//
//==========================================================================

int GetDownState(void)
{
	if (Player.Mana[MANA_1])
	{
		return S_FAXEDOWN_G;
	}
	else
	{
		return DownState;
	}
}

//==========================================================================
//
//	GetReadyState
//
//==========================================================================

int GetReadyState(void)
{
	if (Player.Mana[MANA_1])
	{
		return S_FAXEREADY_G;
	}
	else
	{
		return ReadyState;
	}
}

//==========================================================================
//
//	GetAttackState
//
//==========================================================================

int GetAttackState(void)
{
	if (Player.Mana[MANA_1] > 0)
	{
		// Glowing axe
		return S_FAXEATK_G1;
	}
	else
	{
		return Player.Refire ? HoldAttackState : AttackState;
	}
}

//==========================================================================
//
//	GotMana
//
//==========================================================================

void GotMana(int InMana)
{
	if (InMana == MANA_1)
	{
		SetState(S_FAXEREADY_G);
	}
}

defaultproperties
{
	Mana = MANA_NONE;
	UpState = S_FAXEUP;
	DownState = S_FAXEDOWN;
	ReadyState = S_FAXEREADY;
	AttackState = S_FAXEATK_1;
	HoldAttackState = S_FAXEATK_1;
	NoMoreManaState = S_FAXEATK_5;
	PSpriteSY = -12.0;
	AxeRange = 9.0 * MELEERANGE / 4.0;
}

//**************************************************************************
//
//  $Log$
//  Revision 1.1  2005/08/02 16:13:26  firebrand_kh
//  Initial Import
//
//  Revision 1.3  2004/08/22 19:23:26  dj_jl
//  Moved many functions to player class.
//
//  Revision 1.2  2003/11/12 16:50:47  dj_jl
//  Changed player structure into a class
//
//  Revision 1.1  2002/10/26 16:32:27  dj_jl
//  New style of defining classes.
//
//**************************************************************************
