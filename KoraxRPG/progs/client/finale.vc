//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

// MACROS ------------------------------------------------------------------

#undef TEXTSPEED
#undef TEXTWAIT

#define	TEXTSPEED	0.1
#define	TEXTWAIT	7.0

#define MAX_FINALE_MESSAGE_SIZE	1024

// CONSTANTS ---------------------------------------------------------------

// TYPES -------------------------------------------------------------------

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

int FinaleStage;
float FinaleTime;
float FinaleEndTime;

int fpage1;
int fpage2;

int FinaleText[MAX_FINALE_MESSAGE_SIZE / 4];

// CODE --------------------------------------------------------------------

//===========================================================================
//
//  F_DrawPic
//
//===========================================================================

void F_DrawPic(void)
{
	R_DrawPic(0, 0, fpage1);
	if (FinaleStage == 4 || FinaleStage == 5)
	{
		// Chess pic, draw the correct character graphic
		if (cl->maxclients > 1)
		{
			R_DrawPic(20, 0, fpage2);
		}
		else if (GetCvar("class"))
		{
			R_DrawPic(60, 0, fpage2);
		}
	}
}

//==========================================================================
//
//  F_GetFinaleText
//
//==========================================================================

void F_GetFinaleText(string msgLumpName)
{
	LoadTextLump(msgLumpName, &FinaleText[0], MAX_FINALE_MESSAGE_SIZE);
	FinaleEndTime = itof(strlen(ARR2STR(FinaleText))) * TEXTSPEED + TEXTWAIT;
}

//===========================================================================
//
//  F_TextWrite
//
//===========================================================================

void F_TextWrite(void)
{
	int count;

	// draw some of the text onto the screen
	count = ftoi((FinaleTime - 0.3) / TEXTSPEED);
	if (count < 0)
		count = 0;

	T_SetFont(font_small);
	T_SetAlign(hleft, vtop);
	T_DrawNText(20, (FinaleStage == 5) ? 135 : 5, ARR2STR(FinaleText), count);
}

//==========================================================================
//
//  F_FadeOut
//
//==========================================================================

void F_FadeOut(void)
{
	int fade = ftoi(FinaleTime * 32.0 / FinaleEndTime);

	if (fade < 0)
		fade = 0;
	if (fade > 31)
		fade = 31;
	R_ShadeRect(0, 0, 320, 200, fade);
}

//==========================================================================
//
//  F_FadeIn
//
//==========================================================================

void F_FadeIn(void)
{
	int fade = 31 - ftoi(FinaleTime * 32.0 / FinaleEndTime);

	if (fade < 0)
		fade = 0;
	if (fade > 31)
		fade = 31;
	R_ShadeRect(0, 0, 320, 200, fade);
}

//==========================================================================
//
//  F_StartFinale
//
//==========================================================================

void F_StartFinale(void)
{
	FinaleStage = 0;
	FinaleTime = 0.0;

	FinaleEndTime = 2.0;
	fpage1 = R_RegisterPic("FINALE1", PIC_RAW);
	if (cl->maxclients > 1)
	{
		fpage2 = R_RegisterPic("chessall", PIC_PATCH);
	}
	else if (GetCvar("class") == 1)
	{
		fpage2 = R_RegisterPic("chessc", PIC_PATCH);
	}
	else if (GetCvar("class") == 2)
	{
		fpage2 = R_RegisterPic("chessm", PIC_PATCH);
	}

#ifdef FIXME
	S_StartSong("hall", P_GetCDEnd1Track(), false);	// don't loop the song
#else
	CmdBuf_AddText("music play hall\n");	// don't loop the song
#endif
}

//===========================================================================
//
//  F_Ticker
//
//===========================================================================

void F_Ticker(void)
{
	FinaleTime += frametime;

	if (FinaleStage < 5 && FinaleTime >= FinaleEndTime)
	{
		FinaleTime = 0.0;
		FinaleStage++;
		switch (FinaleStage)
		{
		case 1:	// Text 1
			F_GetFinaleText("win1msg");
			break;
		case 2:	// Pic 2, Text 2
			F_GetFinaleText("win2msg");
			fpage1 = R_RegisterPic("FINALE2", PIC_RAW);
#ifdef FIXME
			S_StartSong("orb", P_GetCDEnd2Track(), false);
#else
			CmdBuf_AddText("music play orb\n");
#endif
			break;
		case 3:	// Pic 2 -- Fade out
			FinaleEndTime = 2.0;
			break;
		case 4:	// Pic 3 -- Fade in
			fpage1 = R_RegisterPic("FINALE3", PIC_RAW);
			FinaleEndTime = 2.0;
#ifdef FIXME
			S_StartSong("chess", P_GetCDEnd3Track(), true);
#else
			CmdBuf_AddText("music loop chess\n");
#endif
			break;
		case 5:	// Pic 3 , Text 3
			F_GetFinaleText("win3msg");
			break;
		}
	}
}

//==========================================================================
//
//  F_Drawer
//
//==========================================================================

void F_Drawer(void)
{
	F_DrawPic();
	switch (FinaleStage)
	{
	case 0:	// Fade in initial finale screen
		F_FadeIn();
		break;
	case 1:
		F_TextWrite();
		break;
	case 2:
		F_TextWrite();
		break;
	case 3:	// Fade screen out
		F_FadeOut();
		break;
	case 4:	// Fade in chess screen
		F_FadeIn();
		break;
	case 5:
		F_TextWrite();
		break;
	}
}

//===========================================================================
//
//  F_Responder
//
//===========================================================================

bool F_Responder(event_t * event)
{
	return false;
}

//**************************************************************************
//
//  $Log$
//  Revision 1.1  2005/08/02 16:13:21  firebrand_kh
//  Initial Import
//
//  Revision 1.6  2002/09/07 16:28:25  dj_jl
//  Added Level class.
//
//  Revision 1.5  2002/01/07 12:25:57  dj_jl
//  Changed copyright year
//
//  Revision 1.4  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.3  2001/09/20 16:20:00  dj_jl
//  Start using object-oriented stuff, beautification
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
