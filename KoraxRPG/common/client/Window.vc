//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Window:Object
	native;

// Quick class reference
int WindowType;			// Contains window type

// Booleans
bool bIsVisible;		// True if the window is visible
bool bIsSensitive;		// True if the window can take input
bool bIsSelectable;		// True if the window can have keyboard focus
bool bTickEnabled;		// True if Tick() event should be called
bool bIsInitialized;	// True if the window has been initialized

// Destructor information
bool bBeingDestroyed;	// TRUE if this window is going bye-bye

int X;
int Y;
int Width;
int Height;

ClipRect ClipRect;

GC WinGC;

// Relatives
Window Parent;			// Parent window; NULL if this is root
Window FirstChild;		// "Lowest" child (first one drawn)
Window LastChild;		// "Highest" child (last one drawn)
Window PrevSibling;		// Next "lowest" sibling (previous one drawn)
Window NextSibling;		// Next "highest" sibling (next one drawn)

native void Destroy(void);
native Window NewChild(classid ChildClass);
native void Raise(void);
native void Lower(void);
native void SetVisibility(bool bNewVisibility);
native void Show(void);
native void Hide(void);
native bool IsVisible(void);
native void SetSensitivity(bool bNewSensitivity);
native void Enable(void);
native void Disable(void);
native bool IsSensitive(void);
native void SetSelectability(bool bNewSelectability);

native RootWindow GetRootWindow(void);
native ModalWindow GetModalWindow(void);
native Window GetParent(void);

native void SetPos(int NewX, int NewY);
native void SetSize(int NewWidth, int NewHeight);
native void SetConfiguration(int NewX, int NewY, int NewWidth, int NewHeight);
native void SetWidth(int NewWidth);
native void SetHeight(int NewHeight);

native Window GetBottomChild(bool bVisibleOnly);
native Window GetTopChild(bool bVisibleOnly);
native Window GetLowerSibling(bool bVisibleOnly);
native Window GetHigherSibling(bool bVisibleOnly);

native void DestroyAllChildren(void);

//==========================================================================
//
//	InitWindow
//
//	Window constructor.
//
//==========================================================================

void InitWindow(void)
{
}

//==========================================================================
//
//	DestroyWindow
//
//	Window destructor.
//
//==========================================================================

void DestroyWindow(void)
{
}

//==========================================================================
//
//	WindowReady
//
//	Called just before window is first drawn.
//
//==========================================================================

void WindowReady(void)
{
}

//==========================================================================
//
//	ChildAdded
//
//	Called when a child window is added.
//
//==========================================================================

void ChildAdded(Window Child)
{
}

//==========================================================================
//
//	ChildRemoved
//
//	Called when a child window is removed.
//
//==========================================================================

void ChildRemoved(Window Child)
{
}

//==========================================================================
//
//	DescendantAdded
//
//	Called when a descendant window is added.
//
//==========================================================================

void DescendantAdded(Window Descendant)
{
}

//==========================================================================
//
//	DescendantRemoved
//
//	Called when a descendant window is removed.
//
//==========================================================================

void DescendantRemoved(Window Descendant)
{
}

//==========================================================================
//
//	ConfigurationChanged
//
//	Called when the parent changes this window's size.
//
//==========================================================================

void ConfigurationChanged(void)
{
}

//==========================================================================
//
//	VisibilityChanged
//
//	Called when the parent shows or hides this window.
//
//==========================================================================

void VisibilityChanged(bool bNewVisibility)
{
}

//==========================================================================
//
//	SensitivityChanged
//
//	Called when this window becomes sensitive or insensitive.
//
//==========================================================================

void SensitivityChanged(bool bNewSensitivity)
{
}

//==========================================================================
//
//	DrawWindow
//
//	Draws the window.
//
//==========================================================================

void DrawWindow(GC gc)
{
}

//==========================================================================
//
//	PostDrawWindow
//
//	Draws the window (AFTER all children are drawn).
//
//==========================================================================

void PostDrawWindow(GC gc)
{
}

//==========================================================================
//
//	Tick
//
//	Called periodicly, but only when bTickEnabled is true.
//
//==========================================================================

void Tick(float DeltaTime)
{
}

defaultproperties
{
}

//**************************************************************************
//
//  $Log$
//  Revision 1.2  2005/11/22 19:20:56  firebrand_kh
//  Updated to latest Vavoom version
//
//  Revision 1.1  2002/10/26 16:32:17  dj_jl
//  New style of defining classes.
//
//**************************************************************************
