// ***********************************************************
// *                                                         *
// * These values are the same for Doom format, Hexen format *
// * and UDMF											     *
// *                                                         *
// ***********************************************************

common
{
	// Some common settings
	include("Common.cfg");

	// Default testing parameters
	testparameters = "-iwad \"%WP\" -skill \"%S\" -file \"%AP\" \"%F\" +map %L %NM";

	// Default nodebuilder configurations
	defaultsavecompiler = "zdbsp_normal";
	defaulttestcompiler = "zdbsp_fast";

	// Generalized actions
	// generalizedlinedefs is true for Doom format and false for
	// the other two, so it's not here.
	generalizedsectors = true;

	// Texture loading options
	mixtexturesflats = true;
	defaulttexturescale = 1.0f;
	defaultflatscale = 1.0f;
	scaledtextureoffsets = true;

	// Texture sources
	textures
	{
		include("doom_misc.cfg", "textures");
		include("vavoom_misc.cfg", "textures");
	}

	// Patch sources
	patches
	{
		include("doom_misc.cfg", "patches");
	}

	// Sprite sources
	sprites
	{
		include("doom_misc.cfg", "sprites");
	}

	// Flat sources
	flats
	{
		include("doom_misc.cfg", "flats");
	}

	// Colormap sources
	colormaps
	{
		include("boom_misc.cfg", "colormaps");
	}

	// DEFAULT SECTOR BRIGHTNESS LEVELS
	sectorbrightness
	{
		include("doom_misc.cfg", "sectorbrightness");
	}

	// Generalized sector types
	gen_sectortypes
	{
		include("vavoom_generalized.cfg", "gen_sectortypes");
	}
}

// ***********************************************************
// *                                                         *
// *                       Doom map format                   *
// *                                                         *
// ***********************************************************

mapformat_doom
{
	// The format interface handles the map data format
	formatinterface = "DoomMapSetIO";

	maplumpnames
	{
		include("doom_misc.cfg", "doommaplumpnames");
		include("vavoom_misc.cfg", "doommaplumpnames");
	}

	// When this is set to true, sectors with the same tag will light up when a line is highlighted
	linetagindicatesectors = true;

	// Special linedefs
	include("vavoom_misc.cfg", "speciallinedefs_doomhexen");

	// Default flags for first new thing
	defaultthingflags
	{
		include("doom_misc.cfg", "defaultthingflags");
	}

	// Door making
	include("vavoom_misc.cfg", "doormaking_doom");

	// Generalized actions
	generalizedlinedefs = true;

	// GENERALIZED LINEDEF TYPES
	gen_linedeftypes
	{
		include("boom_generalized.cfg", "gen_linedeftypes");
	}

	// SECTOR TYPES
	sectortypes
	{
		include("doom_sectors.cfg");
		include("vavoom_sectors.cfg", "doom");
	}

	// LINEDEF FLAGS
	linedefflags
	{
		include("doom_misc.cfg", "linedefflags");
		include("boom_misc.cfg", "linedefflags");
	}

	// LINEDEF ACTIVATIONS
	linedefactivations
	{
	}

	// Linedef flags UDMF translation table
	// This is needed for copy/paste and prefabs to work properly
	// When the UDMF field name is prefixed with ! it is inverted
	linedefflagstranslation
	{
		include("doom_misc.cfg", "linedefflagstranslation");
		include("boom_misc.cfg", "linedefflagstranslation");
	}

	// LINEDEF TYPES
	linedeftypes
	{
		include("doom_linedefs.cfg");
		include("boom_linedefs.cfg");
		include("vavoom_linedefs.cfg", "doom");
	}

	// THING FLAGS
	thingflags
	{
		include("doom_misc.cfg", "thingflags");
		include("boom_misc.cfg", "thingflags");
	}

	// Thing flags UDMF translation table
	// This is needed for copy/paste and prefabs to work properly
	// When the UDMF field name is prefixed with ! it is inverted
	thingflagstranslation
	{
		include("doom_misc.cfg", "thingflagstranslation");
		include("boom_misc.cfg", "thingflagstranslation");
	}

	// Things flags masks
	include("doom_misc.cfg", "thingflagsmasks");

}

// ***********************************************************
// *                                                         *
// *                      Hexen map format                   *
// *                                                         *
// ***********************************************************

mapformat_hexen
{
	// The format interface handles the map data format
	formatinterface = "HexenMapSetIO";

	maplumpnames
	{
		include("hexen_misc.cfg", "hexenmaplumpnames");
		include("vavoom_misc.cfg", "hexenmaplumpnames");
	}

	// When this is set to true, sectors with the same tag will light up when a line is highlighted
	linetagindicatesectors = false;

	// Special linedefs
	include("vavoom_misc.cfg", "speciallinedefs_doomhexen");

	// Default flags for first new thing
	defaultthingflags
	{
		include("vavoom_misc.cfg", "defaultthingflags");
	}

	// Door making
	include("vavoom_misc.cfg", "doormaking_hexenudmf");

	// Generalized actions
	generalizedlinedefs = false;

	// SECTOR TYPES
	sectortypes
	{
		include("vavoom_sectors.cfg", "zdoom");
	}

	// LINEDEF FLAGS
	linedefflags
	{
		include("doom_misc.cfg", "linedefflags");
		include("hexen_misc.cfg", "linedefflags");
		include("vavoom_misc.cfg", "linedefflags");
	}

	// Activations filter for Hexen type activations
	// This filters the activation bits from the flags
	linedefactivationsfilter = 7168;

	// LINEDEF ACTIVATIONS
	// Make sure these are in order from lowest value to highest value
	linedefactivations
	{
		include("hexen_misc.cfg", "linedefactivations");
		include("vavoom_misc.cfg", "linedefactivations");
	}

	// Linedef flags UDMF translation table
	// This is needed for copy/paste and prefabs to work properly
	// When the UDMF field name is prefixed with ! it is inverted
	linedefflagstranslation
	{
		include("doom_misc.cfg", "linedefflagstranslation");
		include("hexen_misc.cfg", "linedefflagstranslation");
		include("vavoom_misc.cfg", "linedefflagstranslation");
	}

	// LINEDEF TYPES
	linedeftypes
	{
		include("hexen_linedefs.cfg");
		include("vavoom_linedefs.cfg", "hexen");
	}

	// THING FLAGS
	thingflags
	{
		include("doom_misc.cfg", "thingflags");
		include("hexen_misc.cfg", "thingflags");
		include("vavoom_misc.cfg", "thingflags");
	}

	// Thing flags UDMF translation table
	// This is needed for copy/paste and prefabs to work properly
	// When the UDMF field name is prefixed with ! it is inverted
	thingflagstranslation
	{
		include("doom_misc.cfg", "thingflagstranslation");
		include("hexen_misc.cfg", "thingflagstranslation");
		include("vavoom_misc.cfg", "thingflagstranslation");
	}

	// Things flags masks
	include("hexen_misc.cfg", "thingflagsmasks");

}

// ***********************************************************
// *                                                         *
// *               Text map (UDMF) format                    *
// *                                                         *
// ***********************************************************

mapformat_udmf
{
	// The format interface handles the map data format
	formatinterface = "UniversalMapSetIO";
	
	engine = "vavoom"; // override that so that DB2 uses the correct namespace

	maplumpnames
	{
		include("udmf_misc.cfg", "udmfmaplumpnames_begin");
		include("vavoom_misc.cfg", "udmfmaplumpnames");
		include("udmf_misc.cfg", "udmfmaplumpnames_end");
	}

	universalfields
	{
		include("vavoom_misc.cfg", "universalfields");
	}

	// When this is set to true, sectors with the same tag will light up when a line is highlighted
	linetagindicatesectors = false;

	// Special linedefs
	include("vavoom_misc.cfg", "speciallinedefs_udmf");

	// Default flags for first new thing
	defaultthingflags
	{
		include("vavoom_misc.cfg", "defaultthingflags_udmf");
	}

	// Door making
	include("vavoom_misc.cfg", "doormaking_hexenudmf");

	// Generalized actions
	generalizedlinedefs = false;

	// SECTOR TYPES
	sectortypes
	{
		include("vavoom_sectors.cfg", "zdoom");
	}

	// LINEDEF FLAGS
	linedefflags
	{
		include("udmf_misc.cfg", "linedefflags");
		include("vavoom_misc.cfg", "linedefflags_udmf");
	}

	// LINEDEF ACTIVATIONS
	linedefactivations
	{
		include("udmf_misc.cfg", "linedefactivations");
		include("vavoom_misc.cfg", "linedefactivations_udmf");
	}

	// THING FLAGS
	thingflags
	{
		include("udmf_misc.cfg", "thingflags");
		include("vavoom_misc.cfg", "thingflags_udmf");
	}

	// Things flags masks
	include("hexen_misc.cfg", "thingflagsmasks");

	// LINEDEF TYPES
	linedeftypes
	{
		include("hexen_linedefs.cfg");
		include("vavoom_linedefs.cfg", "hexen");
	}

}

// ***********************************************************
// *                                                         *
// *     Doom: Ultimate Doom, Hell on Earth, Final Doom      *
// *                                                         *
// ***********************************************************

game_doom
{
	// Default lump name for new map
	defaultlumpname = "MAP01";

	// Decorate actors to include depending on actor game property
	decorategames = "doom";

	// Skill levels
	skills
	{
		include("doom_misc.cfg", "skills");
	}

	// Door making
	makedoortrack = "DOORTRAK";

	// Default thing filters
	// (these are not required, just useful for new users)
	thingsfilters
	{
		include("doom_misc.cfg", "thingsfilters");
	}

	// Default texture sets
	// (these are not required, but useful for new users)
	texturesets
	{
		include("doom_texturesets.cfg");
	}
}

// ***********************************************************
// *                                                         *
// *         Heretic: Shadow of the Serpent Riders           *
// *                                                         *
// ***********************************************************

game_heretic
{
	// Default lump name for new map
	defaultlumpname = "MAP01";

	// Decorate actors to include depending on actor game property
	decorategames = "heretic raven";

	// Skill levels
	skills
	{
		include("heretic_misc.cfg", "skills");
	}

	// Door making
	makedoortrack = "METL2";

	// Default thing filters
	// (these are not required, just useful for new users)
	thingsfilters
	{
		include("doom_misc.cfg", "thingsfilters");
	}

	// Default texture sets
	// (these are not required, but useful for new users)
	texturesets
	{
		include("heretic_texturesets.cfg");
	}
}

// ***********************************************************
// *                                                         *
// *                  Hexen: Beyond Heretic                  *
// *                                                         *
// ***********************************************************

game_hexen
{
	// Default lump name for new map
	defaultlumpname = "MAP01";

	// Decorate actors to include depending on actor game property
	decorategames = "hexen raven";

	// Skill levels
	skills
	{
		include("hexen_misc.cfg", "skills");
	}

	// Door making
	makedoortrack = "D_END2";

	// Default thing filters
	// (these are not required, just useful for new users)
	thingsfilters
	{
		include("hexen_misc.cfg", "thingsfilters");
	}

	// Default texture sets
	// (these are not required, but useful for new users)
	texturesets
	{
		include("hexen_texturesets.cfg");
	}
}

// ***********************************************************
// *                                                         *
// *               Strife: Quest for the Sigil               *
// *                                                         *
// ***********************************************************

game_strife
{
	// Default lump name for new map
	defaultlumpname = "MAP01";

	// Decorate actors to include depending on actor game property
	decorategames = "strife";

	// Skill levels
	skills
	{
		include("strife_misc.cfg", "skills");
	}

	// Door making
	makedoortrack = "DORTRK01";

	// Default thing filters
	// (these are not required, just useful for new users)
	thingsfilters
	{
		include("strife_misc.cfg", "thingsfilters");
	}

	// Default texture sets
	// (these are not required, but useful for new users)
	texturesets
	{
		include("strife_texturesets.cfg");
	}
}
